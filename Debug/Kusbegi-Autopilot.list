
Kusbegi-Autopilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b004  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800b198  0800b198  0001b198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b0  0800b4b0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4b0  0800b4b0  0001b4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4b8  0800b4b8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4b8  0800b4b8  0001b4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4bc  0800b4bc  0001b4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b4c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  200001e0  0800b69c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007f4  0800b69c  000207f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a76  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003aab  00000000  00000000  00040c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001288  00000000  00000000  00044730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e8  00000000  00000000  000459b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000251d4  00000000  00000000  00046aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013c4b  00000000  00000000  0006bc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0fd3  00000000  00000000  0007f8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150892  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005654  00000000  00000000  00150910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b17c 	.word	0x0800b17c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b17c 	.word	0x0800b17c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9bd 	b.w	8000f44 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	4613      	mov	r3, r2
 8000f58:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8000f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f001 f83d 	bl	8001fdc <null_ptr_check>
 8000f62:	4603      	mov	r3, r0
 8000f64:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d11f      	bne.n	8000fae <bmp280_get_regs+0x66>
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d01c      	beq.n	8000fae <bmp280_get_regs+0x66>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	789b      	ldrb	r3, [r3, #2]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d103      	bne.n	8000f84 <bmp280_get_regs+0x3c>
        {
            reg_addr = reg_addr | 0x80;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f82:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len,huartI2C);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685c      	ldr	r4, [r3, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7858      	ldrb	r0, [r3, #1]
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	7bf9      	ldrb	r1, [r7, #15]
 8000f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	4613      	mov	r3, r2
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	47a0      	blx	r4
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <bmp280_get_regs+0x6a>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000fa8:	23fc      	movs	r3, #252	; 0xfc
 8000faa:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000fac:	e001      	b.n	8000fb2 <bmp280_get_regs+0x6a>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000fae:	23ff      	movs	r3, #255	; 0xff
 8000fb0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000fb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	371c      	adds	r7, #28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd90      	pop	{r4, r7, pc}

08000fbe <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8000fbe:	b5b0      	push	{r4, r5, r7, lr}
 8000fc0:	b08a      	sub	sp, #40	; 0x28
 8000fc2:	af02      	add	r7, sp, #8
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b04      	cmp	r3, #4
 8000fd2:	d901      	bls.n	8000fd8 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev,huartI2C);
 8000fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fda:	6838      	ldr	r0, [r7, #0]
 8000fdc:	f000 fffe 	bl	8001fdc <null_ptr_check>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000fe4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d150      	bne.n	800108e <bmp280_set_regs+0xd0>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d04d      	beq.n	800108e <bmp280_set_regs+0xd0>
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d04a      	beq.n	800108e <bmp280_set_regs+0xd0>
    {
        if (len != 0)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d044      	beq.n	8001088 <bmp280_set_regs+0xca>
        {
            temp_buff[0] = reg_data[0];
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	789b      	ldrb	r3, [r3, #2]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d114      	bne.n	8001036 <bmp280_set_regs+0x78>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800100c:	2300      	movs	r3, #0
 800100e:	76fb      	strb	r3, [r7, #27]
 8001010:	e00d      	b.n	800102e <bmp280_set_regs+0x70>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001012:	7efb      	ldrb	r3, [r7, #27]
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	7efb      	ldrb	r3, [r7, #27]
 800101c:	68f9      	ldr	r1, [r7, #12]
 800101e:	440b      	add	r3, r1
 8001020:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001028:	7efb      	ldrb	r3, [r7, #27]
 800102a:	3301      	adds	r3, #1
 800102c:	76fb      	strb	r3, [r7, #27]
 800102e:	7efa      	ldrb	r2, [r7, #27]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	429a      	cmp	r2, r3
 8001034:	d3ed      	bcc.n	8001012 <bmp280_set_regs+0x54>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d90d      	bls.n	8001058 <bmp280_set_regs+0x9a>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f107 0110 	add.w	r1, r7, #16
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 ffea 	bl	800201e <interleave_data>
                temp_len = ((len * 2) - 1);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	b29b      	uxth	r3, r3
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	b29b      	uxth	r3, r3
 8001052:	3b01      	subs	r3, #1
 8001054:	83bb      	strh	r3, [r7, #28]
 8001056:	e001      	b.n	800105c <bmp280_set_regs+0x9e>
            }
            else
            {
                temp_len = len;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len,huartI2C);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689c      	ldr	r4, [r3, #8]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	7858      	ldrb	r0, [r3, #1]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	7819      	ldrb	r1, [r3, #0]
 8001068:	8bbd      	ldrh	r5, [r7, #28]
 800106a:	f107 0210 	add.w	r2, r7, #16
 800106e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	462b      	mov	r3, r5
 8001074:	47a0      	blx	r4
 8001076:	4603      	mov	r3, r0
 8001078:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 800107a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d008      	beq.n	8001094 <bmp280_set_regs+0xd6>
            {
                rslt = BMP280_E_COMM_FAIL;
 8001082:	23fc      	movs	r3, #252	; 0xfc
 8001084:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8001086:	e005      	b.n	8001094 <bmp280_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8001088:	23fd      	movs	r3, #253	; 0xfd
 800108a:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 800108c:	e002      	b.n	8001094 <bmp280_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800108e:	23ff      	movs	r3, #255	; 0xff
 8001090:	77fb      	strb	r3, [r7, #31]
 8001092:	e000      	b.n	8001096 <bmp280_set_regs+0xd8>
        if (len != 0)
 8001094:	bf00      	nop
    }

    return rslt;
 8001096:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdb0      	pop	{r4, r5, r7, pc}

080010a2 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af02      	add	r7, sp, #8
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 80010ac:	23e0      	movs	r3, #224	; 0xe0
 80010ae:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 80010b0:	23b6      	movs	r3, #182	; 0xb6
 80010b2:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev,huartI2C);
 80010b4:	6839      	ldr	r1, [r7, #0]
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 ff90 	bl	8001fdc <null_ptr_check>
 80010bc:	4603      	mov	r3, r0
 80010be:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80010c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10f      	bne.n	80010e8 <bmp280_soft_reset+0x46>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev,huartI2C);
 80010c8:	f107 010d 	add.w	r1, r7, #13
 80010cc:	f107 000e 	add.w	r0, r7, #14
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f7ff ff71 	bl	8000fbe <bmp280_set_regs>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2002      	movs	r0, #2
 80010e6:	4798      	blx	r3
    }

    return rslt;
 80010e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
    int8_t rslt;


    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 80010fe:	2305      	movs	r3, #5
 8001100:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev,huartI2C);
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 ff69 	bl	8001fdc <null_ptr_check>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d154      	bne.n	80011c0 <bmp280_init+0xcc>
    {
        while (try_count)
 8001116:	e031      	b.n	800117c <bmp280_init+0x88>
        {

            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev,huartI2C);
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	20d0      	movs	r0, #208	; 0xd0
 8001124:	f7ff ff10 	bl	8000f48 <bmp280_get_regs>
 8001128:	4603      	mov	r3, r0
 800112a:	73fb      	strb	r3, [r7, #15]


            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 800112c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d11c      	bne.n	800116e <bmp280_init+0x7a>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8001138:	2b56      	cmp	r3, #86	; 0x56
 800113a:	d007      	beq.n	800114c <bmp280_init+0x58>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b57      	cmp	r3, #87	; 0x57
 8001142:	d003      	beq.n	800114c <bmp280_init+0x58>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b58      	cmp	r3, #88	; 0x58
 800114a:	d110      	bne.n	800116e <bmp280_init+0x7a>
            {
                rslt = bmp280_soft_reset(dev,huartI2C);
 800114c:	6839      	ldr	r1, [r7, #0]
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa7 	bl	80010a2 <bmp280_soft_reset>
 8001154:	4603      	mov	r3, r0
 8001156:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 8001158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d111      	bne.n	8001184 <bmp280_init+0x90>
                {
                    rslt = get_calib_param(dev,huartI2C);
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 ff86 	bl	8002074 <get_calib_param>
 8001168:	4603      	mov	r3, r0
 800116a:	73fb      	strb	r3, [r7, #15]
                }
                break;
 800116c:	e00a      	b.n	8001184 <bmp280_init+0x90>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	200a      	movs	r0, #10
 8001174:	4798      	blx	r3
            --try_count;
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	3b01      	subs	r3, #1
 800117a:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 800117c:	7bbb      	ldrb	r3, [r7, #14]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1ca      	bne.n	8001118 <bmp280_init+0x24>
 8001182:	e000      	b.n	8001186 <bmp280_init+0x92>
                break;
 8001184:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <bmp280_init+0x9c>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 800118c:	23fe      	movs	r3, #254	; 0xfe
 800118e:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8001190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d113      	bne.n	80011c0 <bmp280_init+0xcc>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }


    return rslt;
 80011c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80011d8:	2300      	movs	r3, #0
 80011da:	753b      	strb	r3, [r7, #20]
 80011dc:	2300      	movs	r3, #0
 80011de:	757b      	strb	r3, [r7, #21]

    rslt = null_ptr_check(dev,huartI2C);
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	68b8      	ldr	r0, [r7, #8]
 80011e4:	f000 fefa 	bl	8001fdc <null_ptr_check>
 80011e8:	4603      	mov	r3, r0
 80011ea:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 80011ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d139      	bne.n	8001268 <bmp280_get_config+0x9c>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d036      	beq.n	8001268 <bmp280_get_config+0x9c>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev,huartI2C);
 80011fa:	f107 0114 	add.w	r1, r7, #20
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	2202      	movs	r2, #2
 8001206:	20f4      	movs	r0, #244	; 0xf4
 8001208:	f7ff fe9e 	bl	8000f48 <bmp280_get_regs>
 800120c:	4603      	mov	r3, r0
 800120e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d129      	bne.n	800126c <bmp280_get_config+0xa0>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8001218:	7d3b      	ldrb	r3, [r7, #20]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	b2da      	uxtb	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8001222:	7d3b      	ldrb	r3, [r7, #20]
 8001224:	109b      	asrs	r3, r3, #2
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	b2da      	uxtb	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 8001232:	7d7b      	ldrb	r3, [r7, #21]
 8001234:	095b      	lsrs	r3, r3, #5
 8001236:	b2da      	uxtb	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 800123c:	7d7b      	ldrb	r3, [r7, #21]
 800123e:	109b      	asrs	r3, r3, #2
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	b2da      	uxtb	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 800124c:	7d7b      	ldrb	r3, [r7, #21]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	b2da      	uxtb	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	332c      	adds	r3, #44	; 0x2c
 800125e:	6810      	ldr	r0, [r2, #0]
 8001260:	6018      	str	r0, [r3, #0]
 8001262:	7912      	ldrb	r2, [r2, #4]
 8001264:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 8001266:	e001      	b.n	800126c <bmp280_get_config+0xa0>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001268:	23ff      	movs	r3, #255	; 0xff
 800126a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800126c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev,huartI2C);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	68f9      	ldr	r1, [r7, #12]
 800128a:	2000      	movs	r0, #0
 800128c:	f000 ff94 	bl	80021b8 <conf_sensor>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f000 fe96 	bl	8001fdc <null_ptr_check>
 80012b0:	4603      	mov	r3, r0
 80012b2:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMP280_OK)
 80012b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d109      	bne.n	80012d0 <bmp280_set_power_mode+0x36>
    {
        rslt = conf_sensor(mode, &dev->conf, dev,huartI2C);
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80012c2:	7bf8      	ldrb	r0, [r7, #15]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f000 ff76 	bl	80021b8 <conf_sensor>
 80012cc:	4603      	mov	r3, r0
 80012ce:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev,huartI2C);
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	f000 fe71 	bl	8001fdc <null_ptr_check>
 80012fa:	4603      	mov	r3, r0
 80012fc:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 80012fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d135      	bne.n	8001372 <bmp280_get_uncomp_data+0x96>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d032      	beq.n	8001372 <bmp280_get_uncomp_data+0x96>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev,huartI2C);
 800130c:	f107 0110 	add.w	r1, r7, #16
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2206      	movs	r2, #6
 8001318:	20f7      	movs	r0, #247	; 0xf7
 800131a:	f7ff fe15 	bl	8000f48 <bmp280_get_regs>
 800131e:	4603      	mov	r3, r0
 8001320:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001322:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d120      	bne.n	800136c <bmp280_get_uncomp_data+0x90>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 800132a:	7c3b      	ldrb	r3, [r7, #16]
 800132c:	031a      	lsls	r2, r3, #12
 800132e:	7c7b      	ldrb	r3, [r7, #17]
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	4313      	orrs	r3, r2
 8001334:	7cba      	ldrb	r2, [r7, #18]
 8001336:	0912      	lsrs	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 8001340:	7cfb      	ldrb	r3, [r7, #19]
 8001342:	031a      	lsls	r2, r3, #12
 8001344:	7d3b      	ldrb	r3, [r7, #20]
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	4313      	orrs	r3, r2
 800134a:	7d7a      	ldrb	r2, [r7, #21]
 800134c:	0912      	lsrs	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4619      	mov	r1, r3
 8001360:	4610      	mov	r0, r2
 8001362:	f000 ffed 	bl	8002340 <st_check_boundaries>
 8001366:	4603      	mov	r3, r0
 8001368:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 800136a:	e004      	b.n	8001376 <bmp280_get_uncomp_data+0x9a>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 800136c:	23f3      	movs	r3, #243	; 0xf3
 800136e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001370:	e001      	b.n	8001376 <bmp280_get_uncomp_data+0x9a>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001372:	23ff      	movs	r3, #255	; 0xff
 8001374:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001376:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b088      	sub	sp, #32
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	603b      	str	r3, [r7, #0]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8001390:	6839      	ldr	r1, [r7, #0]
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 fe22 	bl	8001fdc <null_ptr_check>
 8001398:	4603      	mov	r3, r0
 800139a:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 800139c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d14f      	bne.n	8001444 <bmp280_get_comp_temp_32bit+0xc2>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	da00      	bge.n	80013ac <bmp280_get_comp_temp_32bit+0x2a>
 80013aa:	3307      	adds	r3, #7
 80013ac:	10db      	asrs	r3, r3, #3
 80013ae:	461a      	mov	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	8a1b      	ldrh	r3, [r3, #16]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80013be:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da01      	bge.n	80013ca <bmp280_get_comp_temp_32bit+0x48>
 80013c6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80013ca:	12db      	asrs	r3, r3, #11
 80013cc:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da00      	bge.n	80013d6 <bmp280_get_comp_temp_32bit+0x54>
 80013d4:	330f      	adds	r3, #15
 80013d6:	111b      	asrs	r3, r3, #4
 80013d8:	461a      	mov	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	8a1b      	ldrh	r3, [r3, #16]
 80013de:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da00      	bge.n	80013e8 <bmp280_get_comp_temp_32bit+0x66>
 80013e6:	330f      	adds	r3, #15
 80013e8:	111b      	asrs	r3, r3, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	8a1b      	ldrh	r3, [r3, #16]
 80013f0:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 80013f2:	fb03 f302 	mul.w	r3, r3, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	da01      	bge.n	80013fe <bmp280_get_comp_temp_32bit+0x7c>
 80013fa:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80013fe:	131b      	asrs	r3, r3, #12
 8001400:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001408:	fb03 f302 	mul.w	r3, r3, r2
        var2 =
 800140c:	2b00      	cmp	r3, #0
 800140e:	da02      	bge.n	8001416 <bmp280_get_comp_temp_32bit+0x94>
 8001410:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001414:	333f      	adds	r3, #63	; 0x3f
 8001416:	139b      	asrs	r3, r3, #14
 8001418:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	441a      	add	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3380      	adds	r3, #128	; 0x80
 8001430:	2b00      	cmp	r3, #0
 8001432:	da00      	bge.n	8001436 <bmp280_get_comp_temp_32bit+0xb4>
 8001434:	33ff      	adds	r3, #255	; 0xff
 8001436:	121b      	asrs	r3, r3, #8
 8001438:	461a      	mov	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	77fb      	strb	r3, [r7, #31]
 8001442:	e004      	b.n	800144e <bmp280_get_comp_temp_32bit+0xcc>
    }
    else
    {
        *comp_temp = 0;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 800144a:	23f2      	movs	r3, #242	; 0xf2
 800144c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800144e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <bmp280_get_comp_pres_32bit>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_pres_32bit(uint32_t *comp_pres, uint32_t uncomp_pres, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b088      	sub	sp, #32
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	603b      	str	r3, [r7, #0]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8001468:	6839      	ldr	r1, [r7, #0]
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fdb6 	bl	8001fdc <null_ptr_check>
 8001470:	4603      	mov	r3, r0
 8001472:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 8001474:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001478:	2b00      	cmp	r3, #0
 800147a:	f040 80e2 	bne.w	8001642 <bmp280_get_comp_pres_32bit+0x1e8>
    {
        var1 = (((int32_t) dev->calib_param.t_fine) / 2) - (int32_t) 64000;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	0fda      	lsrs	r2, r3, #31
 8001484:	4413      	add	r3, r2
 8001486:	105b      	asrs	r3, r3, #1
 8001488:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 800148c:	61bb      	str	r3, [r7, #24]
        var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t) dev->calib_param.dig_p6);
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	da00      	bge.n	8001496 <bmp280_get_comp_pres_32bit+0x3c>
 8001494:	3303      	adds	r3, #3
 8001496:	109b      	asrs	r3, r3, #2
 8001498:	461a      	mov	r2, r3
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	2b00      	cmp	r3, #0
 800149e:	da00      	bge.n	80014a2 <bmp280_get_comp_pres_32bit+0x48>
 80014a0:	3303      	adds	r3, #3
 80014a2:	109b      	asrs	r3, r3, #2
 80014a4:	fb03 f302 	mul.w	r3, r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da01      	bge.n	80014b0 <bmp280_get_comp_pres_32bit+0x56>
 80014ac:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80014b0:	12db      	asrs	r3, r3, #11
 80014b2:	461a      	mov	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80014ba:	fb03 f302 	mul.w	r3, r3, r2
 80014be:	617b      	str	r3, [r7, #20]
        var2 = var2 + ((var1 * ((int32_t) dev->calib_param.dig_p5)) * 2);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80014c6:	461a      	mov	r2, r3
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fb03 f302 	mul.w	r3, r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	4413      	add	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]
        var2 = (var2 / 4) + (((int32_t) dev->calib_param.dig_p4) * 65536);
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da00      	bge.n	80014de <bmp280_get_comp_pres_32bit+0x84>
 80014dc:	3303      	adds	r3, #3
 80014de:	109b      	asrs	r3, r3, #2
 80014e0:	461a      	mov	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80014e8:	041b      	lsls	r3, r3, #16
 80014ea:	4413      	add	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]
        var1 =
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80014f4:	461a      	mov	r2, r3
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da00      	bge.n	80014fe <bmp280_get_comp_pres_32bit+0xa4>
 80014fc:	3303      	adds	r3, #3
 80014fe:	109b      	asrs	r3, r3, #2
 8001500:	4619      	mov	r1, r3
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b00      	cmp	r3, #0
 8001506:	da00      	bge.n	800150a <bmp280_get_comp_pres_32bit+0xb0>
 8001508:	3303      	adds	r3, #3
 800150a:	109b      	asrs	r3, r3, #2
 800150c:	fb03 f301 	mul.w	r3, r3, r1
 8001510:	2b00      	cmp	r3, #0
 8001512:	da02      	bge.n	800151a <bmp280_get_comp_pres_32bit+0xc0>
 8001514:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001518:	331f      	adds	r3, #31
 800151a:	135b      	asrs	r3, r3, #13
 800151c:	fb03 f302 	mul.w	r3, r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	da00      	bge.n	8001526 <bmp280_get_comp_pres_32bit+0xcc>
 8001524:	3307      	adds	r3, #7
 8001526:	10db      	asrs	r3, r3, #3
 8001528:	4619      	mov	r1, r3
             ((((int32_t) dev->calib_param.dig_p2) * var1) / 2)) / 262144;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001530:	461a      	mov	r2, r3
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	fb03 f302 	mul.w	r3, r3, r2
 8001538:	0fda      	lsrs	r2, r3, #31
 800153a:	4413      	add	r3, r2
 800153c:	105b      	asrs	r3, r3, #1
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
 800153e:	440b      	add	r3, r1
        var1 =
 8001540:	2b00      	cmp	r3, #0
 8001542:	da03      	bge.n	800154c <bmp280_get_comp_pres_32bit+0xf2>
 8001544:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8001548:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800154c:	149b      	asrs	r3, r3, #18
 800154e:	61bb      	str	r3, [r7, #24]
        var1 = ((((32768 + var1)) * ((int32_t) dev->calib_param.dig_p1)) / 32768);
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	8ad2      	ldrh	r2, [r2, #22]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	da02      	bge.n	8001568 <bmp280_get_comp_pres_32bit+0x10e>
 8001562:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001566:	337f      	adds	r3, #127	; 0x7f
 8001568:	13db      	asrs	r3, r3, #15
 800156a:	61bb      	str	r3, [r7, #24]
        *comp_pres = (uint32_t)(((int32_t)(1048576 - uncomp_pres) - (var2 / 4096)) * 3125);
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	da01      	bge.n	8001576 <bmp280_get_comp_pres_32bit+0x11c>
 8001572:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001576:	131b      	asrs	r3, r3, #12
 8001578:	425b      	negs	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f640 4235 	movw	r2, #3125	; 0xc35
 8001584:	fb02 f303 	mul.w	r3, r2, r3
 8001588:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 800158c:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	6013      	str	r3, [r2, #0]

        /* Avoid exception caused by division with zero */
        if (var1 != 0)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d04e      	beq.n	8001638 <bmp280_get_comp_pres_32bit+0x1de>
        {
            /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
            if (*comp_pres < 0x80000000)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db08      	blt.n	80015b4 <bmp280_get_comp_pres_32bit+0x15a>
            {
                *comp_pres = (*comp_pres << 1) / ((uint32_t) var1);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	005a      	lsls	r2, r3, #1
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	e007      	b.n	80015c4 <bmp280_get_comp_pres_32bit+0x16a>
            }
            else
            {
                *comp_pres = (*comp_pres / (uint32_t) var1) * 2;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	005a      	lsls	r2, r3, #1
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	601a      	str	r2, [r3, #0]
            }
            var1 = (((int32_t) dev->calib_param.dig_p9) * ((int32_t) (((*comp_pres / 8) * (*comp_pres / 8)) / 8192))) /
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80015ca:	4619      	mov	r1, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	08d2      	lsrs	r2, r2, #3
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	0b5b      	lsrs	r3, r3, #13
 80015de:	fb03 f301 	mul.w	r3, r3, r1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da01      	bge.n	80015ea <bmp280_get_comp_pres_32bit+0x190>
 80015e6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80015ea:	131b      	asrs	r3, r3, #12
 80015ec:	61bb      	str	r3, [r7, #24]
                   4096;
            var2 = (((int32_t) (*comp_pres / 4)) * ((int32_t) dev->calib_param.dig_p8)) / 8192;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	461a      	mov	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80015fc:	fb03 f302 	mul.w	r3, r3, r2
 8001600:	2b00      	cmp	r3, #0
 8001602:	da02      	bge.n	800160a <bmp280_get_comp_pres_32bit+0x1b0>
 8001604:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001608:	331f      	adds	r3, #31
 800160a:	135b      	asrs	r3, r3, #13
 800160c:	617b      	str	r3, [r7, #20]
            *comp_pres = (uint32_t) ((int32_t) *comp_pres + ((var1 + var2 + dev->calib_param.dig_p7) / 16));
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	4413      	add	r3, r2
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8001620:	4413      	add	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	da00      	bge.n	8001628 <bmp280_get_comp_pres_32bit+0x1ce>
 8001626:	330f      	adds	r3, #15
 8001628:	111b      	asrs	r3, r3, #4
 800162a:	440b      	add	r3, r1
 800162c:	461a      	mov	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	601a      	str	r2, [r3, #0]
            rslt = BMP280_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	77fb      	strb	r3, [r7, #31]
 8001636:	e004      	b.n	8001642 <bmp280_get_comp_pres_32bit+0x1e8>
        }
        else
        {
            *comp_pres = 0;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
            rslt = BMP280_E_32BIT_COMP_PRESS;
 800163e:	23f1      	movs	r3, #241	; 0xf1
 8001640:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8001642:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <bmp280_get_comp_pres_64bit>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses 64 bit integers.
 */
int8_t bmp280_get_comp_pres_64bit(uint32_t *pressure, uint32_t uncomp_pres, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001650:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001654:	b08c      	sub	sp, #48	; 0x30
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	603b      	str	r3, [r7, #0]
    int64_t var1, var2, p;
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8001660:	6839      	ldr	r1, [r7, #0]
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 fcba 	bl	8001fdc <null_ptr_check>
 8001668:	4603      	mov	r3, r0
 800166a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMP280_OK)
 800166e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001672:	2b00      	cmp	r3, #0
 8001674:	f040 81f7 	bne.w	8001a66 <bmp280_get_comp_pres_64bit+0x416>
    {
        var1 = ((int64_t) (dev->calib_param.t_fine)) - 128000;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	4619      	mov	r1, r3
 800167e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001682:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001686:	f142 34ff 	adc.w	r4, r2, #4294967295
 800168a:	e9c7 3408 	strd	r3, r4, [r7, #32]
        var2 = var1 * var1 * (int64_t) dev->calib_param.dig_p6;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	6a3a      	ldr	r2, [r7, #32]
 8001692:	fb02 f203 	mul.w	r2, r2, r3
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	6a39      	ldr	r1, [r7, #32]
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	441a      	add	r2, r3
 80016a0:	6a39      	ldr	r1, [r7, #32]
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	fba1 3403 	umull	r3, r4, r1, r3
 80016a8:	4422      	add	r2, r4
 80016aa:	4614      	mov	r4, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 80016b2:	b211      	sxth	r1, r2
 80016b4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80016b8:	fb01 f504 	mul.w	r5, r1, r4
 80016bc:	fb03 f002 	mul.w	r0, r3, r2
 80016c0:	4428      	add	r0, r5
 80016c2:	fba3 3401 	umull	r3, r4, r3, r1
 80016c6:	1902      	adds	r2, r0, r4
 80016c8:	4614      	mov	r4, r2
 80016ca:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80016ce:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 = var2 + ((var1 * (int64_t) dev->calib_param.dig_p5) * 131072);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80016d8:	b21b      	sxth	r3, r3
 80016da:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80016de:	6a3a      	ldr	r2, [r7, #32]
 80016e0:	fb04 f102 	mul.w	r1, r4, r2
 80016e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e6:	fb03 f202 	mul.w	r2, r3, r2
 80016ea:	1888      	adds	r0, r1, r2
 80016ec:	6a3a      	ldr	r2, [r7, #32]
 80016ee:	fba2 1203 	umull	r1, r2, r2, r3
 80016f2:	1883      	adds	r3, r0, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	f04f 0500 	mov.w	r5, #0
 80016fa:	f04f 0600 	mov.w	r6, #0
 80016fe:	0456      	lsls	r6, r2, #17
 8001700:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001704:	044d      	lsls	r5, r1, #17
 8001706:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800170a:	186b      	adds	r3, r5, r1
 800170c:	eb46 0402 	adc.w	r4, r6, r2
 8001710:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 = var2 + (((int64_t) dev->calib_param.dig_p4) * 34359738368);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800171a:	b219      	sxth	r1, r3
 800171c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001720:	f04f 0500 	mov.w	r5, #0
 8001724:	f04f 0600 	mov.w	r6, #0
 8001728:	00ce      	lsls	r6, r1, #3
 800172a:	2500      	movs	r5, #0
 800172c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001730:	186b      	adds	r3, r5, r1
 8001732:	eb46 0402 	adc.w	r4, r6, r2
 8001736:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var1 = ((var1 * var1 * (int64_t) dev->calib_param.dig_p3) / 256) +
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	6a3a      	ldr	r2, [r7, #32]
 800173e:	fb02 f203 	mul.w	r2, r2, r3
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	6a39      	ldr	r1, [r7, #32]
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	441a      	add	r2, r3
 800174c:	6a39      	ldr	r1, [r7, #32]
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	fba1 3403 	umull	r3, r4, r1, r3
 8001754:	4422      	add	r2, r4
 8001756:	4614      	mov	r4, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 800175e:	b211      	sxth	r1, r2
 8001760:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001764:	fb01 f504 	mul.w	r5, r1, r4
 8001768:	fb03 f002 	mul.w	r0, r3, r2
 800176c:	4428      	add	r0, r5
 800176e:	fba3 3401 	umull	r3, r4, r3, r1
 8001772:	1902      	adds	r2, r0, r4
 8001774:	4614      	mov	r4, r2
 8001776:	2b00      	cmp	r3, #0
 8001778:	f174 0200 	sbcs.w	r2, r4, #0
 800177c:	da02      	bge.n	8001784 <bmp280_get_comp_pres_64bit+0x134>
 800177e:	33ff      	adds	r3, #255	; 0xff
 8001780:	f144 0400 	adc.w	r4, r4, #0
 8001784:	f04f 0100 	mov.w	r1, #0
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	0a19      	lsrs	r1, r3, #8
 800178e:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001792:	1222      	asrs	r2, r4, #8
 8001794:	460d      	mov	r5, r1
 8001796:	4616      	mov	r6, r2
               ((var1 * (int64_t) dev->calib_param.dig_p2) * 4096);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80017a4:	6a3a      	ldr	r2, [r7, #32]
 80017a6:	fb04 f102 	mul.w	r1, r4, r2
 80017aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ac:	fb03 f202 	mul.w	r2, r3, r2
 80017b0:	1888      	adds	r0, r1, r2
 80017b2:	6a3a      	ldr	r2, [r7, #32]
 80017b4:	fba2 1203 	umull	r1, r2, r2, r3
 80017b8:	1883      	adds	r3, r0, r2
 80017ba:	461a      	mov	r2, r3
 80017bc:	f04f 0b00 	mov.w	fp, #0
 80017c0:	f04f 0c00 	mov.w	ip, #0
 80017c4:	ea4f 3c02 	mov.w	ip, r2, lsl #12
 80017c8:	ea4c 5c11 	orr.w	ip, ip, r1, lsr #20
 80017cc:	ea4f 3b01 	mov.w	fp, r1, lsl #12
        var1 = ((var1 * var1 * (int64_t) dev->calib_param.dig_p3) / 256) +
 80017d0:	eb1b 0305 	adds.w	r3, fp, r5
 80017d4:	eb4c 0406 	adc.w	r4, ip, r6
 80017d8:	e9c7 3408 	strd	r3, r4, [r7, #32]
        var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)dev->calib_param.dig_p1)) / 8589934592;
 80017dc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80017e0:	1c19      	adds	r1, r3, #0
 80017e2:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	8adb      	ldrh	r3, [r3, #22]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	f04f 0400 	mov.w	r4, #0
 80017f0:	fb03 f502 	mul.w	r5, r3, r2
 80017f4:	fb01 f004 	mul.w	r0, r1, r4
 80017f8:	4428      	add	r0, r5
 80017fa:	fba1 3403 	umull	r3, r4, r1, r3
 80017fe:	1902      	adds	r2, r0, r4
 8001800:	4614      	mov	r4, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	f174 0200 	sbcs.w	r2, r4, #0
 8001808:	da03      	bge.n	8001812 <bmp280_get_comp_pres_64bit+0x1c2>
 800180a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800180e:	f144 0401 	adc.w	r4, r4, #1
 8001812:	f04f 0100 	mov.w	r1, #0
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	1061      	asrs	r1, r4, #1
 800181c:	17e2      	asrs	r2, r4, #31
 800181e:	e9c7 1208 	strd	r1, r2, [r7, #32]
        if (var1 != 0)
 8001822:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001826:	4323      	orrs	r3, r4
 8001828:	f000 8117 	beq.w	8001a5a <bmp280_get_comp_pres_64bit+0x40a>
        {
            p = 1048576 - uncomp_pres;
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001832:	f04f 0400 	mov.w	r4, #0
 8001836:	e9c7 3404 	strd	r3, r4, [r7, #16]
            p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 800183a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	f04f 0400 	mov.w	r4, #0
 8001846:	07d4      	lsls	r4, r2, #31
 8001848:	ea44 0451 	orr.w	r4, r4, r1, lsr #1
 800184c:	07cb      	lsls	r3, r1, #31
 800184e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001852:	1a5b      	subs	r3, r3, r1
 8001854:	eb64 0402 	sbc.w	r4, r4, r2
 8001858:	461d      	mov	r5, r3
 800185a:	4626      	mov	r6, r4
 800185c:	46ab      	mov	fp, r5
 800185e:	46b4      	mov	ip, r6
 8001860:	eb1b 030b 	adds.w	r3, fp, fp
 8001864:	eb4c 040c 	adc.w	r4, ip, ip
 8001868:	469b      	mov	fp, r3
 800186a:	46a4      	mov	ip, r4
 800186c:	eb1b 0b05 	adds.w	fp, fp, r5
 8001870:	eb4c 0c06 	adc.w	ip, ip, r6
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	ea4f 128c 	mov.w	r2, ip, lsl #6
 8001880:	ea42 629b 	orr.w	r2, r2, fp, lsr #26
 8001884:	ea4f 118b 	mov.w	r1, fp, lsl #6
 8001888:	eb1b 0b01 	adds.w	fp, fp, r1
 800188c:	eb4c 0c02 	adc.w	ip, ip, r2
 8001890:	f04f 0100 	mov.w	r1, #0
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800189c:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80018a0:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80018a4:	468b      	mov	fp, r1
 80018a6:	4694      	mov	ip, r2
 80018a8:	eb1b 0b05 	adds.w	fp, fp, r5
 80018ac:	eb4c 0c06 	adc.w	ip, ip, r6
 80018b0:	f04f 0100 	mov.w	r1, #0
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80018bc:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80018c0:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80018c4:	468b      	mov	fp, r1
 80018c6:	4694      	mov	ip, r2
 80018c8:	eb1b 0005 	adds.w	r0, fp, r5
 80018cc:	eb4c 0106 	adc.w	r1, ip, r6
 80018d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018d4:	f7ff f968 	bl	8000ba8 <__aeabi_ldivmod>
 80018d8:	4603      	mov	r3, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
            var1 = (((int64_t) dev->calib_param.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80018e6:	b21d      	sxth	r5, r3
 80018e8:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80018ec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f174 0200 	sbcs.w	r2, r4, #0
 80018f6:	da06      	bge.n	8001906 <bmp280_get_comp_pres_64bit+0x2b6>
 80018f8:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	185b      	adds	r3, r3, r1
 8001902:	eb44 0402 	adc.w	r4, r4, r2
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	0b59      	lsrs	r1, r3, #13
 8001910:	ea41 41c4 	orr.w	r1, r1, r4, lsl #19
 8001914:	1362      	asrs	r2, r4, #13
 8001916:	460b      	mov	r3, r1
 8001918:	4614      	mov	r4, r2
 800191a:	fb03 f106 	mul.w	r1, r3, r6
 800191e:	fb05 f204 	mul.w	r2, r5, r4
 8001922:	1888      	adds	r0, r1, r2
 8001924:	fba5 1203 	umull	r1, r2, r5, r3
 8001928:	1883      	adds	r3, r0, r2
 800192a:	461a      	mov	r2, r3
 800192c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f174 0000 	sbcs.w	r0, r4, #0
 8001936:	da06      	bge.n	8001946 <bmp280_get_comp_pres_64bit+0x2f6>
 8001938:	f641 75ff 	movw	r5, #8191	; 0x1fff
 800193c:	f04f 0600 	mov.w	r6, #0
 8001940:	195b      	adds	r3, r3, r5
 8001942:	eb44 0406 	adc.w	r4, r4, r6
 8001946:	f04f 0500 	mov.w	r5, #0
 800194a:	f04f 0600 	mov.w	r6, #0
 800194e:	0b5d      	lsrs	r5, r3, #13
 8001950:	ea45 45c4 	orr.w	r5, r5, r4, lsl #19
 8001954:	1366      	asrs	r6, r4, #13
 8001956:	462b      	mov	r3, r5
 8001958:	4634      	mov	r4, r6
 800195a:	fb03 f502 	mul.w	r5, r3, r2
 800195e:	fb01 f004 	mul.w	r0, r1, r4
 8001962:	4428      	add	r0, r5
 8001964:	fba1 3403 	umull	r3, r4, r1, r3
 8001968:	1902      	adds	r2, r0, r4
 800196a:	4614      	mov	r4, r2
 800196c:	2b00      	cmp	r3, #0
 800196e:	f174 0200 	sbcs.w	r2, r4, #0
 8001972:	da06      	bge.n	8001982 <bmp280_get_comp_pres_64bit+0x332>
 8001974:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	185b      	adds	r3, r3, r1
 800197e:	eb44 0402 	adc.w	r4, r4, r2
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	0e59      	lsrs	r1, r3, #25
 800198c:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 8001990:	1662      	asrs	r2, r4, #25
 8001992:	e9c7 1208 	strd	r1, r2, [r7, #32]
            var2 = (((int64_t) dev->calib_param.dig_p8) * p) / 524288;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800199c:	b21b      	sxth	r3, r3
 800199e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	fb04 f102 	mul.w	r1, r4, r2
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	fb03 f202 	mul.w	r2, r3, r2
 80019ae:	440a      	add	r2, r1
 80019b0:	6939      	ldr	r1, [r7, #16]
 80019b2:	fba1 3403 	umull	r3, r4, r1, r3
 80019b6:	4422      	add	r2, r4
 80019b8:	4614      	mov	r4, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f174 0200 	sbcs.w	r2, r4, #0
 80019c0:	da05      	bge.n	80019ce <bmp280_get_comp_pres_64bit+0x37e>
 80019c2:	492c      	ldr	r1, [pc, #176]	; (8001a74 <bmp280_get_comp_pres_64bit+0x424>)
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	185b      	adds	r3, r3, r1
 80019ca:	eb44 0402 	adc.w	r4, r4, r2
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	0cd9      	lsrs	r1, r3, #19
 80019d8:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
 80019dc:	14e2      	asrs	r2, r4, #19
 80019de:	e9c7 1206 	strd	r1, r2, [r7, #24]
            p = ((p + var1 + var2) / 256) + (((int64_t)dev->calib_param.dig_p7) * 16);
 80019e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80019e6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80019ea:	18cd      	adds	r5, r1, r3
 80019ec:	eb42 0604 	adc.w	r6, r2, r4
 80019f0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80019f4:	1959      	adds	r1, r3, r5
 80019f6:	eb44 0206 	adc.w	r2, r4, r6
 80019fa:	460b      	mov	r3, r1
 80019fc:	4614      	mov	r4, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f174 0200 	sbcs.w	r2, r4, #0
 8001a04:	da02      	bge.n	8001a0c <bmp280_get_comp_pres_64bit+0x3bc>
 8001a06:	33ff      	adds	r3, #255	; 0xff
 8001a08:	f144 0400 	adc.w	r4, r4, #0
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	0a19      	lsrs	r1, r3, #8
 8001a16:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001a1a:	1222      	asrs	r2, r4, #8
 8001a1c:	460d      	mov	r5, r1
 8001a1e:	4616      	mov	r6, r2
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001a26:	b219      	sxth	r1, r3
 8001a28:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001a2c:	f04f 0b00 	mov.w	fp, #0
 8001a30:	f04f 0c00 	mov.w	ip, #0
 8001a34:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8001a38:	ea4c 7c11 	orr.w	ip, ip, r1, lsr #28
 8001a3c:	ea4f 1b01 	mov.w	fp, r1, lsl #4
 8001a40:	eb1b 0305 	adds.w	r3, fp, r5
 8001a44:	eb4c 0406 	adc.w	r4, ip, r6
 8001a48:	e9c7 3404 	strd	r3, r4, [r7, #16]
            *pressure = (uint32_t)p;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	601a      	str	r2, [r3, #0]
            rslt = BMP280_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001a58:	e005      	b.n	8001a66 <bmp280_get_comp_pres_64bit+0x416>
        }
        else
        {
            *pressure = 0;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
            rslt = BMP280_E_64BIT_COMP_PRESS;
 8001a60:	23f0      	movs	r3, #240	; 0xf0
 8001a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    return rslt;
 8001a66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3730      	adds	r7, #48	; 0x30
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8001a74:	0007ffff 	.word	0x0007ffff

08001a78 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001a78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a7c:	b08a      	sub	sp, #40	; 0x28
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	603b      	str	r3, [r7, #0]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8001a88:	6839      	ldr	r1, [r7, #0]
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 faa6 	bl	8001fdc <null_ptr_check>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001a96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 80ac 	bne.w	8001bf8 <bmp280_get_comp_temp_double+0x180>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001aa0:	68b8      	ldr	r0, [r7, #8]
 8001aa2:	f7fe fd3f 	bl	8000524 <__aeabi_i2d>
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	4b5c      	ldr	r3, [pc, #368]	; (8001c1c <bmp280_get_comp_temp_double+0x1a4>)
 8001aac:	f7fe fece 	bl	800084c <__aeabi_ddiv>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	4625      	mov	r5, r4
 8001ab6:	461c      	mov	r4, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	8a1b      	ldrh	r3, [r3, #16]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fd21 	bl	8000504 <__aeabi_ui2d>
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <bmp280_get_comp_temp_double+0x1a8>)
 8001ac8:	f7fe fec0 	bl	800084c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	f7fe fbd8 	bl	8000288 <__aeabi_dsub>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	460c      	mov	r4, r1
 8001adc:	4625      	mov	r5, r4
 8001ade:	461c      	mov	r4, r3
               ((double) dev->calib_param.dig_t2);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd1c 	bl	8000524 <__aeabi_i2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001af0:	4620      	mov	r0, r4
 8001af2:	4629      	mov	r1, r5
 8001af4:	f7fe fd80 	bl	80005f8 <__aeabi_dmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	460c      	mov	r4, r1
 8001afc:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001b00:	68b8      	ldr	r0, [r7, #8]
 8001b02:	f7fe fd0f 	bl	8000524 <__aeabi_i2d>
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001b0e:	f7fe fe9d 	bl	800084c <__aeabi_ddiv>
 8001b12:	4603      	mov	r3, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	4625      	mov	r5, r4
 8001b18:	461c      	mov	r4, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	8a1b      	ldrh	r3, [r3, #16]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fcf0 	bl	8000504 <__aeabi_ui2d>
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <bmp280_get_comp_temp_double+0x1ac>)
 8001b2a:	f7fe fe8f 	bl	800084c <__aeabi_ddiv>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4620      	mov	r0, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	f7fe fba7 	bl	8000288 <__aeabi_dsub>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460c      	mov	r4, r1
 8001b3e:	4625      	mov	r5, r4
 8001b40:	461c      	mov	r4, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001b42:	68b8      	ldr	r0, [r7, #8]
 8001b44:	f7fe fcee 	bl	8000524 <__aeabi_i2d>
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001b50:	f7fe fe7c 	bl	800084c <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4690      	mov	r8, r2
 8001b5a:	4699      	mov	r9, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	8a1b      	ldrh	r3, [r3, #16]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fccf 	bl	8000504 <__aeabi_ui2d>
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <bmp280_get_comp_temp_double+0x1ac>)
 8001b6c:	f7fe fe6e 	bl	800084c <__aeabi_ddiv>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4640      	mov	r0, r8
 8001b76:	4649      	mov	r1, r9
 8001b78:	f7fe fb86 	bl	8000288 <__aeabi_dsub>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001b80:	4620      	mov	r0, r4
 8001b82:	4629      	mov	r1, r5
 8001b84:	f7fe fd38 	bl	80005f8 <__aeabi_dmul>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	460c      	mov	r4, r1
 8001b8c:	4625      	mov	r5, r4
 8001b8e:	461c      	mov	r4, r3
            ((double) dev->calib_param.dig_t3);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fcc4 	bl	8000524 <__aeabi_i2d>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
        var2 =
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f7fe fd28 	bl	80005f8 <__aeabi_dmul>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	460c      	mov	r4, r1
 8001bac:	e9c7 3404 	strd	r3, r4, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001bb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bb8:	f7fe fb68 	bl	800028c <__adddf3>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	f7fe ffc8 	bl	8000b58 <__aeabi_d2iz>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 8001bce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bd6:	f7fe fb59 	bl	800028c <__adddf3>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	460c      	mov	r4, r1
 8001bde:	4618      	mov	r0, r3
 8001be0:	4621      	mov	r1, r4
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <bmp280_get_comp_temp_double+0x1b0>)
 8001be8:	f7fe fe30 	bl	800084c <__aeabi_ddiv>
 8001bec:	4603      	mov	r3, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	e9c2 3400 	strd	r3, r4, [r2]
 8001bf6:	e009      	b.n	8001c0c <bmp280_get_comp_temp_double+0x194>
    }
    else
    {
        *temperature = 0;
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	f04f 0400 	mov.w	r4, #0
 8001c02:	e9c2 3400 	strd	r3, r4, [r2]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 8001c06:	23ef      	movs	r3, #239	; 0xef
 8001c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001c0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3728      	adds	r7, #40	; 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40d00000 	.word	0x40d00000
 8001c20:	40900000 	.word	0x40900000
 8001c24:	40c00000 	.word	0x40c00000
 8001c28:	40b40000 	.word	0x40b40000
 8001c2c:	00000000 	.word	0x00000000

08001c30 <bmp280_get_comp_pres_double>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses double floating precision.
 */
int8_t bmp280_get_comp_pres_double(double *pressure, uint32_t uncomp_pres, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001c30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c34:	b08a      	sub	sp, #40	; 0x28
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	603b      	str	r3, [r7, #0]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8001c40:	6839      	ldr	r1, [r7, #0]
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f9ca 	bl	8001fdc <null_ptr_check>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001c4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 81ba 	bne.w	8001fcc <bmp280_get_comp_pres_double+0x39c>
    {
        var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc61 	bl	8000524 <__aeabi_i2d>
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c6a:	f7fe fdef 	bl	800084c <__aeabi_ddiv>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	460c      	mov	r4, r1
 8001c72:	4618      	mov	r0, r3
 8001c74:	4621      	mov	r1, r4
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	4bc5      	ldr	r3, [pc, #788]	; (8001f90 <bmp280_get_comp_pres_double+0x360>)
 8001c7c:	f7fe fb04 	bl	8000288 <__aeabi_dsub>
 8001c80:	4603      	mov	r3, r0
 8001c82:	460c      	mov	r4, r1
 8001c84:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c90:	f7fe fcb2 	bl	80005f8 <__aeabi_dmul>
 8001c94:	4603      	mov	r3, r0
 8001c96:	460c      	mov	r4, r1
 8001c98:	4625      	mov	r5, r4
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fc3e 	bl	8000524 <__aeabi_i2d>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4620      	mov	r0, r4
 8001cae:	4629      	mov	r1, r5
 8001cb0:	f7fe fca2 	bl	80005f8 <__aeabi_dmul>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	460c      	mov	r4, r1
 8001cb8:	4618      	mov	r0, r3
 8001cba:	4621      	mov	r1, r4
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	4bb4      	ldr	r3, [pc, #720]	; (8001f94 <bmp280_get_comp_pres_double+0x364>)
 8001cc2:	f7fe fdc3 	bl	800084c <__aeabi_ddiv>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	460c      	mov	r4, r1
 8001cca:	e9c7 3404 	strd	r3, r4, [r7, #16]
        var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc25 	bl	8000524 <__aeabi_i2d>
 8001cda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cde:	f7fe fc8b 	bl	80005f8 <__aeabi_dmul>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4621      	mov	r1, r4
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	f7fe facd 	bl	800028c <__adddf3>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4623      	mov	r3, r4
 8001cfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cfe:	f7fe fac5 	bl	800028c <__adddf3>
 8001d02:	4603      	mov	r3, r0
 8001d04:	460c      	mov	r4, r1
 8001d06:	e9c7 3404 	strd	r3, r4, [r7, #16]
        var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4ba2      	ldr	r3, [pc, #648]	; (8001f98 <bmp280_get_comp_pres_double+0x368>)
 8001d10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d14:	f7fe fd9a 	bl	800084c <__aeabi_ddiv>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	460c      	mov	r4, r1
 8001d1c:	4625      	mov	r5, r4
 8001d1e:	461c      	mov	r4, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fbfc 	bl	8000524 <__aeabi_i2d>
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	4b9a      	ldr	r3, [pc, #616]	; (8001f9c <bmp280_get_comp_pres_double+0x36c>)
 8001d32:	f7fe fc61 	bl	80005f8 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	f7fe faa5 	bl	800028c <__adddf3>
 8001d42:	4603      	mov	r3, r0
 8001d44:	460c      	mov	r4, r1
 8001d46:	e9c7 3404 	strd	r3, r4, [r7, #16]
        var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbe7 	bl	8000524 <__aeabi_i2d>
 8001d56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d5a:	f7fe fc4d 	bl	80005f8 <__aeabi_dmul>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460c      	mov	r4, r1
 8001d62:	4618      	mov	r0, r3
 8001d64:	4621      	mov	r1, r4
 8001d66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d6a:	f7fe fc45 	bl	80005f8 <__aeabi_dmul>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	460c      	mov	r4, r1
 8001d72:	4618      	mov	r0, r3
 8001d74:	4621      	mov	r1, r4
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <bmp280_get_comp_pres_double+0x370>)
 8001d7c:	f7fe fd66 	bl	800084c <__aeabi_ddiv>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	4625      	mov	r5, r4
 8001d86:	461c      	mov	r4, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbc8 	bl	8000524 <__aeabi_i2d>
 8001d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d98:	f7fe fc2e 	bl	80005f8 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4620      	mov	r0, r4
 8001da2:	4629      	mov	r1, r5
 8001da4:	f7fe fa72 	bl	800028c <__adddf3>
 8001da8:	4603      	mov	r3, r0
 8001daa:	460c      	mov	r4, r1
 8001dac:	4618      	mov	r0, r3
 8001dae:	4621      	mov	r1, r4
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	4b7a      	ldr	r3, [pc, #488]	; (8001fa0 <bmp280_get_comp_pres_double+0x370>)
 8001db6:	f7fe fd49 	bl	800084c <__aeabi_ddiv>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460c      	mov	r4, r1
 8001dbe:	e9c7 3406 	strd	r3, r4, [r7, #24]
               524288.0;
        var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	4b73      	ldr	r3, [pc, #460]	; (8001f94 <bmp280_get_comp_pres_double+0x364>)
 8001dc8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dcc:	f7fe fd3e 	bl	800084c <__aeabi_ddiv>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	460c      	mov	r4, r1
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b71      	ldr	r3, [pc, #452]	; (8001fa4 <bmp280_get_comp_pres_double+0x374>)
 8001dde:	f7fe fa55 	bl	800028c <__adddf3>
 8001de2:	4603      	mov	r3, r0
 8001de4:	460c      	mov	r4, r1
 8001de6:	4625      	mov	r5, r4
 8001de8:	461c      	mov	r4, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8adb      	ldrh	r3, [r3, #22]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fb88 	bl	8000504 <__aeabi_ui2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4620      	mov	r0, r4
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	f7fe fbfc 	bl	80005f8 <__aeabi_dmul>
 8001e00:	4603      	mov	r3, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	e9c7 3406 	strd	r3, r4, [r7, #24]

        *pressure = 1048576.0 - (double)uncomp_pres;
 8001e08:	68b8      	ldr	r0, [r7, #8]
 8001e0a:	f7fe fb7b 	bl	8000504 <__aeabi_ui2d>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460c      	mov	r4, r1
 8001e12:	461a      	mov	r2, r3
 8001e14:	4623      	mov	r3, r4
 8001e16:	f04f 0000 	mov.w	r0, #0
 8001e1a:	4963      	ldr	r1, [pc, #396]	; (8001fa8 <bmp280_get_comp_pres_double+0x378>)
 8001e1c:	f7fe fa34 	bl	8000288 <__aeabi_dsub>
 8001e20:	4603      	mov	r3, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	e9c2 3400 	strd	r3, r4, [r2]
        if (var1 < 0 || var1 > 0)
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e36:	f7fe fe51 	bl	8000adc <__aeabi_dcmplt>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <bmp280_get_comp_pres_double+0x228>
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e4c:	f7fe fe64 	bl	8000b18 <__aeabi_dcmpgt>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80b0 	beq.w	8001fb8 <bmp280_get_comp_pres_double+0x388>
        {
            *pressure = (*pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b52      	ldr	r3, [pc, #328]	; (8001fac <bmp280_get_comp_pres_double+0x37c>)
 8001e64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e68:	f7fe fcf0 	bl	800084c <__aeabi_ddiv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4620      	mov	r0, r4
 8001e72:	4629      	mov	r1, r5
 8001e74:	f7fe fa08 	bl	8000288 <__aeabi_dsub>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	4621      	mov	r1, r4
 8001e80:	a341      	add	r3, pc, #260	; (adr r3, 8001f88 <bmp280_get_comp_pres_double+0x358>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	f7fe fbb7 	bl	80005f8 <__aeabi_dmul>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	4618      	mov	r0, r3
 8001e90:	4621      	mov	r1, r4
 8001e92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e96:	f7fe fcd9 	bl	800084c <__aeabi_ddiv>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	460c      	mov	r4, r1
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	e9c2 3400 	strd	r3, r4, [r2]
            var1 = ((double)dev->calib_param.dig_p9) * (*pressure) * (*pressure) / 2147483648.0;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fb3a 	bl	8000524 <__aeabi_i2d>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4623      	mov	r3, r4
 8001eba:	f7fe fb9d 	bl	80005f8 <__aeabi_dmul>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4623      	mov	r3, r4
 8001ed0:	f7fe fb92 	bl	80005f8 <__aeabi_dmul>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	460c      	mov	r4, r1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	4621      	mov	r1, r4
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <bmp280_get_comp_pres_double+0x380>)
 8001ee2:	f7fe fcb3 	bl	800084c <__aeabi_ddiv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	460c      	mov	r4, r1
 8001eea:	e9c7 3406 	strd	r3, r4, [r7, #24]
            var2 = (*pressure) * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fb12 	bl	8000524 <__aeabi_i2d>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4620      	mov	r0, r4
 8001f06:	4629      	mov	r1, r5
 8001f08:	f7fe fb76 	bl	80005f8 <__aeabi_dmul>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	460c      	mov	r4, r1
 8001f10:	4618      	mov	r0, r3
 8001f12:	4621      	mov	r1, r4
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <bmp280_get_comp_pres_double+0x364>)
 8001f1a:	f7fe fc97 	bl	800084c <__aeabi_ddiv>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	460c      	mov	r4, r1
 8001f22:	e9c7 3404 	strd	r3, r4, [r7, #16]
            *pressure = *pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f34:	f7fe f9aa 	bl	800028c <__adddf3>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4690      	mov	r8, r2
 8001f3e:	4699      	mov	r9, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe faec 	bl	8000524 <__aeabi_i2d>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4640      	mov	r0, r8
 8001f52:	4649      	mov	r1, r9
 8001f54:	f7fe f99a 	bl	800028c <__adddf3>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <bmp280_get_comp_pres_double+0x384>)
 8001f66:	f7fe fc71 	bl	800084c <__aeabi_ddiv>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4620      	mov	r0, r4
 8001f70:	4629      	mov	r1, r5
 8001f72:	f7fe f98b 	bl	800028c <__adddf3>
 8001f76:	4603      	mov	r3, r0
 8001f78:	460c      	mov	r4, r1
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	e9c2 3400 	strd	r3, r4, [r2]
 8001f80:	e024      	b.n	8001fcc <bmp280_get_comp_pres_double+0x39c>
 8001f82:	bf00      	nop
 8001f84:	f3af 8000 	nop.w
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	40b86a00 	.word	0x40b86a00
 8001f90:	40ef4000 	.word	0x40ef4000
 8001f94:	40e00000 	.word	0x40e00000
 8001f98:	40100000 	.word	0x40100000
 8001f9c:	40f00000 	.word	0x40f00000
 8001fa0:	41200000 	.word	0x41200000
 8001fa4:	3ff00000 	.word	0x3ff00000
 8001fa8:	41300000 	.word	0x41300000
 8001fac:	40b00000 	.word	0x40b00000
 8001fb0:	41e00000 	.word	0x41e00000
 8001fb4:	40300000 	.word	0x40300000
        }
        else
        {
            *pressure = 0;
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	f04f 0400 	mov.w	r4, #0
 8001fc2:	e9c2 3400 	strd	r3, r4, [r2]
            rslt = BMP280_E_DOUBLE_COMP_PRESS;
 8001fc6:	23ee      	movs	r3, #238	; 0xee
 8001fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return rslt;
 8001fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3728      	adds	r7, #40	; 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fda:	bf00      	nop

08001fdc <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00b      	beq.n	8002004 <null_ptr_check+0x28>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <null_ptr_check+0x28>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <null_ptr_check+0x28>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <null_ptr_check+0x2e>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8002004:	23ff      	movs	r3, #255	; 0xff
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e001      	b.n	800200e <null_ptr_check+0x32>
    }
    else
    {
        rslt = BMP280_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800201e:	b480      	push	{r7}
 8002020:	b087      	sub	sp, #28
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 800202c:	2301      	movs	r3, #1
 800202e:	75fb      	strb	r3, [r7, #23]
 8002030:	e016      	b.n	8002060 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8002032:	7dfb      	ldrb	r3, [r7, #23]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	441a      	add	r2, r3
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	3b01      	subs	r3, #1
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	440b      	add	r3, r1
 8002042:	7812      	ldrb	r2, [r2, #0]
 8002044:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8002046:	7dfb      	ldrb	r3, [r7, #23]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	441a      	add	r2, r3
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4619      	mov	r1, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	440b      	add	r3, r1
 8002056:	7812      	ldrb	r2, [r2, #0]
 8002058:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	3301      	adds	r3, #1
 800205e:	75fb      	strb	r3, [r7, #23]
 8002060:	7dfa      	ldrb	r2, [r7, #23]
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	429a      	cmp	r2, r3
 8002066:	d3e4      	bcc.n	8002032 <interleave_data+0x14>
    }
}
 8002068:	bf00      	nop
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af02      	add	r7, sp, #8
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	611a      	str	r2, [r3, #16]
 800208e:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev,huartI2C);
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ffa2 	bl	8001fdc <null_ptr_check>
 8002098:	4603      	mov	r3, r0
 800209a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 800209e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 8082 	bne.w	80021ac <get_calib_param+0x138>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev,huartI2C);
 80020a8:	f107 010c 	add.w	r1, r7, #12
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2218      	movs	r2, #24
 80020b4:	2088      	movs	r0, #136	; 0x88
 80020b6:	f7fe ff47 	bl	8000f48 <bmp280_get_regs>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 80020c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d171      	bne.n	80021ac <get_calib_param+0x138>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 80020c8:	7b7b      	ldrb	r3, [r7, #13]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	7b3b      	ldrb	r3, [r7, #12]
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	4313      	orrs	r3, r2
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	b21a      	sxth	r2, r3
 80020e2:	7bbb      	ldrb	r3, [r7, #14]
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 80020ee:	7c7b      	ldrb	r3, [r7, #17]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	b21a      	sxth	r2, r3
 80020f4:	7c3b      	ldrb	r3, [r7, #16]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	b21a      	sxth	r2, r3
 8002106:	7cbb      	ldrb	r3, [r7, #18]
 8002108:	b21b      	sxth	r3, r3
 800210a:	4313      	orrs	r3, r2
 800210c:	b21b      	sxth	r3, r3
 800210e:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8002114:	7d7b      	ldrb	r3, [r7, #21]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	b21a      	sxth	r2, r3
 800211a:	7d3b      	ldrb	r3, [r7, #20]
 800211c:	b21b      	sxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8002126:	7dfb      	ldrb	r3, [r7, #23]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	b21a      	sxth	r2, r3
 800212c:	7dbb      	ldrb	r3, [r7, #22]
 800212e:	b21b      	sxth	r3, r3
 8002130:	4313      	orrs	r3, r2
 8002132:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8002138:	7e7b      	ldrb	r3, [r7, #25]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	b21a      	sxth	r2, r3
 800213e:	7e3b      	ldrb	r3, [r7, #24]
 8002140:	b21b      	sxth	r3, r3
 8002142:	4313      	orrs	r3, r2
 8002144:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 800214a:	7efb      	ldrb	r3, [r7, #27]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	7ebb      	ldrb	r3, [r7, #26]
 8002152:	b21b      	sxth	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 800215c:	7f7b      	ldrb	r3, [r7, #29]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	b21a      	sxth	r2, r3
 8002162:	7f3b      	ldrb	r3, [r7, #28]
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 800216e:	7ffb      	ldrb	r3, [r7, #31]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	b21a      	sxth	r2, r3
 8002174:	7fbb      	ldrb	r3, [r7, #30]
 8002176:	b21b      	sxth	r3, r3
 8002178:	4313      	orrs	r3, r2
 800217a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8002180:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	b21a      	sxth	r2, r3
 8002188:	f897 3020 	ldrb.w	r3, [r7, #32]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8002196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21a      	sxth	r2, r3
 800219e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 80021ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3728      	adds	r7, #40	; 0x28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af02      	add	r7, sp, #8
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	4603      	mov	r3, r0
 80021c6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80021c8:	2300      	movs	r3, #0
 80021ca:	753b      	strb	r3, [r7, #20]
 80021cc:	2300      	movs	r3, #0
 80021ce:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 80021d0:	4b5a      	ldr	r3, [pc, #360]	; (800233c <conf_sensor+0x184>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev,huartI2C);
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff feff 	bl	8001fdc <null_ptr_check>
 80021de:	4603      	mov	r3, r0
 80021e0:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 80021e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 809d 	bne.w	8002326 <conf_sensor+0x16e>
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8099 	beq.w	8002326 <conf_sensor+0x16e>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev,huartI2C);
 80021f4:	f107 0114 	add.w	r1, r7, #20
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	20f4      	movs	r0, #244	; 0xf4
 8002202:	f7fe fea1 	bl	8000f48 <bmp280_get_regs>
 8002206:	4603      	mov	r3, r0
 8002208:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 800220a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f040 808c 	bne.w	800232c <conf_sensor+0x174>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev,huartI2C);
 8002214:	6839      	ldr	r1, [r7, #0]
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe ff43 	bl	80010a2 <bmp280_soft_reset>
 800221c:	4603      	mov	r3, r0
 800221e:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8002220:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 8081 	bne.w	800232c <conf_sensor+0x174>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 800222a:	7d3b      	ldrb	r3, [r7, #20]
 800222c:	b25b      	sxtb	r3, r3
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	b25a      	sxtb	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	015b      	lsls	r3, r3, #5
 800223a:	b25b      	sxtb	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	b25b      	sxtb	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8002244:	7d3b      	ldrb	r3, [r7, #20]
 8002246:	b25b      	sxtb	r3, r3
 8002248:	f023 031c 	bic.w	r3, r3, #28
 800224c:	b25a      	sxtb	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	785b      	ldrb	r3, [r3, #1]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	b25b      	sxtb	r3, r3
 8002256:	f003 031c 	and.w	r3, r3, #28
 800225a:	b25b      	sxtb	r3, r3
 800225c:	4313      	orrs	r3, r2
 800225e:	b25b      	sxtb	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8002264:	7d7b      	ldrb	r3, [r7, #21]
 8002266:	b25b      	sxtb	r3, r3
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	b25a      	sxtb	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	789b      	ldrb	r3, [r3, #2]
 8002272:	015b      	lsls	r3, r3, #5
 8002274:	b25b      	sxtb	r3, r3
 8002276:	4313      	orrs	r3, r2
 8002278:	b25b      	sxtb	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 800227e:	7d7b      	ldrb	r3, [r7, #21]
 8002280:	b25b      	sxtb	r3, r3
 8002282:	f023 031c 	bic.w	r3, r3, #28
 8002286:	b25a      	sxtb	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	78db      	ldrb	r3, [r3, #3]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	b25b      	sxtb	r3, r3
 8002290:	f003 031c 	and.w	r3, r3, #28
 8002294:	b25b      	sxtb	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	b25b      	sxtb	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 800229e:	7d7b      	ldrb	r3, [r7, #21]
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	b25a      	sxtb	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	791b      	ldrb	r3, [r3, #4]
 80022ac:	b25b      	sxtb	r3, r3
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev,huartI2C);
 80022bc:	f107 0114 	add.w	r1, r7, #20
 80022c0:	f107 0010 	add.w	r0, r7, #16
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f7fe fe77 	bl	8000fbe <bmp280_set_regs>
 80022d0:	4603      	mov	r3, r0
 80022d2:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 80022d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d127      	bne.n	800232c <conf_sensor+0x174>
                {
                    dev->conf = *conf;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	332c      	adds	r3, #44	; 0x2c
 80022e2:	6810      	ldr	r0, [r2, #0]
 80022e4:	6018      	str	r0, [r3, #0]
 80022e6:	7912      	ldrb	r2, [r2, #4]
 80022e8:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01d      	beq.n	800232c <conf_sensor+0x174>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 80022f0:	7d3b      	ldrb	r3, [r7, #20]
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	f023 0303 	bic.w	r3, r3, #3
 80022f8:	b25a      	sxtb	r2, r3
 80022fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	b25b      	sxtb	r3, r3
 8002304:	4313      	orrs	r3, r2
 8002306:	b25b      	sxtb	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev,huartI2C);
 800230c:	f107 0114 	add.w	r1, r7, #20
 8002310:	f107 0010 	add.w	r0, r7, #16
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f7fe fe4f 	bl	8000fbe <bmp280_set_regs>
 8002320:	4603      	mov	r3, r0
 8002322:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8002324:	e002      	b.n	800232c <conf_sensor+0x174>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8002326:	23ff      	movs	r3, #255	; 0xff
 8002328:	75fb      	strb	r3, [r7, #23]
 800232a:	e000      	b.n	800232e <conf_sensor+0x176>
        if (rslt == BMP280_OK)
 800232c:	bf00      	nop
    }

    return rslt;
 800232e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	0800b198 	.word	0x0800b198

08002340 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	dd03      	ble.n	800235c <st_check_boundaries+0x1c>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a15      	ldr	r2, [pc, #84]	; (80023ac <st_check_boundaries+0x6c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	dd09      	ble.n	8002370 <st_check_boundaries+0x30>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	dd03      	ble.n	800236a <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	4a11      	ldr	r2, [pc, #68]	; (80023ac <st_check_boundaries+0x6c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	dd02      	ble.n	8002370 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 800236a:	23f4      	movs	r3, #244	; 0xf4
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	e015      	b.n	800239c <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	dd03      	ble.n	800237e <st_check_boundaries+0x3e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <st_check_boundaries+0x6c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	dd02      	ble.n	8002384 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 800237e:	23f6      	movs	r3, #246	; 0xf6
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	e00b      	b.n	800239c <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	dd03      	ble.n	8002392 <st_check_boundaries+0x52>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	4a07      	ldr	r2, [pc, #28]	; (80023ac <st_check_boundaries+0x6c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	dd02      	ble.n	8002398 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8002392:	23f5      	movs	r3, #245	; 0xf5
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	e001      	b.n	800239c <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800239c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	000fffef 	.word	0x000fffef

080023b0 <reset_Buffer>:
 */


#include <drivers/BNO055/BNO055.h>

void reset_Buffer(void){
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
	buffer[0] = 0;
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <reset_Buffer+0x44>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <reset_Buffer+0x44>)
 80023bc:	2200      	movs	r2, #0
 80023be:	705a      	strb	r2, [r3, #1]
	buffer[2] = 0;
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <reset_Buffer+0x44>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	709a      	strb	r2, [r3, #2]
	buffer[3] = 0;
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <reset_Buffer+0x44>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	70da      	strb	r2, [r3, #3]
	buffer[4] = 0;
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <reset_Buffer+0x44>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	711a      	strb	r2, [r3, #4]
	buffer[5] = 0;
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <reset_Buffer+0x44>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	715a      	strb	r2, [r3, #5]
	buffer[6] = 0;
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <reset_Buffer+0x44>)
 80023da:	2200      	movs	r2, #0
 80023dc:	719a      	strb	r2, [r3, #6]
	buffer[7] = 0;
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <reset_Buffer+0x44>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	71da      	strb	r2, [r3, #7]
	buffer[8] = 0;
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <reset_Buffer+0x44>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	721a      	strb	r2, [r3, #8]
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	20000218 	.word	0x20000218

080023f8 <BNO055_Chip_ID_Check>:

int8_t BNO055_Chip_ID_Check(I2C_HandleTypeDef *huart) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	uint8_t chip_id;
	int8_t rslt;
	reset_Buffer();
 8002400:	f7ff ffd6 	bl	80023b0 <reset_Buffer>
	rslt = read8(huart, BNO055_READ_ADDR, BNO055_CHIP_ID_ADDR, &chip_id);
 8002404:	f107 030e 	add.w	r3, r7, #14
 8002408:	2200      	movs	r2, #0
 800240a:	2151      	movs	r1, #81	; 0x51
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f002 f9af 	bl	8004770 <read8>
 8002412:	4603      	mov	r3, r0
 8002414:	73fb      	strb	r3, [r7, #15]
	if (rslt == HAL_OK) {
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d107      	bne.n	800242e <BNO055_Chip_ID_Check+0x36>
		if (chip_id == BNO055_ID) {
 800241e:	7bbb      	ldrb	r3, [r7, #14]
 8002420:	2ba0      	cmp	r3, #160	; 0xa0
 8002422:	d101      	bne.n	8002428 <BNO055_Chip_ID_Check+0x30>
			return BNO055_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	e004      	b.n	8002432 <BNO055_Chip_ID_Check+0x3a>
		} else
			return BNO055_E_DEV_NOT_FOUND;
 8002428:	f06f 0312 	mvn.w	r3, #18
 800242c:	e001      	b.n	8002432 <BNO055_Chip_ID_Check+0x3a>
	} else
		return rslt;
 800242e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <BNO055_Init>:

int8_t BNO055_Init(I2C_HandleTypeDef *huart, bno055_opmode_t mode,uint8_t delay_time) {
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	70fb      	strb	r3, [r7, #3]
 8002446:	4613      	mov	r3, r2
 8002448:	70bb      	strb	r3, [r7, #2]
	int8_t rslt;
	rslt = BNO055_Chip_ID_Check(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffd4 	bl	80023f8 <BNO055_Chip_ID_Check>
 8002450:	4603      	mov	r3, r0
 8002452:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 8002454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <BNO055_Init+0x28>
		return rslt;
 800245c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002460:	e00c      	b.n	800247c <BNO055_Init+0x42>
	}

	//TODO: Add counter to count try. and try 5 times
	rslt = BNO055_SetMode(huart, mode);
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fbba 	bl	8002be0 <BNO055_SetMode>
 800246c:	4603      	mov	r3, r0
 800246e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(delay_time);
 8002470:	78bb      	ldrb	r3, [r7, #2]
 8002472:	4618      	mov	r0, r3
 8002474:	f002 ff7a 	bl	800536c <HAL_Delay>
	return rslt;
 8002478:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <BNO055_Read_Eul>:
	}
	return rslt;
}

//Reading Raw Data from BNO055
int8_t BNO055_Read_Eul(I2C_HandleTypeDef *huart,float *eulerXYZ) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t temp;
	rslt = BNO055_Chip_ID_Check(huart);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ffb2 	bl	80023f8 <BNO055_Chip_ID_Check>
 8002494:	4603      	mov	r3, r0
 8002496:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 8002498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <BNO055_Read_Eul+0x22>
		return rslt;
 80024a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a4:	e0bf      	b.n	8002626 <BNO055_Read_Eul+0x1a2>
	}

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_EUL_DATA_x_LSB_ADDR, &temp);
 80024a6:	f107 030e 	add.w	r3, r7, #14
 80024aa:	221a      	movs	r2, #26
 80024ac:	2151      	movs	r1, #81	; 0x51
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f002 f95e 	bl	8004770 <read8>
 80024b4:	4603      	mov	r3, r0
 80024b6:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80024b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <BNO055_Read_Eul+0x42>
		return rslt;
 80024c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c4:	e0af      	b.n	8002626 <BNO055_Read_Eul+0x1a2>
	buffer[1] = temp;
 80024c6:	7bba      	ldrb	r2, [r7, #14]
 80024c8:	4b59      	ldr	r3, [pc, #356]	; (8002630 <BNO055_Read_Eul+0x1ac>)
 80024ca:	705a      	strb	r2, [r3, #1]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_EUL_DATA_x_MSB_ADDR, &temp);
 80024cc:	f107 030e 	add.w	r3, r7, #14
 80024d0:	221b      	movs	r2, #27
 80024d2:	2151      	movs	r1, #81	; 0x51
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f002 f94b 	bl	8004770 <read8>
 80024da:	4603      	mov	r3, r0
 80024dc:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80024de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <BNO055_Read_Eul+0x68>
		return rslt;
 80024e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ea:	e09c      	b.n	8002626 <BNO055_Read_Eul+0x1a2>
	buffer[2] = temp;
 80024ec:	7bba      	ldrb	r2, [r7, #14]
 80024ee:	4b50      	ldr	r3, [pc, #320]	; (8002630 <BNO055_Read_Eul+0x1ac>)
 80024f0:	709a      	strb	r2, [r3, #2]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_EUL_DATA_y_LSB_ADDR, &temp);
 80024f2:	f107 030e 	add.w	r3, r7, #14
 80024f6:	221c      	movs	r2, #28
 80024f8:	2151      	movs	r1, #81	; 0x51
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f002 f938 	bl	8004770 <read8>
 8002500:	4603      	mov	r3, r0
 8002502:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <BNO055_Read_Eul+0x8e>
		return rslt;
 800250c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002510:	e089      	b.n	8002626 <BNO055_Read_Eul+0x1a2>
	buffer[3] = temp;
 8002512:	7bba      	ldrb	r2, [r7, #14]
 8002514:	4b46      	ldr	r3, [pc, #280]	; (8002630 <BNO055_Read_Eul+0x1ac>)
 8002516:	70da      	strb	r2, [r3, #3]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_EUL_DATA_y_MSB_ADDR, &temp);
 8002518:	f107 030e 	add.w	r3, r7, #14
 800251c:	221d      	movs	r2, #29
 800251e:	2151      	movs	r1, #81	; 0x51
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f002 f925 	bl	8004770 <read8>
 8002526:	4603      	mov	r3, r0
 8002528:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 800252a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <BNO055_Read_Eul+0xb4>
		return rslt;
 8002532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002536:	e076      	b.n	8002626 <BNO055_Read_Eul+0x1a2>
	buffer[4] = temp;
 8002538:	7bba      	ldrb	r2, [r7, #14]
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <BNO055_Read_Eul+0x1ac>)
 800253c:	711a      	strb	r2, [r3, #4]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_EUL_DATA_z_LSB_ADDR, &temp);
 800253e:	f107 030e 	add.w	r3, r7, #14
 8002542:	221e      	movs	r2, #30
 8002544:	2151      	movs	r1, #81	; 0x51
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f002 f912 	bl	8004770 <read8>
 800254c:	4603      	mov	r3, r0
 800254e:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <BNO055_Read_Eul+0xda>
		return rslt;
 8002558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255c:	e063      	b.n	8002626 <BNO055_Read_Eul+0x1a2>
	buffer[5] = temp;
 800255e:	7bba      	ldrb	r2, [r7, #14]
 8002560:	4b33      	ldr	r3, [pc, #204]	; (8002630 <BNO055_Read_Eul+0x1ac>)
 8002562:	715a      	strb	r2, [r3, #5]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_EUL_DATA_z_MSB_ADDR, &temp);
 8002564:	f107 030e 	add.w	r3, r7, #14
 8002568:	221f      	movs	r2, #31
 800256a:	2151      	movs	r1, #81	; 0x51
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f002 f8ff 	bl	8004770 <read8>
 8002572:	4603      	mov	r3, r0
 8002574:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <BNO055_Read_Eul+0x100>
		return rslt;
 800257e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002582:	e050      	b.n	8002626 <BNO055_Read_Eul+0x1a2>
	buffer[6] = temp;
 8002584:	7bba      	ldrb	r2, [r7, #14]
 8002586:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <BNO055_Read_Eul+0x1ac>)
 8002588:	719a      	strb	r2, [r3, #6]

	data_read[0] = (buffer[1]) | ((buffer[2]) << 8);
 800258a:	4b29      	ldr	r3, [pc, #164]	; (8002630 <BNO055_Read_Eul+0x1ac>)
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	b21a      	sxth	r2, r3
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <BNO055_Read_Eul+0x1ac>)
 8002592:	789b      	ldrb	r3, [r3, #2]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	b21b      	sxth	r3, r3
 8002598:	4313      	orrs	r3, r2
 800259a:	b21a      	sxth	r2, r3
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <BNO055_Read_Eul+0x1b0>)
 800259e:	801a      	strh	r2, [r3, #0]
	data_read[1] = (buffer[3]) | ((buffer[4]) << 8);
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <BNO055_Read_Eul+0x1ac>)
 80025a2:	78db      	ldrb	r3, [r3, #3]
 80025a4:	b21a      	sxth	r2, r3
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <BNO055_Read_Eul+0x1ac>)
 80025a8:	791b      	ldrb	r3, [r3, #4]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	b21b      	sxth	r3, r3
 80025ae:	4313      	orrs	r3, r2
 80025b0:	b21a      	sxth	r2, r3
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <BNO055_Read_Eul+0x1b0>)
 80025b4:	805a      	strh	r2, [r3, #2]
	data_read[2] = (buffer[5]) | ((buffer[6]) << 8);
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <BNO055_Read_Eul+0x1ac>)
 80025b8:	795b      	ldrb	r3, [r3, #5]
 80025ba:	b21a      	sxth	r2, r3
 80025bc:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <BNO055_Read_Eul+0x1ac>)
 80025be:	799b      	ldrb	r3, [r3, #6]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b21a      	sxth	r2, r3
 80025c8:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <BNO055_Read_Eul+0x1b0>)
 80025ca:	809a      	strh	r2, [r3, #4]

	eulerXYZ[0] = ((float) data_read[0]) / 16.0;
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <BNO055_Read_Eul+0x1b0>)
 80025ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025da:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80025de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	edc3 7a00 	vstr	s15, [r3]
	eulerXYZ[1] = (float) data_read[1] / 16.0;
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <BNO055_Read_Eul+0x1b0>)
 80025ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	3304      	adds	r3, #4
 80025fa:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80025fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002602:	edc3 7a00 	vstr	s15, [r3]
	eulerXYZ[2] = (float) data_read[2] / 16.0;
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <BNO055_Read_Eul+0x1b0>)
 8002608:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800260c:	ee07 3a90 	vmov	s15, r3
 8002610:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	3308      	adds	r3, #8
 8002618:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800261c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002620:	edc3 7a00 	vstr	s15, [r3]

	return BNO055_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000218 	.word	0x20000218
 8002634:	20000208 	.word	0x20000208

08002638 <BNO055_Read_Qua>:

int8_t BNO055_Read_Qua(I2C_HandleTypeDef *huart,float *quaternionWXYZ) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t temp;
	rslt = BNO055_Chip_ID_Check(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fed8 	bl	80023f8 <BNO055_Chip_ID_Check>
 8002648:	4603      	mov	r3, r0
 800264a:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 800264c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <BNO055_Read_Qua+0x22>
		return rslt;
 8002654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002658:	e0ff      	b.n	800285a <BNO055_Read_Qua+0x222>
	}

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_W_LSB_ADDR, &temp);
 800265a:	f107 030e 	add.w	r3, r7, #14
 800265e:	2220      	movs	r2, #32
 8002660:	2151      	movs	r1, #81	; 0x51
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f002 f884 	bl	8004770 <read8>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <BNO055_Read_Qua+0x42>
		return rslt;
 8002674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002678:	e0ef      	b.n	800285a <BNO055_Read_Qua+0x222>
	buffer[1] = temp;
 800267a:	7bba      	ldrb	r2, [r7, #14]
 800267c:	4b79      	ldr	r3, [pc, #484]	; (8002864 <BNO055_Read_Qua+0x22c>)
 800267e:	705a      	strb	r2, [r3, #1]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_W_MSB_ADDR, &temp);
 8002680:	f107 030e 	add.w	r3, r7, #14
 8002684:	2221      	movs	r2, #33	; 0x21
 8002686:	2151      	movs	r1, #81	; 0x51
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f002 f871 	bl	8004770 <read8>
 800268e:	4603      	mov	r3, r0
 8002690:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <BNO055_Read_Qua+0x68>
		return rslt;
 800269a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269e:	e0dc      	b.n	800285a <BNO055_Read_Qua+0x222>
	buffer[2] = temp;
 80026a0:	7bba      	ldrb	r2, [r7, #14]
 80026a2:	4b70      	ldr	r3, [pc, #448]	; (8002864 <BNO055_Read_Qua+0x22c>)
 80026a4:	709a      	strb	r2, [r3, #2]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_X_LSB_ADDR, &temp);
 80026a6:	f107 030e 	add.w	r3, r7, #14
 80026aa:	2222      	movs	r2, #34	; 0x22
 80026ac:	2151      	movs	r1, #81	; 0x51
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f002 f85e 	bl	8004770 <read8>
 80026b4:	4603      	mov	r3, r0
 80026b6:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80026b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <BNO055_Read_Qua+0x8e>
		return rslt;
 80026c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c4:	e0c9      	b.n	800285a <BNO055_Read_Qua+0x222>
	buffer[3] = temp;
 80026c6:	7bba      	ldrb	r2, [r7, #14]
 80026c8:	4b66      	ldr	r3, [pc, #408]	; (8002864 <BNO055_Read_Qua+0x22c>)
 80026ca:	70da      	strb	r2, [r3, #3]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_X_MSB_ADDR, &temp);
 80026cc:	f107 030e 	add.w	r3, r7, #14
 80026d0:	2223      	movs	r2, #35	; 0x23
 80026d2:	2151      	movs	r1, #81	; 0x51
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f002 f84b 	bl	8004770 <read8>
 80026da:	4603      	mov	r3, r0
 80026dc:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <BNO055_Read_Qua+0xb4>
		return rslt;
 80026e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ea:	e0b6      	b.n	800285a <BNO055_Read_Qua+0x222>
	buffer[4] = temp;
 80026ec:	7bba      	ldrb	r2, [r7, #14]
 80026ee:	4b5d      	ldr	r3, [pc, #372]	; (8002864 <BNO055_Read_Qua+0x22c>)
 80026f0:	711a      	strb	r2, [r3, #4]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_Y_LSB_ADDR, &temp);
 80026f2:	f107 030e 	add.w	r3, r7, #14
 80026f6:	2224      	movs	r2, #36	; 0x24
 80026f8:	2151      	movs	r1, #81	; 0x51
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f002 f838 	bl	8004770 <read8>
 8002700:	4603      	mov	r3, r0
 8002702:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <BNO055_Read_Qua+0xda>
		return rslt;
 800270c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002710:	e0a3      	b.n	800285a <BNO055_Read_Qua+0x222>
	buffer[5] = temp;
 8002712:	7bba      	ldrb	r2, [r7, #14]
 8002714:	4b53      	ldr	r3, [pc, #332]	; (8002864 <BNO055_Read_Qua+0x22c>)
 8002716:	715a      	strb	r2, [r3, #5]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_Y_MSB_ADDR, &temp);
 8002718:	f107 030e 	add.w	r3, r7, #14
 800271c:	2225      	movs	r2, #37	; 0x25
 800271e:	2151      	movs	r1, #81	; 0x51
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f002 f825 	bl	8004770 <read8>
 8002726:	4603      	mov	r3, r0
 8002728:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <BNO055_Read_Qua+0x100>
		return rslt;
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	e090      	b.n	800285a <BNO055_Read_Qua+0x222>
	buffer[6] = temp;
 8002738:	7bba      	ldrb	r2, [r7, #14]
 800273a:	4b4a      	ldr	r3, [pc, #296]	; (8002864 <BNO055_Read_Qua+0x22c>)
 800273c:	719a      	strb	r2, [r3, #6]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_Z_LSB_ADDR, &temp);
 800273e:	f107 030e 	add.w	r3, r7, #14
 8002742:	2226      	movs	r2, #38	; 0x26
 8002744:	2151      	movs	r1, #81	; 0x51
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f002 f812 	bl	8004770 <read8>
 800274c:	4603      	mov	r3, r0
 800274e:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <BNO055_Read_Qua+0x126>
		return rslt;
 8002758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275c:	e07d      	b.n	800285a <BNO055_Read_Qua+0x222>
	buffer[7] = temp;
 800275e:	7bba      	ldrb	r2, [r7, #14]
 8002760:	4b40      	ldr	r3, [pc, #256]	; (8002864 <BNO055_Read_Qua+0x22c>)
 8002762:	71da      	strb	r2, [r3, #7]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_Z_MSB_ADDR, &temp);
 8002764:	f107 030e 	add.w	r3, r7, #14
 8002768:	2227      	movs	r2, #39	; 0x27
 800276a:	2151      	movs	r1, #81	; 0x51
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f001 ffff 	bl	8004770 <read8>
 8002772:	4603      	mov	r3, r0
 8002774:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <BNO055_Read_Qua+0x14c>
		return rslt;
 800277e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002782:	e06a      	b.n	800285a <BNO055_Read_Qua+0x222>
	buffer[8] = temp;
 8002784:	7bba      	ldrb	r2, [r7, #14]
 8002786:	4b37      	ldr	r3, [pc, #220]	; (8002864 <BNO055_Read_Qua+0x22c>)
 8002788:	721a      	strb	r2, [r3, #8]

	//TODO: Check NDOF OR Other modes if they supports Quaternion

	data_read[0] = (buffer[1]) | ((buffer[2]) << 8);
 800278a:	4b36      	ldr	r3, [pc, #216]	; (8002864 <BNO055_Read_Qua+0x22c>)
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	b21a      	sxth	r2, r3
 8002790:	4b34      	ldr	r3, [pc, #208]	; (8002864 <BNO055_Read_Qua+0x22c>)
 8002792:	789b      	ldrb	r3, [r3, #2]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	b21b      	sxth	r3, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	b21a      	sxth	r2, r3
 800279c:	4b32      	ldr	r3, [pc, #200]	; (8002868 <BNO055_Read_Qua+0x230>)
 800279e:	801a      	strh	r2, [r3, #0]
	data_read[1] = (buffer[3]) | ((buffer[4]) << 8);
 80027a0:	4b30      	ldr	r3, [pc, #192]	; (8002864 <BNO055_Read_Qua+0x22c>)
 80027a2:	78db      	ldrb	r3, [r3, #3]
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <BNO055_Read_Qua+0x22c>)
 80027a8:	791b      	ldrb	r3, [r3, #4]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	b21b      	sxth	r3, r3
 80027ae:	4313      	orrs	r3, r2
 80027b0:	b21a      	sxth	r2, r3
 80027b2:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <BNO055_Read_Qua+0x230>)
 80027b4:	805a      	strh	r2, [r3, #2]
	data_read[2] = (buffer[5]) | ((buffer[6]) << 8);
 80027b6:	4b2b      	ldr	r3, [pc, #172]	; (8002864 <BNO055_Read_Qua+0x22c>)
 80027b8:	795b      	ldrb	r3, [r3, #5]
 80027ba:	b21a      	sxth	r2, r3
 80027bc:	4b29      	ldr	r3, [pc, #164]	; (8002864 <BNO055_Read_Qua+0x22c>)
 80027be:	799b      	ldrb	r3, [r3, #6]
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b21a      	sxth	r2, r3
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <BNO055_Read_Qua+0x230>)
 80027ca:	809a      	strh	r2, [r3, #4]
	data_read[3] = (buffer[7]) | ((buffer[8]) << 8);
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <BNO055_Read_Qua+0x22c>)
 80027ce:	79db      	ldrb	r3, [r3, #7]
 80027d0:	b21a      	sxth	r2, r3
 80027d2:	4b24      	ldr	r3, [pc, #144]	; (8002864 <BNO055_Read_Qua+0x22c>)
 80027d4:	7a1b      	ldrb	r3, [r3, #8]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	b21b      	sxth	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	b21a      	sxth	r2, r3
 80027de:	4b22      	ldr	r3, [pc, #136]	; (8002868 <BNO055_Read_Qua+0x230>)
 80027e0:	80da      	strh	r2, [r3, #6]

	quaternionWXYZ[0] = (float) data_read[0] / 16383.0;
 80027e2:	4b21      	ldr	r3, [pc, #132]	; (8002868 <BNO055_Read_Qua+0x230>)
 80027e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f0:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800286c <BNO055_Read_Qua+0x234>
 80027f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	edc3 7a00 	vstr	s15, [r3]
	quaternionWXYZ[1] = (float) data_read[1] / 16383.0;
 80027fe:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <BNO055_Read_Qua+0x230>)
 8002800:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	3304      	adds	r3, #4
 8002810:	eddf 6a16 	vldr	s13, [pc, #88]	; 800286c <BNO055_Read_Qua+0x234>
 8002814:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002818:	edc3 7a00 	vstr	s15, [r3]
	quaternionWXYZ[2] = (float) data_read[2] / 16383.0;
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <BNO055_Read_Qua+0x230>)
 800281e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	3308      	adds	r3, #8
 800282e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800286c <BNO055_Read_Qua+0x234>
 8002832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002836:	edc3 7a00 	vstr	s15, [r3]
	quaternionWXYZ[3] = (float) data_read[3] / 16383.0;
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <BNO055_Read_Qua+0x230>)
 800283c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	330c      	adds	r3, #12
 800284c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800286c <BNO055_Read_Qua+0x234>
 8002850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002854:	edc3 7a00 	vstr	s15, [r3]

	return BNO055_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000218 	.word	0x20000218
 8002868:	20000208 	.word	0x20000208
 800286c:	467ffc00 	.word	0x467ffc00

08002870 <BNO055_Read_Acc>:

int8_t BNO055_Read_Acc(I2C_HandleTypeDef *huart,float *accelXYZ) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t temp;
	rslt = BNO055_Chip_ID_Check(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff fdbc 	bl	80023f8 <BNO055_Chip_ID_Check>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 8002884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <BNO055_Read_Acc+0x22>
		return rslt;
 800288c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002890:	e0bf      	b.n	8002a12 <BNO055_Read_Acc+0x1a2>
	}

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_ACCEL_DATA_X_LSB_ADDR, &temp);
 8002892:	f107 030e 	add.w	r3, r7, #14
 8002896:	2208      	movs	r2, #8
 8002898:	2151      	movs	r1, #81	; 0x51
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f001 ff68 	bl	8004770 <read8>
 80028a0:	4603      	mov	r3, r0
 80028a2:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80028a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <BNO055_Read_Acc+0x42>
		return rslt;
 80028ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b0:	e0af      	b.n	8002a12 <BNO055_Read_Acc+0x1a2>
	buffer[1] = temp;
 80028b2:	7bba      	ldrb	r2, [r7, #14]
 80028b4:	4b59      	ldr	r3, [pc, #356]	; (8002a1c <BNO055_Read_Acc+0x1ac>)
 80028b6:	705a      	strb	r2, [r3, #1]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_ACCEL_DATA_X_MSB_ADDR, &temp);
 80028b8:	f107 030e 	add.w	r3, r7, #14
 80028bc:	2209      	movs	r2, #9
 80028be:	2151      	movs	r1, #81	; 0x51
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f001 ff55 	bl	8004770 <read8>
 80028c6:	4603      	mov	r3, r0
 80028c8:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80028ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <BNO055_Read_Acc+0x68>
		return rslt;
 80028d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d6:	e09c      	b.n	8002a12 <BNO055_Read_Acc+0x1a2>
	buffer[2] = temp;
 80028d8:	7bba      	ldrb	r2, [r7, #14]
 80028da:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <BNO055_Read_Acc+0x1ac>)
 80028dc:	709a      	strb	r2, [r3, #2]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_ACCEL_DATA_Y_LSB_ADDR, &temp);
 80028de:	f107 030e 	add.w	r3, r7, #14
 80028e2:	220a      	movs	r2, #10
 80028e4:	2151      	movs	r1, #81	; 0x51
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f001 ff42 	bl	8004770 <read8>
 80028ec:	4603      	mov	r3, r0
 80028ee:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80028f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <BNO055_Read_Acc+0x8e>
		return rslt;
 80028f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fc:	e089      	b.n	8002a12 <BNO055_Read_Acc+0x1a2>
	buffer[3] = temp;
 80028fe:	7bba      	ldrb	r2, [r7, #14]
 8002900:	4b46      	ldr	r3, [pc, #280]	; (8002a1c <BNO055_Read_Acc+0x1ac>)
 8002902:	70da      	strb	r2, [r3, #3]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_ACCEL_DATA_Y_MSB_ADDR, &temp);
 8002904:	f107 030e 	add.w	r3, r7, #14
 8002908:	220b      	movs	r2, #11
 800290a:	2151      	movs	r1, #81	; 0x51
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f001 ff2f 	bl	8004770 <read8>
 8002912:	4603      	mov	r3, r0
 8002914:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <BNO055_Read_Acc+0xb4>
		return rslt;
 800291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002922:	e076      	b.n	8002a12 <BNO055_Read_Acc+0x1a2>
	buffer[4] = temp;
 8002924:	7bba      	ldrb	r2, [r7, #14]
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <BNO055_Read_Acc+0x1ac>)
 8002928:	711a      	strb	r2, [r3, #4]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_ACCEL_DATA_Z_LSB_ADDR, &temp);
 800292a:	f107 030e 	add.w	r3, r7, #14
 800292e:	220c      	movs	r2, #12
 8002930:	2151      	movs	r1, #81	; 0x51
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f001 ff1c 	bl	8004770 <read8>
 8002938:	4603      	mov	r3, r0
 800293a:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 800293c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <BNO055_Read_Acc+0xda>
		return rslt;
 8002944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002948:	e063      	b.n	8002a12 <BNO055_Read_Acc+0x1a2>
	buffer[5] = temp;
 800294a:	7bba      	ldrb	r2, [r7, #14]
 800294c:	4b33      	ldr	r3, [pc, #204]	; (8002a1c <BNO055_Read_Acc+0x1ac>)
 800294e:	715a      	strb	r2, [r3, #5]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_ACCEL_DATA_Z_MSB_ADDR, &temp);
 8002950:	f107 030e 	add.w	r3, r7, #14
 8002954:	220d      	movs	r2, #13
 8002956:	2151      	movs	r1, #81	; 0x51
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f001 ff09 	bl	8004770 <read8>
 800295e:	4603      	mov	r3, r0
 8002960:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <BNO055_Read_Acc+0x100>
		return rslt;
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296e:	e050      	b.n	8002a12 <BNO055_Read_Acc+0x1a2>
	buffer[6] = temp;
 8002970:	7bba      	ldrb	r2, [r7, #14]
 8002972:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <BNO055_Read_Acc+0x1ac>)
 8002974:	719a      	strb	r2, [r3, #6]

	//TODO: Sometimes goes 0 0 0 and errors when reading chip ID

	data_read[0] = (buffer[1]) | ((buffer[2]) << 8);
 8002976:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <BNO055_Read_Acc+0x1ac>)
 8002978:	785b      	ldrb	r3, [r3, #1]
 800297a:	b21a      	sxth	r2, r3
 800297c:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <BNO055_Read_Acc+0x1ac>)
 800297e:	789b      	ldrb	r3, [r3, #2]
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	b21b      	sxth	r3, r3
 8002984:	4313      	orrs	r3, r2
 8002986:	b21a      	sxth	r2, r3
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <BNO055_Read_Acc+0x1b0>)
 800298a:	801a      	strh	r2, [r3, #0]
	data_read[1] = (buffer[3]) | ((buffer[4]) << 8);
 800298c:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <BNO055_Read_Acc+0x1ac>)
 800298e:	78db      	ldrb	r3, [r3, #3]
 8002990:	b21a      	sxth	r2, r3
 8002992:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <BNO055_Read_Acc+0x1ac>)
 8002994:	791b      	ldrb	r3, [r3, #4]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	b21b      	sxth	r3, r3
 800299a:	4313      	orrs	r3, r2
 800299c:	b21a      	sxth	r2, r3
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <BNO055_Read_Acc+0x1b0>)
 80029a0:	805a      	strh	r2, [r3, #2]
	data_read[2] = (buffer[5]) | ((buffer[6]) << 8);
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <BNO055_Read_Acc+0x1ac>)
 80029a4:	795b      	ldrb	r3, [r3, #5]
 80029a6:	b21a      	sxth	r2, r3
 80029a8:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <BNO055_Read_Acc+0x1ac>)
 80029aa:	799b      	ldrb	r3, [r3, #6]
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	4313      	orrs	r3, r2
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <BNO055_Read_Acc+0x1b0>)
 80029b6:	809a      	strh	r2, [r3, #4]
	accelXYZ[0] = ((float) data_read[0]) / 100.0;
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <BNO055_Read_Acc+0x1b0>)
 80029ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029c6:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002a24 <BNO055_Read_Acc+0x1b4>
 80029ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	edc3 7a00 	vstr	s15, [r3]
	accelXYZ[1] = (float) data_read[1] / 100.0;
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <BNO055_Read_Acc+0x1b0>)
 80029d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	3304      	adds	r3, #4
 80029e6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002a24 <BNO055_Read_Acc+0x1b4>
 80029ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ee:	edc3 7a00 	vstr	s15, [r3]
	accelXYZ[2] = (float) data_read[2] / 100.0;
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <BNO055_Read_Acc+0x1b0>)
 80029f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	3308      	adds	r3, #8
 8002a04:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002a24 <BNO055_Read_Acc+0x1b4>
 8002a08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a0c:	edc3 7a00 	vstr	s15, [r3]

	return BNO055_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000218 	.word	0x20000218
 8002a20:	20000208 	.word	0x20000208
 8002a24:	42c80000 	.word	0x42c80000

08002a28 <BNO055_Read_Lia>:
	grvXYZ[1] = (float) data_read[1] / 100.0;
	grvXYZ[2] = (float) data_read[2] / 100.0;

	return BNO055_OK;
}
int8_t BNO055_Read_Lia(I2C_HandleTypeDef *huart,float *liaXYZ) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t temp;
	rslt = BNO055_Chip_ID_Check(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff fce0 	bl	80023f8 <BNO055_Chip_ID_Check>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 8002a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <BNO055_Read_Lia+0x22>
		return rslt;
 8002a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a48:	e0bf      	b.n	8002bca <BNO055_Read_Lia+0x1a2>
	}

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_LINEAR_ACCEL_DATA_X_LSB_ADDR, &temp);
 8002a4a:	f107 030e 	add.w	r3, r7, #14
 8002a4e:	2228      	movs	r2, #40	; 0x28
 8002a50:	2151      	movs	r1, #81	; 0x51
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f001 fe8c 	bl	8004770 <read8>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <BNO055_Read_Lia+0x42>
		return rslt;
 8002a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a68:	e0af      	b.n	8002bca <BNO055_Read_Lia+0x1a2>
	buffer[1] = temp;
 8002a6a:	7bba      	ldrb	r2, [r7, #14]
 8002a6c:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <BNO055_Read_Lia+0x1ac>)
 8002a6e:	705a      	strb	r2, [r3, #1]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_LINEAR_ACCEL_DATA_X_MSB_ADDR, &temp);
 8002a70:	f107 030e 	add.w	r3, r7, #14
 8002a74:	2229      	movs	r2, #41	; 0x29
 8002a76:	2151      	movs	r1, #81	; 0x51
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f001 fe79 	bl	8004770 <read8>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <BNO055_Read_Lia+0x68>
		return rslt;
 8002a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8e:	e09c      	b.n	8002bca <BNO055_Read_Lia+0x1a2>
	buffer[2] = temp;
 8002a90:	7bba      	ldrb	r2, [r7, #14]
 8002a92:	4b50      	ldr	r3, [pc, #320]	; (8002bd4 <BNO055_Read_Lia+0x1ac>)
 8002a94:	709a      	strb	r2, [r3, #2]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_LINEAR_ACCEL_DATA_Y_LSB_ADDR, &temp);
 8002a96:	f107 030e 	add.w	r3, r7, #14
 8002a9a:	222a      	movs	r2, #42	; 0x2a
 8002a9c:	2151      	movs	r1, #81	; 0x51
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f001 fe66 	bl	8004770 <read8>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <BNO055_Read_Lia+0x8e>
		return rslt;
 8002ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab4:	e089      	b.n	8002bca <BNO055_Read_Lia+0x1a2>
	buffer[3] = temp;
 8002ab6:	7bba      	ldrb	r2, [r7, #14]
 8002ab8:	4b46      	ldr	r3, [pc, #280]	; (8002bd4 <BNO055_Read_Lia+0x1ac>)
 8002aba:	70da      	strb	r2, [r3, #3]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_LINEAR_ACCEL_DATA_Y_MSB_ADDR, &temp);
 8002abc:	f107 030e 	add.w	r3, r7, #14
 8002ac0:	222b      	movs	r2, #43	; 0x2b
 8002ac2:	2151      	movs	r1, #81	; 0x51
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f001 fe53 	bl	8004770 <read8>
 8002aca:	4603      	mov	r3, r0
 8002acc:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <BNO055_Read_Lia+0xb4>
		return rslt;
 8002ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ada:	e076      	b.n	8002bca <BNO055_Read_Lia+0x1a2>
	buffer[4] = temp;
 8002adc:	7bba      	ldrb	r2, [r7, #14]
 8002ade:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <BNO055_Read_Lia+0x1ac>)
 8002ae0:	711a      	strb	r2, [r3, #4]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_LINEAR_ACCEL_DATA_Z_LSB_ADDR, &temp);
 8002ae2:	f107 030e 	add.w	r3, r7, #14
 8002ae6:	222c      	movs	r2, #44	; 0x2c
 8002ae8:	2151      	movs	r1, #81	; 0x51
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f001 fe40 	bl	8004770 <read8>
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <BNO055_Read_Lia+0xda>
		return rslt;
 8002afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b00:	e063      	b.n	8002bca <BNO055_Read_Lia+0x1a2>
	buffer[5] = temp;
 8002b02:	7bba      	ldrb	r2, [r7, #14]
 8002b04:	4b33      	ldr	r3, [pc, #204]	; (8002bd4 <BNO055_Read_Lia+0x1ac>)
 8002b06:	715a      	strb	r2, [r3, #5]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_LINEAR_ACCEL_DATA_Z_MSB_ADDR, &temp);
 8002b08:	f107 030e 	add.w	r3, r7, #14
 8002b0c:	222d      	movs	r2, #45	; 0x2d
 8002b0e:	2151      	movs	r1, #81	; 0x51
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f001 fe2d 	bl	8004770 <read8>
 8002b16:	4603      	mov	r3, r0
 8002b18:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <BNO055_Read_Lia+0x100>
		return rslt;
 8002b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b26:	e050      	b.n	8002bca <BNO055_Read_Lia+0x1a2>
	buffer[6] = temp;
 8002b28:	7bba      	ldrb	r2, [r7, #14]
 8002b2a:	4b2a      	ldr	r3, [pc, #168]	; (8002bd4 <BNO055_Read_Lia+0x1ac>)
 8002b2c:	719a      	strb	r2, [r3, #6]

	data_read[0] = (buffer[1]) | ((buffer[2]) << 8);
 8002b2e:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <BNO055_Read_Lia+0x1ac>)
 8002b30:	785b      	ldrb	r3, [r3, #1]
 8002b32:	b21a      	sxth	r2, r3
 8002b34:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <BNO055_Read_Lia+0x1ac>)
 8002b36:	789b      	ldrb	r3, [r3, #2]
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	b21b      	sxth	r3, r3
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	b21a      	sxth	r2, r3
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <BNO055_Read_Lia+0x1b0>)
 8002b42:	801a      	strh	r2, [r3, #0]
	data_read[1] = (buffer[3]) | ((buffer[4]) << 8);
 8002b44:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <BNO055_Read_Lia+0x1ac>)
 8002b46:	78db      	ldrb	r3, [r3, #3]
 8002b48:	b21a      	sxth	r2, r3
 8002b4a:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <BNO055_Read_Lia+0x1ac>)
 8002b4c:	791b      	ldrb	r3, [r3, #4]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	b21b      	sxth	r3, r3
 8002b52:	4313      	orrs	r3, r2
 8002b54:	b21a      	sxth	r2, r3
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <BNO055_Read_Lia+0x1b0>)
 8002b58:	805a      	strh	r2, [r3, #2]
	data_read[2] = (buffer[5]) | ((buffer[6]) << 8);
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <BNO055_Read_Lia+0x1ac>)
 8002b5c:	795b      	ldrb	r3, [r3, #5]
 8002b5e:	b21a      	sxth	r2, r3
 8002b60:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <BNO055_Read_Lia+0x1ac>)
 8002b62:	799b      	ldrb	r3, [r3, #6]
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	b21b      	sxth	r3, r3
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	b21a      	sxth	r2, r3
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <BNO055_Read_Lia+0x1b0>)
 8002b6e:	809a      	strh	r2, [r3, #4]
	liaXYZ[0] = ((float) data_read[0]) / 100.0;
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <BNO055_Read_Lia+0x1b0>)
 8002b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b7e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002bdc <BNO055_Read_Lia+0x1b4>
 8002b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	edc3 7a00 	vstr	s15, [r3]
	liaXYZ[1] = (float) data_read[1] / 100.0;
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <BNO055_Read_Lia+0x1b0>)
 8002b8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002bdc <BNO055_Read_Lia+0x1b4>
 8002ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ba6:	edc3 7a00 	vstr	s15, [r3]
	liaXYZ[2] = (float) data_read[2] / 100.0;
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <BNO055_Read_Lia+0x1b0>)
 8002bac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bb0:	ee07 3a90 	vmov	s15, r3
 8002bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	3308      	adds	r3, #8
 8002bbc:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002bdc <BNO055_Read_Lia+0x1b4>
 8002bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bc4:	edc3 7a00 	vstr	s15, [r3]

	return BNO055_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000218 	.word	0x20000218
 8002bd8:	20000208 	.word	0x20000208
 8002bdc:	42c80000 	.word	0x42c80000

08002be0 <BNO055_SetMode>:
	}

	return BNO055_E_EMPTY_FUNCTION;
}

int8_t BNO055_SetMode(I2C_HandleTypeDef *huart,bno055_opmode_t mode){
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
	int8_t rslt;
	rslt = BNO055_Chip_ID_Check(huart);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff fc03 	bl	80023f8 <BNO055_Chip_ID_Check>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 8002bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <BNO055_SetMode+0x24>
		return rslt;
 8002bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c02:	e012      	b.n	8002c2a <BNO055_SetMode+0x4a>
	}

	rslt = write8(huart, BNO055_WRITE_ADDR, BNO055_OPR_MODE_ADDR, mode);
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	223d      	movs	r2, #61	; 0x3d
 8002c08:	2150      	movs	r1, #80	; 0x50
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f001 fd8a 	bl	8004724 <write8>
 8002c10:	4603      	mov	r3, r0
 8002c12:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 8002c14:	2014      	movs	r0, #20
 8002c16:	f002 fba9 	bl	800536c <HAL_Delay>
	if(rslt == HAL_OK)
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <BNO055_SetMode+0x46>
		return BNO055_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e001      	b.n	8002c2a <BNO055_SetMode+0x4a>
	else
		return BNO055_E_SET_MODE_FAIL;
 8002c26:	f06f 0314 	mvn.w	r3, #20
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <init_imu>:
 */

#include "imu.h"


int8_t init_imu(IMU *imu,I2C_HandleTypeDef *huartI2C){
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	imu->eulerXYZ[0] = 0;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
	imu->eulerXYZ[1] = 0;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	605a      	str	r2, [r3, #4]
	imu->eulerXYZ[2] = 0;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]

	imu->quaternionWXYZ[0] = 0;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
	imu->quaternionWXYZ[1] = 0;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	611a      	str	r2, [r3, #16]
	imu->quaternionWXYZ[2] = 0;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	615a      	str	r2, [r3, #20]
	imu->quaternionWXYZ[3] = 0;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	619a      	str	r2, [r3, #24]

	imu->accelXYZ[0] = 0;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
	imu->accelXYZ[1] = 0;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	621a      	str	r2, [r3, #32]
	imu->accelXYZ[2] = 0;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

	imu->magXYZ[0] = 0;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	629a      	str	r2, [r3, #40]	; 0x28
	imu->magXYZ[1] = 0;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	62da      	str	r2, [r3, #44]	; 0x2c
	imu->magXYZ[2] = 0;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30

	imu->liaXYZ[0] = 0;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	635a      	str	r2, [r3, #52]	; 0x34
	imu->liaXYZ[1] = 0;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
	imu->liaXYZ[2] = 0;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	63da      	str	r2, [r3, #60]	; 0x3c

	imu->grvXYZ[0] = 0;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
	imu->grvXYZ[1] = 0;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
	imu->grvXYZ[2] = 0;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	649a      	str	r2, [r3, #72]	; 0x48

	imu->gyrXYZ[0] = 0;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	64da      	str	r2, [r3, #76]	; 0x4c
	imu->gyrXYZ[1] = 0;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	651a      	str	r2, [r3, #80]	; 0x50
	imu->gyrXYZ[2] = 0;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54

	imu->ypr[0] = 0;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	659a      	str	r2, [r3, #88]	; 0x58
	imu->ypr[1] = 0;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	65da      	str	r2, [r3, #92]	; 0x5c
	imu->ypr[2] = 0;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	661a      	str	r2, [r3, #96]	; 0x60

#ifdef Selected_IMU_BNO055

	rslt = BNO055_Init(huartI2C, OPERATION_MODE_NDOF, 10);
 8002d06:	220a      	movs	r2, #10
 8002d08:	210c      	movs	r1, #12
 8002d0a:	6838      	ldr	r0, [r7, #0]
 8002d0c:	f7ff fb95 	bl	800243a <BNO055_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	73fb      	strb	r3, [r7, #15]
	if(rslt != BNO055_OK){
 8002d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <init_imu+0xee>
		return rslt;
 8002d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d20:	e05c      	b.n	8002ddc <init_imu+0x1a8>
#endif

#ifdef Selected_BAR_BMP280

	//init Temp
	temp32 = 0;
 8002d22:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <init_imu+0x1b0>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
	temp = 0;
 8002d28:	4a2f      	ldr	r2, [pc, #188]	; (8002de8 <init_imu+0x1b4>)
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	f04f 0400 	mov.w	r4, #0
 8002d32:	e9c2 3400 	strd	r3, r4, [r2]

	//init Barometer
	/* Map the delay function pointer with the function responsible for implementing the delay */
	bmp.delay_ms = delay_ms;
 8002d36:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <init_imu+0x1b8>)
 8002d38:	4a2d      	ldr	r2, [pc, #180]	; (8002df0 <init_imu+0x1bc>)
 8002d3a:	60da      	str	r2, [r3, #12]

	/* Assign device I2C address based on the status of SDO pin (GND for PRIMARY(0x76) & VDD for SECONDARY(0x77)) */
	bmp.dev_id = BMP280_ADDR_R;
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <init_imu+0x1b8>)
 8002d3e:	22ed      	movs	r2, #237	; 0xed
 8002d40:	705a      	strb	r2, [r3, #1]

	/* Select the interface mode as I2C */
	bmp.intf = BMP280_I2C_INTF;
 8002d42:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <init_imu+0x1b8>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	709a      	strb	r2, [r3, #2]

	/* Map the I2C read & write function pointer with the functions responsible for I2C bus transfer */
	bmp.read = i2c_reg_read;
 8002d48:	4b28      	ldr	r3, [pc, #160]	; (8002dec <init_imu+0x1b8>)
 8002d4a:	4a2a      	ldr	r2, [pc, #168]	; (8002df4 <init_imu+0x1c0>)
 8002d4c:	605a      	str	r2, [r3, #4]
	bmp.write = i2c_reg_write;
 8002d4e:	4b27      	ldr	r3, [pc, #156]	; (8002dec <init_imu+0x1b8>)
 8002d50:	4a29      	ldr	r2, [pc, #164]	; (8002df8 <init_imu+0x1c4>)
 8002d52:	609a      	str	r2, [r3, #8]

	rslt = bmp280_init(&bmp, huartI2C);
 8002d54:	6839      	ldr	r1, [r7, #0]
 8002d56:	4825      	ldr	r0, [pc, #148]	; (8002dec <init_imu+0x1b8>)
 8002d58:	f7fe f9cc 	bl	80010f4 <bmp280_init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8002d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <init_imu+0x13a>
		return rslt;
 8002d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6c:	e036      	b.n	8002ddc <init_imu+0x1a8>
	}

	rslt = bmp280_get_config(&conf, &bmp, huartI2C);
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	491e      	ldr	r1, [pc, #120]	; (8002dec <init_imu+0x1b8>)
 8002d72:	4822      	ldr	r0, [pc, #136]	; (8002dfc <init_imu+0x1c8>)
 8002d74:	f7fe fa2a 	bl	80011cc <bmp280_get_config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8002d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <init_imu+0x156>
		return rslt;
 8002d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d88:	e028      	b.n	8002ddc <init_imu+0x1a8>
	}
	conf.filter = BMP280_FILTER_COEFF_2;
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <init_imu+0x1c8>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	70da      	strb	r2, [r3, #3]
	conf.os_temp = BMP280_OS_4X;
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <init_imu+0x1c8>)
 8002d92:	2203      	movs	r2, #3
 8002d94:	701a      	strb	r2, [r3, #0]
	/* Pressure oversampling set at 4x */
	conf.os_pres = BMP280_OS_4X;
 8002d96:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <init_imu+0x1c8>)
 8002d98:	2203      	movs	r2, #3
 8002d9a:	705a      	strb	r2, [r3, #1]

	/* Setting the output data rate as 1HZ(1000ms) */
	conf.odr = BMP280_ODR_1000_MS;
 8002d9c:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <init_imu+0x1c8>)
 8002d9e:	2205      	movs	r2, #5
 8002da0:	709a      	strb	r2, [r3, #2]

	rslt = bmp280_set_config(&conf, &bmp, huartI2C);
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	4911      	ldr	r1, [pc, #68]	; (8002dec <init_imu+0x1b8>)
 8002da6:	4815      	ldr	r0, [pc, #84]	; (8002dfc <init_imu+0x1c8>)
 8002da8:	f7fe fa66 	bl	8001278 <bmp280_set_config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8002db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <init_imu+0x18a>
		return rslt;
 8002db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dbc:	e00e      	b.n	8002ddc <init_imu+0x1a8>
	}

	/* Always set the power mode after setting the configuration */
	rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp, huartI2C);
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	490a      	ldr	r1, [pc, #40]	; (8002dec <init_imu+0x1b8>)
 8002dc2:	2003      	movs	r0, #3
 8002dc4:	f7fe fa69 	bl	800129a <bmp280_set_power_mode>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8002dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <init_imu+0x1a6>
		return rslt;
 8002dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd8:	e000      	b.n	8002ddc <init_imu+0x1a8>
	}

/* #ifdef Selected_BAR_BMP280 */
#endif

	return IMU_INIT_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd90      	pop	{r4, r7, pc}
 8002de4:	200002dc 	.word	0x200002dc
 8002de8:	200002c8 	.word	0x200002c8
 8002dec:	20000288 	.word	0x20000288
 8002df0:	08002fdd 	.word	0x08002fdd
 8002df4:	08003029 	.word	0x08003029
 8002df8:	08002ff3 	.word	0x08002ff3
 8002dfc:	20000230 	.word	0x20000230

08002e00 <read_imu>:

int8_t read_imu(IMU *imu,I2C_HandleTypeDef *huartI2C,KUSBEGI_FLAGS *kusbegi_flags){
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
	int8_t rslt;

#ifdef Selected_IMU_BNO055

	rslt = BNO055_Read_Acc(huartI2C, imu->accelXYZ);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	331c      	adds	r3, #28
 8002e10:	4619      	mov	r1, r3
 8002e12:	68b8      	ldr	r0, [r7, #8]
 8002e14:	f7ff fd2c 	bl	8002870 <BNO055_Read_Acc>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	75fb      	strb	r3, [r7, #23]
	if (rslt != BNO055_OK) {
 8002e1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <read_imu+0x30>
		kusbegi_flags->FLAG_IMU_ACC_R_OK = 0;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	705a      	strb	r2, [r3, #1]
		return rslt;
 8002e2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e2e:	e041      	b.n	8002eb4 <read_imu+0xb4>
	}
	kusbegi_flags->FLAG_IMU_ACC_R_OK = 1;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	705a      	strb	r2, [r3, #1]

	rslt = BNO055_Read_Eul(huartI2C, imu->eulerXYZ);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	68b8      	ldr	r0, [r7, #8]
 8002e3c:	f7ff fb22 	bl	8002484 <BNO055_Read_Eul>
 8002e40:	4603      	mov	r3, r0
 8002e42:	75fb      	strb	r3, [r7, #23]
	if (rslt != BNO055_OK) {
 8002e44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <read_imu+0x58>
		kusbegi_flags->FLAG_IMU_EUL_R_OK = 0;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	711a      	strb	r2, [r3, #4]
		return rslt;
 8002e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e56:	e02d      	b.n	8002eb4 <read_imu+0xb4>
	}
	kusbegi_flags->FLAG_IMU_EUL_R_OK = 1;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	711a      	strb	r2, [r3, #4]

	rslt = BNO055_Read_Qua(huartI2C, imu->quaternionWXYZ);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	330c      	adds	r3, #12
 8002e62:	4619      	mov	r1, r3
 8002e64:	68b8      	ldr	r0, [r7, #8]
 8002e66:	f7ff fbe7 	bl	8002638 <BNO055_Read_Qua>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]
	if (rslt != BNO055_OK) {
 8002e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <read_imu+0x82>
		kusbegi_flags->FLAG_IMU_QUA_R_OK = 0;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	70da      	strb	r2, [r3, #3]
		return rslt;
 8002e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e80:	e018      	b.n	8002eb4 <read_imu+0xb4>
	}
	kusbegi_flags->FLAG_IMU_QUA_R_OK = 1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	70da      	strb	r2, [r3, #3]

	rslt = BNO055_Read_Lia(huartI2C, imu->liaXYZ);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3334      	adds	r3, #52	; 0x34
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	68b8      	ldr	r0, [r7, #8]
 8002e90:	f7ff fdca 	bl	8002a28 <BNO055_Read_Lia>
 8002e94:	4603      	mov	r3, r0
 8002e96:	75fb      	strb	r3, [r7, #23]
	if (rslt != BNO055_OK) {
 8002e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <read_imu+0xac>
		kusbegi_flags->FLAG_IMU_LIA_R_OK = 0;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	709a      	strb	r2, [r3, #2]
		return rslt;
 8002ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eaa:	e003      	b.n	8002eb4 <read_imu+0xb4>
	}
	kusbegi_flags->FLAG_IMU_LIA_R_OK = 1;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	709a      	strb	r2, [r3, #2]

/* #ifdef Selected_IMU_BNO055 */
#endif

	return IMU_READ_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <read_barometer>:
}


#ifdef Selected_BAR_BMP280

int8_t read_barometer(IMU *imu,I2C_HandleTypeDef *huartI2C){
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp, huartI2C);
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	493d      	ldr	r1, [pc, #244]	; (8002fc0 <read_barometer+0x104>)
 8002eca:	483e      	ldr	r0, [pc, #248]	; (8002fc4 <read_barometer+0x108>)
 8002ecc:	f7fe fa06 	bl	80012dc <bmp280_get_uncomp_data>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8002ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <read_barometer+0x26>
		return rslt;
 8002edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee0:	e069      	b.n	8002fb6 <read_barometer+0xfa>
	}
	/* Getting the compensated pressure using 32 bit precision */
	rslt = bmp280_get_comp_pres_32bit(&pres32, ucomp_data.uncomp_press, &bmp,
 8002ee2:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <read_barometer+0x108>)
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	4a35      	ldr	r2, [pc, #212]	; (8002fc0 <read_barometer+0x104>)
 8002eea:	4837      	ldr	r0, [pc, #220]	; (8002fc8 <read_barometer+0x10c>)
 8002eec:	f7fe fab5 	bl	800145a <bmp280_get_comp_pres_32bit>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]
			huartI2C);
	if (rslt != BMP280_OK) {
 8002ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <read_barometer+0x46>
		return rslt;
 8002efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f00:	e059      	b.n	8002fb6 <read_barometer+0xfa>
	}
	/* Getting the compensated pressure using 64 bit precision */
	rslt = bmp280_get_comp_pres_64bit(&pres64, ucomp_data.uncomp_press, &bmp,
 8002f02:	4b30      	ldr	r3, [pc, #192]	; (8002fc4 <read_barometer+0x108>)
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <read_barometer+0x104>)
 8002f0a:	4830      	ldr	r0, [pc, #192]	; (8002fcc <read_barometer+0x110>)
 8002f0c:	f7fe fba0 	bl	8001650 <bmp280_get_comp_pres_64bit>
 8002f10:	4603      	mov	r3, r0
 8002f12:	73fb      	strb	r3, [r7, #15]
			huartI2C);
	if (rslt != BMP280_OK) {
 8002f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <read_barometer+0x66>
		return rslt;
 8002f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f20:	e049      	b.n	8002fb6 <read_barometer+0xfa>
	}
	/* Getting the compensated pressure as floating point value */
	rslt = bmp280_get_comp_pres_double(&pres, ucomp_data.uncomp_press, &bmp,
 8002f22:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <read_barometer+0x108>)
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	4a25      	ldr	r2, [pc, #148]	; (8002fc0 <read_barometer+0x104>)
 8002f2a:	4829      	ldr	r0, [pc, #164]	; (8002fd0 <read_barometer+0x114>)
 8002f2c:	f7fe fe80 	bl	8001c30 <bmp280_get_comp_pres_double>
 8002f30:	4603      	mov	r3, r0
 8002f32:	73fb      	strb	r3, [r7, #15]
			huartI2C);
	if (rslt != BMP280_OK) {
 8002f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <read_barometer+0x86>
		return rslt;
 8002f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f40:	e039      	b.n	8002fb6 <read_barometer+0xfa>
	}
	/* Reading the raw data from sensor */
	rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp, huartI2C);
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	491e      	ldr	r1, [pc, #120]	; (8002fc0 <read_barometer+0x104>)
 8002f46:	481f      	ldr	r0, [pc, #124]	; (8002fc4 <read_barometer+0x108>)
 8002f48:	f7fe f9c8 	bl	80012dc <bmp280_get_uncomp_data>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8002f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <read_barometer+0xa2>
		return rslt;
 8002f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5c:	e02b      	b.n	8002fb6 <read_barometer+0xfa>
	}
	/* Getting the 32 bit compensated temperature */
	rslt = bmp280_get_comp_temp_32bit(&temp32, ucomp_data.uncomp_temp, &bmp,
 8002f5e:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <read_barometer+0x108>)
 8002f60:	6819      	ldr	r1, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <read_barometer+0x104>)
 8002f66:	481b      	ldr	r0, [pc, #108]	; (8002fd4 <read_barometer+0x118>)
 8002f68:	f7fe fa0b 	bl	8001382 <bmp280_get_comp_temp_32bit>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	73fb      	strb	r3, [r7, #15]
			huartI2C);
	if (rslt != BMP280_OK) {
 8002f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <read_barometer+0xc2>
		return rslt;
 8002f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7c:	e01b      	b.n	8002fb6 <read_barometer+0xfa>
	}
	/* Getting the compensated temperature as floating point value */
	rslt = bmp280_get_comp_temp_double(&temp, ucomp_data.uncomp_temp, &bmp,
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <read_barometer+0x108>)
 8002f80:	6819      	ldr	r1, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <read_barometer+0x104>)
 8002f86:	4814      	ldr	r0, [pc, #80]	; (8002fd8 <read_barometer+0x11c>)
 8002f88:	f7fe fd76 	bl	8001a78 <bmp280_get_comp_temp_double>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	73fb      	strb	r3, [r7, #15]
			huartI2C);
	if (rslt != BMP280_OK) {
 8002f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <read_barometer+0xe2>
		return rslt;
 8002f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9c:	e00b      	b.n	8002fb6 <read_barometer+0xfa>
	}
	imu->pressure = pres64 / 256;
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <read_barometer+0x110>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	0a1a      	lsrs	r2, r3, #8
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	669a      	str	r2, [r3, #104]	; 0x68
	imu->temperature = temp;
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <read_barometer+0x11c>)
 8002faa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	return IMU_READ_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd90      	pop	{r4, r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000288 	.word	0x20000288
 8002fc4:	200002d0 	.word	0x200002d0
 8002fc8:	200002bc 	.word	0x200002bc
 8002fcc:	200002d8 	.word	0x200002d8
 8002fd0:	20000228 	.word	0x20000228
 8002fd4:	200002dc 	.word	0x200002dc
 8002fd8:	200002c8 	.word	0x200002c8

08002fdc <delay_ms>:

void delay_ms(uint32_t period_ms)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
    HAL_Delay(period_ms);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f002 f9c1 	bl	800536c <HAL_Delay>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <i2c_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_write(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length,I2C_HandleTypeDef *huartI2C)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	603a      	str	r2, [r7, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	71fb      	strb	r3, [r7, #7]
 8003000:	460b      	mov	r3, r1
 8003002:	71bb      	strb	r3, [r7, #6]
 8003004:	4613      	mov	r3, r2
 8003006:	80bb      	strh	r3, [r7, #4]
//	for(uint8_t i=0;i<length;i++){
//		bmp_i2c_buff[i+1] = reg_data[i];
//	}
//
//	HAL_I2C_Master_Transmit(huartI2C, i2c_addr, bmp_i2c_buff, (length + 1), I2C_TRANSMIT_TIMEOUT);
	rslt = write8(huartI2C,0XEC,reg_addr,*reg_data);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	79ba      	ldrb	r2, [r7, #6]
 800300e:	21ec      	movs	r1, #236	; 0xec
 8003010:	69b8      	ldr	r0, [r7, #24]
 8003012:	f001 fb87 	bl	8004724 <write8>
 8003016:	4603      	mov	r3, r0
 8003018:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800301a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <i2c_reg_read>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_read(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length,I2C_HandleTypeDef *huartI2C)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af02      	add	r7, sp, #8
 800302e:	603a      	str	r2, [r7, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
 8003036:	460b      	mov	r3, r1
 8003038:	71bb      	strb	r3, [r7, #6]
 800303a:	4613      	mov	r3, r2
 800303c:	80bb      	strh	r3, [r7, #4]
	int8_t rslt;
	bmp_i2c_buff[0] = reg_addr;
 800303e:	4a1d      	ldr	r2, [pc, #116]	; (80030b4 <i2c_reg_read+0x8c>)
 8003040:	79bb      	ldrb	r3, [r7, #6]
 8003042:	7013      	strb	r3, [r2, #0]


	rslt = HAL_I2C_Master_Transmit(huartI2C, i2c_addr, bmp_i2c_buff, 1, I2C_TRANSMIT_TIMEOUT);
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	b299      	uxth	r1, r3
 8003048:	230a      	movs	r3, #10
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2301      	movs	r3, #1
 800304e:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <i2c_reg_read+0x8c>)
 8003050:	69b8      	ldr	r0, [r7, #24]
 8003052:	f003 f921 	bl	8006298 <HAL_I2C_Master_Transmit>
 8003056:	4603      	mov	r3, r0
 8003058:	73bb      	strb	r3, [r7, #14]
	if (rslt != HAL_OK) {
 800305a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <i2c_reg_read+0x40>
		return rslt;
 8003062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003066:	e020      	b.n	80030aa <i2c_reg_read+0x82>
	}
	rslt = HAL_I2C_Master_Receive(huartI2C, i2c_addr, &bmp_i2c_buff[1], length, I2C_RECEIVE_TIMEOUT);
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	b299      	uxth	r1, r3
 800306c:	88ba      	ldrh	r2, [r7, #4]
 800306e:	230a      	movs	r3, #10
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	4613      	mov	r3, r2
 8003074:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <i2c_reg_read+0x90>)
 8003076:	69b8      	ldr	r0, [r7, #24]
 8003078:	f003 fa0c 	bl	8006494 <HAL_I2C_Master_Receive>
 800307c:	4603      	mov	r3, r0
 800307e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < length; i++) {
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	e00a      	b.n	800309c <i2c_reg_read+0x74>
		reg_data[i] = bmp_i2c_buff[i + 1];
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	6839      	ldr	r1, [r7, #0]
 800308e:	440b      	add	r3, r1
 8003090:	4908      	ldr	r1, [pc, #32]	; (80030b4 <i2c_reg_read+0x8c>)
 8003092:	5c8a      	ldrb	r2, [r1, r2]
 8003094:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < length; i++) {
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	3301      	adds	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	88ba      	ldrh	r2, [r7, #4]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d8ef      	bhi.n	8003086 <i2c_reg_read+0x5e>
	}

    return rslt;
 80030a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000238 	.word	0x20000238
 80030b8:	20000239 	.word	0x20000239

080030bc <flight_mode_update>:
 */

#include "flight_mode.h"


int8_t flight_mode_update(FLIGHT_MODE *flight_mode,OUTPUT_MIXER *output_mixer,KUSBEGI_FLAGS *kusbegi_flags){
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
	 * Then we will determine that we can still use this flight mode
	 * If we have to switch another mode we will call:
	 * flight_mode_transition
	 * After we get mode update will set up for flight task
	 */
	if ((kusbegi_flags->FLAG_RC_FAILSAFE) || (kusbegi_flags->FLAG_RC_FRAME_LOST)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	7b5b      	ldrb	r3, [r3, #13]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10b      	bne.n	80030e8 <flight_mode_update+0x2c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7adb      	ldrb	r3, [r3, #11]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <flight_mode_update+0x2c>
			|| (kusbegi_flags->FLAG_RC_CONNECTION_E)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7b1b      	ldrb	r3, [r3, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d103      	bne.n	80030e8 <flight_mode_update+0x2c>
			|| (kusbegi_flags->FLAG_IMU_READ_OK == 0)) {
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11a      	bne.n	800311e <flight_mode_update+0x62>

		if (flight_mode->failsafe_timer_active == 0) {
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	7a1b      	ldrb	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d107      	bne.n	8003100 <flight_mode_update+0x44>
			flight_mode->failsafe_timer = HAL_GetTick();
 80030f0:	f002 f930 	bl	8005354 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	605a      	str	r2, [r3, #4]
			flight_mode->failsafe_timer_active = 1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	721a      	strb	r2, [r3, #8]
		}

		if((HAL_GetTick() - flight_mode->failsafe_timer) > RC_FAILSAFE_TIME_MS){
 8003100:	f002 f928 	bl	8005354 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003110:	d905      	bls.n	800311e <flight_mode_update+0x62>
			/*
			 * We set the flag up
			 * Because new mod is Failsafe
			 * We want to start mode transition
			 */
			kusbegi_flags->FLAG_MODE_CHANGE = 1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	725a      	strb	r2, [r3, #9]
			flight_mode->mode_type = mode_failsafe;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2264      	movs	r2, #100	; 0x64
 800311c:	701a      	strb	r2, [r3, #0]
		}
	}


	if(kusbegi_flags->FLAG_MODE_CHANGE){
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7a5b      	ldrb	r3, [r3, #9]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <flight_mode_update+0x7a>
		/*
		 * Set flag down to detect next mode change
		 */
		kusbegi_flags->FLAG_MODE_CHANGE = 0;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	725a      	strb	r2, [r3, #9]
		flight_mode_transition(flight_mode, output_mixer, kusbegi_flags);
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f81b 	bl	800316c <flight_mode_transition>

	}


	rslt = flight_mode_available(flight_mode->mode_type,kusbegi_flags);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4618      	mov	r0, r3
 800313e:	f000 f832 	bl	80031a6 <flight_mode_available>
 8003142:	4603      	mov	r3, r0
 8003144:	75fb      	strb	r3, [r7, #23]
	if(rslt == FLIGHT_MODE_AVAILABLE){
 8003146:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d104      	bne.n	8003158 <flight_mode_update+0x9c>
		/*
		 * We will pass the new mode
		 * Before we return, We set last mode as new mode
		 * This means mode change is success
		 */
		flight_mode->last_mode_type = flight_mode->mode_type;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	781a      	ldrb	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	705a      	strb	r2, [r3, #1]
 8003156:	e003      	b.n	8003160 <flight_mode_update+0xa4>
		/*
		 * If we can not change mode
		 * We have to continue pass old mode
		 * Failsafe is handled above but TODO: need to handle imu err
		 */
		flight_mode->mode_type = flight_mode->last_mode_type;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	785a      	ldrb	r2, [r3, #1]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	701a      	strb	r2, [r3, #0]
	}



	return rslt;
 8003160:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <flight_mode_transition>:

int8_t flight_mode_transition(FLIGHT_MODE *flight_mode,OUTPUT_MIXER *output_mixer,KUSBEGI_FLAGS *kusbegi_flags){
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]

	if(output_mixer->RC_INPUT.rc_channels[mode].mapped_value == RC_MODE_STABILIZE){
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800317e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003182:	eef4 7a47 	vcmp.f32	s15, s14
 8003186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318a:	d104      	bne.n	8003196 <flight_mode_transition+0x2a>
		flight_mode->mode_type = mode_stabilize;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
		return FLIGHT_MODE_AVAILABLE;
 8003192:	2300      	movs	r3, #0
 8003194:	e001      	b.n	800319a <flight_mode_transition+0x2e>
	}



	return FLIGHT_MODE_E_UNKOWN_MODE;
 8003196:	f06f 031e 	mvn.w	r3, #30
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <flight_mode_available>:

int8_t flight_mode_available(MODE_TYPE mode_type,KUSBEGI_FLAGS *kusbegi_flags){
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	6039      	str	r1, [r7, #0]
 80031b0:	71fb      	strb	r3, [r7, #7]

	if(mode_type == mode_stabilize){
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <flight_mode_available+0x16>
		return FLIGHT_MODE_AVAILABLE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e001      	b.n	80031c0 <flight_mode_available+0x1a>
	}


	return FLIGHT_MODE_E_UNKOWN_MODE;
 80031bc:	f06f 031e 	mvn.w	r3, #30
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <flight_task_update>:
 * Language:  C
 */

#include "flight_task.h"

int8_t flight_task_update(FLIGHT_TASK *flight_task,FLIGHT_MODE *flight_mode,OUTPUT_MIXER *output_mixer,KUSBEGI_FLAGS *kusbegi_flags){
 80031cc:	b5b0      	push	{r4, r5, r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]


	if(flight_mode->mode_type == mode_stabilize){
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d109      	bne.n	80031f6 <flight_task_update+0x2a>

		run_task_manuel(output_mixer,kusbegi_flags,&task_yaw,&task_pitch,&task_roll,&task_altitude);
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <flight_task_update+0x6c>)
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <flight_task_update+0x70>)
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <flight_task_update+0x74>)
 80031ec:	4a15      	ldr	r2, [pc, #84]	; (8003244 <flight_task_update+0x78>)
 80031ee:	6839      	ldr	r1, [r7, #0]
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f829 	bl	8003248 <run_task_manuel>

	}

	flight_task->flight_task_setpoint.altitude = task_altitude;
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <flight_task_update+0x6c>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	61da      	str	r2, [r3, #28]
	flight_task->flight_task_setpoint.yaw = task_yaw;
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <flight_task_update+0x78>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	611a      	str	r2, [r3, #16]
	flight_task->flight_task_setpoint.pitch = task_pitch;
 8003206:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <flight_task_update+0x74>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	615a      	str	r2, [r3, #20]
	flight_task->flight_task_setpoint.roll = task_roll;
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <flight_task_update+0x70>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	619a      	str	r2, [r3, #24]


	flight_task->lastflight_task_setpoint = flight_task->flight_task_setpoint;
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f102 0420 	add.w	r4, r2, #32
 800321e:	1d1d      	adds	r5, r3, #4
 8003220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003228:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return 0;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bdb0      	pop	{r4, r5, r7, pc}
 8003236:	bf00      	nop
 8003238:	200004f4 	.word	0x200004f4
 800323c:	200004f8 	.word	0x200004f8
 8003240:	200004f0 	.word	0x200004f0
 8003244:	200004ec 	.word	0x200004ec

08003248 <run_task_manuel>:
#include "task_manuel.h"

int8_t run_task_manuel(OUTPUT_MIXER *output_mixer, KUSBEGI_FLAGS *kusbegi_flags,
		float *task_yaw, float *task_pitch, float *task_roll, float *task_altitude) {
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]

	*task_altitude = output_mixer->RC_INPUT.rc_channels[throttle].mapped_value;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	601a      	str	r2, [r3, #0]
	*task_yaw = output_mixer->RC_INPUT.rc_channels[yaw].mapped_value;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	601a      	str	r2, [r3, #0]
	*task_pitch = output_mixer->RC_INPUT.rc_channels[pitch].mapped_value;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	601a      	str	r2, [r3, #0]
	*task_roll = output_mixer->RC_INPUT.rc_channels[roll].mapped_value;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	601a      	str	r2, [r3, #0]

	return 0;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <kusbegi_init>:
 * Purpose: Autopilot
 * Language:  C
 */
#include "kusbegi_autopilot.h"

int8_t kusbegi_init(UART_HandleTypeDef* huartMsg,I2C_HandleTypeDef *huartI2C,UART_HandleTypeDef* huartRC,KUSBEGI *kusbegi){
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
	int8_t rslt;
	/* init output_mixer */
	rslt = init_output_mixer(&output_mixer, huartI2C);
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	4820      	ldr	r0, [pc, #128]	; (8003318 <kusbegi_init+0x94>)
 8003296:	f000 f9c7 	bl	8003628 <init_output_mixer>
 800329a:	4603      	mov	r3, r0
 800329c:	75bb      	strb	r3, [r7, #22]

	/* init kusbegi autopilot*/
	kusbegi->mc_arm_state = MC_DISARM;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2200      	movs	r2, #0
 80032a2:	705a      	strb	r2, [r3, #1]
	kusbegi->mc_fc_state = KUSBEGI_INIT;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	709a      	strb	r2, [r3, #2]
	kusbegi->mc_flight_mode = MC_MODE_STABILIZE;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
	kusbegi->mc_gps_available = MC_GPS_UNAVAILABLE;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2201      	movs	r2, #1
 80032b4:	711a      	strb	r2, [r3, #4]
	kusbegi->mc_kill_switch = 0;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2200      	movs	r2, #0
 80032ba:	719a      	strb	r2, [r3, #6]
	kusbegi->mc_land_state = MC_LANDED;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2200      	movs	r2, #0
 80032c0:	70da      	strb	r2, [r3, #3]

	for(uint8_t i = 0;i<4;i++){
 80032c2:	2300      	movs	r3, #0
 80032c4:	75fb      	strb	r3, [r7, #23]
 80032c6:	e008      	b.n	80032da <kusbegi_init+0x56>
		kusbegi->PWM_US_MOTOR[i] = 0;
 80032c8:	7dfa      	ldrb	r2, [r7, #23]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	3204      	adds	r2, #4
 80032ce:	2100      	movs	r1, #0
 80032d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i = 0;i<4;i++){
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	3301      	adds	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d9f3      	bls.n	80032c8 <kusbegi_init+0x44>
	}

	last_tick_l1 = 0;
 80032e0:	4b0e      	ldr	r3, [pc, #56]	; (800331c <kusbegi_init+0x98>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
	last_tick_l2 = 0;
 80032e6:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <kusbegi_init+0x9c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
	last_tick_l3 = 0;
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <kusbegi_init+0xa0>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
	last_tick_l4 = 0;
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <kusbegi_init+0xa4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
	last_tick_l5 = 0;
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <kusbegi_init+0xa8>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
	last_tick_l6 = 0;
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <kusbegi_init+0xac>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
	kusbegi_tick = 0;
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <kusbegi_init+0xb0>)
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]

	return rslt;
 800330a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000548 	.word	0x20000548
 800331c:	2000064c 	.word	0x2000064c
 8003320:	20000654 	.word	0x20000654
 8003324:	20000540 	.word	0x20000540
 8003328:	20000500 	.word	0x20000500
 800332c:	20000668 	.word	0x20000668
 8003330:	20000650 	.word	0x20000650
 8003334:	20000648 	.word	0x20000648

08003338 <kusbegi_loop>:

void kusbegi_loop(UART_HandleTypeDef* huartMsg,I2C_HandleTypeDef *huartI2C,UART_HandleTypeDef* huartRC,KUSBEGI *kusbegi){
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]

	kusbegi_tick = HAL_GetTick();
 8003346:	f002 f805 	bl	8005354 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	4b34      	ldr	r3, [pc, #208]	; (8003420 <kusbegi_loop+0xe8>)
 800334e:	601a      	str	r2, [r3, #0]

	if (kusbegi_tick - last_tick_l1 >= LOOP1DELAY_MS) {
 8003350:	4b33      	ldr	r3, [pc, #204]	; (8003420 <kusbegi_loop+0xe8>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b33      	ldr	r3, [pc, #204]	; (8003424 <kusbegi_loop+0xec>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b09      	cmp	r3, #9
 800335c:	d90c      	bls.n	8003378 <kusbegi_loop+0x40>
		loop1(huartMsg,huartI2C,huartRC,kusbegi,&kusbegi_flags);
 800335e:	4b32      	ldr	r3, [pc, #200]	; (8003428 <kusbegi_loop+0xf0>)
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f867 	bl	800343c <loop1>
		last_tick_l1 = HAL_GetTick();
 800336e:	f001 fff1 	bl	8005354 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	4b2b      	ldr	r3, [pc, #172]	; (8003424 <kusbegi_loop+0xec>)
 8003376:	601a      	str	r2, [r3, #0]
	}
	if (kusbegi_tick - last_tick_l2 >= LOOP2DELAY_MS) {
 8003378:	4b29      	ldr	r3, [pc, #164]	; (8003420 <kusbegi_loop+0xe8>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b2b      	ldr	r3, [pc, #172]	; (800342c <kusbegi_loop+0xf4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b13      	cmp	r3, #19
 8003384:	d90c      	bls.n	80033a0 <kusbegi_loop+0x68>
		loop2(huartMsg,huartI2C,huartRC,kusbegi,&kusbegi_flags);
 8003386:	4b28      	ldr	r3, [pc, #160]	; (8003428 <kusbegi_loop+0xf0>)
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f8a5 	bl	80034e0 <loop2>
		last_tick_l2 = HAL_GetTick();
 8003396:	f001 ffdd 	bl	8005354 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	4b23      	ldr	r3, [pc, #140]	; (800342c <kusbegi_loop+0xf4>)
 800339e:	601a      	str	r2, [r3, #0]
	}
	if (kusbegi_tick - last_tick_l3 >= LOOP3DELAY_MS) {
 80033a0:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <kusbegi_loop+0xe8>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b22      	ldr	r3, [pc, #136]	; (8003430 <kusbegi_loop+0xf8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b27      	cmp	r3, #39	; 0x27
 80033ac:	d90c      	bls.n	80033c8 <kusbegi_loop+0x90>
		loop3(huartMsg,huartI2C,huartRC,kusbegi,&kusbegi_flags);
 80033ae:	4b1e      	ldr	r3, [pc, #120]	; (8003428 <kusbegi_loop+0xf0>)
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f8b1 	bl	8003520 <loop3>
		last_tick_l3 = HAL_GetTick();
 80033be:	f001 ffc9 	bl	8005354 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <kusbegi_loop+0xf8>)
 80033c6:	601a      	str	r2, [r3, #0]
	}
	if (kusbegi_tick - last_tick_l4 >= LOOP4DELAY_MS) {
 80033c8:	4b15      	ldr	r3, [pc, #84]	; (8003420 <kusbegi_loop+0xe8>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <kusbegi_loop+0xfc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b63      	cmp	r3, #99	; 0x63
 80033d4:	d90c      	bls.n	80033f0 <kusbegi_loop+0xb8>
		loop4(huartMsg,huartI2C,huartRC,kusbegi,&kusbegi_flags);
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <kusbegi_loop+0xf0>)
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f8ab 	bl	800353c <loop4>
		last_tick_l4 = HAL_GetTick();
 80033e6:	f001 ffb5 	bl	8005354 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <kusbegi_loop+0xfc>)
 80033ee:	601a      	str	r2, [r3, #0]
	}
//	if (kusbegi_tick - last_tick_l5 >= LOOP5DELAY_MS) {
//		loop5(huartMsg,huartI2C,huartRC,kusbegi,&kusbegi_flags);
//		last_tick_l5 = HAL_GetTick();
//	}
	if (kusbegi_tick - last_tick_l6 >= LOOP6DELAY_MS) {
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <kusbegi_loop+0xe8>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <kusbegi_loop+0x100>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d90c      	bls.n	8003418 <kusbegi_loop+0xe0>
		loop6(huartMsg,huartI2C,huartRC,kusbegi,&kusbegi_flags);
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <kusbegi_loop+0xf0>)
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f8ff 	bl	800360c <loop6>
		last_tick_l6 = HAL_GetTick();
 800340e:	f001 ffa1 	bl	8005354 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <kusbegi_loop+0x100>)
 8003416:	601a      	str	r2, [r3, #0]
	}

}
 8003418:	bf00      	nop
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000648 	.word	0x20000648
 8003424:	2000064c 	.word	0x2000064c
 8003428:	20000658 	.word	0x20000658
 800342c:	20000654 	.word	0x20000654
 8003430:	20000540 	.word	0x20000540
 8003434:	20000500 	.word	0x20000500
 8003438:	20000650 	.word	0x20000650

0800343c <loop1>:

void loop1(UART_HandleTypeDef* huartMsg,I2C_HandleTypeDef *huartI2C,UART_HandleTypeDef* huartRC,KUSBEGI *kusbegi,KUSBEGI_FLAGS *kusbegi_flags){
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]

	if(update_imu(&output_mixer, huartI2C,kusbegi_flags) == OUTPUT_MIXER_OK){
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	4821      	ldr	r0, [pc, #132]	; (80034d4 <loop1+0x98>)
 8003450:	f000 fb80 	bl	8003b54 <update_imu>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <loop1+0x26>
		kusbegi_flags->FLAG_IMU_READ_OK = 1;
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e002      	b.n	8003468 <loop1+0x2c>
	}
	else{
		kusbegi_flags->FLAG_IMU_READ_OK = 0;
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
	}

	flight_mode_update(&flight_mode, &output_mixer, kusbegi_flags);
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	491a      	ldr	r1, [pc, #104]	; (80034d4 <loop1+0x98>)
 800346c:	481a      	ldr	r0, [pc, #104]	; (80034d8 <loop1+0x9c>)
 800346e:	f7ff fe25 	bl	80030bc <flight_mode_update>
	flight_task_update(&flight_task, &flight_mode, &output_mixer,
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <loop1+0x98>)
 8003476:	4918      	ldr	r1, [pc, #96]	; (80034d8 <loop1+0x9c>)
 8003478:	4818      	ldr	r0, [pc, #96]	; (80034dc <loop1+0xa0>)
 800347a:	f7ff fea7 	bl	80031cc <flight_task_update>
			kusbegi_flags);
	update_pid(&output_mixer, flight_task.flight_task_setpoint.yaw,
 800347e:	4b17      	ldr	r3, [pc, #92]	; (80034dc <loop1+0xa0>)
 8003480:	edd3 7a04 	vldr	s15, [r3, #16]
 8003484:	4b15      	ldr	r3, [pc, #84]	; (80034dc <loop1+0xa0>)
 8003486:	ed93 7a05 	vldr	s14, [r3, #20]
 800348a:	4b14      	ldr	r3, [pc, #80]	; (80034dc <loop1+0xa0>)
 800348c:	edd3 6a06 	vldr	s13, [r3, #24]
 8003490:	4b12      	ldr	r3, [pc, #72]	; (80034dc <loop1+0xa0>)
 8003492:	ed93 6a07 	vldr	s12, [r3, #28]
 8003496:	eef0 1a46 	vmov.f32	s3, s12
 800349a:	eeb0 1a66 	vmov.f32	s2, s13
 800349e:	eef0 0a47 	vmov.f32	s1, s14
 80034a2:	eeb0 0a67 	vmov.f32	s0, s15
 80034a6:	480b      	ldr	r0, [pc, #44]	; (80034d4 <loop1+0x98>)
 80034a8:	f000 fb32 	bl	8003b10 <update_pid>
			flight_task.flight_task_setpoint.pitch,
			flight_task.flight_task_setpoint.roll,
			flight_task.flight_task_setpoint.altitude);
	if ((kusbegi_flags->FLAG_ARM == 1) && (kusbegi_flags->KILL_S == 0)) {
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	799b      	ldrb	r3, [r3, #6]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d107      	bne.n	80034c4 <loop1+0x88>
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	79db      	ldrb	r3, [r3, #7]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d103      	bne.n	80034c4 <loop1+0x88>
		set_motor_pwm_values(&output_mixer);
 80034bc:	4805      	ldr	r0, [pc, #20]	; (80034d4 <loop1+0x98>)
 80034be:	f000 fa7d 	bl	80039bc <set_motor_pwm_values>
 80034c2:	e002      	b.n	80034ca <loop1+0x8e>
	}
	else{
		stop_motors(&output_mixer);
 80034c4:	4803      	ldr	r0, [pc, #12]	; (80034d4 <loop1+0x98>)
 80034c6:	f000 fb0c 	bl	8003ae2 <stop_motors>
	}

}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000548 	.word	0x20000548
 80034d8:	2000066c 	.word	0x2000066c
 80034dc:	20000504 	.word	0x20000504

080034e0 <loop2>:

void loop2(UART_HandleTypeDef* huartMsg,I2C_HandleTypeDef *huartI2C,UART_HandleTypeDef* huartRC,KUSBEGI *kusbegi,KUSBEGI_FLAGS *kusbegi_flags){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]

	update_rc(&output_mixer, huartRC,kusbegi_flags);
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	480a      	ldr	r0, [pc, #40]	; (800351c <loop2+0x3c>)
 80034f4:	f000 fb74 	bl	8003be0 <update_rc>

	if(update_barometer(&output_mixer, huartI2C) == OUTPUT_MIXER_OK){
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	4808      	ldr	r0, [pc, #32]	; (800351c <loop2+0x3c>)
 80034fc:	f000 fb4e 	bl	8003b9c <update_barometer>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <loop2+0x2e>
			kusbegi_flags->FLAG_BARO_R_OK = 1;
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2201      	movs	r2, #1
 800350a:	715a      	strb	r2, [r3, #5]
		}
		else{
			kusbegi_flags->FLAG_BARO_R_OK = 0;
		}
}
 800350c:	e002      	b.n	8003514 <loop2+0x34>
			kusbegi_flags->FLAG_BARO_R_OK = 0;
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	2200      	movs	r2, #0
 8003512:	715a      	strb	r2, [r3, #5]
}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20000548 	.word	0x20000548

08003520 <loop3>:

void loop3(UART_HandleTypeDef* huartMsg,I2C_HandleTypeDef *huartI2C,UART_HandleTypeDef* huartRC,KUSBEGI *kusbegi,KUSBEGI_FLAGS *kusbegi_flags){
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]

	/*
	 * TODO: LOGGER
	 */
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <loop4>:

void loop4(UART_HandleTypeDef* huartMsg,I2C_HandleTypeDef *huartI2C,UART_HandleTypeDef* huartRC,KUSBEGI *kusbegi,KUSBEGI_FLAGS *kusbegi_flags){
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
	 * TODO: SEND MSG
	 */



	sendString("Throttle: ", huartMsg, 0);
 800354a:	2200      	movs	r2, #0
 800354c:	68f9      	ldr	r1, [r7, #12]
 800354e:	4827      	ldr	r0, [pc, #156]	; (80035ec <loop4+0xb0>)
 8003550:	f001 f998 	bl	8004884 <sendString>
	sendFloat(output_mixer.RC_INPUT.rc_channels[throttle].mapped_value,huartMsg,1);
 8003554:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <loop4+0xb4>)
 8003556:	edd3 7a07 	vldr	s15, [r3, #28]
 800355a:	2101      	movs	r1, #1
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	eeb0 0a67 	vmov.f32	s0, s15
 8003562:	f001 f961 	bl	8004828 <sendFloat>
	sendString("yaw: ", huartMsg, 0);
 8003566:	2200      	movs	r2, #0
 8003568:	68f9      	ldr	r1, [r7, #12]
 800356a:	4822      	ldr	r0, [pc, #136]	; (80035f4 <loop4+0xb8>)
 800356c:	f001 f98a 	bl	8004884 <sendString>
	sendFloat(output_mixer.RC_INPUT.rc_channels[yaw].mapped_value,huartMsg,1);
 8003570:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <loop4+0xb4>)
 8003572:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003576:	2101      	movs	r1, #1
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	eeb0 0a67 	vmov.f32	s0, s15
 800357e:	f001 f953 	bl	8004828 <sendFloat>
	sendString("pitch: ", huartMsg, 0);
 8003582:	2200      	movs	r2, #0
 8003584:	68f9      	ldr	r1, [r7, #12]
 8003586:	481c      	ldr	r0, [pc, #112]	; (80035f8 <loop4+0xbc>)
 8003588:	f001 f97c 	bl	8004884 <sendString>
	sendFloat(output_mixer.RC_INPUT.rc_channels[pitch].mapped_value,huartMsg,1);
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <loop4+0xb4>)
 800358e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003592:	2101      	movs	r1, #1
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	eeb0 0a67 	vmov.f32	s0, s15
 800359a:	f001 f945 	bl	8004828 <sendFloat>
	sendString("roll: ", huartMsg, 0);
 800359e:	2200      	movs	r2, #0
 80035a0:	68f9      	ldr	r1, [r7, #12]
 80035a2:	4816      	ldr	r0, [pc, #88]	; (80035fc <loop4+0xc0>)
 80035a4:	f001 f96e 	bl	8004884 <sendString>
	sendFloat(output_mixer.RC_INPUT.rc_channels[roll].mapped_value,huartMsg,1);
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <loop4+0xb4>)
 80035aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80035ae:	2101      	movs	r1, #1
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	eeb0 0a67 	vmov.f32	s0, s15
 80035b6:	f001 f937 	bl	8004828 <sendFloat>
	sendString("ARM: ", huartMsg, 0);
 80035ba:	2200      	movs	r2, #0
 80035bc:	68f9      	ldr	r1, [r7, #12]
 80035be:	4810      	ldr	r0, [pc, #64]	; (8003600 <loop4+0xc4>)
 80035c0:	f001 f960 	bl	8004884 <sendString>
	if(output_mixer.RC_INPUT.arm_state){
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <loop4+0xb4>)
 80035c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <loop4+0x9e>
		sendString("ARMED ", huartMsg, 1);
 80035ce:	2201      	movs	r2, #1
 80035d0:	68f9      	ldr	r1, [r7, #12]
 80035d2:	480c      	ldr	r0, [pc, #48]	; (8003604 <loop4+0xc8>)
 80035d4:	f001 f956 	bl	8004884 <sendString>
	}
	else
		sendString("DISARM ", huartMsg, 1);

}
 80035d8:	e004      	b.n	80035e4 <loop4+0xa8>
		sendString("DISARM ", huartMsg, 1);
 80035da:	2201      	movs	r2, #1
 80035dc:	68f9      	ldr	r1, [r7, #12]
 80035de:	480a      	ldr	r0, [pc, #40]	; (8003608 <loop4+0xcc>)
 80035e0:	f001 f950 	bl	8004884 <sendString>
}
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	0800b19c 	.word	0x0800b19c
 80035f0:	20000548 	.word	0x20000548
 80035f4:	0800b1a8 	.word	0x0800b1a8
 80035f8:	0800b1b0 	.word	0x0800b1b0
 80035fc:	0800b1b8 	.word	0x0800b1b8
 8003600:	0800b1c0 	.word	0x0800b1c0
 8003604:	0800b1c8 	.word	0x0800b1c8
 8003608:	0800b1d0 	.word	0x0800b1d0

0800360c <loop6>:
	sendFloat(output_mixer.IMU.pressure, huartMsg, 1);
	sendString("Temperature: ", huartMsg, 0);
	sendFloat(output_mixer.IMU.temperature, huartMsg, 1);
}

void loop6(UART_HandleTypeDef* huartMsg,I2C_HandleTypeDef *huartI2C,UART_HandleTypeDef* huartRC,KUSBEGI *kusbegi,KUSBEGI_FLAGS *kusbegi_flags){
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]


}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <init_output_mixer>:
 * Language:  C
 */
#include "output_mixer.h"


int8_t init_output_mixer(OUTPUT_MIXER *output_mixer,I2C_HandleTypeDef *huartI2C){
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	//Set PID values
	pid_roll.Kp = PID_ROLL_PITCH_KP;
 8003632:	4ba9      	ldr	r3, [pc, #676]	; (80038d8 <init_output_mixer+0x2b0>)
 8003634:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003638:	601a      	str	r2, [r3, #0]
	pid_altitude.Kp = PID_ALTITUDE_KP;
 800363a:	4ba8      	ldr	r3, [pc, #672]	; (80038dc <init_output_mixer+0x2b4>)
 800363c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003640:	601a      	str	r2, [r3, #0]
	pid_pitch.Kp = PID_ROLL_PITCH_KP;
 8003642:	4ba7      	ldr	r3, [pc, #668]	; (80038e0 <init_output_mixer+0x2b8>)
 8003644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003648:	601a      	str	r2, [r3, #0]
	pid_yaw.Kp = PID_YAW_KP;
 800364a:	4ba6      	ldr	r3, [pc, #664]	; (80038e4 <init_output_mixer+0x2bc>)
 800364c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003650:	601a      	str	r2, [r3, #0]

	pid_roll.Ki = PID_ROLL_PITCH_KI;
 8003652:	4ba1      	ldr	r3, [pc, #644]	; (80038d8 <init_output_mixer+0x2b0>)
 8003654:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003658:	605a      	str	r2, [r3, #4]
	pid_altitude.Ki = PID_ALTITUDE_KI;
 800365a:	4ba0      	ldr	r3, [pc, #640]	; (80038dc <init_output_mixer+0x2b4>)
 800365c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003660:	605a      	str	r2, [r3, #4]
	pid_pitch.Ki = PID_ROLL_PITCH_KI;
 8003662:	4b9f      	ldr	r3, [pc, #636]	; (80038e0 <init_output_mixer+0x2b8>)
 8003664:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003668:	605a      	str	r2, [r3, #4]
	pid_yaw.Ki = PID_YAW_KI;
 800366a:	4b9e      	ldr	r3, [pc, #632]	; (80038e4 <init_output_mixer+0x2bc>)
 800366c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003670:	605a      	str	r2, [r3, #4]

	pid_roll.Kd = PID_ROLL_PITCH_KD;
 8003672:	4b99      	ldr	r3, [pc, #612]	; (80038d8 <init_output_mixer+0x2b0>)
 8003674:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8003678:	609a      	str	r2, [r3, #8]
	pid_altitude.Kd = PID_ALTITUDE_KD;
 800367a:	4b98      	ldr	r3, [pc, #608]	; (80038dc <init_output_mixer+0x2b4>)
 800367c:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8003680:	609a      	str	r2, [r3, #8]
	pid_pitch.Kd = PID_ROLL_PITCH_KD;
 8003682:	4b97      	ldr	r3, [pc, #604]	; (80038e0 <init_output_mixer+0x2b8>)
 8003684:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8003688:	609a      	str	r2, [r3, #8]
	pid_yaw.Kd = PID_YAW_KD;
 800368a:	4b96      	ldr	r3, [pc, #600]	; (80038e4 <init_output_mixer+0x2bc>)
 800368c:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8003690:	609a      	str	r2, [r3, #8]

	pid_roll.tau = PID_TAU;
 8003692:	4b91      	ldr	r3, [pc, #580]	; (80038d8 <init_output_mixer+0x2b0>)
 8003694:	4a94      	ldr	r2, [pc, #592]	; (80038e8 <init_output_mixer+0x2c0>)
 8003696:	60da      	str	r2, [r3, #12]
	pid_altitude.tau = PID_TAU;
 8003698:	4b90      	ldr	r3, [pc, #576]	; (80038dc <init_output_mixer+0x2b4>)
 800369a:	4a93      	ldr	r2, [pc, #588]	; (80038e8 <init_output_mixer+0x2c0>)
 800369c:	60da      	str	r2, [r3, #12]
	pid_pitch.tau = PID_TAU;
 800369e:	4b90      	ldr	r3, [pc, #576]	; (80038e0 <init_output_mixer+0x2b8>)
 80036a0:	4a91      	ldr	r2, [pc, #580]	; (80038e8 <init_output_mixer+0x2c0>)
 80036a2:	60da      	str	r2, [r3, #12]
	pid_yaw.tau = PID_TAU;
 80036a4:	4b8f      	ldr	r3, [pc, #572]	; (80038e4 <init_output_mixer+0x2bc>)
 80036a6:	4a90      	ldr	r2, [pc, #576]	; (80038e8 <init_output_mixer+0x2c0>)
 80036a8:	60da      	str	r2, [r3, #12]

	pid_roll.limMin = PID_ROLL_PITCH_LIM_MIN;
 80036aa:	4b8b      	ldr	r3, [pc, #556]	; (80038d8 <init_output_mixer+0x2b0>)
 80036ac:	4a8f      	ldr	r2, [pc, #572]	; (80038ec <init_output_mixer+0x2c4>)
 80036ae:	611a      	str	r2, [r3, #16]
	pid_altitude.limMin = PID_ALTITUDE_LIM_MIN;
 80036b0:	4b8a      	ldr	r3, [pc, #552]	; (80038dc <init_output_mixer+0x2b4>)
 80036b2:	4a8f      	ldr	r2, [pc, #572]	; (80038f0 <init_output_mixer+0x2c8>)
 80036b4:	611a      	str	r2, [r3, #16]
	pid_pitch.limMin = PID_ROLL_PITCH_LIM_MIN;
 80036b6:	4b8a      	ldr	r3, [pc, #552]	; (80038e0 <init_output_mixer+0x2b8>)
 80036b8:	4a8c      	ldr	r2, [pc, #560]	; (80038ec <init_output_mixer+0x2c4>)
 80036ba:	611a      	str	r2, [r3, #16]
	pid_yaw.limMin = PID_YAW_LIM_MIN;
 80036bc:	4b89      	ldr	r3, [pc, #548]	; (80038e4 <init_output_mixer+0x2bc>)
 80036be:	4a8c      	ldr	r2, [pc, #560]	; (80038f0 <init_output_mixer+0x2c8>)
 80036c0:	611a      	str	r2, [r3, #16]

	pid_roll.limMax = PID_ROLL_PITCH_LIM_MAX;
 80036c2:	4b85      	ldr	r3, [pc, #532]	; (80038d8 <init_output_mixer+0x2b0>)
 80036c4:	4a8b      	ldr	r2, [pc, #556]	; (80038f4 <init_output_mixer+0x2cc>)
 80036c6:	615a      	str	r2, [r3, #20]
	pid_altitude.limMax = PID_ALTITUDE_LIM_MAX;
 80036c8:	4b84      	ldr	r3, [pc, #528]	; (80038dc <init_output_mixer+0x2b4>)
 80036ca:	4a8b      	ldr	r2, [pc, #556]	; (80038f8 <init_output_mixer+0x2d0>)
 80036cc:	615a      	str	r2, [r3, #20]
	pid_pitch.limMax = PID_ROLL_PITCH_LIM_MAX;
 80036ce:	4b84      	ldr	r3, [pc, #528]	; (80038e0 <init_output_mixer+0x2b8>)
 80036d0:	4a88      	ldr	r2, [pc, #544]	; (80038f4 <init_output_mixer+0x2cc>)
 80036d2:	615a      	str	r2, [r3, #20]
	pid_yaw.limMax = PID_YAW_LIM_MAX;
 80036d4:	4b83      	ldr	r3, [pc, #524]	; (80038e4 <init_output_mixer+0x2bc>)
 80036d6:	4a88      	ldr	r2, [pc, #544]	; (80038f8 <init_output_mixer+0x2d0>)
 80036d8:	615a      	str	r2, [r3, #20]

	pid_roll.limMinInt = PID_ROLL_PITCH_LIM_MIN_INT;
 80036da:	4b7f      	ldr	r3, [pc, #508]	; (80038d8 <init_output_mixer+0x2b0>)
 80036dc:	4a87      	ldr	r2, [pc, #540]	; (80038fc <init_output_mixer+0x2d4>)
 80036de:	619a      	str	r2, [r3, #24]
	pid_altitude.limMinInt = PID_ALTITUDE_LIM_MIN_INT;
 80036e0:	4b7e      	ldr	r3, [pc, #504]	; (80038dc <init_output_mixer+0x2b4>)
 80036e2:	4a86      	ldr	r2, [pc, #536]	; (80038fc <init_output_mixer+0x2d4>)
 80036e4:	619a      	str	r2, [r3, #24]
	pid_pitch.limMinInt = PID_ROLL_PITCH_LIM_MIN_INT;
 80036e6:	4b7e      	ldr	r3, [pc, #504]	; (80038e0 <init_output_mixer+0x2b8>)
 80036e8:	4a84      	ldr	r2, [pc, #528]	; (80038fc <init_output_mixer+0x2d4>)
 80036ea:	619a      	str	r2, [r3, #24]
	pid_yaw.limMinInt = PID_YAW_LIM_MIN_INT;
 80036ec:	4b7d      	ldr	r3, [pc, #500]	; (80038e4 <init_output_mixer+0x2bc>)
 80036ee:	4a83      	ldr	r2, [pc, #524]	; (80038fc <init_output_mixer+0x2d4>)
 80036f0:	619a      	str	r2, [r3, #24]

	pid_roll.limMaxInt = PID_ROLL_PITCH_LIM_MAX_INT;
 80036f2:	4b79      	ldr	r3, [pc, #484]	; (80038d8 <init_output_mixer+0x2b0>)
 80036f4:	4a82      	ldr	r2, [pc, #520]	; (8003900 <init_output_mixer+0x2d8>)
 80036f6:	61da      	str	r2, [r3, #28]
	pid_altitude.limMaxInt = PID_ALTITUDE_LIM_MAX_INT;
 80036f8:	4b78      	ldr	r3, [pc, #480]	; (80038dc <init_output_mixer+0x2b4>)
 80036fa:	4a81      	ldr	r2, [pc, #516]	; (8003900 <init_output_mixer+0x2d8>)
 80036fc:	61da      	str	r2, [r3, #28]
	pid_pitch.limMaxInt = PID_ROLL_PITCH_LIM_MAX_INT;
 80036fe:	4b78      	ldr	r3, [pc, #480]	; (80038e0 <init_output_mixer+0x2b8>)
 8003700:	4a7f      	ldr	r2, [pc, #508]	; (8003900 <init_output_mixer+0x2d8>)
 8003702:	61da      	str	r2, [r3, #28]
	pid_yaw.limMaxInt = PID_YAW_LIM_MAX_INT;
 8003704:	4b77      	ldr	r3, [pc, #476]	; (80038e4 <init_output_mixer+0x2bc>)
 8003706:	4a7e      	ldr	r2, [pc, #504]	; (8003900 <init_output_mixer+0x2d8>)
 8003708:	61da      	str	r2, [r3, #28]

	pid_roll.T = SAMPLE_TIME_S;
 800370a:	4b73      	ldr	r3, [pc, #460]	; (80038d8 <init_output_mixer+0x2b0>)
 800370c:	4a7d      	ldr	r2, [pc, #500]	; (8003904 <init_output_mixer+0x2dc>)
 800370e:	621a      	str	r2, [r3, #32]
	pid_altitude.T = SAMPLE_TIME_S;
 8003710:	4b72      	ldr	r3, [pc, #456]	; (80038dc <init_output_mixer+0x2b4>)
 8003712:	4a7c      	ldr	r2, [pc, #496]	; (8003904 <init_output_mixer+0x2dc>)
 8003714:	621a      	str	r2, [r3, #32]
	pid_pitch.T = SAMPLE_TIME_S;
 8003716:	4b72      	ldr	r3, [pc, #456]	; (80038e0 <init_output_mixer+0x2b8>)
 8003718:	4a7a      	ldr	r2, [pc, #488]	; (8003904 <init_output_mixer+0x2dc>)
 800371a:	621a      	str	r2, [r3, #32]
	pid_yaw.T = SAMPLE_TIME_S;
 800371c:	4b71      	ldr	r3, [pc, #452]	; (80038e4 <init_output_mixer+0x2bc>)
 800371e:	4a79      	ldr	r2, [pc, #484]	; (8003904 <init_output_mixer+0x2dc>)
 8003720:	621a      	str	r2, [r3, #32]

	//Init PID
	PIDController_Init(&pid_altitude);
 8003722:	486e      	ldr	r0, [pc, #440]	; (80038dc <init_output_mixer+0x2b4>)
 8003724:	f000 fac2 	bl	8003cac <PIDController_Init>
	PIDController_Init(&pid_roll);
 8003728:	486b      	ldr	r0, [pc, #428]	; (80038d8 <init_output_mixer+0x2b0>)
 800372a:	f000 fabf 	bl	8003cac <PIDController_Init>
	PIDController_Init(&pid_pitch);
 800372e:	486c      	ldr	r0, [pc, #432]	; (80038e0 <init_output_mixer+0x2b8>)
 8003730:	f000 fabc 	bl	8003cac <PIDController_Init>
	PIDController_Init(&pid_yaw);
 8003734:	486b      	ldr	r0, [pc, #428]	; (80038e4 <init_output_mixer+0x2bc>)
 8003736:	f000 fab9 	bl	8003cac <PIDController_Init>

	//Init output_mixer
	output_mixer->PWM_US_MOTOR[0] = 0;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	801a      	strh	r2, [r3, #0]
	output_mixer->PWM_US_MOTOR[1] = 0;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	805a      	strh	r2, [r3, #2]
	output_mixer->PWM_US_MOTOR[2] = 0;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	809a      	strh	r2, [r3, #4]
	output_mixer->PWM_US_MOTOR[3] = 0;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	80da      	strh	r2, [r3, #6]

	output_mixer->PID_ALTITUDE_OUTPUT = 0;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	615a      	str	r2, [r3, #20]
	output_mixer->PID_ROLL_OUTPUT = 0;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
	output_mixer->PID_PITCH_OUTPUT = 0;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
	output_mixer->PID_YAW_OUTPUT = 0;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	611a      	str	r2, [r3, #16]

	output_mixer->IMU.eulerXYZ[0] = 0;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	output_mixer->IMU.eulerXYZ[1] = 0;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	output_mixer->IMU.eulerXYZ[2] = 0;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	output_mixer->IMU.quaternionWXYZ[0] = 0;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	output_mixer->IMU.quaternionWXYZ[1] = 0;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	output_mixer->IMU.quaternionWXYZ[2] = 0;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	output_mixer->IMU.quaternionWXYZ[3] = 0;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	output_mixer->IMU.accelXYZ[0] = 0;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	output_mixer->IMU.accelXYZ[1] = 0;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	output_mixer->IMU.accelXYZ[2] = 0;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	output_mixer->IMU.magXYZ[0] = 0;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	output_mixer->IMU.magXYZ[1] = 0;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	output_mixer->IMU.magXYZ[2] = 0;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	output_mixer->IMU.liaXYZ[0] = 0;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	output_mixer->IMU.liaXYZ[1] = 0;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	output_mixer->IMU.liaXYZ[2] = 0;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	output_mixer->IMU.grvXYZ[0] = 0;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	output_mixer->IMU.grvXYZ[1] = 0;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	output_mixer->IMU.grvXYZ[2] = 0;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	output_mixer->IMU.gyrXYZ[0] = 0;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	output_mixer->IMU.gyrXYZ[1] = 0;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	output_mixer->IMU.gyrXYZ[2] = 0;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	output_mixer->IMU.ypr[0] = 0;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	output_mixer->IMU.ypr[1] = 0;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	output_mixer->IMU.ypr[2] = 0;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	output_mixer->IMU.temperature = 0;
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	f04f 0400 	mov.w	r4, #0
 8003876:	e9c2 343e 	strd	r3, r4, [r2, #248]	; 0xf8
	output_mixer->IMU.pressure = 0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	output_mixer->RC_INPUT.rc_channels[throttle].pwm_value = 0;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	835a      	strh	r2, [r3, #26]
	output_mixer->RC_INPUT.rc_channels[yaw].pwm_value = 0;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	87da      	strh	r2, [r3, #62]	; 0x3e
	output_mixer->RC_INPUT.rc_channels[pitch].pwm_value = 0;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	865a      	strh	r2, [r3, #50]	; 0x32
	output_mixer->RC_INPUT.rc_channels[roll].pwm_value = 0;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	84da      	strh	r2, [r3, #38]	; 0x26

	//init IMU
	rslt = init_imu(&imu, huartI2C);
 800389a:	6839      	ldr	r1, [r7, #0]
 800389c:	481a      	ldr	r0, [pc, #104]	; (8003908 <init_output_mixer+0x2e0>)
 800389e:	f7ff f9c9 	bl	8002c34 <init_imu>
 80038a2:	4603      	mov	r3, r0
 80038a4:	73fb      	strb	r3, [r7, #15]
	if(rslt != IMU_INIT_OK){
 80038a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <init_output_mixer+0x28c>
		return rslt;
 80038ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b2:	e00c      	b.n	80038ce <init_output_mixer+0x2a6>
	}

	//init RC_input
	rslt = init_rc_input(&rc_input);
 80038b4:	4815      	ldr	r0, [pc, #84]	; (800390c <init_output_mixer+0x2e4>)
 80038b6:	f000 fcf1 	bl	800429c <init_rc_input>
 80038ba:	4603      	mov	r3, r0
 80038bc:	73fb      	strb	r3, [r7, #15]
	if (rslt != RC_INPUT_OK) {
 80038be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <init_output_mixer+0x2a4>
		return rslt;
 80038c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ca:	e000      	b.n	80038ce <init_output_mixer+0x2a6>
	}

	return OUTPUT_MIXER_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}
 80038d6:	bf00      	nop
 80038d8:	200002e0 	.word	0x200002e0
 80038dc:	200003c8 	.word	0x200003c8
 80038e0:	20000400 	.word	0x20000400
 80038e4:	20000390 	.word	0x20000390
 80038e8:	3ca3d70a 	.word	0x3ca3d70a
 80038ec:	c3fa0000 	.word	0xc3fa0000
 80038f0:	c1200000 	.word	0xc1200000
 80038f4:	43fa0000 	.word	0x43fa0000
 80038f8:	41200000 	.word	0x41200000
 80038fc:	c0a00000 	.word	0xc0a00000
 8003900:	40a00000 	.word	0x40a00000
 8003904:	3c23d70a 	.word	0x3c23d70a
 8003908:	20000318 	.word	0x20000318
 800390c:	20000438 	.word	0x20000438

08003910 <calculate_pid_values>:

int8_t calculate_pid_values(OUTPUT_MIXER *output_mixer,IMU *imu,float setpoint_yaw,float setpoint_pitch,float setpoint_roll,float setpoint_altitude){
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6178      	str	r0, [r7, #20]
 8003918:	6139      	str	r1, [r7, #16]
 800391a:	ed87 0a03 	vstr	s0, [r7, #12]
 800391e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003922:	ed87 1a01 	vstr	s2, [r7, #4]
 8003926:	edc7 1a00 	vstr	s3, [r7]

	output_mixer->PID_YAW_OUTPUT = PIDController_Update(&pid_yaw,setpoint_yaw,imu->ypr[0]);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003930:	eef0 0a67 	vmov.f32	s1, s15
 8003934:	ed97 0a03 	vldr	s0, [r7, #12]
 8003938:	481c      	ldr	r0, [pc, #112]	; (80039ac <calculate_pid_values+0x9c>)
 800393a:	f000 f9d5 	bl	8003ce8 <PIDController_Update>
 800393e:	eef0 7a40 	vmov.f32	s15, s0
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	edc3 7a04 	vstr	s15, [r3, #16]
	output_mixer->PID_PITCH_OUTPUT = PIDController_Update(&pid_pitch,setpoint_pitch,imu->ypr[1]);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800394e:	eef0 0a67 	vmov.f32	s1, s15
 8003952:	ed97 0a02 	vldr	s0, [r7, #8]
 8003956:	4816      	ldr	r0, [pc, #88]	; (80039b0 <calculate_pid_values+0xa0>)
 8003958:	f000 f9c6 	bl	8003ce8 <PIDController_Update>
 800395c:	eef0 7a40 	vmov.f32	s15, s0
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	edc3 7a03 	vstr	s15, [r3, #12]
	output_mixer->PID_ROLL_OUTPUT = PIDController_Update(&pid_roll,setpoint_roll,imu->ypr[2]);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800396c:	eef0 0a67 	vmov.f32	s1, s15
 8003970:	ed97 0a01 	vldr	s0, [r7, #4]
 8003974:	480f      	ldr	r0, [pc, #60]	; (80039b4 <calculate_pid_values+0xa4>)
 8003976:	f000 f9b7 	bl	8003ce8 <PIDController_Update>
 800397a:	eef0 7a40 	vmov.f32	s15, s0
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	edc3 7a02 	vstr	s15, [r3, #8]
	output_mixer->PID_ALTITUDE_OUTPUT = PIDController_Update(&pid_altitude,setpoint_altitude,imu->altitude);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800398a:	eef0 0a67 	vmov.f32	s1, s15
 800398e:	ed97 0a00 	vldr	s0, [r7]
 8003992:	4809      	ldr	r0, [pc, #36]	; (80039b8 <calculate_pid_values+0xa8>)
 8003994:	f000 f9a8 	bl	8003ce8 <PIDController_Update>
 8003998:	eef0 7a40 	vmov.f32	s15, s0
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	edc3 7a05 	vstr	s15, [r3, #20]

	return OUTPUT_MIXER_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000390 	.word	0x20000390
 80039b0:	20000400 	.word	0x20000400
 80039b4:	200002e0 	.word	0x200002e0
 80039b8:	200003c8 	.word	0x200003c8

080039bc <set_motor_pwm_values>:

int8_t set_motor_pwm_values(OUTPUT_MIXER *output_mixer){
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	 * 2		4			 [1]		[3]
	 *
	 *
	 */
	output_mixer->PWM_US_MOTOR[0] =
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	ed93 7a05 	vldr	s14, [r3, #20]
					- output_mixer->PID_ROLL_OUTPUT
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80039d0:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ output_mixer->PID_PITCH_OUTPUT
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80039da:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ output_mixer->PID_YAW_OUTPUT);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80039e4:	ee77 7a27 	vadd.f32	s15, s14, s15
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 80039e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ec:	ee17 3a90 	vmov	r3, s15
 80039f0:	b29a      	uxth	r2, r3
	output_mixer->PWM_US_MOTOR[0] =
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	801a      	strh	r2, [r3, #0]
	output_mixer->PWM_US_MOTOR[1] =
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	ed93 7a05 	vldr	s14, [r3, #20]
					+ output_mixer->PID_ROLL_OUTPUT
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a02:	ee37 7a27 	vadd.f32	s14, s14, s15
					- output_mixer->PID_PITCH_OUTPUT
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a0c:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ output_mixer->PID_YAW_OUTPUT);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a16:	ee77 7a27 	vadd.f32	s15, s14, s15
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 8003a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a1e:	ee17 3a90 	vmov	r3, s15
 8003a22:	b29a      	uxth	r2, r3
	output_mixer->PWM_US_MOTOR[1] =
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	805a      	strh	r2, [r3, #2]
	output_mixer->PWM_US_MOTOR[2] =
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	ed93 7a05 	vldr	s14, [r3, #20]
					+ output_mixer->PID_ROLL_OUTPUT
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a34:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ output_mixer->PID_PITCH_OUTPUT
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
					- output_mixer->PID_YAW_OUTPUT);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a48:	ee77 7a67 	vsub.f32	s15, s14, s15
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 8003a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a50:	ee17 3a90 	vmov	r3, s15
 8003a54:	b29a      	uxth	r2, r3
	output_mixer->PWM_US_MOTOR[2] =
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	809a      	strh	r2, [r3, #4]
	output_mixer->PWM_US_MOTOR[3] =
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	ed93 7a05 	vldr	s14, [r3, #20]
					- output_mixer->PID_ROLL_OUTPUT
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a66:	ee37 7a67 	vsub.f32	s14, s14, s15
					- output_mixer->PID_PITCH_OUTPUT
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a70:	ee37 7a67 	vsub.f32	s14, s14, s15
					- output_mixer->PID_YAW_OUTPUT);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 8003a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a82:	ee17 3a90 	vmov	r3, s15
 8003a86:	b29a      	uxth	r2, r3
	output_mixer->PWM_US_MOTOR[3] =
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	80da      	strh	r2, [r3, #6]
	/* Clamp output*/
	for (uint8_t i = 0; i < 4; i++) {
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e01d      	b.n	8003ace <set_motor_pwm_values+0x112>
		if (output_mixer->PWM_US_MOTOR[i] > OUTPUT_MIXER_MAX_PWM) {
 8003a92:	7bfa      	ldrb	r2, [r7, #15]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003a9a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003a9e:	d906      	bls.n	8003aae <set_motor_pwm_values+0xf2>
			output_mixer->PWM_US_MOTOR[i] = OUTPUT_MIXER_MAX_PWM;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003aa8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003aac:	e00c      	b.n	8003ac8 <set_motor_pwm_values+0x10c>
		} else if (output_mixer->PWM_US_MOTOR[i] < OUTPUT_MIXER_MIN_PWM) {
 8003aae:	7bfa      	ldrb	r2, [r7, #15]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003ab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aba:	d205      	bcs.n	8003ac8 <set_motor_pwm_values+0x10c>
			output_mixer->PWM_US_MOTOR[i] = OUTPUT_MIXER_MIN_PWM;
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ac4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint8_t i = 0; i < 4; i++) {
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	3301      	adds	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d9de      	bls.n	8003a92 <set_motor_pwm_values+0xd6>
		}
	}

	return OUTPUT_MIXER_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <stop_motors>:

int8_t stop_motors(OUTPUT_MIXER *output_mixer){
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]

	output_mixer->PWM_US_MOTOR[0] = 0;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	801a      	strh	r2, [r3, #0]
	output_mixer->PWM_US_MOTOR[1] = 0;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	805a      	strh	r2, [r3, #2]
	output_mixer->PWM_US_MOTOR[2] = 0;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	809a      	strh	r2, [r3, #4]
	output_mixer->PWM_US_MOTOR[3] = 0;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	80da      	strh	r2, [r3, #6]

	return 1;
 8003b02:	2301      	movs	r3, #1
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <update_pid>:

int8_t update_pid(OUTPUT_MIXER *output_mixer, float setpoint_yaw,
		float setpoint_pitch, float setpoint_roll, float setpoint_altitude) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6178      	str	r0, [r7, #20]
 8003b18:	ed87 0a04 	vstr	s0, [r7, #16]
 8003b1c:	edc7 0a03 	vstr	s1, [r7, #12]
 8003b20:	ed87 1a02 	vstr	s2, [r7, #8]
 8003b24:	edc7 1a01 	vstr	s3, [r7, #4]
	int8_t rslt;
	/* Calculate PID*/
	rslt = calculate_pid_values(output_mixer, &imu, setpoint_yaw,
 8003b28:	edd7 1a01 	vldr	s3, [r7, #4]
 8003b2c:	ed97 1a02 	vldr	s2, [r7, #8]
 8003b30:	edd7 0a03 	vldr	s1, [r7, #12]
 8003b34:	ed97 0a04 	vldr	s0, [r7, #16]
 8003b38:	4905      	ldr	r1, [pc, #20]	; (8003b50 <update_pid+0x40>)
 8003b3a:	6978      	ldr	r0, [r7, #20]
 8003b3c:	f7ff fee8 	bl	8003910 <calculate_pid_values>
 8003b40:	4603      	mov	r3, r0
 8003b42:	77fb      	strb	r3, [r7, #31]
			setpoint_pitch, setpoint_roll, setpoint_altitude);

	return rslt;
 8003b44:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000318 	.word	0x20000318

08003b54 <update_imu>:

int8_t update_imu(OUTPUT_MIXER *output_mixer, I2C_HandleTypeDef *huartI2C,
		KUSBEGI_FLAGS *kusbegi_flags) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
	int8_t rslt;

	/* Read IMU*/
	rslt = read_imu(&imu, huartI2C, kusbegi_flags);
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	480c      	ldr	r0, [pc, #48]	; (8003b98 <update_imu+0x44>)
 8003b66:	f7ff f94b 	bl	8002e00 <read_imu>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	75fb      	strb	r3, [r7, #23]
	if (rslt != IMU_READ_OK) {
 8003b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <update_imu+0x28>
		return rslt;
 8003b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b7a:	e008      	b.n	8003b8e <update_imu+0x3a>
	}
	/* Copy IMU to output_mixer struct*/
	output_mixer->IMU = imu;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <update_imu+0x44>)
 8003b80:	3388      	adds	r3, #136	; 0x88
 8003b82:	4611      	mov	r1, r2
 8003b84:	2278      	movs	r2, #120	; 0x78
 8003b86:	4618      	mov	r0, r3
 8003b88:	f005 fa9e 	bl	80090c8 <memcpy>

	return OUTPUT_MIXER_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000318 	.word	0x20000318

08003b9c <update_barometer>:

int8_t update_barometer(OUTPUT_MIXER *output_mixer, I2C_HandleTypeDef *huartI2C){
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	/* Read Barometer*/
	rslt = read_barometer(&imu,huartI2C);
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	480c      	ldr	r0, [pc, #48]	; (8003bdc <update_barometer+0x40>)
 8003baa:	f7ff f987 	bl	8002ebc <read_barometer>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	73fb      	strb	r3, [r7, #15]
	if (rslt != IMU_READ_OK) {
 8003bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <update_barometer+0x24>
		return rslt;
 8003bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bbe:	e008      	b.n	8003bd2 <update_barometer+0x36>
	}

	/* Copy IMU to output_mixer struct*/
	output_mixer->IMU = imu;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a06      	ldr	r2, [pc, #24]	; (8003bdc <update_barometer+0x40>)
 8003bc4:	3388      	adds	r3, #136	; 0x88
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	2278      	movs	r2, #120	; 0x78
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f005 fa7c 	bl	80090c8 <memcpy>

	return OUTPUT_MIXER_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000318 	.word	0x20000318

08003be0 <update_rc>:

int8_t update_rc(OUTPUT_MIXER *output_mixer, UART_HandleTypeDef *huartRC,KUSBEGI_FLAGS *kusbegi_flags) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
	int8_t rslt;
	/*Read RC*/
	rslt = update_rc_input(huartRC, &rc_input);
 8003bec:	492e      	ldr	r1, [pc, #184]	; (8003ca8 <update_rc+0xc8>)
 8003bee:	68b8      	ldr	r0, [r7, #8]
 8003bf0:	f000 f93e 	bl	8003e70 <update_rc_input>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	75fb      	strb	r3, [r7, #23]
	if (rslt != RC_INPUT_OK) {
 8003bf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <update_rc+0x26>
		return rslt;
 8003c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c04:	e04c      	b.n	8003ca0 <update_rc+0xc0>
	}

	if(rc_input.connection_error){
 8003c06:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <update_rc+0xc8>)
 8003c08:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <update_rc+0x3c>
		kusbegi_flags->FLAG_RC_CONNECTION_E = 1;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	731a      	strb	r2, [r3, #12]
		return RC_INPUT_E_CONN_LOST;
 8003c16:	f06f 0316 	mvn.w	r3, #22
 8003c1a:	e041      	b.n	8003ca0 <update_rc+0xc0>
	}

	if(rc_input.failsafe_state){
 8003c1c:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <update_rc+0xc8>)
 8003c1e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <update_rc+0x52>
		kusbegi_flags->FLAG_RC_FAILSAFE = 1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	735a      	strb	r2, [r3, #13]
		return RC_INPUT_E_FAILSAFE;
 8003c2c:	f06f 0318 	mvn.w	r3, #24
 8003c30:	e036      	b.n	8003ca0 <update_rc+0xc0>
	}

	if(rc_input.frame_lost){
 8003c32:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <update_rc+0xc8>)
 8003c34:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <update_rc+0x68>
		kusbegi_flags->FLAG_RC_FRAME_LOST = 1;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	72da      	strb	r2, [r3, #11]
		return RC_INPUT_E_FRAME_LOST;
 8003c42:	f06f 0317 	mvn.w	r3, #23
 8003c46:	e02b      	b.n	8003ca0 <update_rc+0xc0>
	}

	if(rc_input.rc_channels[kill_s].bool_value == 1){
 8003c48:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <update_rc+0xc8>)
 8003c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <update_rc+0x7e>
		kusbegi_flags->KILL_S = 1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	71da      	strb	r2, [r3, #7]
		kusbegi_flags->KILL_S_CHANGE = 1;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	721a      	strb	r2, [r3, #8]
	}

	if(output_mixer->RC_INPUT.arm_state !=rc_input.arm_state){
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 8003c64:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <update_rc+0xc8>)
 8003c66:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d002      	beq.n	8003c74 <update_rc+0x94>
		kusbegi_flags->FLAG_ARM_CHANGE = 1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	729a      	strb	r2, [r3, #10]
	}

	if ((output_mixer->RC_INPUT.rc_channels[mode].bool_value
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
			!= rc_input.rc_channels[mode].bool_value)) {
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <update_rc+0xc8>)
 8003c7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	if ((output_mixer->RC_INPUT.rc_channels[mode].bool_value
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d002      	beq.n	8003c8a <update_rc+0xaa>

		kusbegi_flags->FLAG_MODE_CHANGE = 1;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	725a      	strb	r2, [r3, #9]
	}


	/* Copy RC to output_mixer struct*/
	output_mixer->RC_INPUT = rc_input;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <update_rc+0xc8>)
 8003c8e:	3318      	adds	r3, #24
 8003c90:	4611      	mov	r1, r2
 8003c92:	2270      	movs	r2, #112	; 0x70
 8003c94:	4618      	mov	r0, r3
 8003c96:	f005 fa17 	bl	80090c8 <memcpy>





	return rc_input.rc_channels[throttle].pwm_value;
 8003c9a:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <update_rc+0xc8>)
 8003c9c:	885b      	ldrh	r3, [r3, #2]
 8003c9e:	b25b      	sxtb	r3, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20000438 	.word	0x20000438

08003cac <PIDController_Init>:
 * Language:  C
 */

#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	635a      	str	r2, [r3, #52]	; 0x34

}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cf4:	edc7 0a01 	vstr	s1, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8003cf8:	ed97 7a02 	vldr	s14, [r7, #8]
 8003cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d04:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	edd3 7a00 	vldr	s15, [r3]
 8003d0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d16:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d26:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003d2a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8003d3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d42:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003d60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d68:	dd04      	ble.n	8003d74 <PIDController_Update+0x8c>

        pid->integrator = pid->limMaxInt;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24
 8003d72:	e00e      	b.n	8003d92 <PIDController_Update+0xaa>

    } else if (pid->integrator < pid->limMinInt) {
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003d80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d88:	d503      	bpl.n	8003d92 <PIDController_Update+0xaa>

        pid->integrator = pid->limMinInt;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24

	/*
	* Derivative (band-limited differentiator)
	*/

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d98:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003da2:	edd7 6a01 	vldr	s13, [r7, #4]
 8003da6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003daa:	ee27 7a27 	vmul.f32	s14, s14, s15
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	edd3 7a03 	vldr	s15, [r3, #12]
 8003db4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	edd3 7a08 	vldr	s15, [r3, #32]
 8003dbe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8003dd0:	eef1 6a67 	vneg.f32	s13, s15
                        / (2.0f * pid->tau + pid->T);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003dda:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	edd3 7a08 	vldr	s15, [r3, #32]
 8003de4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003df8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e24:	dd04      	ble.n	8003e30 <PIDController_Update+0x148>

        pid->out = pid->limMax;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e2e:	e00e      	b.n	8003e4e <PIDController_Update+0x166>

    } else if (pid->out < pid->limMin) {
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	edd3 7a04 	vldr	s15, [r3, #16]
 8003e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e44:	d503      	bpl.n	8003e4e <PIDController_Update+0x166>

        pid->out = pid->limMin;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	635a      	str	r2, [r3, #52]	; 0x34

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
    return pid->out;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	ee07 3a90 	vmov	s15, r3

}
 8003e62:	eeb0 0a67 	vmov.f32	s0, s15
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <update_rc_input>:
#include "rc_input_mixer.h"

#ifdef RC_INPUT_IS_SBUS
#include "rc_input_sbus.h"

int8_t update_rc_input(UART_HandleTypeDef *huartRC,RC_INPUT *rc_input){
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
	if(RC_READ_SBUS(huartRC,&sbus)){
 8003e7a:	49b5      	ldr	r1, [pc, #724]	; (8004150 <update_rc_input+0x2e0>)
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fa3b 	bl	80042f8 <RC_READ_SBUS>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 81f3 	beq.w	8004270 <update_rc_input+0x400>

		/* Reading channel pwm values */
		for (uint8_t i = 0; i < RC_INPUT_MIXER_CHANNEL_CNT; i++) {
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]
 8003e8e:	e1bd      	b.n	800420c <update_rc_input+0x39c>
			rc_input->rc_channels[i].pwm_value = sbus.PWM_US_RC_CH[i];
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	49ae      	ldr	r1, [pc, #696]	; (8004150 <update_rc_input+0x2e0>)
 8003e96:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8003e9a:	6839      	ldr	r1, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	801a      	strh	r2, [r3, #0]
			rc_input->rc_channels[i].channel_name = i;
 8003eac:	7bfa      	ldrb	r2, [r7, #15]
 8003eae:	6839      	ldr	r1, [r7, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	701a      	strb	r2, [r3, #0]

			/* Now Map the values.
			 * Each channel has its own mapping or bool state.
			 */
			if (rc_input->rc_channels[i].channel_name == throttle) {
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	6839      	ldr	r1, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d120      	bne.n	8003f14 <update_rc_input+0xa4>
				rc_input->rc_channels[i].mapped_value = MAPF(
 8003ed2:	7bfa      	ldrb	r2, [r7, #15]
 8003ed4:	6839      	ldr	r1, [r7, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	8818      	ldrh	r0, [r3, #0]
 8003ee4:	7bfc      	ldrb	r4, [r7, #15]
 8003ee6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ef0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003ef4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ef8:	f000 fd29 	bl	800494e <MAPF>
 8003efc:	eef0 7a40 	vmov.f32	s15, s0
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	4623      	mov	r3, r4
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4423      	add	r3, r4
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	edc3 7a00 	vstr	s15, [r3]
 8003f12:	e178      	b.n	8004206 <update_rc_input+0x396>
						rc_input->rc_channels[i].pwm_value, 1000, 2000, 1000, 2000);
			} else if (rc_input->rc_channels[i].channel_name == yaw) {
 8003f14:	7bfa      	ldrb	r2, [r7, #15]
 8003f16:	6839      	ldr	r1, [r7, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d11f      	bne.n	8003f68 <update_rc_input+0xf8>
				rc_input->rc_channels[i].mapped_value = MAPF(
 8003f28:	7bfa      	ldrb	r2, [r7, #15]
 8003f2a:	6839      	ldr	r1, [r7, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	3302      	adds	r3, #2
 8003f38:	8818      	ldrh	r0, [r3, #0]
 8003f3a:	7bfc      	ldrb	r4, [r7, #15]
 8003f3c:	2314      	movs	r3, #20
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	f06f 0313 	mvn.w	r3, #19
 8003f44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003f48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f4c:	f000 fcff 	bl	800494e <MAPF>
 8003f50:	eef0 7a40 	vmov.f32	s15, s0
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	4623      	mov	r3, r4
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4423      	add	r3, r4
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	3304      	adds	r3, #4
 8003f62:	edc3 7a00 	vstr	s15, [r3]
 8003f66:	e14e      	b.n	8004206 <update_rc_input+0x396>
						rc_input->rc_channels[i].pwm_value, 1000, 2000,
						-RC_INPUT_MIXER_YAW_MINMAX, RC_INPUT_MIXER_YAW_MINMAX);
			} else if (rc_input->rc_channels[i].channel_name == pitch) {
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	6839      	ldr	r1, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d11f      	bne.n	8003fbc <update_rc_input+0x14c>
				rc_input->rc_channels[i].mapped_value = MAPF(
 8003f7c:	7bfa      	ldrb	r2, [r7, #15]
 8003f7e:	6839      	ldr	r1, [r7, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	3302      	adds	r3, #2
 8003f8c:	8818      	ldrh	r0, [r3, #0]
 8003f8e:	7bfc      	ldrb	r4, [r7, #15]
 8003f90:	2314      	movs	r3, #20
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	f06f 0313 	mvn.w	r3, #19
 8003f98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003f9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003fa0:	f000 fcd5 	bl	800494e <MAPF>
 8003fa4:	eef0 7a40 	vmov.f32	s15, s0
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	4623      	mov	r3, r4
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	4423      	add	r3, r4
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	edc3 7a00 	vstr	s15, [r3]
 8003fba:	e124      	b.n	8004206 <update_rc_input+0x396>
						rc_input->rc_channels[i].pwm_value, 1000, 2000,
						-RC_INPUT_MIXER_PITCH_MINMAX,
						RC_INPUT_MIXER_PITCH_MINMAX);
			} else if (rc_input->rc_channels[i].channel_name == roll) {
 8003fbc:	7bfa      	ldrb	r2, [r7, #15]
 8003fbe:	6839      	ldr	r1, [r7, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d11f      	bne.n	8004010 <update_rc_input+0x1a0>
				rc_input->rc_channels[i].mapped_value = MAPF(
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	6839      	ldr	r1, [r7, #0]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3302      	adds	r3, #2
 8003fe0:	8818      	ldrh	r0, [r3, #0]
 8003fe2:	7bfc      	ldrb	r4, [r7, #15]
 8003fe4:	233c      	movs	r3, #60	; 0x3c
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8003fec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003ff0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ff4:	f000 fcab 	bl	800494e <MAPF>
 8003ff8:	eef0 7a40 	vmov.f32	s15, s0
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	4623      	mov	r3, r4
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4423      	add	r3, r4
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	3304      	adds	r3, #4
 800400a:	edc3 7a00 	vstr	s15, [r3]
 800400e:	e0fa      	b.n	8004206 <update_rc_input+0x396>
						rc_input->rc_channels[i].pwm_value, 1000, 2000,
						-RC_INPUT_MIXER_ROLL_MINMAX,
						RC_INPUT_MIXER_ROLL_MINMAX);
			} else if (rc_input->rc_channels[i].channel_name == mode) {
 8004010:	7bfa      	ldrb	r2, [r7, #15]
 8004012:	6839      	ldr	r1, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d13a      	bne.n	800409a <update_rc_input+0x22a>
				if (rc_input->rc_channels[i].pwm_value
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	6839      	ldr	r1, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	3302      	adds	r3, #2
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	f240 5245 	movw	r2, #1349	; 0x545
 800403a:	4293      	cmp	r3, r2
 800403c:	d80a      	bhi.n	8004054 <update_rc_input+0x1e4>
						< RC_INPUT_MIXER_MODE1_TH)
					rc_input->rc_channels[i].bool_value = 1;
 800403e:	7bfa      	ldrb	r2, [r7, #15]
 8004040:	6839      	ldr	r1, [r7, #0]
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	3308      	adds	r3, #8
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	e0d8      	b.n	8004206 <update_rc_input+0x396>
				else if(rc_input->rc_channels[i].pwm_value
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	6839      	ldr	r1, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	3302      	adds	r3, #2
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800406a:	4293      	cmp	r3, r2
 800406c:	d80a      	bhi.n	8004084 <update_rc_input+0x214>
						< RC_INPUT_MIXER_MODE2_TH)
					rc_input->rc_channels[i].bool_value = 2;
 800406e:	7bfa      	ldrb	r2, [r7, #15]
 8004070:	6839      	ldr	r1, [r7, #0]
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	3308      	adds	r3, #8
 800407e:	2202      	movs	r2, #2
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	e0c0      	b.n	8004206 <update_rc_input+0x396>
				else
					rc_input->rc_channels[i].bool_value = 3;
 8004084:	7bfa      	ldrb	r2, [r7, #15]
 8004086:	6839      	ldr	r1, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	3308      	adds	r3, #8
 8004094:	2203      	movs	r2, #3
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	e0b5      	b.n	8004206 <update_rc_input+0x396>
			} else if (rc_input->rc_channels[i].channel_name == kill_s) {
 800409a:	7bfa      	ldrb	r2, [r7, #15]
 800409c:	6839      	ldr	r1, [r7, #0]
 800409e:	4613      	mov	r3, r2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b05      	cmp	r3, #5
 80040ac:	d122      	bne.n	80040f4 <update_rc_input+0x284>
				if (rc_input->rc_channels[i].pwm_value
 80040ae:	7bfa      	ldrb	r2, [r7, #15]
 80040b0:	6839      	ldr	r1, [r7, #0]
 80040b2:	4613      	mov	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	3302      	adds	r3, #2
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	f240 52db 	movw	r2, #1499	; 0x5db
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d90a      	bls.n	80040de <update_rc_input+0x26e>
						>= RC_INPUT_MIXER_SWITCH_TH)
					rc_input->rc_channels[i].bool_value = 1;
 80040c8:	7bfa      	ldrb	r2, [r7, #15]
 80040ca:	6839      	ldr	r1, [r7, #0]
 80040cc:	4613      	mov	r3, r2
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	3308      	adds	r3, #8
 80040d8:	2201      	movs	r2, #1
 80040da:	701a      	strb	r2, [r3, #0]
 80040dc:	e093      	b.n	8004206 <update_rc_input+0x396>
				else
					rc_input->rc_channels[i].bool_value = 0;
 80040de:	7bfa      	ldrb	r2, [r7, #15]
 80040e0:	6839      	ldr	r1, [r7, #0]
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	3308      	adds	r3, #8
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	e088      	b.n	8004206 <update_rc_input+0x396>
			} else if (rc_input->rc_channels[i].channel_name == rth) {
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	6839      	ldr	r1, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b06      	cmp	r3, #6
 8004106:	d125      	bne.n	8004154 <update_rc_input+0x2e4>
				if (rc_input->rc_channels[i].pwm_value
 8004108:	7bfa      	ldrb	r2, [r7, #15]
 800410a:	6839      	ldr	r1, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	3302      	adds	r3, #2
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	f240 52db 	movw	r2, #1499	; 0x5db
 800411e:	4293      	cmp	r3, r2
 8004120:	d90a      	bls.n	8004138 <update_rc_input+0x2c8>
						>= RC_INPUT_MIXER_SWITCH_TH)
					rc_input->rc_channels[i].bool_value = 1;
 8004122:	7bfa      	ldrb	r2, [r7, #15]
 8004124:	6839      	ldr	r1, [r7, #0]
 8004126:	4613      	mov	r3, r2
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	3308      	adds	r3, #8
 8004132:	2201      	movs	r2, #1
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	e066      	b.n	8004206 <update_rc_input+0x396>
				else
					rc_input->rc_channels[i].bool_value = 0;
 8004138:	7bfa      	ldrb	r2, [r7, #15]
 800413a:	6839      	ldr	r1, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	3308      	adds	r3, #8
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	e05b      	b.n	8004206 <update_rc_input+0x396>
 800414e:	bf00      	nop
 8004150:	200004a8 	.word	0x200004a8
			} else if (rc_input->rc_channels[i].channel_name == land) {
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	6839      	ldr	r1, [r7, #0]
 8004158:	4613      	mov	r3, r2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b07      	cmp	r3, #7
 8004166:	d122      	bne.n	80041ae <update_rc_input+0x33e>
				if (rc_input->rc_channels[i].pwm_value
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6839      	ldr	r1, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3302      	adds	r3, #2
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	f240 52db 	movw	r2, #1499	; 0x5db
 800417e:	4293      	cmp	r3, r2
 8004180:	d90a      	bls.n	8004198 <update_rc_input+0x328>
						>= RC_INPUT_MIXER_SWITCH_TH)
					rc_input->rc_channels[i].bool_value = 1;
 8004182:	7bfa      	ldrb	r2, [r7, #15]
 8004184:	6839      	ldr	r1, [r7, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	3308      	adds	r3, #8
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e036      	b.n	8004206 <update_rc_input+0x396>
				else
					rc_input->rc_channels[i].bool_value = 0;
 8004198:	7bfa      	ldrb	r2, [r7, #15]
 800419a:	6839      	ldr	r1, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	3308      	adds	r3, #8
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]
 80041ac:	e02b      	b.n	8004206 <update_rc_input+0x396>
			} else if (rc_input->rc_channels[i].channel_name == offboard) {
 80041ae:	7bfa      	ldrb	r2, [r7, #15]
 80041b0:	6839      	ldr	r1, [r7, #0]
 80041b2:	4613      	mov	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d121      	bne.n	8004206 <update_rc_input+0x396>
				if (rc_input->rc_channels[i].pwm_value
 80041c2:	7bfa      	ldrb	r2, [r7, #15]
 80041c4:	6839      	ldr	r1, [r7, #0]
 80041c6:	4613      	mov	r3, r2
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	3302      	adds	r3, #2
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	f240 52db 	movw	r2, #1499	; 0x5db
 80041d8:	4293      	cmp	r3, r2
 80041da:	d90a      	bls.n	80041f2 <update_rc_input+0x382>
						>= RC_INPUT_MIXER_SWITCH_TH)
					rc_input->rc_channels[i].bool_value = 1;
 80041dc:	7bfa      	ldrb	r2, [r7, #15]
 80041de:	6839      	ldr	r1, [r7, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	3308      	adds	r3, #8
 80041ec:	2201      	movs	r2, #1
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e009      	b.n	8004206 <update_rc_input+0x396>
				else
					rc_input->rc_channels[i].bool_value = 0;
 80041f2:	7bfa      	ldrb	r2, [r7, #15]
 80041f4:	6839      	ldr	r1, [r7, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	3308      	adds	r3, #8
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < RC_INPUT_MIXER_CHANNEL_CNT; i++) {
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	3301      	adds	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b08      	cmp	r3, #8
 8004210:	f67f ae3e 	bls.w	8003e90 <update_rc_input+0x20>
			}

		}

		/* Check if arm state changed*/
		if(sbus.arm){
 8004214:	4b20      	ldr	r3, [pc, #128]	; (8004298 <update_rc_input+0x428>)
 8004216:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <update_rc_input+0x3b6>
			rc_input->arm_state = 1;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		}

		/* Check if arm state changed*/
		if(sbus.disarm){
 8004226:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <update_rc_input+0x428>)
 8004228:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <update_rc_input+0x3c8>
			rc_input->arm_state = 0;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		}

		/* Check failsafe*/
		if(sbus.failsafe){
 8004238:	4b17      	ldr	r3, [pc, #92]	; (8004298 <update_rc_input+0x428>)
 800423a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800423e:	2b00      	cmp	r3, #0
 8004240:	d004      	beq.n	800424c <update_rc_input+0x3dc>
			rc_input->failsafe_state = 1;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 800424a:	e003      	b.n	8004254 <update_rc_input+0x3e4>
		}
		else{
			rc_input->failsafe_state = 0;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		}

		/* Check frame lost */
		if(sbus.frame_lost){
 8004254:	4b10      	ldr	r3, [pc, #64]	; (8004298 <update_rc_input+0x428>)
 8004256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <update_rc_input+0x3f8>
			rc_input->failsafe_state = 1;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8004266:	e003      	b.n	8004270 <update_rc_input+0x400>
		}
		else{
			rc_input->failsafe_state = 0;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d




	}
	if(sbus.error){
 8004270:	4b09      	ldr	r3, [pc, #36]	; (8004298 <update_rc_input+0x428>)
 8004272:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <update_rc_input+0x414>
		rc_input->connection_error = 1;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 8004282:	e003      	b.n	800428c <update_rc_input+0x41c>
	}
	else{
		rc_input->connection_error = 0;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	}

	return RC_INPUT_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bd90      	pop	{r4, r7, pc}
 8004296:	bf00      	nop
 8004298:	200004a8 	.word	0x200004a8

0800429c <init_rc_input>:


int8_t init_rc_input(RC_INPUT *rc_input){
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	rc_input->rc_channels[throttle].pwm_value = 0;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	805a      	strh	r2, [r3, #2]
	rc_input->rc_channels[yaw].pwm_value = 0;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	84da      	strh	r2, [r3, #38]	; 0x26
	rc_input->rc_channels[pitch].pwm_value = 0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	835a      	strh	r2, [r3, #26]
	rc_input->rc_channels[roll].pwm_value = 0;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	81da      	strh	r2, [r3, #14]
	rc_input->arm_state = 0;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	sbus.arm = 0;
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <init_rc_input+0x58>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sbus.disarm = 0;
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <init_rc_input+0x58>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	sbus.arm_cnt = 0;
 80042d4:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <init_rc_input+0x58>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	sbus.disarm_cnt = 0;
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <init_rc_input+0x58>)
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	return RC_INPUT_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	200004a8 	.word	0x200004a8

080042f8 <RC_READ_SBUS>:
 * Language:  C
 */
#include <lib/rc_input/rc_input_sbus.h>


uint8_t RC_READ_SBUS(UART_HandleTypeDef *huart,SBUS *sbus) {
 80042f8:	b590      	push	{r4, r7, lr}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]

	HAL_UART_Receive_DMA(huart, sbus->sbus_msg_bytes, 25);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	3325      	adds	r3, #37	; 0x25
 8004306:	2219      	movs	r2, #25
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f003 ff80 	bl	8008210 <HAL_UART_Receive_DMA>

	if (sbus->sbus_msg_bytes[0] != 0x0F) {
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004316:	2b0f      	cmp	r3, #15
 8004318:	d012      	beq.n	8004340 <RC_READ_SBUS+0x48>
		//Error out of sync
		sbus->error_cnt++;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004320:	3301      	adds	r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		if (sbus->error_cnt > SBUS_ERROR_CNT) {
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004330:	2b0a      	cmp	r3, #10
 8004332:	d903      	bls.n	800433c <RC_READ_SBUS+0x44>
			sbus->error = 1;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		}
		return 0;
 800433c:	2300      	movs	r3, #0
 800433e:	e1ec      	b.n	800471a <RC_READ_SBUS+0x422>
	}

	sbus->error = 0;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sbus->error_cnt = 0;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sbus->frame_lost = 0;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2020 	strb.w	r2, [r3, #32]
	sbus->failsafe = 0;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004366:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[2] << 8)) & 0x07FF;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	b21b      	sxth	r3, r3
 8004372:	4313      	orrs	r3, r2
 8004374:	b21b      	sxth	r3, r3
 8004376:	b29b      	uxth	r3, r3
 8004378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800437c:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	801a      	strh	r2, [r3, #0]
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
				| ((uint16_t) sbus->sbus_msg_bytes[3] << 5)) & 0x07FF;
 8004388:	08db      	lsrs	r3, r3, #3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	b21a      	sxth	r2, r3
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004394:	015b      	lsls	r3, r3, #5
 8004396:	b21b      	sxth	r3, r3
 8004398:	4313      	orrs	r3, r2
 800439a:	b21b      	sxth	r3, r3
 800439c:	b29b      	uxth	r3, r3
 800439e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043a2:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	805a      	strh	r2, [r3, #2]
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
				| ((uint16_t) sbus->sbus_msg_bytes[4] << 2)
 80043ae:	099b      	lsrs	r3, r3, #6
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	b21a      	sxth	r2, r3
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	b21b      	sxth	r3, r3
 80043be:	4313      	orrs	r3, r2
 80043c0:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[5] << 10)) & 0x07FF;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80043c8:	029b      	lsls	r3, r3, #10
 80043ca:	b21b      	sxth	r3, r3
 80043cc:	4313      	orrs	r3, r2
 80043ce:	b21b      	sxth	r3, r3
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d6:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	809a      	strh	r2, [r3, #4]
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
				| ((uint16_t) sbus->sbus_msg_bytes[6] << 7)) & 0x07FF;
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	b21a      	sxth	r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80043ee:	01db      	lsls	r3, r3, #7
 80043f0:	b21b      	sxth	r3, r3
 80043f2:	4313      	orrs	r3, r2
 80043f4:	b21b      	sxth	r3, r3
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043fc:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	80da      	strh	r2, [r3, #6]
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
				| ((uint16_t) sbus->sbus_msg_bytes[7] << 4)) & 0x07FF;
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	b2db      	uxtb	r3, r3
 800440c:	b21a      	sxth	r2, r3
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	b21b      	sxth	r3, r3
 8004418:	4313      	orrs	r3, r2
 800441a:	b21b      	sxth	r3, r3
 800441c:	b29b      	uxth	r3, r3
 800441e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004422:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	811a      	strh	r2, [r3, #8]
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
				| ((uint16_t) sbus->sbus_msg_bytes[8] << 1)
 800442e:	09db      	lsrs	r3, r3, #7
 8004430:	b2db      	uxtb	r3, r3
 8004432:	b21a      	sxth	r2, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	b21b      	sxth	r3, r3
 800443e:	4313      	orrs	r3, r2
 8004440:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[9] << 9)) & 0x07FF;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004448:	025b      	lsls	r3, r3, #9
 800444a:	b21b      	sxth	r3, r3
 800444c:	4313      	orrs	r3, r2
 800444e:	b21b      	sxth	r3, r3
 8004450:	b29b      	uxth	r3, r3
 8004452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004456:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	815a      	strh	r2, [r3, #10]
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
				| ((uint16_t) sbus->sbus_msg_bytes[10] << 6)) & 0x07FF;
 8004462:	089b      	lsrs	r3, r3, #2
 8004464:	b2db      	uxtb	r3, r3
 8004466:	b21a      	sxth	r2, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800446e:	019b      	lsls	r3, r3, #6
 8004470:	b21b      	sxth	r3, r3
 8004472:	4313      	orrs	r3, r2
 8004474:	b21b      	sxth	r3, r3
 8004476:	b29b      	uxth	r3, r3
 8004478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800447c:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	819a      	strh	r2, [r3, #12]
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
				| ((uint16_t) sbus->sbus_msg_bytes[11] << 3)) & 0x07FF;
 8004488:	095b      	lsrs	r3, r3, #5
 800448a:	b2db      	uxtb	r3, r3
 800448c:	b21a      	sxth	r2, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	b21b      	sxth	r3, r3
 8004498:	4313      	orrs	r3, r2
 800449a:	b21b      	sxth	r3, r3
 800449c:	b29b      	uxth	r3, r3
 800449e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044a2:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	81da      	strh	r2, [r3, #14]
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044ae:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[13] << 8)) & 0x07FF;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	b21b      	sxth	r3, r3
 80044ba:	4313      	orrs	r3, r2
 80044bc:	b21b      	sxth	r3, r3
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044c4:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	821a      	strh	r2, [r3, #16]
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
				| ((uint16_t) sbus->sbus_msg_bytes[14] << 5)) & 0x07FF;
 80044d0:	08db      	lsrs	r3, r3, #3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	b21a      	sxth	r2, r3
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80044dc:	015b      	lsls	r3, r3, #5
 80044de:	b21b      	sxth	r3, r3
 80044e0:	4313      	orrs	r3, r2
 80044e2:	b21b      	sxth	r3, r3
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ea:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	825a      	strh	r2, [r3, #18]
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
				| ((uint16_t) sbus->sbus_msg_bytes[15] << 2)
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	b21a      	sxth	r2, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	b21b      	sxth	r3, r3
 8004506:	4313      	orrs	r3, r2
 8004508:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[16] << 10)) & 0x07FF;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004510:	029b      	lsls	r3, r3, #10
 8004512:	b21b      	sxth	r3, r3
 8004514:	4313      	orrs	r3, r2
 8004516:	b21b      	sxth	r3, r3
 8004518:	b29b      	uxth	r3, r3
 800451a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800451e:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	829a      	strh	r2, [r3, #20]
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				| ((uint16_t) sbus->sbus_msg_bytes[17] << 7)) & 0x07FF;
 800452a:	085b      	lsrs	r3, r3, #1
 800452c:	b2db      	uxtb	r3, r3
 800452e:	b21a      	sxth	r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004536:	01db      	lsls	r3, r3, #7
 8004538:	b21b      	sxth	r3, r3
 800453a:	4313      	orrs	r3, r2
 800453c:	b21b      	sxth	r3, r3
 800453e:	b29b      	uxth	r3, r3
 8004540:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004544:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	82da      	strh	r2, [r3, #22]
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
				| ((uint16_t) sbus->sbus_msg_bytes[18] << 4)) & 0x07FF;
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	b2db      	uxtb	r3, r3
 8004554:	b21a      	sxth	r2, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	b21b      	sxth	r3, r3
 8004560:	4313      	orrs	r3, r2
 8004562:	b21b      	sxth	r3, r3
 8004564:	b29b      	uxth	r3, r3
 8004566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800456a:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	831a      	strh	r2, [r3, #24]
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
				| ((uint16_t) sbus->sbus_msg_bytes[19] << 1)
 8004576:	09db      	lsrs	r3, r3, #7
 8004578:	b2db      	uxtb	r3, r3
 800457a:	b21a      	sxth	r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	b21b      	sxth	r3, r3
 8004586:	4313      	orrs	r3, r2
 8004588:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[20] << 9)) & 0x07FF;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004590:	025b      	lsls	r3, r3, #9
 8004592:	b21b      	sxth	r3, r3
 8004594:	4313      	orrs	r3, r2
 8004596:	b21b      	sxth	r3, r3
 8004598:	b29b      	uxth	r3, r3
 800459a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800459e:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	835a      	strh	r2, [r3, #26]
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
				| ((uint16_t) sbus->sbus_msg_bytes[21] << 6)) & 0x07FF;
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	b21a      	sxth	r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045b6:	019b      	lsls	r3, r3, #6
 80045b8:	b21b      	sxth	r3, r3
 80045ba:	4313      	orrs	r3, r2
 80045bc:	b21b      	sxth	r3, r3
 80045be:	b29b      	uxth	r3, r3
 80045c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045c4:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	839a      	strh	r2, [r3, #28]
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
				| ((uint16_t) sbus->sbus_msg_bytes[22] << 3)) & 0x07FF;
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	b21a      	sxth	r2, r3
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	b21b      	sxth	r3, r3
 80045e0:	4313      	orrs	r3, r2
 80045e2:	b21b      	sxth	r3, r3
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ea:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	83da      	strh	r2, [r3, #30]

	for (uint8_t i = 0; i <= SBUS_MAX_CHANNEL_CNT; i++) {
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]
 80045f4:	e016      	b.n	8004624 <RC_READ_SBUS+0x32c>
		sbus->PWM_US_RC_CH[i] = MAP(sbus->PWM_US_RC_CH[i], SBUS_IN_MIN_PWM,
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80045fe:	7bfc      	ldrb	r4, [r7, #15]
 8004600:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800460a:	f240 7213 	movw	r2, #1811	; 0x713
 800460e:	21ac      	movs	r1, #172	; 0xac
 8004610:	f000 f978 	bl	8004904 <MAP>
 8004614:	4603      	mov	r3, r0
 8004616:	461a      	mov	r2, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (uint8_t i = 0; i <= SBUS_MAX_CHANNEL_CNT; i++) {
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	3301      	adds	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b06      	cmp	r3, #6
 8004628:	d9e5      	bls.n	80045f6 <RC_READ_SBUS+0x2fe>
				SBUS_IN_MAX_PWM, SBUS_OUT_MIN_PWM, SBUS_OUT_MAX_PWM);
	}

	if (sbus->sbus_msg_bytes[23] & (1 << 2)) {
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <RC_READ_SBUS+0x348>
		sbus->frame_lost = 1;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2020 	strb.w	r2, [r3, #32]
	}

	if (sbus->sbus_msg_bytes[23] & (1 << 3)) {
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <RC_READ_SBUS+0x35e>
		sbus->failsafe = 1;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

#ifdef SBUS_ARM_DISARM_STICKS
	if (sbus->PWM_US_RC_CH[SBUS_THROTTLE_CHANNEL]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	f240 4206 	movw	r2, #1030	; 0x406
 800465e:	4293      	cmp	r3, r2
 8004660:	d84a      	bhi.n	80046f8 <RC_READ_SBUS+0x400>
			<= (1000 + SBUS_ARM_DISARM_TOLARANCE)) {
		if (sbus->PWM_US_RC_CH[SBUS_YAW_CHANNEL]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	88db      	ldrh	r3, [r3, #6]
 8004666:	f240 4206 	movw	r2, #1030	; 0x406
 800466a:	4293      	cmp	r3, r2
 800466c:	d816      	bhi.n	800469c <RC_READ_SBUS+0x3a4>
				<= (1000 + SBUS_ARM_DISARM_TOLARANCE)) {
			sbus->disarm_cnt++;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004674:	3301      	adds	r3, #1
 8004676:	b2da      	uxtb	r2, r3
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			if ((sbus->disarm_cnt >= SBUS_DISARM_CNT)&&(!sbus->failsafe)) {
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004684:	2b09      	cmp	r3, #9
 8004686:	d911      	bls.n	80046ac <RC_READ_SBUS+0x3b4>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10c      	bne.n	80046ac <RC_READ_SBUS+0x3b4>
				sbus->disarm = 1;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 800469a:	e007      	b.n	80046ac <RC_READ_SBUS+0x3b4>
			}
		} else {
			sbus->disarm_cnt = 0;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			sbus->disarm = 0;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (sbus->PWM_US_RC_CH[SBUS_YAW_CHANNEL]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	88db      	ldrh	r3, [r3, #6]
 80046b0:	f240 72b1 	movw	r2, #1969	; 0x7b1
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d916      	bls.n	80046e6 <RC_READ_SBUS+0x3ee>
				>= (2000 - SBUS_ARM_DISARM_TOLARANCE)) {
			sbus->arm_cnt++;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046be:	3301      	adds	r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
			if ((sbus->arm_cnt >= SBUS_ARM_CNT)&&(!sbus->failsafe)) {
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046ce:	2b09      	cmp	r3, #9
 80046d0:	d922      	bls.n	8004718 <RC_READ_SBUS+0x420>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d11d      	bne.n	8004718 <RC_READ_SBUS+0x420>
				sbus->arm = 1;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80046e4:	e018      	b.n	8004718 <RC_READ_SBUS+0x420>
			}
		} else {
			sbus->arm_cnt = 0;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
			sbus->arm = 0;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80046f6:	e00f      	b.n	8004718 <RC_READ_SBUS+0x420>
		}

	} else {
		sbus->disarm_cnt = 0;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		sbus->arm_cnt = 0;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		sbus->arm = 0;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		sbus->disarm = 0;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
/* #ifdef SBUS_ARM_DISARM_STICKS */
#endif

	return 1;
 8004718:	2301      	movs	r3, #1
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	bd90      	pop	{r4, r7, pc}
	...

08004724 <write8>:
#include <module/i2c/i2c_read_write.h>




int8_t write8(I2C_HandleTypeDef *huart,uint8_t device,uint8_t reg,uint8_t val){
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af02      	add	r7, sp, #8
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	4608      	mov	r0, r1
 800472e:	4611      	mov	r1, r2
 8004730:	461a      	mov	r2, r3
 8004732:	4603      	mov	r3, r0
 8004734:	70fb      	strb	r3, [r7, #3]
 8004736:	460b      	mov	r3, r1
 8004738:	70bb      	strb	r3, [r7, #2]
 800473a:	4613      	mov	r3, r2
 800473c:	707b      	strb	r3, [r7, #1]
	int8_t rslt;
	buffer_i2c[0] = reg;
 800473e:	4a0b      	ldr	r2, [pc, #44]	; (800476c <write8+0x48>)
 8004740:	78bb      	ldrb	r3, [r7, #2]
 8004742:	7013      	strb	r3, [r2, #0]
	buffer_i2c[1] = val;
 8004744:	4a09      	ldr	r2, [pc, #36]	; (800476c <write8+0x48>)
 8004746:	787b      	ldrb	r3, [r7, #1]
 8004748:	7053      	strb	r3, [r2, #1]
	rslt = HAL_I2C_Master_Transmit(huart, device, buffer_i2c, 2, I2C_TRANSMIT_TIMEOUT);
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	b299      	uxth	r1, r3
 800474e:	230a      	movs	r3, #10
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	2302      	movs	r3, #2
 8004754:	4a05      	ldr	r2, [pc, #20]	; (800476c <write8+0x48>)
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f001 fd9e 	bl	8006298 <HAL_I2C_Master_Transmit>
 800475c:	4603      	mov	r3, r0
 800475e:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8004760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000214 	.word	0x20000214

08004770 <read8>:

int8_t read8(I2C_HandleTypeDef *huart,uint8_t device,uint8_t reg,uint8_t *val){
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	607b      	str	r3, [r7, #4]
 800477a:	460b      	mov	r3, r1
 800477c:	72fb      	strb	r3, [r7, #11]
 800477e:	4613      	mov	r3, r2
 8004780:	72bb      	strb	r3, [r7, #10]
	int8_t rslt;
	buffer_i2c[0] = reg;
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <read8+0x60>)
 8004784:	7abb      	ldrb	r3, [r7, #10]
 8004786:	7013      	strb	r3, [r2, #0]
	rslt = HAL_I2C_Master_Transmit(huart, device, buffer_i2c, 1, I2C_TRANSMIT_TIMEOUT);
 8004788:	7afb      	ldrb	r3, [r7, #11]
 800478a:	b299      	uxth	r1, r3
 800478c:	230a      	movs	r3, #10
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	2301      	movs	r3, #1
 8004792:	4a0f      	ldr	r2, [pc, #60]	; (80047d0 <read8+0x60>)
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f001 fd7f 	bl	8006298 <HAL_I2C_Master_Transmit>
 800479a:	4603      	mov	r3, r0
 800479c:	75fb      	strb	r3, [r7, #23]
	if(rslt == HAL_OK)
 800479e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10a      	bne.n	80047bc <read8+0x4c>
		rslt = HAL_I2C_Master_Receive(huart, device, &buffer_i2c[1], 1, I2C_RECEIVE_TIMEOUT);
 80047a6:	7afb      	ldrb	r3, [r7, #11]
 80047a8:	b299      	uxth	r1, r3
 80047aa:	230a      	movs	r3, #10
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	2301      	movs	r3, #1
 80047b0:	4a08      	ldr	r2, [pc, #32]	; (80047d4 <read8+0x64>)
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f001 fe6e 	bl	8006494 <HAL_I2C_Master_Receive>
 80047b8:	4603      	mov	r3, r0
 80047ba:	75fb      	strb	r3, [r7, #23]
	*val = buffer_i2c[1];
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <read8+0x60>)
 80047be:	785a      	ldrb	r2, [r3, #1]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	701a      	strb	r2, [r3, #0]
	return rslt;
 80047c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20000214 	.word	0x20000214
 80047d4:	20000215 	.word	0x20000215

080047d8 <sendInt>:


#include <module/send_message/sendMsg.h>


void sendInt(uint32_t myInt,UART_HandleTypeDef* huart,uint8_t newLine){
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08c      	sub	sp, #48	; 0x30
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	4613      	mov	r3, r2
 80047e4:	71fb      	strb	r3, [r7, #7]
	char sendBuffer[30]="";
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	f107 0314 	add.w	r3, r7, #20
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	605a      	str	r2, [r3, #4]
 80047f4:	609a      	str	r2, [r3, #8]
 80047f6:	60da      	str	r2, [r3, #12]
 80047f8:	611a      	str	r2, [r3, #16]
 80047fa:	615a      	str	r2, [r3, #20]
 80047fc:	831a      	strh	r2, [r3, #24]
	sprintf(sendBuffer, "%lu", myInt);
 80047fe:	f107 0310 	add.w	r3, r7, #16
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4907      	ldr	r1, [pc, #28]	; (8004824 <sendInt+0x4c>)
 8004806:	4618      	mov	r0, r3
 8004808:	f005 f8ce 	bl	80099a8 <siprintf>
	sendString(sendBuffer,huart,newLine);
 800480c:	79fa      	ldrb	r2, [r7, #7]
 800480e:	f107 0310 	add.w	r3, r7, #16
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	4618      	mov	r0, r3
 8004816:	f000 f835 	bl	8004884 <sendString>
}
 800481a:	bf00      	nop
 800481c:	3730      	adds	r7, #48	; 0x30
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	0800b218 	.word	0x0800b218

08004828 <sendFloat>:

void sendFloat(float myFloat,UART_HandleTypeDef* huart,uint8_t newLine){
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b08d      	sub	sp, #52	; 0x34
 800482c:	af00      	add	r7, sp, #0
 800482e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004832:	60b8      	str	r0, [r7, #8]
 8004834:	460b      	mov	r3, r1
 8004836:	71fb      	strb	r3, [r7, #7]
	char sendBuffer[30]="";
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	f107 0314 	add.w	r3, r7, #20
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	611a      	str	r2, [r3, #16]
 800484c:	615a      	str	r2, [r3, #20]
 800484e:	831a      	strh	r2, [r3, #24]
	sprintf(sendBuffer, "%.2f", myFloat);
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7fb fe79 	bl	8000548 <__aeabi_f2d>
 8004856:	4603      	mov	r3, r0
 8004858:	460c      	mov	r4, r1
 800485a:	f107 0010 	add.w	r0, r7, #16
 800485e:	461a      	mov	r2, r3
 8004860:	4623      	mov	r3, r4
 8004862:	4907      	ldr	r1, [pc, #28]	; (8004880 <sendFloat+0x58>)
 8004864:	f005 f8a0 	bl	80099a8 <siprintf>
	sendString(sendBuffer,huart,newLine);
 8004868:	79fa      	ldrb	r2, [r7, #7]
 800486a:	f107 0310 	add.w	r3, r7, #16
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	4618      	mov	r0, r3
 8004872:	f000 f807 	bl	8004884 <sendString>
}
 8004876:	bf00      	nop
 8004878:	3734      	adds	r7, #52	; 0x34
 800487a:	46bd      	mov	sp, r7
 800487c:	bd90      	pop	{r4, r7, pc}
 800487e:	bf00      	nop
 8004880:	0800b21c 	.word	0x0800b21c

08004884 <sendString>:

void sendString(char* myString,UART_HandleTypeDef* huart,uint8_t newLine){
 8004884:	b580      	push	{r7, lr}
 8004886:	b094      	sub	sp, #80	; 0x50
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	4613      	mov	r3, r2
 8004890:	71fb      	strb	r3, [r7, #7]
	char sendBuffer[60]="";
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	f107 0318 	add.w	r3, r7, #24
 800489a:	2238      	movs	r2, #56	; 0x38
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f004 fc1d 	bl	80090de <memset>
	strncat(sendBuffer, myString, strlen(myString));
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7fb fc93 	bl	80001d0 <strlen>
 80048aa:	4602      	mov	r2, r0
 80048ac:	f107 0314 	add.w	r3, r7, #20
 80048b0:	68f9      	ldr	r1, [r7, #12]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f005 f898 	bl	80099e8 <strncat>
	if(newLine)
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00e      	beq.n	80048dc <sendString+0x58>
		strncat(sendBuffer, "\r\n", strlen("\r\n"));
 80048be:	f107 0314 	add.w	r3, r7, #20
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fb fc84 	bl	80001d0 <strlen>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461a      	mov	r2, r3
 80048cc:	f107 0314 	add.w	r3, r7, #20
 80048d0:	4413      	add	r3, r2
 80048d2:	4a0b      	ldr	r2, [pc, #44]	; (8004900 <sendString+0x7c>)
 80048d4:	8811      	ldrh	r1, [r2, #0]
 80048d6:	7892      	ldrb	r2, [r2, #2]
 80048d8:	8019      	strh	r1, [r3, #0]
 80048da:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(huart, (uint8_t *)sendBuffer, strlen(sendBuffer), 10);
 80048dc:	f107 0314 	add.w	r3, r7, #20
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fb fc75 	bl	80001d0 <strlen>
 80048e6:	4603      	mov	r3, r0
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	f107 0114 	add.w	r1, r7, #20
 80048ee:	230a      	movs	r3, #10
 80048f0:	68b8      	ldr	r0, [r7, #8]
 80048f2:	f003 fbf4 	bl	80080de <HAL_UART_Transmit>
}
 80048f6:	bf00      	nop
 80048f8:	3750      	adds	r7, #80	; 0x50
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	0800b224 	.word	0x0800b224

08004904 <MAP>:
 * Language:  C
 */
#include "utility_math.h"

uint16_t MAP(uint16_t au32_IN, uint16_t au32_INmin, uint16_t au32_INmax,
		uint16_t au32_OUTmin, uint16_t au32_OUTmax) {
 8004904:	b490      	push	{r4, r7}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	4604      	mov	r4, r0
 800490c:	4608      	mov	r0, r1
 800490e:	4611      	mov	r1, r2
 8004910:	461a      	mov	r2, r3
 8004912:	4623      	mov	r3, r4
 8004914:	80fb      	strh	r3, [r7, #6]
 8004916:	4603      	mov	r3, r0
 8004918:	80bb      	strh	r3, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	807b      	strh	r3, [r7, #2]
 800491e:	4613      	mov	r3, r2
 8004920:	803b      	strh	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 8004922:	88fa      	ldrh	r2, [r7, #6]
 8004924:	88bb      	ldrh	r3, [r7, #4]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	8a39      	ldrh	r1, [r7, #16]
 800492a:	883a      	ldrh	r2, [r7, #0]
 800492c:	1a8a      	subs	r2, r1, r2
 800492e:	fb02 f203 	mul.w	r2, r2, r3
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 8004932:	8879      	ldrh	r1, [r7, #2]
 8004934:	88bb      	ldrh	r3, [r7, #4]
 8004936:	1acb      	subs	r3, r1, r3
 8004938:	fb92 f3f3 	sdiv	r3, r2, r3
 800493c:	b29a      	uxth	r2, r3
 800493e:	883b      	ldrh	r3, [r7, #0]
 8004940:	4413      	add	r3, r2
 8004942:	b29b      	uxth	r3, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bc90      	pop	{r4, r7}
 800494c:	4770      	bx	lr

0800494e <MAPF>:

float MAPF(uint16_t au32_IN, uint16_t au32_INmin, uint16_t au32_INmax,
		int16_t au32_OUTmin, int16_t au32_OUTmax){
 800494e:	b490      	push	{r4, r7}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	4604      	mov	r4, r0
 8004956:	4608      	mov	r0, r1
 8004958:	4611      	mov	r1, r2
 800495a:	461a      	mov	r2, r3
 800495c:	4623      	mov	r3, r4
 800495e:	80fb      	strh	r3, [r7, #6]
 8004960:	4603      	mov	r3, r0
 8004962:	80bb      	strh	r3, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	807b      	strh	r3, [r7, #2]
 8004968:	4613      	mov	r3, r2
 800496a:	803b      	strh	r3, [r7, #0]

	return (((((float)au32_IN - (float)au32_INmin) * ((float)au32_OUTmax - (float)au32_OUTmin))
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004976:	88bb      	ldrh	r3, [r7, #4]
 8004978:	ee07 3a90 	vmov	s15, r3
 800497c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004980:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004984:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004990:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800499c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80049a0:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ ((float)au32_INmax - (float)au32_INmin)) + (float)au32_OUTmin);
 80049a4:	887b      	ldrh	r3, [r7, #2]
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049ae:	88bb      	ldrh	r3, [r7, #4]
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049cc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80049d0:	eeb0 0a67 	vmov.f32	s0, s15
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc90      	pop	{r4, r7}
 80049da:	4770      	bx	lr

080049dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049e2:	f000 fc51 	bl	8005288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049e6:	f000 f83f 	bl	8004a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049ea:	f000 f9c5 	bl	8004d78 <MX_GPIO_Init>
  MX_DMA_Init();
 80049ee:	f000 f9a3 	bl	8004d38 <MX_DMA_Init>
  MX_I2C1_Init();
 80049f2:	f000 f8a3 	bl	8004b3c <MX_I2C1_Init>
  MX_TIM4_Init();
 80049f6:	f000 f8cf 	bl	8004b98 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80049fa:	f000 f947 	bl	8004c8c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80049fe:	f000 f971 	bl	8004ce4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004a02:	2100      	movs	r1, #0
 8004a04:	4813      	ldr	r0, [pc, #76]	; (8004a54 <main+0x78>)
 8004a06:	f002 ff27 	bl	8007858 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004a0a:	2104      	movs	r1, #4
 8004a0c:	4811      	ldr	r0, [pc, #68]	; (8004a54 <main+0x78>)
 8004a0e:	f002 ff23 	bl	8007858 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004a12:	2108      	movs	r1, #8
 8004a14:	480f      	ldr	r0, [pc, #60]	; (8004a54 <main+0x78>)
 8004a16:	f002 ff1f 	bl	8007858 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004a1a:	210c      	movs	r1, #12
 8004a1c:	480d      	ldr	r0, [pc, #52]	; (8004a54 <main+0x78>)
 8004a1e:	f002 ff1b 	bl	8007858 <HAL_TIM_PWM_Start>

	KUSBEGI kusbegi;

	sendString("init:", &huart2, 1);
 8004a22:	2201      	movs	r2, #1
 8004a24:	490c      	ldr	r1, [pc, #48]	; (8004a58 <main+0x7c>)
 8004a26:	480d      	ldr	r0, [pc, #52]	; (8004a5c <main+0x80>)
 8004a28:	f7ff ff2c 	bl	8004884 <sendString>
	sendInt(kusbegi_init(&huart2, &hi2c1, &huart1, &kusbegi), &huart2, 1);
 8004a2c:	463b      	mov	r3, r7
 8004a2e:	4a0c      	ldr	r2, [pc, #48]	; (8004a60 <main+0x84>)
 8004a30:	490c      	ldr	r1, [pc, #48]	; (8004a64 <main+0x88>)
 8004a32:	4809      	ldr	r0, [pc, #36]	; (8004a58 <main+0x7c>)
 8004a34:	f7fe fc26 	bl	8003284 <kusbegi_init>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	4906      	ldr	r1, [pc, #24]	; (8004a58 <main+0x7c>)
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff feca 	bl	80047d8 <sendInt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		kusbegi_loop(&huart2, &hi2c1, &huart1, &kusbegi);
 8004a44:	463b      	mov	r3, r7
 8004a46:	4a06      	ldr	r2, [pc, #24]	; (8004a60 <main+0x84>)
 8004a48:	4906      	ldr	r1, [pc, #24]	; (8004a64 <main+0x88>)
 8004a4a:	4803      	ldr	r0, [pc, #12]	; (8004a58 <main+0x7c>)
 8004a4c:	f7fe fc74 	bl	8003338 <kusbegi_loop>
 8004a50:	e7f8      	b.n	8004a44 <main+0x68>
 8004a52:	bf00      	nop
 8004a54:	20000678 	.word	0x20000678
 8004a58:	200007ac 	.word	0x200007ac
 8004a5c:	0800b228 	.word	0x0800b228
 8004a60:	2000076c 	.word	0x2000076c
 8004a64:	200006b8 	.word	0x200006b8

08004a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b094      	sub	sp, #80	; 0x50
 8004a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a6e:	f107 0320 	add.w	r3, r7, #32
 8004a72:	2230      	movs	r2, #48	; 0x30
 8004a74:	2100      	movs	r1, #0
 8004a76:	4618      	mov	r0, r3
 8004a78:	f004 fb31 	bl	80090de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a7c:	f107 030c 	add.w	r3, r7, #12
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	605a      	str	r2, [r3, #4]
 8004a86:	609a      	str	r2, [r3, #8]
 8004a88:	60da      	str	r2, [r3, #12]
 8004a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	4b28      	ldr	r3, [pc, #160]	; (8004b34 <SystemClock_Config+0xcc>)
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	4a27      	ldr	r2, [pc, #156]	; (8004b34 <SystemClock_Config+0xcc>)
 8004a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a9c:	4b25      	ldr	r3, [pc, #148]	; (8004b34 <SystemClock_Config+0xcc>)
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	607b      	str	r3, [r7, #4]
 8004aac:	4b22      	ldr	r3, [pc, #136]	; (8004b38 <SystemClock_Config+0xd0>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a21      	ldr	r2, [pc, #132]	; (8004b38 <SystemClock_Config+0xd0>)
 8004ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b1f      	ldr	r3, [pc, #124]	; (8004b38 <SystemClock_Config+0xd0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac0:	607b      	str	r3, [r7, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ad2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004ad8:	2304      	movs	r3, #4
 8004ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004adc:	23a8      	movs	r3, #168	; 0xa8
 8004ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ae8:	f107 0320 	add.w	r3, r7, #32
 8004aec:	4618      	mov	r0, r3
 8004aee:	f002 fa25 	bl	8006f3c <HAL_RCC_OscConfig>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004af8:	f000 f982 	bl	8004e00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004afc:	230f      	movs	r3, #15
 8004afe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b00:	2302      	movs	r3, #2
 8004b02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004b08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004b14:	f107 030c 	add.w	r3, r7, #12
 8004b18:	2105      	movs	r1, #5
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f002 fc7e 	bl	800741c <HAL_RCC_ClockConfig>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004b26:	f000 f96b 	bl	8004e00 <Error_Handler>
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	3750      	adds	r7, #80	; 0x50
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40023800 	.word	0x40023800
 8004b38:	40007000 	.word	0x40007000

08004b3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004b40:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <MX_I2C1_Init+0x50>)
 8004b42:	4a13      	ldr	r2, [pc, #76]	; (8004b90 <MX_I2C1_Init+0x54>)
 8004b44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004b46:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <MX_I2C1_Init+0x50>)
 8004b48:	4a12      	ldr	r2, [pc, #72]	; (8004b94 <MX_I2C1_Init+0x58>)
 8004b4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <MX_I2C1_Init+0x50>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004b52:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <MX_I2C1_Init+0x50>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <MX_I2C1_Init+0x50>)
 8004b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <MX_I2C1_Init+0x50>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <MX_I2C1_Init+0x50>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <MX_I2C1_Init+0x50>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <MX_I2C1_Init+0x50>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b78:	4804      	ldr	r0, [pc, #16]	; (8004b8c <MX_I2C1_Init+0x50>)
 8004b7a:	f001 fa55 	bl	8006028 <HAL_I2C_Init>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004b84:	f000 f93c 	bl	8004e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004b88:	bf00      	nop
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	200006b8 	.word	0x200006b8
 8004b90:	40005400 	.word	0x40005400
 8004b94:	000186a0 	.word	0x000186a0

08004b98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b9e:	f107 0320 	add.w	r3, r7, #32
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ba8:	1d3b      	adds	r3, r7, #4
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	605a      	str	r2, [r3, #4]
 8004bb0:	609a      	str	r2, [r3, #8]
 8004bb2:	60da      	str	r2, [r3, #12]
 8004bb4:	611a      	str	r2, [r3, #16]
 8004bb6:	615a      	str	r2, [r3, #20]
 8004bb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004bba:	4b32      	ldr	r3, [pc, #200]	; (8004c84 <MX_TIM4_Init+0xec>)
 8004bbc:	4a32      	ldr	r2, [pc, #200]	; (8004c88 <MX_TIM4_Init+0xf0>)
 8004bbe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8004bc0:	4b30      	ldr	r3, [pc, #192]	; (8004c84 <MX_TIM4_Init+0xec>)
 8004bc2:	2253      	movs	r2, #83	; 0x53
 8004bc4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc6:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <MX_TIM4_Init+0xec>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8004bcc:	4b2d      	ldr	r3, [pc, #180]	; (8004c84 <MX_TIM4_Init+0xec>)
 8004bce:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004bd2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bd4:	4b2b      	ldr	r3, [pc, #172]	; (8004c84 <MX_TIM4_Init+0xec>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bda:	4b2a      	ldr	r3, [pc, #168]	; (8004c84 <MX_TIM4_Init+0xec>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004be0:	4828      	ldr	r0, [pc, #160]	; (8004c84 <MX_TIM4_Init+0xec>)
 8004be2:	f002 fe0d 	bl	8007800 <HAL_TIM_PWM_Init>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004bec:	f000 f908 	bl	8004e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004bf8:	f107 0320 	add.w	r3, r7, #32
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4821      	ldr	r0, [pc, #132]	; (8004c84 <MX_TIM4_Init+0xec>)
 8004c00:	f003 f9a4 	bl	8007f4c <HAL_TIMEx_MasterConfigSynchronization>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004c0a:	f000 f8f9 	bl	8004e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c0e:	2360      	movs	r3, #96	; 0x60
 8004c10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	2200      	movs	r2, #0
 8004c22:	4619      	mov	r1, r3
 8004c24:	4817      	ldr	r0, [pc, #92]	; (8004c84 <MX_TIM4_Init+0xec>)
 8004c26:	f002 fe55 	bl	80078d4 <HAL_TIM_PWM_ConfigChannel>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004c30:	f000 f8e6 	bl	8004e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c34:	1d3b      	adds	r3, r7, #4
 8004c36:	2204      	movs	r2, #4
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4812      	ldr	r0, [pc, #72]	; (8004c84 <MX_TIM4_Init+0xec>)
 8004c3c:	f002 fe4a 	bl	80078d4 <HAL_TIM_PWM_ConfigChannel>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004c46:	f000 f8db 	bl	8004e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	4619      	mov	r1, r3
 8004c50:	480c      	ldr	r0, [pc, #48]	; (8004c84 <MX_TIM4_Init+0xec>)
 8004c52:	f002 fe3f 	bl	80078d4 <HAL_TIM_PWM_ConfigChannel>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8004c5c:	f000 f8d0 	bl	8004e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c60:	1d3b      	adds	r3, r7, #4
 8004c62:	220c      	movs	r2, #12
 8004c64:	4619      	mov	r1, r3
 8004c66:	4807      	ldr	r0, [pc, #28]	; (8004c84 <MX_TIM4_Init+0xec>)
 8004c68:	f002 fe34 	bl	80078d4 <HAL_TIM_PWM_ConfigChannel>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8004c72:	f000 f8c5 	bl	8004e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004c76:	4803      	ldr	r0, [pc, #12]	; (8004c84 <MX_TIM4_Init+0xec>)
 8004c78:	f000 f95c 	bl	8004f34 <HAL_TIM_MspPostInit>

}
 8004c7c:	bf00      	nop
 8004c7e:	3728      	adds	r7, #40	; 0x28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20000678 	.word	0x20000678
 8004c88:	40000800 	.word	0x40000800

08004c8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c90:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004c92:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <MX_USART1_UART_Init+0x50>)
 8004c94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004c98:	4a11      	ldr	r2, [pc, #68]	; (8004ce0 <MX_USART1_UART_Init+0x54>)
 8004c9a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c9c:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8004ca2:	4b0d      	ldr	r3, [pc, #52]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004ca4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ca8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004caa:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004cb2:	220c      	movs	r2, #12
 8004cb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004cc2:	4805      	ldr	r0, [pc, #20]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004cc4:	f003 f9be 	bl	8008044 <HAL_UART_Init>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004cce:	f000 f897 	bl	8004e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004cd2:	bf00      	nop
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	2000076c 	.word	0x2000076c
 8004cdc:	40011000 	.word	0x40011000
 8004ce0:	000186a0 	.word	0x000186a0

08004ce4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ce8:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <MX_USART2_UART_Init+0x4c>)
 8004cea:	4a12      	ldr	r2, [pc, #72]	; (8004d34 <MX_USART2_UART_Init+0x50>)
 8004cec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004cee:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <MX_USART2_UART_Init+0x4c>)
 8004cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004cf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004cf6:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <MX_USART2_UART_Init+0x4c>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <MX_USART2_UART_Init+0x4c>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d02:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <MX_USART2_UART_Init+0x4c>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d08:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <MX_USART2_UART_Init+0x4c>)
 8004d0a:	220c      	movs	r2, #12
 8004d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d0e:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <MX_USART2_UART_Init+0x4c>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d14:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <MX_USART2_UART_Init+0x4c>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d1a:	4805      	ldr	r0, [pc, #20]	; (8004d30 <MX_USART2_UART_Init+0x4c>)
 8004d1c:	f003 f992 	bl	8008044 <HAL_UART_Init>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004d26:	f000 f86b 	bl	8004e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d2a:	bf00      	nop
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	200007ac 	.word	0x200007ac
 8004d34:	40004400 	.word	0x40004400

08004d38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	607b      	str	r3, [r7, #4]
 8004d42:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <MX_DMA_Init+0x3c>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	4a0b      	ldr	r2, [pc, #44]	; (8004d74 <MX_DMA_Init+0x3c>)
 8004d48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d4e:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <MX_DMA_Init+0x3c>)
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	203a      	movs	r0, #58	; 0x3a
 8004d60:	f000 fc01 	bl	8005566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004d64:	203a      	movs	r0, #58	; 0x3a
 8004d66:	f000 fc1a 	bl	800559e <HAL_NVIC_EnableIRQ>

}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800

08004d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <MX_GPIO_Init+0x84>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	4a1d      	ldr	r2, [pc, #116]	; (8004dfc <MX_GPIO_Init+0x84>)
 8004d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <MX_GPIO_Init+0x84>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	4b17      	ldr	r3, [pc, #92]	; (8004dfc <MX_GPIO_Init+0x84>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	4a16      	ldr	r2, [pc, #88]	; (8004dfc <MX_GPIO_Init+0x84>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	6313      	str	r3, [r2, #48]	; 0x30
 8004daa:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <MX_GPIO_Init+0x84>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	607b      	str	r3, [r7, #4]
 8004dba:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <MX_GPIO_Init+0x84>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	4a0f      	ldr	r2, [pc, #60]	; (8004dfc <MX_GPIO_Init+0x84>)
 8004dc0:	f043 0308 	orr.w	r3, r3, #8
 8004dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <MX_GPIO_Init+0x84>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <MX_GPIO_Init+0x84>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	4a08      	ldr	r2, [pc, #32]	; (8004dfc <MX_GPIO_Init+0x84>)
 8004ddc:	f043 0302 	orr.w	r3, r3, #2
 8004de0:	6313      	str	r3, [r2, #48]	; 0x30
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <MX_GPIO_Init+0x84>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]

}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40023800 	.word	0x40023800

08004e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e16:	2300      	movs	r3, #0
 8004e18:	607b      	str	r3, [r7, #4]
 8004e1a:	4b10      	ldr	r3, [pc, #64]	; (8004e5c <HAL_MspInit+0x4c>)
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1e:	4a0f      	ldr	r2, [pc, #60]	; (8004e5c <HAL_MspInit+0x4c>)
 8004e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e24:	6453      	str	r3, [r2, #68]	; 0x44
 8004e26:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <HAL_MspInit+0x4c>)
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e2e:	607b      	str	r3, [r7, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <HAL_MspInit+0x4c>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	4a08      	ldr	r2, [pc, #32]	; (8004e5c <HAL_MspInit+0x4c>)
 8004e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e40:	6413      	str	r3, [r2, #64]	; 0x40
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_MspInit+0x4c>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800

08004e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08a      	sub	sp, #40	; 0x28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e68:	f107 0314 	add.w	r3, r7, #20
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	605a      	str	r2, [r3, #4]
 8004e72:	609a      	str	r2, [r3, #8]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a19      	ldr	r2, [pc, #100]	; (8004ee4 <HAL_I2C_MspInit+0x84>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d12b      	bne.n	8004eda <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <HAL_I2C_MspInit+0x88>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	4a17      	ldr	r2, [pc, #92]	; (8004ee8 <HAL_I2C_MspInit+0x88>)
 8004e8c:	f043 0302 	orr.w	r3, r3, #2
 8004e90:	6313      	str	r3, [r2, #48]	; 0x30
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <HAL_I2C_MspInit+0x88>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e9e:	23c0      	movs	r3, #192	; 0xc0
 8004ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ea2:	2312      	movs	r3, #18
 8004ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004eae:	2304      	movs	r3, #4
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb2:	f107 0314 	add.w	r3, r7, #20
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	480c      	ldr	r0, [pc, #48]	; (8004eec <HAL_I2C_MspInit+0x8c>)
 8004eba:	f000 ff1b 	bl	8005cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <HAL_I2C_MspInit+0x88>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	4a08      	ldr	r2, [pc, #32]	; (8004ee8 <HAL_I2C_MspInit+0x88>)
 8004ec8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <HAL_I2C_MspInit+0x88>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004eda:	bf00      	nop
 8004edc:	3728      	adds	r7, #40	; 0x28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40005400 	.word	0x40005400
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	40020400 	.word	0x40020400

08004ef0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a0b      	ldr	r2, [pc, #44]	; (8004f2c <HAL_TIM_PWM_MspInit+0x3c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d10d      	bne.n	8004f1e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <HAL_TIM_PWM_MspInit+0x40>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <HAL_TIM_PWM_MspInit+0x40>)
 8004f0c:	f043 0304 	orr.w	r3, r3, #4
 8004f10:	6413      	str	r3, [r2, #64]	; 0x40
 8004f12:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <HAL_TIM_PWM_MspInit+0x40>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40000800 	.word	0x40000800
 8004f30:	40023800 	.word	0x40023800

08004f34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f3c:	f107 030c 	add.w	r3, r7, #12
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	605a      	str	r2, [r3, #4]
 8004f46:	609a      	str	r2, [r3, #8]
 8004f48:	60da      	str	r2, [r3, #12]
 8004f4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a12      	ldr	r2, [pc, #72]	; (8004f9c <HAL_TIM_MspPostInit+0x68>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d11e      	bne.n	8004f94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <HAL_TIM_MspPostInit+0x6c>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	4a10      	ldr	r2, [pc, #64]	; (8004fa0 <HAL_TIM_MspPostInit+0x6c>)
 8004f60:	f043 0308 	orr.w	r3, r3, #8
 8004f64:	6313      	str	r3, [r2, #48]	; 0x30
 8004f66:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <HAL_TIM_MspPostInit+0x6c>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004f72:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004f76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004f84:	2302      	movs	r3, #2
 8004f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f88:	f107 030c 	add.w	r3, r7, #12
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4805      	ldr	r0, [pc, #20]	; (8004fa4 <HAL_TIM_MspPostInit+0x70>)
 8004f90:	f000 feb0 	bl	8005cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004f94:	bf00      	nop
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40000800 	.word	0x40000800
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40020c00 	.word	0x40020c00

08004fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	; 0x30
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb0:	f107 031c 	add.w	r3, r7, #28
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a4e      	ldr	r2, [pc, #312]	; (8005100 <HAL_UART_MspInit+0x158>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d15c      	bne.n	8005084 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61bb      	str	r3, [r7, #24]
 8004fce:	4b4d      	ldr	r3, [pc, #308]	; (8005104 <HAL_UART_MspInit+0x15c>)
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	4a4c      	ldr	r2, [pc, #304]	; (8005104 <HAL_UART_MspInit+0x15c>)
 8004fd4:	f043 0310 	orr.w	r3, r3, #16
 8004fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8004fda:	4b4a      	ldr	r3, [pc, #296]	; (8005104 <HAL_UART_MspInit+0x15c>)
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	4b46      	ldr	r3, [pc, #280]	; (8005104 <HAL_UART_MspInit+0x15c>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	4a45      	ldr	r2, [pc, #276]	; (8005104 <HAL_UART_MspInit+0x15c>)
 8004ff0:	f043 0301 	orr.w	r3, r3, #1
 8004ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff6:	4b43      	ldr	r3, [pc, #268]	; (8005104 <HAL_UART_MspInit+0x15c>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005002:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005008:	2302      	movs	r3, #2
 800500a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500c:	2300      	movs	r3, #0
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005010:	2303      	movs	r3, #3
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005014:	2307      	movs	r3, #7
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005018:	f107 031c 	add.w	r3, r7, #28
 800501c:	4619      	mov	r1, r3
 800501e:	483a      	ldr	r0, [pc, #232]	; (8005108 <HAL_UART_MspInit+0x160>)
 8005020:	f000 fe68 	bl	8005cf4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005024:	4b39      	ldr	r3, [pc, #228]	; (800510c <HAL_UART_MspInit+0x164>)
 8005026:	4a3a      	ldr	r2, [pc, #232]	; (8005110 <HAL_UART_MspInit+0x168>)
 8005028:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800502a:	4b38      	ldr	r3, [pc, #224]	; (800510c <HAL_UART_MspInit+0x164>)
 800502c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005030:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005032:	4b36      	ldr	r3, [pc, #216]	; (800510c <HAL_UART_MspInit+0x164>)
 8005034:	2200      	movs	r2, #0
 8005036:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005038:	4b34      	ldr	r3, [pc, #208]	; (800510c <HAL_UART_MspInit+0x164>)
 800503a:	2200      	movs	r2, #0
 800503c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800503e:	4b33      	ldr	r3, [pc, #204]	; (800510c <HAL_UART_MspInit+0x164>)
 8005040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005044:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005046:	4b31      	ldr	r3, [pc, #196]	; (800510c <HAL_UART_MspInit+0x164>)
 8005048:	2200      	movs	r2, #0
 800504a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800504c:	4b2f      	ldr	r3, [pc, #188]	; (800510c <HAL_UART_MspInit+0x164>)
 800504e:	2200      	movs	r2, #0
 8005050:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005052:	4b2e      	ldr	r3, [pc, #184]	; (800510c <HAL_UART_MspInit+0x164>)
 8005054:	2200      	movs	r2, #0
 8005056:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005058:	4b2c      	ldr	r3, [pc, #176]	; (800510c <HAL_UART_MspInit+0x164>)
 800505a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800505e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005060:	4b2a      	ldr	r3, [pc, #168]	; (800510c <HAL_UART_MspInit+0x164>)
 8005062:	2200      	movs	r2, #0
 8005064:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005066:	4829      	ldr	r0, [pc, #164]	; (800510c <HAL_UART_MspInit+0x164>)
 8005068:	f000 fab4 	bl	80055d4 <HAL_DMA_Init>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005072:	f7ff fec5 	bl	8004e00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a24      	ldr	r2, [pc, #144]	; (800510c <HAL_UART_MspInit+0x164>)
 800507a:	635a      	str	r2, [r3, #52]	; 0x34
 800507c:	4a23      	ldr	r2, [pc, #140]	; (800510c <HAL_UART_MspInit+0x164>)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005082:	e038      	b.n	80050f6 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a22      	ldr	r2, [pc, #136]	; (8005114 <HAL_UART_MspInit+0x16c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d133      	bne.n	80050f6 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <HAL_UART_MspInit+0x15c>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <HAL_UART_MspInit+0x15c>)
 8005098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800509c:	6413      	str	r3, [r2, #64]	; 0x40
 800509e:	4b19      	ldr	r3, [pc, #100]	; (8005104 <HAL_UART_MspInit+0x15c>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	4b15      	ldr	r3, [pc, #84]	; (8005104 <HAL_UART_MspInit+0x15c>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	4a14      	ldr	r2, [pc, #80]	; (8005104 <HAL_UART_MspInit+0x15c>)
 80050b4:	f043 0301 	orr.w	r3, r3, #1
 80050b8:	6313      	str	r3, [r2, #48]	; 0x30
 80050ba:	4b12      	ldr	r3, [pc, #72]	; (8005104 <HAL_UART_MspInit+0x15c>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80050c6:	230c      	movs	r3, #12
 80050c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ca:	2302      	movs	r3, #2
 80050cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d2:	2303      	movs	r3, #3
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80050d6:	2307      	movs	r3, #7
 80050d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050da:	f107 031c 	add.w	r3, r7, #28
 80050de:	4619      	mov	r1, r3
 80050e0:	4809      	ldr	r0, [pc, #36]	; (8005108 <HAL_UART_MspInit+0x160>)
 80050e2:	f000 fe07 	bl	8005cf4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80050e6:	2200      	movs	r2, #0
 80050e8:	2100      	movs	r1, #0
 80050ea:	2026      	movs	r0, #38	; 0x26
 80050ec:	f000 fa3b 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80050f0:	2026      	movs	r0, #38	; 0x26
 80050f2:	f000 fa54 	bl	800559e <HAL_NVIC_EnableIRQ>
}
 80050f6:	bf00      	nop
 80050f8:	3730      	adds	r7, #48	; 0x30
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40011000 	.word	0x40011000
 8005104:	40023800 	.word	0x40023800
 8005108:	40020000 	.word	0x40020000
 800510c:	2000070c 	.word	0x2000070c
 8005110:	40026440 	.word	0x40026440
 8005114:	40004400 	.word	0x40004400

08005118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800511c:	bf00      	nop
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005126:	b480      	push	{r7}
 8005128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800512a:	e7fe      	b.n	800512a <HardFault_Handler+0x4>

0800512c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005130:	e7fe      	b.n	8005130 <MemManage_Handler+0x4>

08005132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005132:	b480      	push	{r7}
 8005134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005136:	e7fe      	b.n	8005136 <BusFault_Handler+0x4>

08005138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800513c:	e7fe      	b.n	800513c <UsageFault_Handler+0x4>

0800513e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800513e:	b480      	push	{r7}
 8005140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005142:	bf00      	nop
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005150:	bf00      	nop
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800515a:	b480      	push	{r7}
 800515c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800516c:	f000 f8de 	bl	800532c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005170:	bf00      	nop
 8005172:	bd80      	pop	{r7, pc}

08005174 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005178:	4802      	ldr	r0, [pc, #8]	; (8005184 <USART2_IRQHandler+0x10>)
 800517a:	f003 f8c9 	bl	8008310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800517e:	bf00      	nop
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	200007ac 	.word	0x200007ac

08005188 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800518c:	4802      	ldr	r0, [pc, #8]	; (8005198 <DMA2_Stream2_IRQHandler+0x10>)
 800518e:	f000 fb49 	bl	8005824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005192:	bf00      	nop
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	2000070c 	.word	0x2000070c

0800519c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051a4:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <_sbrk+0x5c>)
 80051a6:	4b15      	ldr	r3, [pc, #84]	; (80051fc <_sbrk+0x60>)
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051b0:	4b13      	ldr	r3, [pc, #76]	; (8005200 <_sbrk+0x64>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d102      	bne.n	80051be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051b8:	4b11      	ldr	r3, [pc, #68]	; (8005200 <_sbrk+0x64>)
 80051ba:	4a12      	ldr	r2, [pc, #72]	; (8005204 <_sbrk+0x68>)
 80051bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051be:	4b10      	ldr	r3, [pc, #64]	; (8005200 <_sbrk+0x64>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d207      	bcs.n	80051dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051cc:	f003 ff52 	bl	8009074 <__errno>
 80051d0:	4602      	mov	r2, r0
 80051d2:	230c      	movs	r3, #12
 80051d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295
 80051da:	e009      	b.n	80051f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051dc:	4b08      	ldr	r3, [pc, #32]	; (8005200 <_sbrk+0x64>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051e2:	4b07      	ldr	r3, [pc, #28]	; (8005200 <_sbrk+0x64>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4413      	add	r3, r2
 80051ea:	4a05      	ldr	r2, [pc, #20]	; (8005200 <_sbrk+0x64>)
 80051ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051ee:	68fb      	ldr	r3, [r7, #12]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20020000 	.word	0x20020000
 80051fc:	00000400 	.word	0x00000400
 8005200:	200001fc 	.word	0x200001fc
 8005204:	200007f8 	.word	0x200007f8

08005208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800520c:	4b08      	ldr	r3, [pc, #32]	; (8005230 <SystemInit+0x28>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	4a07      	ldr	r2, [pc, #28]	; (8005230 <SystemInit+0x28>)
 8005214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800521c:	4b04      	ldr	r3, [pc, #16]	; (8005230 <SystemInit+0x28>)
 800521e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005222:	609a      	str	r2, [r3, #8]
#endif
}
 8005224:	bf00      	nop
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	e000ed00 	.word	0xe000ed00

08005234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800526c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005238:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800523a:	e003      	b.n	8005244 <LoopCopyDataInit>

0800523c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800523e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005240:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005242:	3104      	adds	r1, #4

08005244 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005244:	480b      	ldr	r0, [pc, #44]	; (8005274 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005248:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800524a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800524c:	d3f6      	bcc.n	800523c <CopyDataInit>
  ldr  r2, =_sbss
 800524e:	4a0b      	ldr	r2, [pc, #44]	; (800527c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005250:	e002      	b.n	8005258 <LoopFillZerobss>

08005252 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005252:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005254:	f842 3b04 	str.w	r3, [r2], #4

08005258 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005258:	4b09      	ldr	r3, [pc, #36]	; (8005280 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800525a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800525c:	d3f9      	bcc.n	8005252 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800525e:	f7ff ffd3 	bl	8005208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005262:	f003 ff0d 	bl	8009080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005266:	f7ff fbb9 	bl	80049dc <main>
  bx  lr    
 800526a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800526c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005270:	0800b4c0 	.word	0x0800b4c0
  ldr  r0, =_sdata
 8005274:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005278:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800527c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8005280:	200007f4 	.word	0x200007f4

08005284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005284:	e7fe      	b.n	8005284 <ADC_IRQHandler>
	...

08005288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800528c:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <HAL_Init+0x40>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a0d      	ldr	r2, [pc, #52]	; (80052c8 <HAL_Init+0x40>)
 8005292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005296:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_Init+0x40>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <HAL_Init+0x40>)
 800529e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052a4:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <HAL_Init+0x40>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a07      	ldr	r2, [pc, #28]	; (80052c8 <HAL_Init+0x40>)
 80052aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052b0:	2003      	movs	r0, #3
 80052b2:	f000 f94d 	bl	8005550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052b6:	2000      	movs	r0, #0
 80052b8:	f000 f808 	bl	80052cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052bc:	f7ff fda8 	bl	8004e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40023c00 	.word	0x40023c00

080052cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <HAL_InitTick+0x54>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4b12      	ldr	r3, [pc, #72]	; (8005324 <HAL_InitTick+0x58>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	4619      	mov	r1, r3
 80052de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80052e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f965 	bl	80055ba <HAL_SYSTICK_Config>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e00e      	b.n	8005318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b0f      	cmp	r3, #15
 80052fe:	d80a      	bhi.n	8005316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005300:	2200      	movs	r2, #0
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	f000 f92d 	bl	8005566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800530c:	4a06      	ldr	r2, [pc, #24]	; (8005328 <HAL_InitTick+0x5c>)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	e000      	b.n	8005318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
}
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20000000 	.word	0x20000000
 8005324:	20000008 	.word	0x20000008
 8005328:	20000004 	.word	0x20000004

0800532c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <HAL_IncTick+0x20>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	4b06      	ldr	r3, [pc, #24]	; (8005350 <HAL_IncTick+0x24>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4413      	add	r3, r2
 800533c:	4a04      	ldr	r2, [pc, #16]	; (8005350 <HAL_IncTick+0x24>)
 800533e:	6013      	str	r3, [r2, #0]
}
 8005340:	bf00      	nop
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000008 	.word	0x20000008
 8005350:	200007ec 	.word	0x200007ec

08005354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return uwTick;
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <HAL_GetTick+0x14>)
 800535a:	681b      	ldr	r3, [r3, #0]
}
 800535c:	4618      	mov	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	200007ec 	.word	0x200007ec

0800536c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005374:	f7ff ffee 	bl	8005354 <HAL_GetTick>
 8005378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d005      	beq.n	8005392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <HAL_Delay+0x40>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005392:	bf00      	nop
 8005394:	f7ff ffde 	bl	8005354 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d8f7      	bhi.n	8005394 <HAL_Delay+0x28>
  {
  }
}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20000008 	.word	0x20000008

080053b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053cc:	4013      	ands	r3, r2
 80053ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053e2:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	60d3      	str	r3, [r2, #12]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	e000ed00 	.word	0xe000ed00

080053f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053fc:	4b04      	ldr	r3, [pc, #16]	; (8005410 <__NVIC_GetPriorityGrouping+0x18>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	0a1b      	lsrs	r3, r3, #8
 8005402:	f003 0307 	and.w	r3, r3, #7
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	e000ed00 	.word	0xe000ed00

08005414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800541e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005422:	2b00      	cmp	r3, #0
 8005424:	db0b      	blt.n	800543e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	f003 021f 	and.w	r2, r3, #31
 800542c:	4907      	ldr	r1, [pc, #28]	; (800544c <__NVIC_EnableIRQ+0x38>)
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	2001      	movs	r0, #1
 8005436:	fa00 f202 	lsl.w	r2, r0, r2
 800543a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	e000e100 	.word	0xe000e100

08005450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	6039      	str	r1, [r7, #0]
 800545a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800545c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005460:	2b00      	cmp	r3, #0
 8005462:	db0a      	blt.n	800547a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	490c      	ldr	r1, [pc, #48]	; (800549c <__NVIC_SetPriority+0x4c>)
 800546a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546e:	0112      	lsls	r2, r2, #4
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	440b      	add	r3, r1
 8005474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005478:	e00a      	b.n	8005490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	b2da      	uxtb	r2, r3
 800547e:	4908      	ldr	r1, [pc, #32]	; (80054a0 <__NVIC_SetPriority+0x50>)
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	3b04      	subs	r3, #4
 8005488:	0112      	lsls	r2, r2, #4
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	440b      	add	r3, r1
 800548e:	761a      	strb	r2, [r3, #24]
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	e000e100 	.word	0xe000e100
 80054a0:	e000ed00 	.word	0xe000ed00

080054a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b089      	sub	sp, #36	; 0x24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f1c3 0307 	rsb	r3, r3, #7
 80054be:	2b04      	cmp	r3, #4
 80054c0:	bf28      	it	cs
 80054c2:	2304      	movcs	r3, #4
 80054c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	3304      	adds	r3, #4
 80054ca:	2b06      	cmp	r3, #6
 80054cc:	d902      	bls.n	80054d4 <NVIC_EncodePriority+0x30>
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	3b03      	subs	r3, #3
 80054d2:	e000      	b.n	80054d6 <NVIC_EncodePriority+0x32>
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d8:	f04f 32ff 	mov.w	r2, #4294967295
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43da      	mvns	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	401a      	ands	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054ec:	f04f 31ff 	mov.w	r1, #4294967295
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	fa01 f303 	lsl.w	r3, r1, r3
 80054f6:	43d9      	mvns	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054fc:	4313      	orrs	r3, r2
         );
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3724      	adds	r7, #36	; 0x24
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3b01      	subs	r3, #1
 8005518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800551c:	d301      	bcc.n	8005522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800551e:	2301      	movs	r3, #1
 8005520:	e00f      	b.n	8005542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005522:	4a0a      	ldr	r2, [pc, #40]	; (800554c <SysTick_Config+0x40>)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3b01      	subs	r3, #1
 8005528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800552a:	210f      	movs	r1, #15
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	f7ff ff8e 	bl	8005450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <SysTick_Config+0x40>)
 8005536:	2200      	movs	r2, #0
 8005538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800553a:	4b04      	ldr	r3, [pc, #16]	; (800554c <SysTick_Config+0x40>)
 800553c:	2207      	movs	r2, #7
 800553e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	e000e010 	.word	0xe000e010

08005550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff ff29 	bl	80053b0 <__NVIC_SetPriorityGrouping>
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005566:	b580      	push	{r7, lr}
 8005568:	b086      	sub	sp, #24
 800556a:	af00      	add	r7, sp, #0
 800556c:	4603      	mov	r3, r0
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
 8005572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005578:	f7ff ff3e 	bl	80053f8 <__NVIC_GetPriorityGrouping>
 800557c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	6978      	ldr	r0, [r7, #20]
 8005584:	f7ff ff8e 	bl	80054a4 <NVIC_EncodePriority>
 8005588:	4602      	mov	r2, r0
 800558a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558e:	4611      	mov	r1, r2
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff ff5d 	bl	8005450 <__NVIC_SetPriority>
}
 8005596:	bf00      	nop
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	4603      	mov	r3, r0
 80055a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff ff31 	bl	8005414 <__NVIC_EnableIRQ>
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ffa2 	bl	800550c <SysTick_Config>
 80055c8:	4603      	mov	r3, r0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055e0:	f7ff feb8 	bl	8005354 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e099      	b.n	8005724 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005610:	e00f      	b.n	8005632 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005612:	f7ff fe9f 	bl	8005354 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b05      	cmp	r3, #5
 800561e:	d908      	bls.n	8005632 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2203      	movs	r2, #3
 800562a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e078      	b.n	8005724 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e8      	bne.n	8005612 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4b38      	ldr	r3, [pc, #224]	; (800572c <HAL_DMA_Init+0x158>)
 800564c:	4013      	ands	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800565e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800566a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b04      	cmp	r3, #4
 800568a:	d107      	bne.n	800569c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	4313      	orrs	r3, r2
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0307 	bic.w	r3, r3, #7
 80056b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d117      	bne.n	80056f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00e      	beq.n	80056f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fa91 	bl	8005c00 <DMA_CheckFifoParam>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2240      	movs	r2, #64	; 0x40
 80056e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056f2:	2301      	movs	r3, #1
 80056f4:	e016      	b.n	8005724 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fa48 	bl	8005b94 <DMA_CalcBaseAndBitshift>
 8005704:	4603      	mov	r3, r0
 8005706:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570c:	223f      	movs	r2, #63	; 0x3f
 800570e:	409a      	lsls	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	f010803f 	.word	0xf010803f

08005730 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005746:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_DMA_Start_IT+0x26>
 8005752:	2302      	movs	r3, #2
 8005754:	e040      	b.n	80057d8 <HAL_DMA_Start_IT+0xa8>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b01      	cmp	r3, #1
 8005768:	d12f      	bne.n	80057ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2202      	movs	r2, #2
 800576e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 f9da 	bl	8005b38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005788:	223f      	movs	r2, #63	; 0x3f
 800578a:	409a      	lsls	r2, r3
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0216 	orr.w	r2, r2, #22
 800579e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0208 	orr.w	r2, r2, #8
 80057b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	e005      	b.n	80057d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80057d2:	2302      	movs	r3, #2
 80057d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d004      	beq.n	80057fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2280      	movs	r2, #128	; 0x80
 80057f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e00c      	b.n	8005818 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2205      	movs	r2, #5
 8005802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0201 	bic.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005830:	4b92      	ldr	r3, [pc, #584]	; (8005a7c <HAL_DMA_IRQHandler+0x258>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a92      	ldr	r2, [pc, #584]	; (8005a80 <HAL_DMA_IRQHandler+0x25c>)
 8005836:	fba2 2303 	umull	r2, r3, r2, r3
 800583a:	0a9b      	lsrs	r3, r3, #10
 800583c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005842:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584e:	2208      	movs	r2, #8
 8005850:	409a      	lsls	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4013      	ands	r3, r2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d01a      	beq.n	8005890 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d013      	beq.n	8005890 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0204 	bic.w	r2, r2, #4
 8005876:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587c:	2208      	movs	r2, #8
 800587e:	409a      	lsls	r2, r3
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	f043 0201 	orr.w	r2, r3, #1
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005894:	2201      	movs	r2, #1
 8005896:	409a      	lsls	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4013      	ands	r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d012      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00b      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b2:	2201      	movs	r2, #1
 80058b4:	409a      	lsls	r2, r3
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	f043 0202 	orr.w	r2, r3, #2
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ca:	2204      	movs	r2, #4
 80058cc:	409a      	lsls	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4013      	ands	r3, r2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d012      	beq.n	80058fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00b      	beq.n	80058fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e8:	2204      	movs	r2, #4
 80058ea:	409a      	lsls	r2, r3
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f4:	f043 0204 	orr.w	r2, r3, #4
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005900:	2210      	movs	r2, #16
 8005902:	409a      	lsls	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4013      	ands	r3, r2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d043      	beq.n	8005994 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d03c      	beq.n	8005994 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591e:	2210      	movs	r2, #16
 8005920:	409a      	lsls	r2, r3
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d018      	beq.n	8005966 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d108      	bne.n	8005954 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d024      	beq.n	8005994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4798      	blx	r3
 8005952:	e01f      	b.n	8005994 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01b      	beq.n	8005994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
 8005964:	e016      	b.n	8005994 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005970:	2b00      	cmp	r3, #0
 8005972:	d107      	bne.n	8005984 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0208 	bic.w	r2, r2, #8
 8005982:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005998:	2220      	movs	r2, #32
 800599a:	409a      	lsls	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 808e 	beq.w	8005ac2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8086 	beq.w	8005ac2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ba:	2220      	movs	r2, #32
 80059bc:	409a      	lsls	r2, r3
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b05      	cmp	r3, #5
 80059cc:	d136      	bne.n	8005a3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0216 	bic.w	r2, r2, #22
 80059dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695a      	ldr	r2, [r3, #20]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d103      	bne.n	80059fe <HAL_DMA_IRQHandler+0x1da>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0208 	bic.w	r2, r2, #8
 8005a0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a12:	223f      	movs	r2, #63	; 0x3f
 8005a14:	409a      	lsls	r2, r3
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d07d      	beq.n	8005b2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
        }
        return;
 8005a3a:	e078      	b.n	8005b2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d01c      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d108      	bne.n	8005a6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d030      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4798      	blx	r3
 8005a68:	e02b      	b.n	8005ac2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d027      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
 8005a7a:	e022      	b.n	8005ac2 <HAL_DMA_IRQHandler+0x29e>
 8005a7c:	20000000 	.word	0x20000000
 8005a80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10f      	bne.n	8005ab2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0210 	bic.w	r2, r2, #16
 8005aa0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d032      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d022      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2205      	movs	r2, #5
 8005ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0201 	bic.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	3301      	adds	r3, #1
 8005af2:	60bb      	str	r3, [r7, #8]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d307      	bcc.n	8005b0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1f2      	bne.n	8005aee <HAL_DMA_IRQHandler+0x2ca>
 8005b08:	e000      	b.n	8005b0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005b0a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
 8005b2c:	e000      	b.n	8005b30 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005b2e:	bf00      	nop
    }
  }
}
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop

08005b38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b40      	cmp	r3, #64	; 0x40
 8005b64:	d108      	bne.n	8005b78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b76:	e007      	b.n	8005b88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	60da      	str	r2, [r3, #12]
}
 8005b88:	bf00      	nop
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	3b10      	subs	r3, #16
 8005ba4:	4a14      	ldr	r2, [pc, #80]	; (8005bf8 <DMA_CalcBaseAndBitshift+0x64>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	091b      	lsrs	r3, r3, #4
 8005bac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bae:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <DMA_CalcBaseAndBitshift+0x68>)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d909      	bls.n	8005bd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	1d1a      	adds	r2, r3, #4
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	659a      	str	r2, [r3, #88]	; 0x58
 8005bd4:	e007      	b.n	8005be6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	aaaaaaab 	.word	0xaaaaaaab
 8005bfc:	0800b248 	.word	0x0800b248

08005c00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d11f      	bne.n	8005c5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d855      	bhi.n	8005ccc <DMA_CheckFifoParam+0xcc>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <DMA_CheckFifoParam+0x28>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005c39 	.word	0x08005c39
 8005c2c:	08005c4b 	.word	0x08005c4b
 8005c30:	08005c39 	.word	0x08005c39
 8005c34:	08005ccd 	.word	0x08005ccd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d045      	beq.n	8005cd0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c48:	e042      	b.n	8005cd0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c52:	d13f      	bne.n	8005cd4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c58:	e03c      	b.n	8005cd4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c62:	d121      	bne.n	8005ca8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d836      	bhi.n	8005cd8 <DMA_CheckFifoParam+0xd8>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <DMA_CheckFifoParam+0x70>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005c81 	.word	0x08005c81
 8005c74:	08005c87 	.word	0x08005c87
 8005c78:	08005c81 	.word	0x08005c81
 8005c7c:	08005c99 	.word	0x08005c99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	73fb      	strb	r3, [r7, #15]
      break;
 8005c84:	e02f      	b.n	8005ce6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d024      	beq.n	8005cdc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c96:	e021      	b.n	8005cdc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ca0:	d11e      	bne.n	8005ce0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ca6:	e01b      	b.n	8005ce0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d902      	bls.n	8005cb4 <DMA_CheckFifoParam+0xb4>
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d003      	beq.n	8005cba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005cb2:	e018      	b.n	8005ce6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb8:	e015      	b.n	8005ce6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00e      	beq.n	8005ce4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cca:	e00b      	b.n	8005ce4 <DMA_CheckFifoParam+0xe4>
      break;
 8005ccc:	bf00      	nop
 8005cce:	e00a      	b.n	8005ce6 <DMA_CheckFifoParam+0xe6>
      break;
 8005cd0:	bf00      	nop
 8005cd2:	e008      	b.n	8005ce6 <DMA_CheckFifoParam+0xe6>
      break;
 8005cd4:	bf00      	nop
 8005cd6:	e006      	b.n	8005ce6 <DMA_CheckFifoParam+0xe6>
      break;
 8005cd8:	bf00      	nop
 8005cda:	e004      	b.n	8005ce6 <DMA_CheckFifoParam+0xe6>
      break;
 8005cdc:	bf00      	nop
 8005cde:	e002      	b.n	8005ce6 <DMA_CheckFifoParam+0xe6>
      break;   
 8005ce0:	bf00      	nop
 8005ce2:	e000      	b.n	8005ce6 <DMA_CheckFifoParam+0xe6>
      break;
 8005ce4:	bf00      	nop
    }
  } 
  
  return status; 
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b089      	sub	sp, #36	; 0x24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	e16b      	b.n	8005fe8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d10:	2201      	movs	r2, #1
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4013      	ands	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	f040 815a 	bne.w	8005fe2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d00b      	beq.n	8005d4e <HAL_GPIO_Init+0x5a>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d007      	beq.n	8005d4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d42:	2b11      	cmp	r3, #17
 8005d44:	d003      	beq.n	8005d4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b12      	cmp	r3, #18
 8005d4c:	d130      	bne.n	8005db0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	2203      	movs	r2, #3
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4013      	ands	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d84:	2201      	movs	r2, #1
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4013      	ands	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	091b      	lsrs	r3, r3, #4
 8005d9a:	f003 0201 	and.w	r2, r3, #1
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	2203      	movs	r2, #3
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d003      	beq.n	8005df0 <HAL_GPIO_Init+0xfc>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b12      	cmp	r3, #18
 8005dee:	d123      	bne.n	8005e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	08da      	lsrs	r2, r3, #3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3208      	adds	r2, #8
 8005df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	220f      	movs	r2, #15
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	08da      	lsrs	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3208      	adds	r2, #8
 8005e32:	69b9      	ldr	r1, [r7, #24]
 8005e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	2203      	movs	r2, #3
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f003 0203 	and.w	r2, r3, #3
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80b4 	beq.w	8005fe2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	4b5f      	ldr	r3, [pc, #380]	; (8005ffc <HAL_GPIO_Init+0x308>)
 8005e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e82:	4a5e      	ldr	r2, [pc, #376]	; (8005ffc <HAL_GPIO_Init+0x308>)
 8005e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e88:	6453      	str	r3, [r2, #68]	; 0x44
 8005e8a:	4b5c      	ldr	r3, [pc, #368]	; (8005ffc <HAL_GPIO_Init+0x308>)
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e96:	4a5a      	ldr	r2, [pc, #360]	; (8006000 <HAL_GPIO_Init+0x30c>)
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	089b      	lsrs	r3, r3, #2
 8005e9c:	3302      	adds	r3, #2
 8005e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	220f      	movs	r2, #15
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a51      	ldr	r2, [pc, #324]	; (8006004 <HAL_GPIO_Init+0x310>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d02b      	beq.n	8005f1a <HAL_GPIO_Init+0x226>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a50      	ldr	r2, [pc, #320]	; (8006008 <HAL_GPIO_Init+0x314>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d025      	beq.n	8005f16 <HAL_GPIO_Init+0x222>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a4f      	ldr	r2, [pc, #316]	; (800600c <HAL_GPIO_Init+0x318>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d01f      	beq.n	8005f12 <HAL_GPIO_Init+0x21e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a4e      	ldr	r2, [pc, #312]	; (8006010 <HAL_GPIO_Init+0x31c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d019      	beq.n	8005f0e <HAL_GPIO_Init+0x21a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a4d      	ldr	r2, [pc, #308]	; (8006014 <HAL_GPIO_Init+0x320>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d013      	beq.n	8005f0a <HAL_GPIO_Init+0x216>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a4c      	ldr	r2, [pc, #304]	; (8006018 <HAL_GPIO_Init+0x324>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00d      	beq.n	8005f06 <HAL_GPIO_Init+0x212>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a4b      	ldr	r2, [pc, #300]	; (800601c <HAL_GPIO_Init+0x328>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d007      	beq.n	8005f02 <HAL_GPIO_Init+0x20e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a4a      	ldr	r2, [pc, #296]	; (8006020 <HAL_GPIO_Init+0x32c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d101      	bne.n	8005efe <HAL_GPIO_Init+0x20a>
 8005efa:	2307      	movs	r3, #7
 8005efc:	e00e      	b.n	8005f1c <HAL_GPIO_Init+0x228>
 8005efe:	2308      	movs	r3, #8
 8005f00:	e00c      	b.n	8005f1c <HAL_GPIO_Init+0x228>
 8005f02:	2306      	movs	r3, #6
 8005f04:	e00a      	b.n	8005f1c <HAL_GPIO_Init+0x228>
 8005f06:	2305      	movs	r3, #5
 8005f08:	e008      	b.n	8005f1c <HAL_GPIO_Init+0x228>
 8005f0a:	2304      	movs	r3, #4
 8005f0c:	e006      	b.n	8005f1c <HAL_GPIO_Init+0x228>
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e004      	b.n	8005f1c <HAL_GPIO_Init+0x228>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e002      	b.n	8005f1c <HAL_GPIO_Init+0x228>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <HAL_GPIO_Init+0x228>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	f002 0203 	and.w	r2, r2, #3
 8005f22:	0092      	lsls	r2, r2, #2
 8005f24:	4093      	lsls	r3, r2
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f2c:	4934      	ldr	r1, [pc, #208]	; (8006000 <HAL_GPIO_Init+0x30c>)
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	089b      	lsrs	r3, r3, #2
 8005f32:	3302      	adds	r3, #2
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f3a:	4b3a      	ldr	r3, [pc, #232]	; (8006024 <HAL_GPIO_Init+0x330>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	43db      	mvns	r3, r3
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	4013      	ands	r3, r2
 8005f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f5e:	4a31      	ldr	r2, [pc, #196]	; (8006024 <HAL_GPIO_Init+0x330>)
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f64:	4b2f      	ldr	r3, [pc, #188]	; (8006024 <HAL_GPIO_Init+0x330>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	4013      	ands	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f88:	4a26      	ldr	r2, [pc, #152]	; (8006024 <HAL_GPIO_Init+0x330>)
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f8e:	4b25      	ldr	r3, [pc, #148]	; (8006024 <HAL_GPIO_Init+0x330>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	43db      	mvns	r3, r3
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fb2:	4a1c      	ldr	r2, [pc, #112]	; (8006024 <HAL_GPIO_Init+0x330>)
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fb8:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <HAL_GPIO_Init+0x330>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fdc:	4a11      	ldr	r2, [pc, #68]	; (8006024 <HAL_GPIO_Init+0x330>)
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	2b0f      	cmp	r3, #15
 8005fec:	f67f ae90 	bls.w	8005d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ff0:	bf00      	nop
 8005ff2:	3724      	adds	r7, #36	; 0x24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	40023800 	.word	0x40023800
 8006000:	40013800 	.word	0x40013800
 8006004:	40020000 	.word	0x40020000
 8006008:	40020400 	.word	0x40020400
 800600c:	40020800 	.word	0x40020800
 8006010:	40020c00 	.word	0x40020c00
 8006014:	40021000 	.word	0x40021000
 8006018:	40021400 	.word	0x40021400
 800601c:	40021800 	.word	0x40021800
 8006020:	40021c00 	.word	0x40021c00
 8006024:	40013c00 	.word	0x40013c00

08006028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e11f      	b.n	800627a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fe ff06 	bl	8004e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2224      	movs	r2, #36	; 0x24
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0201 	bic.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800607a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800608a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800608c:	f001 fb90 	bl	80077b0 <HAL_RCC_GetPCLK1Freq>
 8006090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	4a7b      	ldr	r2, [pc, #492]	; (8006284 <HAL_I2C_Init+0x25c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d807      	bhi.n	80060ac <HAL_I2C_Init+0x84>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4a7a      	ldr	r2, [pc, #488]	; (8006288 <HAL_I2C_Init+0x260>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	bf94      	ite	ls
 80060a4:	2301      	movls	r3, #1
 80060a6:	2300      	movhi	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	e006      	b.n	80060ba <HAL_I2C_Init+0x92>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4a77      	ldr	r2, [pc, #476]	; (800628c <HAL_I2C_Init+0x264>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	bf94      	ite	ls
 80060b4:	2301      	movls	r3, #1
 80060b6:	2300      	movhi	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e0db      	b.n	800627a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4a72      	ldr	r2, [pc, #456]	; (8006290 <HAL_I2C_Init+0x268>)
 80060c6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ca:	0c9b      	lsrs	r3, r3, #18
 80060cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	4a64      	ldr	r2, [pc, #400]	; (8006284 <HAL_I2C_Init+0x25c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d802      	bhi.n	80060fc <HAL_I2C_Init+0xd4>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	3301      	adds	r3, #1
 80060fa:	e009      	b.n	8006110 <HAL_I2C_Init+0xe8>
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006102:	fb02 f303 	mul.w	r3, r2, r3
 8006106:	4a63      	ldr	r2, [pc, #396]	; (8006294 <HAL_I2C_Init+0x26c>)
 8006108:	fba2 2303 	umull	r2, r3, r2, r3
 800610c:	099b      	lsrs	r3, r3, #6
 800610e:	3301      	adds	r3, #1
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6812      	ldr	r2, [r2, #0]
 8006114:	430b      	orrs	r3, r1
 8006116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006122:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	4956      	ldr	r1, [pc, #344]	; (8006284 <HAL_I2C_Init+0x25c>)
 800612c:	428b      	cmp	r3, r1
 800612e:	d80d      	bhi.n	800614c <HAL_I2C_Init+0x124>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	1e59      	subs	r1, r3, #1
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	fbb1 f3f3 	udiv	r3, r1, r3
 800613e:	3301      	adds	r3, #1
 8006140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006144:	2b04      	cmp	r3, #4
 8006146:	bf38      	it	cc
 8006148:	2304      	movcc	r3, #4
 800614a:	e04f      	b.n	80061ec <HAL_I2C_Init+0x1c4>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d111      	bne.n	8006178 <HAL_I2C_Init+0x150>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	1e58      	subs	r0, r3, #1
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6859      	ldr	r1, [r3, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	440b      	add	r3, r1
 8006162:	fbb0 f3f3 	udiv	r3, r0, r3
 8006166:	3301      	adds	r3, #1
 8006168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616c:	2b00      	cmp	r3, #0
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	e012      	b.n	800619e <HAL_I2C_Init+0x176>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	1e58      	subs	r0, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6859      	ldr	r1, [r3, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	0099      	lsls	r1, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	fbb0 f3f3 	udiv	r3, r0, r3
 800618e:	3301      	adds	r3, #1
 8006190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006194:	2b00      	cmp	r3, #0
 8006196:	bf0c      	ite	eq
 8006198:	2301      	moveq	r3, #1
 800619a:	2300      	movne	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_I2C_Init+0x17e>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e022      	b.n	80061ec <HAL_I2C_Init+0x1c4>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10e      	bne.n	80061cc <HAL_I2C_Init+0x1a4>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1e58      	subs	r0, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6859      	ldr	r1, [r3, #4]
 80061b6:	460b      	mov	r3, r1
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	440b      	add	r3, r1
 80061bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80061c0:	3301      	adds	r3, #1
 80061c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ca:	e00f      	b.n	80061ec <HAL_I2C_Init+0x1c4>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	1e58      	subs	r0, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6859      	ldr	r1, [r3, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	0099      	lsls	r1, r3, #2
 80061dc:	440b      	add	r3, r1
 80061de:	fbb0 f3f3 	udiv	r3, r0, r3
 80061e2:	3301      	adds	r3, #1
 80061e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	6809      	ldr	r1, [r1, #0]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69da      	ldr	r2, [r3, #28]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800621a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6911      	ldr	r1, [r2, #16]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	68d2      	ldr	r2, [r2, #12]
 8006226:	4311      	orrs	r1, r2
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6812      	ldr	r2, [r2, #0]
 800622c:	430b      	orrs	r3, r1
 800622e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695a      	ldr	r2, [r3, #20]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2220      	movs	r2, #32
 8006266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	000186a0 	.word	0x000186a0
 8006288:	001e847f 	.word	0x001e847f
 800628c:	003d08ff 	.word	0x003d08ff
 8006290:	431bde83 	.word	0x431bde83
 8006294:	10624dd3 	.word	0x10624dd3

08006298 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af02      	add	r7, sp, #8
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	607a      	str	r2, [r7, #4]
 80062a2:	461a      	mov	r2, r3
 80062a4:	460b      	mov	r3, r1
 80062a6:	817b      	strh	r3, [r7, #10]
 80062a8:	4613      	mov	r3, r2
 80062aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062ac:	f7ff f852 	bl	8005354 <HAL_GetTick>
 80062b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	f040 80e0 	bne.w	8006480 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	2319      	movs	r3, #25
 80062c6:	2201      	movs	r2, #1
 80062c8:	4970      	ldr	r1, [pc, #448]	; (800648c <HAL_I2C_Master_Transmit+0x1f4>)
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fc58 	bl	8006b80 <I2C_WaitOnFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80062d6:	2302      	movs	r3, #2
 80062d8:	e0d3      	b.n	8006482 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_I2C_Master_Transmit+0x50>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e0cc      	b.n	8006482 <HAL_I2C_Master_Transmit+0x1ea>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d007      	beq.n	800630e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0201 	orr.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800631c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2221      	movs	r2, #33	; 0x21
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2210      	movs	r2, #16
 800632a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	893a      	ldrh	r2, [r7, #8]
 800633e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a50      	ldr	r2, [pc, #320]	; (8006490 <HAL_I2C_Master_Transmit+0x1f8>)
 800634e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006350:	8979      	ldrh	r1, [r7, #10]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	6a3a      	ldr	r2, [r7, #32]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fac2 	bl	80068e0 <I2C_MasterRequestWrite>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e08d      	b.n	8006482 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006366:	2300      	movs	r3, #0
 8006368:	613b      	str	r3, [r7, #16]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	613b      	str	r3, [r7, #16]
 800637a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800637c:	e066      	b.n	800644c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	6a39      	ldr	r1, [r7, #32]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 fcd2 	bl	8006d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00d      	beq.n	80063aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	2b04      	cmp	r3, #4
 8006394:	d107      	bne.n	80063a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e06b      	b.n	8006482 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	781a      	ldrb	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d11b      	bne.n	8006420 <HAL_I2C_Master_Transmit+0x188>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d017      	beq.n	8006420 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	781a      	ldrb	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	6a39      	ldr	r1, [r7, #32]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fcc2 	bl	8006dae <I2C_WaitOnBTFFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00d      	beq.n	800644c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	2b04      	cmp	r3, #4
 8006436:	d107      	bne.n	8006448 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006446:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e01a      	b.n	8006482 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006450:	2b00      	cmp	r3, #0
 8006452:	d194      	bne.n	800637e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	e000      	b.n	8006482 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006480:	2302      	movs	r3, #2
  }
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	00100002 	.word	0x00100002
 8006490:	ffff0000 	.word	0xffff0000

08006494 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08c      	sub	sp, #48	; 0x30
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	461a      	mov	r2, r3
 80064a0:	460b      	mov	r3, r1
 80064a2:	817b      	strh	r3, [r7, #10]
 80064a4:	4613      	mov	r3, r2
 80064a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064a8:	f7fe ff54 	bl	8005354 <HAL_GetTick>
 80064ac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	f040 820b 	bne.w	80068d2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2319      	movs	r3, #25
 80064c2:	2201      	movs	r2, #1
 80064c4:	497c      	ldr	r1, [pc, #496]	; (80066b8 <HAL_I2C_Master_Receive+0x224>)
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 fb5a 	bl	8006b80 <I2C_WaitOnFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80064d2:	2302      	movs	r3, #2
 80064d4:	e1fe      	b.n	80068d4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_I2C_Master_Receive+0x50>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e1f7      	b.n	80068d4 <HAL_I2C_Master_Receive+0x440>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d007      	beq.n	800650a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0201 	orr.w	r2, r2, #1
 8006508:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006518:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2222      	movs	r2, #34	; 0x22
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2210      	movs	r2, #16
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	893a      	ldrh	r2, [r7, #8]
 800653a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a5c      	ldr	r2, [pc, #368]	; (80066bc <HAL_I2C_Master_Receive+0x228>)
 800654a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800654c:	8979      	ldrh	r1, [r7, #10]
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fa46 	bl	80069e4 <I2C_MasterRequestRead>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e1b8      	b.n	80068d4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d113      	bne.n	8006592 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800656a:	2300      	movs	r3, #0
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	623b      	str	r3, [r7, #32]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	623b      	str	r3, [r7, #32]
 800657e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	e18c      	b.n	80068ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006596:	2b01      	cmp	r3, #1
 8006598:	d11b      	bne.n	80065d2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	e16c      	b.n	80068ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d11b      	bne.n	8006612 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065fa:	2300      	movs	r3, #0
 80065fc:	61bb      	str	r3, [r7, #24]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	61bb      	str	r3, [r7, #24]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	61bb      	str	r3, [r7, #24]
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	e14c      	b.n	80068ac <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006620:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006638:	e138      	b.n	80068ac <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663e:	2b03      	cmp	r3, #3
 8006640:	f200 80f1 	bhi.w	8006826 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006648:	2b01      	cmp	r3, #1
 800664a:	d123      	bne.n	8006694 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800664c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 fbed 	bl	8006e30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e139      	b.n	80068d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006692:	e10b      	b.n	80068ac <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006698:	2b02      	cmp	r3, #2
 800669a:	d14e      	bne.n	800673a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	2200      	movs	r2, #0
 80066a4:	4906      	ldr	r1, [pc, #24]	; (80066c0 <HAL_I2C_Master_Receive+0x22c>)
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 fa6a 	bl	8006b80 <I2C_WaitOnFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d008      	beq.n	80066c4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e10e      	b.n	80068d4 <HAL_I2C_Master_Receive+0x440>
 80066b6:	bf00      	nop
 80066b8:	00100002 	.word	0x00100002
 80066bc:	ffff0000 	.word	0xffff0000
 80066c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	3b01      	subs	r3, #1
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006738:	e0b8      	b.n	80068ac <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	2200      	movs	r2, #0
 8006742:	4966      	ldr	r1, [pc, #408]	; (80068dc <HAL_I2C_Master_Receive+0x448>)
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 fa1b 	bl	8006b80 <I2C_WaitOnFlagUntilTimeout>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e0bf      	b.n	80068d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006762:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006780:	3b01      	subs	r3, #1
 8006782:	b29a      	uxth	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678c:	b29b      	uxth	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	2200      	movs	r2, #0
 800679e:	494f      	ldr	r1, [pc, #316]	; (80068dc <HAL_I2C_Master_Receive+0x448>)
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f9ed 	bl	8006b80 <I2C_WaitOnFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e091      	b.n	80068d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691a      	ldr	r2, [r3, #16]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691a      	ldr	r2, [r3, #16]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681a:	b29b      	uxth	r3, r3
 800681c:	3b01      	subs	r3, #1
 800681e:	b29a      	uxth	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006824:	e042      	b.n	80068ac <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006828:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fb00 	bl	8006e30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e04c      	b.n	80068d4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691a      	ldr	r2, [r3, #16]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006856:	3b01      	subs	r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b04      	cmp	r3, #4
 8006878:	d118      	bne.n	80068ac <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	691a      	ldr	r2, [r3, #16]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f47f aec2 	bne.w	800663a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	e000      	b.n	80068d4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068d2:	2302      	movs	r3, #2
  }
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3728      	adds	r7, #40	; 0x28
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	00010004 	.word	0x00010004

080068e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af02      	add	r7, sp, #8
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	607a      	str	r2, [r7, #4]
 80068ea:	603b      	str	r3, [r7, #0]
 80068ec:	460b      	mov	r3, r1
 80068ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d006      	beq.n	800690a <I2C_MasterRequestWrite+0x2a>
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d003      	beq.n	800690a <I2C_MasterRequestWrite+0x2a>
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006908:	d108      	bne.n	800691c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	e00b      	b.n	8006934 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006920:	2b12      	cmp	r3, #18
 8006922:	d107      	bne.n	8006934 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006932:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 f91d 	bl	8006b80 <I2C_WaitOnFlagUntilTimeout>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00d      	beq.n	8006968 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695a:	d103      	bne.n	8006964 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006962:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e035      	b.n	80069d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006970:	d108      	bne.n	8006984 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006972:	897b      	ldrh	r3, [r7, #10]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	461a      	mov	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006980:	611a      	str	r2, [r3, #16]
 8006982:	e01b      	b.n	80069bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006984:	897b      	ldrh	r3, [r7, #10]
 8006986:	11db      	asrs	r3, r3, #7
 8006988:	b2db      	uxtb	r3, r3
 800698a:	f003 0306 	and.w	r3, r3, #6
 800698e:	b2db      	uxtb	r3, r3
 8006990:	f063 030f 	orn	r3, r3, #15
 8006994:	b2da      	uxtb	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	490e      	ldr	r1, [pc, #56]	; (80069dc <I2C_MasterRequestWrite+0xfc>)
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f943 	bl	8006c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e010      	b.n	80069d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069b2:	897b      	ldrh	r3, [r7, #10]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	4907      	ldr	r1, [pc, #28]	; (80069e0 <I2C_MasterRequestWrite+0x100>)
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f933 	bl	8006c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	00010008 	.word	0x00010008
 80069e0:	00010002 	.word	0x00010002

080069e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b088      	sub	sp, #32
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	607a      	str	r2, [r7, #4]
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	460b      	mov	r3, r1
 80069f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a08:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d006      	beq.n	8006a1e <I2C_MasterRequestRead+0x3a>
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d003      	beq.n	8006a1e <I2C_MasterRequestRead+0x3a>
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a1c:	d108      	bne.n	8006a30 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e00b      	b.n	8006a48 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a34:	2b11      	cmp	r3, #17
 8006a36:	d107      	bne.n	8006a48 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f893 	bl	8006b80 <I2C_WaitOnFlagUntilTimeout>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00d      	beq.n	8006a7c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a6e:	d103      	bne.n	8006a78 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e079      	b.n	8006b70 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a84:	d108      	bne.n	8006a98 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a86:	897b      	ldrh	r3, [r7, #10]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	611a      	str	r2, [r3, #16]
 8006a96:	e05f      	b.n	8006b58 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a98:	897b      	ldrh	r3, [r7, #10]
 8006a9a:	11db      	asrs	r3, r3, #7
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 0306 	and.w	r3, r3, #6
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	f063 030f 	orn	r3, r3, #15
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	4930      	ldr	r1, [pc, #192]	; (8006b78 <I2C_MasterRequestRead+0x194>)
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f8b9 	bl	8006c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e054      	b.n	8006b70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ac6:	897b      	ldrh	r3, [r7, #10]
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	4929      	ldr	r1, [pc, #164]	; (8006b7c <I2C_MasterRequestRead+0x198>)
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f8a9 	bl	8006c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e044      	b.n	8006b70 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	613b      	str	r3, [r7, #16]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	613b      	str	r3, [r7, #16]
 8006afa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b0a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 f831 	bl	8006b80 <I2C_WaitOnFlagUntilTimeout>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00d      	beq.n	8006b40 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b32:	d103      	bne.n	8006b3c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b3a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e017      	b.n	8006b70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006b40:	897b      	ldrh	r3, [r7, #10]
 8006b42:	11db      	asrs	r3, r3, #7
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	f003 0306 	and.w	r3, r3, #6
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	f063 030e 	orn	r3, r3, #14
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	4907      	ldr	r1, [pc, #28]	; (8006b7c <I2C_MasterRequestRead+0x198>)
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f865 	bl	8006c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e000      	b.n	8006b70 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	00010008 	.word	0x00010008
 8006b7c:	00010002 	.word	0x00010002

08006b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b90:	e025      	b.n	8006bde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d021      	beq.n	8006bde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b9a:	f7fe fbdb 	bl	8005354 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d302      	bcc.n	8006bb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d116      	bne.n	8006bde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	f043 0220 	orr.w	r2, r3, #32
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e023      	b.n	8006c26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	0c1b      	lsrs	r3, r3, #16
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d10d      	bne.n	8006c04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	43da      	mvns	r2, r3
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bf0c      	ite	eq
 8006bfa:	2301      	moveq	r3, #1
 8006bfc:	2300      	movne	r3, #0
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	461a      	mov	r2, r3
 8006c02:	e00c      	b.n	8006c1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	43da      	mvns	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	bf0c      	ite	eq
 8006c16:	2301      	moveq	r3, #1
 8006c18:	2300      	movne	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d0b6      	beq.n	8006b92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c3c:	e051      	b.n	8006ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c4c:	d123      	bne.n	8006c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	f043 0204 	orr.w	r2, r3, #4
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e046      	b.n	8006d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d021      	beq.n	8006ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9e:	f7fe fb59 	bl	8005354 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d302      	bcc.n	8006cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d116      	bne.n	8006ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	f043 0220 	orr.w	r2, r3, #32
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e020      	b.n	8006d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	0c1b      	lsrs	r3, r3, #16
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d10c      	bne.n	8006d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	43da      	mvns	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bf14      	ite	ne
 8006cfe:	2301      	movne	r3, #1
 8006d00:	2300      	moveq	r3, #0
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	e00b      	b.n	8006d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	43da      	mvns	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	4013      	ands	r3, r2
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bf14      	ite	ne
 8006d18:	2301      	movne	r3, #1
 8006d1a:	2300      	moveq	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d18d      	bne.n	8006c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d38:	e02d      	b.n	8006d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 f8ce 	bl	8006edc <I2C_IsAcknowledgeFailed>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e02d      	b.n	8006da6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d50:	d021      	beq.n	8006d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d52:	f7fe faff 	bl	8005354 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d302      	bcc.n	8006d68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d116      	bne.n	8006d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	f043 0220 	orr.w	r2, r3, #32
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e007      	b.n	8006da6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da0:	2b80      	cmp	r3, #128	; 0x80
 8006da2:	d1ca      	bne.n	8006d3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dba:	e02d      	b.n	8006e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 f88d 	bl	8006edc <I2C_IsAcknowledgeFailed>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e02d      	b.n	8006e28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd2:	d021      	beq.n	8006e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd4:	f7fe fabe 	bl	8005354 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d302      	bcc.n	8006dea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d116      	bne.n	8006e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	f043 0220 	orr.w	r2, r3, #32
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e007      	b.n	8006e28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	f003 0304 	and.w	r3, r3, #4
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d1ca      	bne.n	8006dbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e3c:	e042      	b.n	8006ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	f003 0310 	and.w	r3, r3, #16
 8006e48:	2b10      	cmp	r3, #16
 8006e4a:	d119      	bne.n	8006e80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f06f 0210 	mvn.w	r2, #16
 8006e54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e029      	b.n	8006ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e80:	f7fe fa68 	bl	8005354 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d302      	bcc.n	8006e96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d116      	bne.n	8006ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	f043 0220 	orr.w	r2, r3, #32
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e007      	b.n	8006ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ece:	2b40      	cmp	r3, #64	; 0x40
 8006ed0:	d1b5      	bne.n	8006e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef2:	d11b      	bne.n	8006f2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006efc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	f043 0204 	orr.w	r2, r3, #4
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e000      	b.n	8006f2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
	...

08006f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e25b      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d075      	beq.n	8007046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f5a:	4ba3      	ldr	r3, [pc, #652]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 030c 	and.w	r3, r3, #12
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d00c      	beq.n	8006f80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f66:	4ba0      	ldr	r3, [pc, #640]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d112      	bne.n	8006f98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f72:	4b9d      	ldr	r3, [pc, #628]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f7e:	d10b      	bne.n	8006f98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f80:	4b99      	ldr	r3, [pc, #612]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d05b      	beq.n	8007044 <HAL_RCC_OscConfig+0x108>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d157      	bne.n	8007044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e236      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa0:	d106      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x74>
 8006fa2:	4b91      	ldr	r3, [pc, #580]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a90      	ldr	r2, [pc, #576]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	e01d      	b.n	8006fec <HAL_RCC_OscConfig+0xb0>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fb8:	d10c      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x98>
 8006fba:	4b8b      	ldr	r3, [pc, #556]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a8a      	ldr	r2, [pc, #552]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	4b88      	ldr	r3, [pc, #544]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a87      	ldr	r2, [pc, #540]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	e00b      	b.n	8006fec <HAL_RCC_OscConfig+0xb0>
 8006fd4:	4b84      	ldr	r3, [pc, #528]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a83      	ldr	r2, [pc, #524]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	4b81      	ldr	r3, [pc, #516]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a80      	ldr	r2, [pc, #512]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8006fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d013      	beq.n	800701c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ff4:	f7fe f9ae 	bl	8005354 <HAL_GetTick>
 8006ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ffc:	f7fe f9aa 	bl	8005354 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b64      	cmp	r3, #100	; 0x64
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e1fb      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800700e:	4b76      	ldr	r3, [pc, #472]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0f0      	beq.n	8006ffc <HAL_RCC_OscConfig+0xc0>
 800701a:	e014      	b.n	8007046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800701c:	f7fe f99a 	bl	8005354 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007024:	f7fe f996 	bl	8005354 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b64      	cmp	r3, #100	; 0x64
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e1e7      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007036:	4b6c      	ldr	r3, [pc, #432]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f0      	bne.n	8007024 <HAL_RCC_OscConfig+0xe8>
 8007042:	e000      	b.n	8007046 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d063      	beq.n	800711a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007052:	4b65      	ldr	r3, [pc, #404]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 030c 	and.w	r3, r3, #12
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00b      	beq.n	8007076 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800705e:	4b62      	ldr	r3, [pc, #392]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007066:	2b08      	cmp	r3, #8
 8007068:	d11c      	bne.n	80070a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800706a:	4b5f      	ldr	r3, [pc, #380]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d116      	bne.n	80070a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007076:	4b5c      	ldr	r3, [pc, #368]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_RCC_OscConfig+0x152>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d001      	beq.n	800708e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e1bb      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800708e:	4b56      	ldr	r3, [pc, #344]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	4952      	ldr	r1, [pc, #328]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070a2:	e03a      	b.n	800711a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d020      	beq.n	80070ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070ac:	4b4f      	ldr	r3, [pc, #316]	; (80071ec <HAL_RCC_OscConfig+0x2b0>)
 80070ae:	2201      	movs	r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b2:	f7fe f94f 	bl	8005354 <HAL_GetTick>
 80070b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070b8:	e008      	b.n	80070cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070ba:	f7fe f94b 	bl	8005354 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e19c      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070cc:	4b46      	ldr	r3, [pc, #280]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0f0      	beq.n	80070ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d8:	4b43      	ldr	r3, [pc, #268]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	4940      	ldr	r1, [pc, #256]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	600b      	str	r3, [r1, #0]
 80070ec:	e015      	b.n	800711a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070ee:	4b3f      	ldr	r3, [pc, #252]	; (80071ec <HAL_RCC_OscConfig+0x2b0>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f4:	f7fe f92e 	bl	8005354 <HAL_GetTick>
 80070f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070fa:	e008      	b.n	800710e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070fc:	f7fe f92a 	bl	8005354 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b02      	cmp	r3, #2
 8007108:	d901      	bls.n	800710e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e17b      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800710e:	4b36      	ldr	r3, [pc, #216]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1f0      	bne.n	80070fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0308 	and.w	r3, r3, #8
 8007122:	2b00      	cmp	r3, #0
 8007124:	d030      	beq.n	8007188 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d016      	beq.n	800715c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800712e:	4b30      	ldr	r3, [pc, #192]	; (80071f0 <HAL_RCC_OscConfig+0x2b4>)
 8007130:	2201      	movs	r2, #1
 8007132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007134:	f7fe f90e 	bl	8005354 <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800713c:	f7fe f90a 	bl	8005354 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e15b      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800714e:	4b26      	ldr	r3, [pc, #152]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 8007150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0f0      	beq.n	800713c <HAL_RCC_OscConfig+0x200>
 800715a:	e015      	b.n	8007188 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800715c:	4b24      	ldr	r3, [pc, #144]	; (80071f0 <HAL_RCC_OscConfig+0x2b4>)
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007162:	f7fe f8f7 	bl	8005354 <HAL_GetTick>
 8007166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007168:	e008      	b.n	800717c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800716a:	f7fe f8f3 	bl	8005354 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d901      	bls.n	800717c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e144      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800717c:	4b1a      	ldr	r3, [pc, #104]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 800717e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1f0      	bne.n	800716a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80a0 	beq.w	80072d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007196:	2300      	movs	r3, #0
 8007198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800719a:	4b13      	ldr	r3, [pc, #76]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10f      	bne.n	80071c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071a6:	2300      	movs	r3, #0
 80071a8:	60bb      	str	r3, [r7, #8]
 80071aa:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	4a0e      	ldr	r2, [pc, #56]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 80071b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b4:	6413      	str	r3, [r2, #64]	; 0x40
 80071b6:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <HAL_RCC_OscConfig+0x2ac>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071be:	60bb      	str	r3, [r7, #8]
 80071c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071c2:	2301      	movs	r3, #1
 80071c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c6:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <HAL_RCC_OscConfig+0x2b8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d121      	bne.n	8007216 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071d2:	4b08      	ldr	r3, [pc, #32]	; (80071f4 <HAL_RCC_OscConfig+0x2b8>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a07      	ldr	r2, [pc, #28]	; (80071f4 <HAL_RCC_OscConfig+0x2b8>)
 80071d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071de:	f7fe f8b9 	bl	8005354 <HAL_GetTick>
 80071e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071e4:	e011      	b.n	800720a <HAL_RCC_OscConfig+0x2ce>
 80071e6:	bf00      	nop
 80071e8:	40023800 	.word	0x40023800
 80071ec:	42470000 	.word	0x42470000
 80071f0:	42470e80 	.word	0x42470e80
 80071f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f8:	f7fe f8ac 	bl	8005354 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e0fd      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800720a:	4b81      	ldr	r3, [pc, #516]	; (8007410 <HAL_RCC_OscConfig+0x4d4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0f0      	beq.n	80071f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d106      	bne.n	800722c <HAL_RCC_OscConfig+0x2f0>
 800721e:	4b7d      	ldr	r3, [pc, #500]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 8007220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007222:	4a7c      	ldr	r2, [pc, #496]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 8007224:	f043 0301 	orr.w	r3, r3, #1
 8007228:	6713      	str	r3, [r2, #112]	; 0x70
 800722a:	e01c      	b.n	8007266 <HAL_RCC_OscConfig+0x32a>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b05      	cmp	r3, #5
 8007232:	d10c      	bne.n	800724e <HAL_RCC_OscConfig+0x312>
 8007234:	4b77      	ldr	r3, [pc, #476]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 8007236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007238:	4a76      	ldr	r2, [pc, #472]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 800723a:	f043 0304 	orr.w	r3, r3, #4
 800723e:	6713      	str	r3, [r2, #112]	; 0x70
 8007240:	4b74      	ldr	r3, [pc, #464]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 8007242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007244:	4a73      	ldr	r2, [pc, #460]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 8007246:	f043 0301 	orr.w	r3, r3, #1
 800724a:	6713      	str	r3, [r2, #112]	; 0x70
 800724c:	e00b      	b.n	8007266 <HAL_RCC_OscConfig+0x32a>
 800724e:	4b71      	ldr	r3, [pc, #452]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	4a70      	ldr	r2, [pc, #448]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	6713      	str	r3, [r2, #112]	; 0x70
 800725a:	4b6e      	ldr	r3, [pc, #440]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 800725c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725e:	4a6d      	ldr	r2, [pc, #436]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 8007260:	f023 0304 	bic.w	r3, r3, #4
 8007264:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d015      	beq.n	800729a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800726e:	f7fe f871 	bl	8005354 <HAL_GetTick>
 8007272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007274:	e00a      	b.n	800728c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007276:	f7fe f86d 	bl	8005354 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	f241 3288 	movw	r2, #5000	; 0x1388
 8007284:	4293      	cmp	r3, r2
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e0bc      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800728c:	4b61      	ldr	r3, [pc, #388]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 800728e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0ee      	beq.n	8007276 <HAL_RCC_OscConfig+0x33a>
 8007298:	e014      	b.n	80072c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800729a:	f7fe f85b 	bl	8005354 <HAL_GetTick>
 800729e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072a0:	e00a      	b.n	80072b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072a2:	f7fe f857 	bl	8005354 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e0a6      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072b8:	4b56      	ldr	r3, [pc, #344]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 80072ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1ee      	bne.n	80072a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d105      	bne.n	80072d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ca:	4b52      	ldr	r3, [pc, #328]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	4a51      	ldr	r2, [pc, #324]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 80072d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 8092 	beq.w	8007404 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072e0:	4b4c      	ldr	r3, [pc, #304]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f003 030c 	and.w	r3, r3, #12
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d05c      	beq.n	80073a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d141      	bne.n	8007378 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072f4:	4b48      	ldr	r3, [pc, #288]	; (8007418 <HAL_RCC_OscConfig+0x4dc>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072fa:	f7fe f82b 	bl	8005354 <HAL_GetTick>
 80072fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007300:	e008      	b.n	8007314 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007302:	f7fe f827 	bl	8005354 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d901      	bls.n	8007314 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e078      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007314:	4b3f      	ldr	r3, [pc, #252]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1f0      	bne.n	8007302 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69da      	ldr	r2, [r3, #28]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	019b      	lsls	r3, r3, #6
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007336:	085b      	lsrs	r3, r3, #1
 8007338:	3b01      	subs	r3, #1
 800733a:	041b      	lsls	r3, r3, #16
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007342:	061b      	lsls	r3, r3, #24
 8007344:	4933      	ldr	r1, [pc, #204]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 8007346:	4313      	orrs	r3, r2
 8007348:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800734a:	4b33      	ldr	r3, [pc, #204]	; (8007418 <HAL_RCC_OscConfig+0x4dc>)
 800734c:	2201      	movs	r2, #1
 800734e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007350:	f7fe f800 	bl	8005354 <HAL_GetTick>
 8007354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007356:	e008      	b.n	800736a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007358:	f7fd fffc 	bl	8005354 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d901      	bls.n	800736a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e04d      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800736a:	4b2a      	ldr	r3, [pc, #168]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0f0      	beq.n	8007358 <HAL_RCC_OscConfig+0x41c>
 8007376:	e045      	b.n	8007404 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007378:	4b27      	ldr	r3, [pc, #156]	; (8007418 <HAL_RCC_OscConfig+0x4dc>)
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800737e:	f7fd ffe9 	bl	8005354 <HAL_GetTick>
 8007382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007384:	e008      	b.n	8007398 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007386:	f7fd ffe5 	bl	8005354 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d901      	bls.n	8007398 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e036      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007398:	4b1e      	ldr	r3, [pc, #120]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f0      	bne.n	8007386 <HAL_RCC_OscConfig+0x44a>
 80073a4:	e02e      	b.n	8007404 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d101      	bne.n	80073b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e029      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073b2:	4b18      	ldr	r3, [pc, #96]	; (8007414 <HAL_RCC_OscConfig+0x4d8>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d11c      	bne.n	8007400 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d115      	bne.n	8007400 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073da:	4013      	ands	r3, r2
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d10d      	bne.n	8007400 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d106      	bne.n	8007400 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d001      	beq.n	8007404 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e000      	b.n	8007406 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	40007000 	.word	0x40007000
 8007414:	40023800 	.word	0x40023800
 8007418:	42470060 	.word	0x42470060

0800741c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e0cc      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007430:	4b68      	ldr	r3, [pc, #416]	; (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d90c      	bls.n	8007458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800743e:	4b65      	ldr	r3, [pc, #404]	; (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007446:	4b63      	ldr	r3, [pc, #396]	; (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 030f 	and.w	r3, r3, #15
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	429a      	cmp	r2, r3
 8007452:	d001      	beq.n	8007458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e0b8      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d020      	beq.n	80074a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007470:	4b59      	ldr	r3, [pc, #356]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	4a58      	ldr	r2, [pc, #352]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800747a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007488:	4b53      	ldr	r3, [pc, #332]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	4a52      	ldr	r2, [pc, #328]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007494:	4b50      	ldr	r3, [pc, #320]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	494d      	ldr	r1, [pc, #308]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d044      	beq.n	800753c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d107      	bne.n	80074ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ba:	4b47      	ldr	r3, [pc, #284]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d119      	bne.n	80074fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e07f      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d003      	beq.n	80074da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d107      	bne.n	80074ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074da:	4b3f      	ldr	r3, [pc, #252]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d109      	bne.n	80074fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e06f      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ea:	4b3b      	ldr	r3, [pc, #236]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e067      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074fa:	4b37      	ldr	r3, [pc, #220]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f023 0203 	bic.w	r2, r3, #3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	4934      	ldr	r1, [pc, #208]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007508:	4313      	orrs	r3, r2
 800750a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800750c:	f7fd ff22 	bl	8005354 <HAL_GetTick>
 8007510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007512:	e00a      	b.n	800752a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007514:	f7fd ff1e 	bl	8005354 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007522:	4293      	cmp	r3, r2
 8007524:	d901      	bls.n	800752a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e04f      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800752a:	4b2b      	ldr	r3, [pc, #172]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f003 020c 	and.w	r2, r3, #12
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	429a      	cmp	r2, r3
 800753a:	d1eb      	bne.n	8007514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800753c:	4b25      	ldr	r3, [pc, #148]	; (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 030f 	and.w	r3, r3, #15
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d20c      	bcs.n	8007564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754a:	4b22      	ldr	r3, [pc, #136]	; (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007552:	4b20      	ldr	r3, [pc, #128]	; (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	429a      	cmp	r2, r3
 800755e:	d001      	beq.n	8007564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e032      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	d008      	beq.n	8007582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007570:	4b19      	ldr	r3, [pc, #100]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	4916      	ldr	r1, [pc, #88]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800757e:	4313      	orrs	r3, r2
 8007580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800758e:	4b12      	ldr	r3, [pc, #72]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	490e      	ldr	r1, [pc, #56]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075a2:	f000 f821 	bl	80075e8 <HAL_RCC_GetSysClockFreq>
 80075a6:	4601      	mov	r1, r0
 80075a8:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	091b      	lsrs	r3, r3, #4
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	4a0a      	ldr	r2, [pc, #40]	; (80075dc <HAL_RCC_ClockConfig+0x1c0>)
 80075b4:	5cd3      	ldrb	r3, [r2, r3]
 80075b6:	fa21 f303 	lsr.w	r3, r1, r3
 80075ba:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <HAL_RCC_ClockConfig+0x1c4>)
 80075bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075be:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <HAL_RCC_ClockConfig+0x1c8>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fd fe82 	bl	80052cc <HAL_InitTick>

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	40023c00 	.word	0x40023c00
 80075d8:	40023800 	.word	0x40023800
 80075dc:	0800b230 	.word	0x0800b230
 80075e0:	20000000 	.word	0x20000000
 80075e4:	20000004 	.word	0x20000004

080075e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	607b      	str	r3, [r7, #4]
 80075f2:	2300      	movs	r3, #0
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	2300      	movs	r3, #0
 80075f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075fe:	4b63      	ldr	r3, [pc, #396]	; (800778c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 030c 	and.w	r3, r3, #12
 8007606:	2b04      	cmp	r3, #4
 8007608:	d007      	beq.n	800761a <HAL_RCC_GetSysClockFreq+0x32>
 800760a:	2b08      	cmp	r3, #8
 800760c:	d008      	beq.n	8007620 <HAL_RCC_GetSysClockFreq+0x38>
 800760e:	2b00      	cmp	r3, #0
 8007610:	f040 80b4 	bne.w	800777c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007614:	4b5e      	ldr	r3, [pc, #376]	; (8007790 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007616:	60bb      	str	r3, [r7, #8]
       break;
 8007618:	e0b3      	b.n	8007782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800761a:	4b5e      	ldr	r3, [pc, #376]	; (8007794 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800761c:	60bb      	str	r3, [r7, #8]
      break;
 800761e:	e0b0      	b.n	8007782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007620:	4b5a      	ldr	r3, [pc, #360]	; (800778c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007628:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800762a:	4b58      	ldr	r3, [pc, #352]	; (800778c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d04a      	beq.n	80076cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007636:	4b55      	ldr	r3, [pc, #340]	; (800778c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	099b      	lsrs	r3, r3, #6
 800763c:	f04f 0400 	mov.w	r4, #0
 8007640:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	ea03 0501 	and.w	r5, r3, r1
 800764c:	ea04 0602 	and.w	r6, r4, r2
 8007650:	4629      	mov	r1, r5
 8007652:	4632      	mov	r2, r6
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	f04f 0400 	mov.w	r4, #0
 800765c:	0154      	lsls	r4, r2, #5
 800765e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007662:	014b      	lsls	r3, r1, #5
 8007664:	4619      	mov	r1, r3
 8007666:	4622      	mov	r2, r4
 8007668:	1b49      	subs	r1, r1, r5
 800766a:	eb62 0206 	sbc.w	r2, r2, r6
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	f04f 0400 	mov.w	r4, #0
 8007676:	0194      	lsls	r4, r2, #6
 8007678:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800767c:	018b      	lsls	r3, r1, #6
 800767e:	1a5b      	subs	r3, r3, r1
 8007680:	eb64 0402 	sbc.w	r4, r4, r2
 8007684:	f04f 0100 	mov.w	r1, #0
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	00e2      	lsls	r2, r4, #3
 800768e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007692:	00d9      	lsls	r1, r3, #3
 8007694:	460b      	mov	r3, r1
 8007696:	4614      	mov	r4, r2
 8007698:	195b      	adds	r3, r3, r5
 800769a:	eb44 0406 	adc.w	r4, r4, r6
 800769e:	f04f 0100 	mov.w	r1, #0
 80076a2:	f04f 0200 	mov.w	r2, #0
 80076a6:	0262      	lsls	r2, r4, #9
 80076a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80076ac:	0259      	lsls	r1, r3, #9
 80076ae:	460b      	mov	r3, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	4618      	mov	r0, r3
 80076b4:	4621      	mov	r1, r4
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f04f 0400 	mov.w	r4, #0
 80076bc:	461a      	mov	r2, r3
 80076be:	4623      	mov	r3, r4
 80076c0:	f7f9 fac2 	bl	8000c48 <__aeabi_uldivmod>
 80076c4:	4603      	mov	r3, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	e049      	b.n	8007760 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076cc:	4b2f      	ldr	r3, [pc, #188]	; (800778c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	099b      	lsrs	r3, r3, #6
 80076d2:	f04f 0400 	mov.w	r4, #0
 80076d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80076da:	f04f 0200 	mov.w	r2, #0
 80076de:	ea03 0501 	and.w	r5, r3, r1
 80076e2:	ea04 0602 	and.w	r6, r4, r2
 80076e6:	4629      	mov	r1, r5
 80076e8:	4632      	mov	r2, r6
 80076ea:	f04f 0300 	mov.w	r3, #0
 80076ee:	f04f 0400 	mov.w	r4, #0
 80076f2:	0154      	lsls	r4, r2, #5
 80076f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80076f8:	014b      	lsls	r3, r1, #5
 80076fa:	4619      	mov	r1, r3
 80076fc:	4622      	mov	r2, r4
 80076fe:	1b49      	subs	r1, r1, r5
 8007700:	eb62 0206 	sbc.w	r2, r2, r6
 8007704:	f04f 0300 	mov.w	r3, #0
 8007708:	f04f 0400 	mov.w	r4, #0
 800770c:	0194      	lsls	r4, r2, #6
 800770e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007712:	018b      	lsls	r3, r1, #6
 8007714:	1a5b      	subs	r3, r3, r1
 8007716:	eb64 0402 	sbc.w	r4, r4, r2
 800771a:	f04f 0100 	mov.w	r1, #0
 800771e:	f04f 0200 	mov.w	r2, #0
 8007722:	00e2      	lsls	r2, r4, #3
 8007724:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007728:	00d9      	lsls	r1, r3, #3
 800772a:	460b      	mov	r3, r1
 800772c:	4614      	mov	r4, r2
 800772e:	195b      	adds	r3, r3, r5
 8007730:	eb44 0406 	adc.w	r4, r4, r6
 8007734:	f04f 0100 	mov.w	r1, #0
 8007738:	f04f 0200 	mov.w	r2, #0
 800773c:	02a2      	lsls	r2, r4, #10
 800773e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007742:	0299      	lsls	r1, r3, #10
 8007744:	460b      	mov	r3, r1
 8007746:	4614      	mov	r4, r2
 8007748:	4618      	mov	r0, r3
 800774a:	4621      	mov	r1, r4
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f04f 0400 	mov.w	r4, #0
 8007752:	461a      	mov	r2, r3
 8007754:	4623      	mov	r3, r4
 8007756:	f7f9 fa77 	bl	8000c48 <__aeabi_uldivmod>
 800775a:	4603      	mov	r3, r0
 800775c:	460c      	mov	r4, r1
 800775e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007760:	4b0a      	ldr	r3, [pc, #40]	; (800778c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	0c1b      	lsrs	r3, r3, #16
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	3301      	adds	r3, #1
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	fbb2 f3f3 	udiv	r3, r2, r3
 8007778:	60bb      	str	r3, [r7, #8]
      break;
 800777a:	e002      	b.n	8007782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800777c:	4b04      	ldr	r3, [pc, #16]	; (8007790 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800777e:	60bb      	str	r3, [r7, #8]
      break;
 8007780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007782:	68bb      	ldr	r3, [r7, #8]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800778c:	40023800 	.word	0x40023800
 8007790:	00f42400 	.word	0x00f42400
 8007794:	007a1200 	.word	0x007a1200

08007798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800779c:	4b03      	ldr	r3, [pc, #12]	; (80077ac <HAL_RCC_GetHCLKFreq+0x14>)
 800779e:	681b      	ldr	r3, [r3, #0]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	20000000 	.word	0x20000000

080077b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80077b4:	f7ff fff0 	bl	8007798 <HAL_RCC_GetHCLKFreq>
 80077b8:	4601      	mov	r1, r0
 80077ba:	4b05      	ldr	r3, [pc, #20]	; (80077d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	0a9b      	lsrs	r3, r3, #10
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	4a03      	ldr	r2, [pc, #12]	; (80077d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077c6:	5cd3      	ldrb	r3, [r2, r3]
 80077c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	40023800 	.word	0x40023800
 80077d4:	0800b240 	.word	0x0800b240

080077d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80077dc:	f7ff ffdc 	bl	8007798 <HAL_RCC_GetHCLKFreq>
 80077e0:	4601      	mov	r1, r0
 80077e2:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	0b5b      	lsrs	r3, r3, #13
 80077e8:	f003 0307 	and.w	r3, r3, #7
 80077ec:	4a03      	ldr	r2, [pc, #12]	; (80077fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80077ee:	5cd3      	ldrb	r3, [r2, r3]
 80077f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	40023800 	.word	0x40023800
 80077fc:	0800b240 	.word	0x0800b240

08007800 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e01d      	b.n	800784e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d106      	bne.n	800782c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7fd fb62 	bl	8004ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3304      	adds	r3, #4
 800783c:	4619      	mov	r1, r3
 800783e:	4610      	mov	r0, r2
 8007840:	f000 f90e 	bl	8007a60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
	...

08007858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2201      	movs	r2, #1
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fb48 	bl	8007f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a15      	ldr	r2, [pc, #84]	; (80078cc <HAL_TIM_PWM_Start+0x74>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d004      	beq.n	8007884 <HAL_TIM_PWM_Start+0x2c>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a14      	ldr	r2, [pc, #80]	; (80078d0 <HAL_TIM_PWM_Start+0x78>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d101      	bne.n	8007888 <HAL_TIM_PWM_Start+0x30>
 8007884:	2301      	movs	r3, #1
 8007886:	e000      	b.n	800788a <HAL_TIM_PWM_Start+0x32>
 8007888:	2300      	movs	r3, #0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d007      	beq.n	800789e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800789c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b06      	cmp	r3, #6
 80078ae:	d007      	beq.n	80078c0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40010400 	.word	0x40010400

080078d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d101      	bne.n	80078ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80078ea:	2302      	movs	r3, #2
 80078ec:	e0b4      	b.n	8007a58 <HAL_TIM_PWM_ConfigChannel+0x184>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2202      	movs	r2, #2
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b0c      	cmp	r3, #12
 8007902:	f200 809f 	bhi.w	8007a44 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007906:	a201      	add	r2, pc, #4	; (adr r2, 800790c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	08007941 	.word	0x08007941
 8007910:	08007a45 	.word	0x08007a45
 8007914:	08007a45 	.word	0x08007a45
 8007918:	08007a45 	.word	0x08007a45
 800791c:	08007981 	.word	0x08007981
 8007920:	08007a45 	.word	0x08007a45
 8007924:	08007a45 	.word	0x08007a45
 8007928:	08007a45 	.word	0x08007a45
 800792c:	080079c3 	.word	0x080079c3
 8007930:	08007a45 	.word	0x08007a45
 8007934:	08007a45 	.word	0x08007a45
 8007938:	08007a45 	.word	0x08007a45
 800793c:	08007a03 	.word	0x08007a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f92a 	bl	8007ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0208 	orr.w	r2, r2, #8
 800795a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0204 	bic.w	r2, r2, #4
 800796a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6999      	ldr	r1, [r3, #24]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	619a      	str	r2, [r3, #24]
      break;
 800797e:	e062      	b.n	8007a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68b9      	ldr	r1, [r7, #8]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f97a 	bl	8007c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800799a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6999      	ldr	r1, [r3, #24]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	021a      	lsls	r2, r3, #8
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	619a      	str	r2, [r3, #24]
      break;
 80079c0:	e041      	b.n	8007a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68b9      	ldr	r1, [r7, #8]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 f9cf 	bl	8007d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69da      	ldr	r2, [r3, #28]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f042 0208 	orr.w	r2, r2, #8
 80079dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69da      	ldr	r2, [r3, #28]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0204 	bic.w	r2, r2, #4
 80079ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69d9      	ldr	r1, [r3, #28]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	61da      	str	r2, [r3, #28]
      break;
 8007a00:	e021      	b.n	8007a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 fa23 	bl	8007e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69d9      	ldr	r1, [r3, #28]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	021a      	lsls	r2, r3, #8
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	61da      	str	r2, [r3, #28]
      break;
 8007a42:	e000      	b.n	8007a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007a44:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a40      	ldr	r2, [pc, #256]	; (8007b74 <TIM_Base_SetConfig+0x114>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d013      	beq.n	8007aa0 <TIM_Base_SetConfig+0x40>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a7e:	d00f      	beq.n	8007aa0 <TIM_Base_SetConfig+0x40>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a3d      	ldr	r2, [pc, #244]	; (8007b78 <TIM_Base_SetConfig+0x118>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d00b      	beq.n	8007aa0 <TIM_Base_SetConfig+0x40>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a3c      	ldr	r2, [pc, #240]	; (8007b7c <TIM_Base_SetConfig+0x11c>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d007      	beq.n	8007aa0 <TIM_Base_SetConfig+0x40>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a3b      	ldr	r2, [pc, #236]	; (8007b80 <TIM_Base_SetConfig+0x120>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d003      	beq.n	8007aa0 <TIM_Base_SetConfig+0x40>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a3a      	ldr	r2, [pc, #232]	; (8007b84 <TIM_Base_SetConfig+0x124>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d108      	bne.n	8007ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a2f      	ldr	r2, [pc, #188]	; (8007b74 <TIM_Base_SetConfig+0x114>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d02b      	beq.n	8007b12 <TIM_Base_SetConfig+0xb2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ac0:	d027      	beq.n	8007b12 <TIM_Base_SetConfig+0xb2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a2c      	ldr	r2, [pc, #176]	; (8007b78 <TIM_Base_SetConfig+0x118>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d023      	beq.n	8007b12 <TIM_Base_SetConfig+0xb2>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a2b      	ldr	r2, [pc, #172]	; (8007b7c <TIM_Base_SetConfig+0x11c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d01f      	beq.n	8007b12 <TIM_Base_SetConfig+0xb2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a2a      	ldr	r2, [pc, #168]	; (8007b80 <TIM_Base_SetConfig+0x120>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d01b      	beq.n	8007b12 <TIM_Base_SetConfig+0xb2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a29      	ldr	r2, [pc, #164]	; (8007b84 <TIM_Base_SetConfig+0x124>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d017      	beq.n	8007b12 <TIM_Base_SetConfig+0xb2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a28      	ldr	r2, [pc, #160]	; (8007b88 <TIM_Base_SetConfig+0x128>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d013      	beq.n	8007b12 <TIM_Base_SetConfig+0xb2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a27      	ldr	r2, [pc, #156]	; (8007b8c <TIM_Base_SetConfig+0x12c>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00f      	beq.n	8007b12 <TIM_Base_SetConfig+0xb2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a26      	ldr	r2, [pc, #152]	; (8007b90 <TIM_Base_SetConfig+0x130>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d00b      	beq.n	8007b12 <TIM_Base_SetConfig+0xb2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a25      	ldr	r2, [pc, #148]	; (8007b94 <TIM_Base_SetConfig+0x134>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d007      	beq.n	8007b12 <TIM_Base_SetConfig+0xb2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a24      	ldr	r2, [pc, #144]	; (8007b98 <TIM_Base_SetConfig+0x138>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d003      	beq.n	8007b12 <TIM_Base_SetConfig+0xb2>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a23      	ldr	r2, [pc, #140]	; (8007b9c <TIM_Base_SetConfig+0x13c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d108      	bne.n	8007b24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a0a      	ldr	r2, [pc, #40]	; (8007b74 <TIM_Base_SetConfig+0x114>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d003      	beq.n	8007b58 <TIM_Base_SetConfig+0xf8>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a0c      	ldr	r2, [pc, #48]	; (8007b84 <TIM_Base_SetConfig+0x124>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d103      	bne.n	8007b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	691a      	ldr	r2, [r3, #16]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	615a      	str	r2, [r3, #20]
}
 8007b66:	bf00      	nop
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	40010000 	.word	0x40010000
 8007b78:	40000400 	.word	0x40000400
 8007b7c:	40000800 	.word	0x40000800
 8007b80:	40000c00 	.word	0x40000c00
 8007b84:	40010400 	.word	0x40010400
 8007b88:	40014000 	.word	0x40014000
 8007b8c:	40014400 	.word	0x40014400
 8007b90:	40014800 	.word	0x40014800
 8007b94:	40001800 	.word	0x40001800
 8007b98:	40001c00 	.word	0x40001c00
 8007b9c:	40002000 	.word	0x40002000

08007ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	f023 0201 	bic.w	r2, r3, #1
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0303 	bic.w	r3, r3, #3
 8007bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f023 0302 	bic.w	r3, r3, #2
 8007be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a20      	ldr	r2, [pc, #128]	; (8007c78 <TIM_OC1_SetConfig+0xd8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d003      	beq.n	8007c04 <TIM_OC1_SetConfig+0x64>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a1f      	ldr	r2, [pc, #124]	; (8007c7c <TIM_OC1_SetConfig+0xdc>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d10c      	bne.n	8007c1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f023 0308 	bic.w	r3, r3, #8
 8007c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f023 0304 	bic.w	r3, r3, #4
 8007c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a15      	ldr	r2, [pc, #84]	; (8007c78 <TIM_OC1_SetConfig+0xd8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d003      	beq.n	8007c2e <TIM_OC1_SetConfig+0x8e>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a14      	ldr	r2, [pc, #80]	; (8007c7c <TIM_OC1_SetConfig+0xdc>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d111      	bne.n	8007c52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	621a      	str	r2, [r3, #32]
}
 8007c6c:	bf00      	nop
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	40010000 	.word	0x40010000
 8007c7c:	40010400 	.word	0x40010400

08007c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	f023 0210 	bic.w	r2, r3, #16
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f023 0320 	bic.w	r3, r3, #32
 8007cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a22      	ldr	r2, [pc, #136]	; (8007d64 <TIM_OC2_SetConfig+0xe4>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d003      	beq.n	8007ce8 <TIM_OC2_SetConfig+0x68>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a21      	ldr	r2, [pc, #132]	; (8007d68 <TIM_OC2_SetConfig+0xe8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d10d      	bne.n	8007d04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a17      	ldr	r2, [pc, #92]	; (8007d64 <TIM_OC2_SetConfig+0xe4>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d003      	beq.n	8007d14 <TIM_OC2_SetConfig+0x94>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a16      	ldr	r2, [pc, #88]	; (8007d68 <TIM_OC2_SetConfig+0xe8>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d113      	bne.n	8007d3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	621a      	str	r2, [r3, #32]
}
 8007d56:	bf00      	nop
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40010000 	.word	0x40010000
 8007d68:	40010400 	.word	0x40010400

08007d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a21      	ldr	r2, [pc, #132]	; (8007e4c <TIM_OC3_SetConfig+0xe0>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d003      	beq.n	8007dd2 <TIM_OC3_SetConfig+0x66>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a20      	ldr	r2, [pc, #128]	; (8007e50 <TIM_OC3_SetConfig+0xe4>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d10d      	bne.n	8007dee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	021b      	lsls	r3, r3, #8
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a16      	ldr	r2, [pc, #88]	; (8007e4c <TIM_OC3_SetConfig+0xe0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d003      	beq.n	8007dfe <TIM_OC3_SetConfig+0x92>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a15      	ldr	r2, [pc, #84]	; (8007e50 <TIM_OC3_SetConfig+0xe4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d113      	bne.n	8007e26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	011b      	lsls	r3, r3, #4
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	011b      	lsls	r3, r3, #4
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	621a      	str	r2, [r3, #32]
}
 8007e40:	bf00      	nop
 8007e42:	371c      	adds	r7, #28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	40010000 	.word	0x40010000
 8007e50:	40010400 	.word	0x40010400

08007e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	021b      	lsls	r3, r3, #8
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	031b      	lsls	r3, r3, #12
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a12      	ldr	r2, [pc, #72]	; (8007ef8 <TIM_OC4_SetConfig+0xa4>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d003      	beq.n	8007ebc <TIM_OC4_SetConfig+0x68>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a11      	ldr	r2, [pc, #68]	; (8007efc <TIM_OC4_SetConfig+0xa8>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d109      	bne.n	8007ed0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	019b      	lsls	r3, r3, #6
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	621a      	str	r2, [r3, #32]
}
 8007eea:	bf00      	nop
 8007eec:	371c      	adds	r7, #28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	40010000 	.word	0x40010000
 8007efc:	40010400 	.word	0x40010400

08007f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f003 031f 	and.w	r3, r3, #31
 8007f12:	2201      	movs	r2, #1
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6a1a      	ldr	r2, [r3, #32]
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	43db      	mvns	r3, r3
 8007f22:	401a      	ands	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a1a      	ldr	r2, [r3, #32]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f003 031f 	and.w	r3, r3, #31
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	fa01 f303 	lsl.w	r3, r1, r3
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	621a      	str	r2, [r3, #32]
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
	...

08007f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e05a      	b.n	800801a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a21      	ldr	r2, [pc, #132]	; (8008028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d022      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb0:	d01d      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a1d      	ldr	r2, [pc, #116]	; (800802c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d018      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a1b      	ldr	r2, [pc, #108]	; (8008030 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d013      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a1a      	ldr	r2, [pc, #104]	; (8008034 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00e      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a18      	ldr	r2, [pc, #96]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d009      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a17      	ldr	r2, [pc, #92]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d004      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a15      	ldr	r2, [pc, #84]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d10c      	bne.n	8008008 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	40010000 	.word	0x40010000
 800802c:	40000400 	.word	0x40000400
 8008030:	40000800 	.word	0x40000800
 8008034:	40000c00 	.word	0x40000c00
 8008038:	40010400 	.word	0x40010400
 800803c:	40014000 	.word	0x40014000
 8008040:	40001800 	.word	0x40001800

08008044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e03f      	b.n	80080d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d106      	bne.n	8008070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7fc ff9c 	bl	8004fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2224      	movs	r2, #36	; 0x24
 8008074:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68da      	ldr	r2, [r3, #12]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fc77 	bl	800897c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	691a      	ldr	r2, [r3, #16]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800809c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	695a      	ldr	r2, [r3, #20]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68da      	ldr	r2, [r3, #12]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b088      	sub	sp, #32
 80080e2:	af02      	add	r7, sp, #8
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	603b      	str	r3, [r7, #0]
 80080ea:	4613      	mov	r3, r2
 80080ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b20      	cmp	r3, #32
 80080fc:	f040 8083 	bne.w	8008206 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d002      	beq.n	800810c <HAL_UART_Transmit+0x2e>
 8008106:	88fb      	ldrh	r3, [r7, #6]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e07b      	b.n	8008208 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <HAL_UART_Transmit+0x40>
 800811a:	2302      	movs	r3, #2
 800811c:	e074      	b.n	8008208 <HAL_UART_Transmit+0x12a>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2221      	movs	r2, #33	; 0x21
 8008130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008134:	f7fd f90e 	bl	8005354 <HAL_GetTick>
 8008138:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	88fa      	ldrh	r2, [r7, #6]
 800813e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	88fa      	ldrh	r2, [r7, #6]
 8008144:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800814e:	e042      	b.n	80081d6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008154:	b29b      	uxth	r3, r3
 8008156:	3b01      	subs	r3, #1
 8008158:	b29a      	uxth	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008166:	d122      	bne.n	80081ae <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	2200      	movs	r2, #0
 8008170:	2180      	movs	r1, #128	; 0x80
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 fa80 	bl	8008678 <UART_WaitOnFlagUntilTimeout>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e042      	b.n	8008208 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008194:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d103      	bne.n	80081a6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	3302      	adds	r3, #2
 80081a2:	60bb      	str	r3, [r7, #8]
 80081a4:	e017      	b.n	80081d6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	3301      	adds	r3, #1
 80081aa:	60bb      	str	r3, [r7, #8]
 80081ac:	e013      	b.n	80081d6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2200      	movs	r2, #0
 80081b6:	2180      	movs	r1, #128	; 0x80
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 fa5d 	bl	8008678 <UART_WaitOnFlagUntilTimeout>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e01f      	b.n	8008208 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	1c5a      	adds	r2, r3, #1
 80081cc:	60ba      	str	r2, [r7, #8]
 80081ce:	781a      	ldrb	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081da:	b29b      	uxth	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1b7      	bne.n	8008150 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2200      	movs	r2, #0
 80081e8:	2140      	movs	r1, #64	; 0x40
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fa44 	bl	8008678 <UART_WaitOnFlagUntilTimeout>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e006      	b.n	8008208 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	e000      	b.n	8008208 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008206:	2302      	movs	r3, #2
  }
}
 8008208:	4618      	mov	r0, r3
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	4613      	mov	r3, r2
 800821c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b20      	cmp	r3, #32
 8008228:	d166      	bne.n	80082f8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <HAL_UART_Receive_DMA+0x26>
 8008230:	88fb      	ldrh	r3, [r7, #6]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e05f      	b.n	80082fa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <HAL_UART_Receive_DMA+0x38>
 8008244:	2302      	movs	r3, #2
 8008246:	e058      	b.n	80082fa <HAL_UART_Receive_DMA+0xea>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	88fa      	ldrh	r2, [r7, #6]
 800825a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2222      	movs	r2, #34	; 0x22
 8008266:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826e:	4a25      	ldr	r2, [pc, #148]	; (8008304 <HAL_UART_Receive_DMA+0xf4>)
 8008270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008276:	4a24      	ldr	r2, [pc, #144]	; (8008308 <HAL_UART_Receive_DMA+0xf8>)
 8008278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827e:	4a23      	ldr	r2, [pc, #140]	; (800830c <HAL_UART_Receive_DMA+0xfc>)
 8008280:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008286:	2200      	movs	r2, #0
 8008288:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800828a:	f107 0308 	add.w	r3, r7, #8
 800828e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3304      	adds	r3, #4
 800829a:	4619      	mov	r1, r3
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	88fb      	ldrh	r3, [r7, #6]
 80082a2:	f7fd fa45 	bl	8005730 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80082a6:	2300      	movs	r3, #0
 80082a8:	613b      	str	r3, [r7, #16]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	613b      	str	r3, [r7, #16]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	613b      	str	r3, [r7, #16]
 80082ba:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082d2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	695a      	ldr	r2, [r3, #20]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	695a      	ldr	r2, [r3, #20]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082f2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	e000      	b.n	80082fa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80082f8:	2302      	movs	r3, #2
  }
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	08008561 	.word	0x08008561
 8008308:	080085c9 	.word	0x080085c9
 800830c:	080085e5 	.word	0x080085e5

08008310 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008330:	2300      	movs	r3, #0
 8008332:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008334:	2300      	movs	r3, #0
 8008336:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10d      	bne.n	8008362 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	f003 0320 	and.w	r3, r3, #32
 800834c:	2b00      	cmp	r3, #0
 800834e:	d008      	beq.n	8008362 <HAL_UART_IRQHandler+0x52>
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	f003 0320 	and.w	r3, r3, #32
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fa8c 	bl	8008878 <UART_Receive_IT>
      return;
 8008360:	e0d1      	b.n	8008506 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 80b0 	beq.w	80084ca <HAL_UART_IRQHandler+0x1ba>
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d105      	bne.n	8008380 <HAL_UART_IRQHandler+0x70>
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 80a5 	beq.w	80084ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <HAL_UART_IRQHandler+0x90>
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008398:	f043 0201 	orr.w	r2, r3, #1
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00a      	beq.n	80083c0 <HAL_UART_IRQHandler+0xb0>
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d005      	beq.n	80083c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b8:	f043 0202 	orr.w	r2, r3, #2
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f003 0302 	and.w	r3, r3, #2
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <HAL_UART_IRQHandler+0xd0>
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d005      	beq.n	80083e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d8:	f043 0204 	orr.w	r2, r3, #4
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	f003 0308 	and.w	r3, r3, #8
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00f      	beq.n	800840a <HAL_UART_IRQHandler+0xfa>
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	f003 0320 	and.w	r3, r3, #32
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d104      	bne.n	80083fe <HAL_UART_IRQHandler+0xee>
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d005      	beq.n	800840a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008402:	f043 0208 	orr.w	r2, r3, #8
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d078      	beq.n	8008504 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	f003 0320 	and.w	r3, r3, #32
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <HAL_UART_IRQHandler+0x11c>
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	f003 0320 	and.w	r3, r3, #32
 8008422:	2b00      	cmp	r3, #0
 8008424:	d002      	beq.n	800842c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fa26 	bl	8008878 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008436:	2b40      	cmp	r3, #64	; 0x40
 8008438:	bf0c      	ite	eq
 800843a:	2301      	moveq	r3, #1
 800843c:	2300      	movne	r3, #0
 800843e:	b2db      	uxtb	r3, r3
 8008440:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008446:	f003 0308 	and.w	r3, r3, #8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d102      	bne.n	8008454 <HAL_UART_IRQHandler+0x144>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d031      	beq.n	80084b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f96f 	bl	8008738 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008464:	2b40      	cmp	r3, #64	; 0x40
 8008466:	d123      	bne.n	80084b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	695a      	ldr	r2, [r3, #20]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008476:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847c:	2b00      	cmp	r3, #0
 800847e:	d013      	beq.n	80084a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008484:	4a21      	ldr	r2, [pc, #132]	; (800850c <HAL_UART_IRQHandler+0x1fc>)
 8008486:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848c:	4618      	mov	r0, r3
 800848e:	f7fd f9a7 	bl	80057e0 <HAL_DMA_Abort_IT>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d016      	beq.n	80084c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80084a2:	4610      	mov	r0, r2
 80084a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a6:	e00e      	b.n	80084c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f84f 	bl	800854c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ae:	e00a      	b.n	80084c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f84b 	bl	800854c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b6:	e006      	b.n	80084c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f847 	bl	800854c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80084c4:	e01e      	b.n	8008504 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c6:	bf00      	nop
    return;
 80084c8:	e01c      	b.n	8008504 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d008      	beq.n	80084e6 <HAL_UART_IRQHandler+0x1d6>
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f95c 	bl	800879c <UART_Transmit_IT>
    return;
 80084e4:	e00f      	b.n	8008506 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00a      	beq.n	8008506 <HAL_UART_IRQHandler+0x1f6>
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d005      	beq.n	8008506 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f9a4 	bl	8008848 <UART_EndTransmit_IT>
    return;
 8008500:	bf00      	nop
 8008502:	e000      	b.n	8008506 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008504:	bf00      	nop
  }
}
 8008506:	3720      	adds	r7, #32
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	08008775 	.word	0x08008775

08008510 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008578:	2b00      	cmp	r3, #0
 800857a:	d11e      	bne.n	80085ba <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008590:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	695a      	ldr	r2, [r3, #20]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 0201 	bic.w	r2, r2, #1
 80085a0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	695a      	ldr	r2, [r3, #20]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085b0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2220      	movs	r2, #32
 80085b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f7ff ffb2 	bl	8008524 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f7ff ffae 	bl	8008538 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085dc:	bf00      	nop
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008600:	2b80      	cmp	r3, #128	; 0x80
 8008602:	bf0c      	ite	eq
 8008604:	2301      	moveq	r3, #1
 8008606:	2300      	movne	r3, #0
 8008608:	b2db      	uxtb	r3, r3
 800860a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b21      	cmp	r3, #33	; 0x21
 8008616:	d108      	bne.n	800862a <UART_DMAError+0x46>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d005      	beq.n	800862a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2200      	movs	r2, #0
 8008622:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008624:	68b8      	ldr	r0, [r7, #8]
 8008626:	f000 f871 	bl	800870c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008634:	2b40      	cmp	r3, #64	; 0x40
 8008636:	bf0c      	ite	eq
 8008638:	2301      	moveq	r3, #1
 800863a:	2300      	movne	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b22      	cmp	r3, #34	; 0x22
 800864a:	d108      	bne.n	800865e <UART_DMAError+0x7a>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d005      	beq.n	800865e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	2200      	movs	r2, #0
 8008656:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008658:	68b8      	ldr	r0, [r7, #8]
 800865a:	f000 f86d 	bl	8008738 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008662:	f043 0210 	orr.w	r2, r3, #16
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800866a:	68b8      	ldr	r0, [r7, #8]
 800866c:	f7ff ff6e 	bl	800854c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008670:	bf00      	nop
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	603b      	str	r3, [r7, #0]
 8008684:	4613      	mov	r3, r2
 8008686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008688:	e02c      	b.n	80086e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008690:	d028      	beq.n	80086e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d007      	beq.n	80086a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008698:	f7fc fe5c 	bl	8005354 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d21d      	bcs.n	80086e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68da      	ldr	r2, [r3, #12]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80086b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695a      	ldr	r2, [r3, #20]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0201 	bic.w	r2, r2, #1
 80086c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e00f      	b.n	8008704 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	4013      	ands	r3, r2
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	bf0c      	ite	eq
 80086f4:	2301      	moveq	r3, #1
 80086f6:	2300      	movne	r3, #0
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	461a      	mov	r2, r3
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d0c3      	beq.n	800868a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68da      	ldr	r2, [r3, #12]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008722:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2220      	movs	r2, #32
 8008728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800874e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	695a      	ldr	r2, [r3, #20]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0201 	bic.w	r2, r2, #1
 800875e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2220      	movs	r2, #32
 8008764:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008780:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f7ff fedc 	bl	800854c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008794:	bf00      	nop
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b21      	cmp	r3, #33	; 0x21
 80087ae:	d144      	bne.n	800883a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087b8:	d11a      	bne.n	80087f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	461a      	mov	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d105      	bne.n	80087e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	1c9a      	adds	r2, r3, #2
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	621a      	str	r2, [r3, #32]
 80087e2:	e00e      	b.n	8008802 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	621a      	str	r2, [r3, #32]
 80087ee:	e008      	b.n	8008802 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	1c59      	adds	r1, r3, #1
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	6211      	str	r1, [r2, #32]
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008806:	b29b      	uxth	r3, r3
 8008808:	3b01      	subs	r3, #1
 800880a:	b29b      	uxth	r3, r3
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	4619      	mov	r1, r3
 8008810:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10f      	bne.n	8008836 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68da      	ldr	r2, [r3, #12]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008824:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008834:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	e000      	b.n	800883c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800883a:	2302      	movs	r3, #2
  }
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800885e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2220      	movs	r2, #32
 8008864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7ff fe51 	bl	8008510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b22      	cmp	r3, #34	; 0x22
 800888a:	d171      	bne.n	8008970 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008894:	d123      	bne.n	80088de <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10e      	bne.n	80088c2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ba:	1c9a      	adds	r2, r3, #2
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	629a      	str	r2, [r3, #40]	; 0x28
 80088c0:	e029      	b.n	8008916 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	629a      	str	r2, [r3, #40]	; 0x28
 80088dc:	e01b      	b.n	8008916 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10a      	bne.n	80088fc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6858      	ldr	r0, [r3, #4]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f0:	1c59      	adds	r1, r3, #1
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6291      	str	r1, [r2, #40]	; 0x28
 80088f6:	b2c2      	uxtb	r2, r0
 80088f8:	701a      	strb	r2, [r3, #0]
 80088fa:	e00c      	b.n	8008916 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	b2da      	uxtb	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008908:	1c58      	adds	r0, r3, #1
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	6288      	str	r0, [r1, #40]	; 0x28
 800890e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008912:	b2d2      	uxtb	r2, r2
 8008914:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800891a:	b29b      	uxth	r3, r3
 800891c:	3b01      	subs	r3, #1
 800891e:	b29b      	uxth	r3, r3
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	4619      	mov	r1, r3
 8008924:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008926:	2b00      	cmp	r3, #0
 8008928:	d120      	bne.n	800896c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68da      	ldr	r2, [r3, #12]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f022 0220 	bic.w	r2, r2, #32
 8008938:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68da      	ldr	r2, [r3, #12]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008948:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	695a      	ldr	r2, [r3, #20]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0201 	bic.w	r2, r2, #1
 8008958:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2220      	movs	r2, #32
 800895e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff fdde 	bl	8008524 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	e002      	b.n	8008972 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	e000      	b.n	8008972 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008970:	2302      	movs	r3, #2
  }
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
	...

0800897c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	b085      	sub	sp, #20
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68da      	ldr	r2, [r3, #12]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	431a      	orrs	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	431a      	orrs	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80089be:	f023 030c 	bic.w	r3, r3, #12
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	6812      	ldr	r2, [r2, #0]
 80089c6:	68f9      	ldr	r1, [r7, #12]
 80089c8:	430b      	orrs	r3, r1
 80089ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ea:	f040 818b 	bne.w	8008d04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4ac1      	ldr	r2, [pc, #772]	; (8008cf8 <UART_SetConfig+0x37c>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d005      	beq.n	8008a04 <UART_SetConfig+0x88>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4abf      	ldr	r2, [pc, #764]	; (8008cfc <UART_SetConfig+0x380>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	f040 80bd 	bne.w	8008b7e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a04:	f7fe fee8 	bl	80077d8 <HAL_RCC_GetPCLK2Freq>
 8008a08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	461d      	mov	r5, r3
 8008a0e:	f04f 0600 	mov.w	r6, #0
 8008a12:	46a8      	mov	r8, r5
 8008a14:	46b1      	mov	r9, r6
 8008a16:	eb18 0308 	adds.w	r3, r8, r8
 8008a1a:	eb49 0409 	adc.w	r4, r9, r9
 8008a1e:	4698      	mov	r8, r3
 8008a20:	46a1      	mov	r9, r4
 8008a22:	eb18 0805 	adds.w	r8, r8, r5
 8008a26:	eb49 0906 	adc.w	r9, r9, r6
 8008a2a:	f04f 0100 	mov.w	r1, #0
 8008a2e:	f04f 0200 	mov.w	r2, #0
 8008a32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008a36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008a3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008a3e:	4688      	mov	r8, r1
 8008a40:	4691      	mov	r9, r2
 8008a42:	eb18 0005 	adds.w	r0, r8, r5
 8008a46:	eb49 0106 	adc.w	r1, r9, r6
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	461d      	mov	r5, r3
 8008a50:	f04f 0600 	mov.w	r6, #0
 8008a54:	196b      	adds	r3, r5, r5
 8008a56:	eb46 0406 	adc.w	r4, r6, r6
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	4623      	mov	r3, r4
 8008a5e:	f7f8 f8f3 	bl	8000c48 <__aeabi_uldivmod>
 8008a62:	4603      	mov	r3, r0
 8008a64:	460c      	mov	r4, r1
 8008a66:	461a      	mov	r2, r3
 8008a68:	4ba5      	ldr	r3, [pc, #660]	; (8008d00 <UART_SetConfig+0x384>)
 8008a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8008a6e:	095b      	lsrs	r3, r3, #5
 8008a70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	461d      	mov	r5, r3
 8008a78:	f04f 0600 	mov.w	r6, #0
 8008a7c:	46a9      	mov	r9, r5
 8008a7e:	46b2      	mov	sl, r6
 8008a80:	eb19 0309 	adds.w	r3, r9, r9
 8008a84:	eb4a 040a 	adc.w	r4, sl, sl
 8008a88:	4699      	mov	r9, r3
 8008a8a:	46a2      	mov	sl, r4
 8008a8c:	eb19 0905 	adds.w	r9, r9, r5
 8008a90:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a94:	f04f 0100 	mov.w	r1, #0
 8008a98:	f04f 0200 	mov.w	r2, #0
 8008a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008aa0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008aa4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008aa8:	4689      	mov	r9, r1
 8008aaa:	4692      	mov	sl, r2
 8008aac:	eb19 0005 	adds.w	r0, r9, r5
 8008ab0:	eb4a 0106 	adc.w	r1, sl, r6
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	461d      	mov	r5, r3
 8008aba:	f04f 0600 	mov.w	r6, #0
 8008abe:	196b      	adds	r3, r5, r5
 8008ac0:	eb46 0406 	adc.w	r4, r6, r6
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	4623      	mov	r3, r4
 8008ac8:	f7f8 f8be 	bl	8000c48 <__aeabi_uldivmod>
 8008acc:	4603      	mov	r3, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	4b8b      	ldr	r3, [pc, #556]	; (8008d00 <UART_SetConfig+0x384>)
 8008ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ad8:	095b      	lsrs	r3, r3, #5
 8008ada:	2164      	movs	r1, #100	; 0x64
 8008adc:	fb01 f303 	mul.w	r3, r1, r3
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	3332      	adds	r3, #50	; 0x32
 8008ae6:	4a86      	ldr	r2, [pc, #536]	; (8008d00 <UART_SetConfig+0x384>)
 8008ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8008aec:	095b      	lsrs	r3, r3, #5
 8008aee:	005b      	lsls	r3, r3, #1
 8008af0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008af4:	4498      	add	r8, r3
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	461d      	mov	r5, r3
 8008afa:	f04f 0600 	mov.w	r6, #0
 8008afe:	46a9      	mov	r9, r5
 8008b00:	46b2      	mov	sl, r6
 8008b02:	eb19 0309 	adds.w	r3, r9, r9
 8008b06:	eb4a 040a 	adc.w	r4, sl, sl
 8008b0a:	4699      	mov	r9, r3
 8008b0c:	46a2      	mov	sl, r4
 8008b0e:	eb19 0905 	adds.w	r9, r9, r5
 8008b12:	eb4a 0a06 	adc.w	sl, sl, r6
 8008b16:	f04f 0100 	mov.w	r1, #0
 8008b1a:	f04f 0200 	mov.w	r2, #0
 8008b1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b2a:	4689      	mov	r9, r1
 8008b2c:	4692      	mov	sl, r2
 8008b2e:	eb19 0005 	adds.w	r0, r9, r5
 8008b32:	eb4a 0106 	adc.w	r1, sl, r6
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	461d      	mov	r5, r3
 8008b3c:	f04f 0600 	mov.w	r6, #0
 8008b40:	196b      	adds	r3, r5, r5
 8008b42:	eb46 0406 	adc.w	r4, r6, r6
 8008b46:	461a      	mov	r2, r3
 8008b48:	4623      	mov	r3, r4
 8008b4a:	f7f8 f87d 	bl	8000c48 <__aeabi_uldivmod>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	460c      	mov	r4, r1
 8008b52:	461a      	mov	r2, r3
 8008b54:	4b6a      	ldr	r3, [pc, #424]	; (8008d00 <UART_SetConfig+0x384>)
 8008b56:	fba3 1302 	umull	r1, r3, r3, r2
 8008b5a:	095b      	lsrs	r3, r3, #5
 8008b5c:	2164      	movs	r1, #100	; 0x64
 8008b5e:	fb01 f303 	mul.w	r3, r1, r3
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	00db      	lsls	r3, r3, #3
 8008b66:	3332      	adds	r3, #50	; 0x32
 8008b68:	4a65      	ldr	r2, [pc, #404]	; (8008d00 <UART_SetConfig+0x384>)
 8008b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b6e:	095b      	lsrs	r3, r3, #5
 8008b70:	f003 0207 	and.w	r2, r3, #7
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4442      	add	r2, r8
 8008b7a:	609a      	str	r2, [r3, #8]
 8008b7c:	e26f      	b.n	800905e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b7e:	f7fe fe17 	bl	80077b0 <HAL_RCC_GetPCLK1Freq>
 8008b82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	461d      	mov	r5, r3
 8008b88:	f04f 0600 	mov.w	r6, #0
 8008b8c:	46a8      	mov	r8, r5
 8008b8e:	46b1      	mov	r9, r6
 8008b90:	eb18 0308 	adds.w	r3, r8, r8
 8008b94:	eb49 0409 	adc.w	r4, r9, r9
 8008b98:	4698      	mov	r8, r3
 8008b9a:	46a1      	mov	r9, r4
 8008b9c:	eb18 0805 	adds.w	r8, r8, r5
 8008ba0:	eb49 0906 	adc.w	r9, r9, r6
 8008ba4:	f04f 0100 	mov.w	r1, #0
 8008ba8:	f04f 0200 	mov.w	r2, #0
 8008bac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008bb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008bb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008bb8:	4688      	mov	r8, r1
 8008bba:	4691      	mov	r9, r2
 8008bbc:	eb18 0005 	adds.w	r0, r8, r5
 8008bc0:	eb49 0106 	adc.w	r1, r9, r6
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	461d      	mov	r5, r3
 8008bca:	f04f 0600 	mov.w	r6, #0
 8008bce:	196b      	adds	r3, r5, r5
 8008bd0:	eb46 0406 	adc.w	r4, r6, r6
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	4623      	mov	r3, r4
 8008bd8:	f7f8 f836 	bl	8000c48 <__aeabi_uldivmod>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	461a      	mov	r2, r3
 8008be2:	4b47      	ldr	r3, [pc, #284]	; (8008d00 <UART_SetConfig+0x384>)
 8008be4:	fba3 2302 	umull	r2, r3, r3, r2
 8008be8:	095b      	lsrs	r3, r3, #5
 8008bea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	461d      	mov	r5, r3
 8008bf2:	f04f 0600 	mov.w	r6, #0
 8008bf6:	46a9      	mov	r9, r5
 8008bf8:	46b2      	mov	sl, r6
 8008bfa:	eb19 0309 	adds.w	r3, r9, r9
 8008bfe:	eb4a 040a 	adc.w	r4, sl, sl
 8008c02:	4699      	mov	r9, r3
 8008c04:	46a2      	mov	sl, r4
 8008c06:	eb19 0905 	adds.w	r9, r9, r5
 8008c0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c0e:	f04f 0100 	mov.w	r1, #0
 8008c12:	f04f 0200 	mov.w	r2, #0
 8008c16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c22:	4689      	mov	r9, r1
 8008c24:	4692      	mov	sl, r2
 8008c26:	eb19 0005 	adds.w	r0, r9, r5
 8008c2a:	eb4a 0106 	adc.w	r1, sl, r6
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	461d      	mov	r5, r3
 8008c34:	f04f 0600 	mov.w	r6, #0
 8008c38:	196b      	adds	r3, r5, r5
 8008c3a:	eb46 0406 	adc.w	r4, r6, r6
 8008c3e:	461a      	mov	r2, r3
 8008c40:	4623      	mov	r3, r4
 8008c42:	f7f8 f801 	bl	8000c48 <__aeabi_uldivmod>
 8008c46:	4603      	mov	r3, r0
 8008c48:	460c      	mov	r4, r1
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	4b2c      	ldr	r3, [pc, #176]	; (8008d00 <UART_SetConfig+0x384>)
 8008c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8008c52:	095b      	lsrs	r3, r3, #5
 8008c54:	2164      	movs	r1, #100	; 0x64
 8008c56:	fb01 f303 	mul.w	r3, r1, r3
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	3332      	adds	r3, #50	; 0x32
 8008c60:	4a27      	ldr	r2, [pc, #156]	; (8008d00 <UART_SetConfig+0x384>)
 8008c62:	fba2 2303 	umull	r2, r3, r2, r3
 8008c66:	095b      	lsrs	r3, r3, #5
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c6e:	4498      	add	r8, r3
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	461d      	mov	r5, r3
 8008c74:	f04f 0600 	mov.w	r6, #0
 8008c78:	46a9      	mov	r9, r5
 8008c7a:	46b2      	mov	sl, r6
 8008c7c:	eb19 0309 	adds.w	r3, r9, r9
 8008c80:	eb4a 040a 	adc.w	r4, sl, sl
 8008c84:	4699      	mov	r9, r3
 8008c86:	46a2      	mov	sl, r4
 8008c88:	eb19 0905 	adds.w	r9, r9, r5
 8008c8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c90:	f04f 0100 	mov.w	r1, #0
 8008c94:	f04f 0200 	mov.w	r2, #0
 8008c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ca0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ca4:	4689      	mov	r9, r1
 8008ca6:	4692      	mov	sl, r2
 8008ca8:	eb19 0005 	adds.w	r0, r9, r5
 8008cac:	eb4a 0106 	adc.w	r1, sl, r6
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	461d      	mov	r5, r3
 8008cb6:	f04f 0600 	mov.w	r6, #0
 8008cba:	196b      	adds	r3, r5, r5
 8008cbc:	eb46 0406 	adc.w	r4, r6, r6
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	f7f7 ffc0 	bl	8000c48 <__aeabi_uldivmod>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	461a      	mov	r2, r3
 8008cce:	4b0c      	ldr	r3, [pc, #48]	; (8008d00 <UART_SetConfig+0x384>)
 8008cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8008cd4:	095b      	lsrs	r3, r3, #5
 8008cd6:	2164      	movs	r1, #100	; 0x64
 8008cd8:	fb01 f303 	mul.w	r3, r1, r3
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	3332      	adds	r3, #50	; 0x32
 8008ce2:	4a07      	ldr	r2, [pc, #28]	; (8008d00 <UART_SetConfig+0x384>)
 8008ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce8:	095b      	lsrs	r3, r3, #5
 8008cea:	f003 0207 	and.w	r2, r3, #7
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4442      	add	r2, r8
 8008cf4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008cf6:	e1b2      	b.n	800905e <UART_SetConfig+0x6e2>
 8008cf8:	40011000 	.word	0x40011000
 8008cfc:	40011400 	.word	0x40011400
 8008d00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4ad7      	ldr	r2, [pc, #860]	; (8009068 <UART_SetConfig+0x6ec>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d005      	beq.n	8008d1a <UART_SetConfig+0x39e>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4ad6      	ldr	r2, [pc, #856]	; (800906c <UART_SetConfig+0x6f0>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	f040 80d1 	bne.w	8008ebc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d1a:	f7fe fd5d 	bl	80077d8 <HAL_RCC_GetPCLK2Freq>
 8008d1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	469a      	mov	sl, r3
 8008d24:	f04f 0b00 	mov.w	fp, #0
 8008d28:	46d0      	mov	r8, sl
 8008d2a:	46d9      	mov	r9, fp
 8008d2c:	eb18 0308 	adds.w	r3, r8, r8
 8008d30:	eb49 0409 	adc.w	r4, r9, r9
 8008d34:	4698      	mov	r8, r3
 8008d36:	46a1      	mov	r9, r4
 8008d38:	eb18 080a 	adds.w	r8, r8, sl
 8008d3c:	eb49 090b 	adc.w	r9, r9, fp
 8008d40:	f04f 0100 	mov.w	r1, #0
 8008d44:	f04f 0200 	mov.w	r2, #0
 8008d48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008d4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008d50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008d54:	4688      	mov	r8, r1
 8008d56:	4691      	mov	r9, r2
 8008d58:	eb1a 0508 	adds.w	r5, sl, r8
 8008d5c:	eb4b 0609 	adc.w	r6, fp, r9
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	4619      	mov	r1, r3
 8008d66:	f04f 0200 	mov.w	r2, #0
 8008d6a:	f04f 0300 	mov.w	r3, #0
 8008d6e:	f04f 0400 	mov.w	r4, #0
 8008d72:	0094      	lsls	r4, r2, #2
 8008d74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d78:	008b      	lsls	r3, r1, #2
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	4628      	mov	r0, r5
 8008d80:	4631      	mov	r1, r6
 8008d82:	f7f7 ff61 	bl	8000c48 <__aeabi_uldivmod>
 8008d86:	4603      	mov	r3, r0
 8008d88:	460c      	mov	r4, r1
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4bb8      	ldr	r3, [pc, #736]	; (8009070 <UART_SetConfig+0x6f4>)
 8008d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8008d92:	095b      	lsrs	r3, r3, #5
 8008d94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	469b      	mov	fp, r3
 8008d9c:	f04f 0c00 	mov.w	ip, #0
 8008da0:	46d9      	mov	r9, fp
 8008da2:	46e2      	mov	sl, ip
 8008da4:	eb19 0309 	adds.w	r3, r9, r9
 8008da8:	eb4a 040a 	adc.w	r4, sl, sl
 8008dac:	4699      	mov	r9, r3
 8008dae:	46a2      	mov	sl, r4
 8008db0:	eb19 090b 	adds.w	r9, r9, fp
 8008db4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008db8:	f04f 0100 	mov.w	r1, #0
 8008dbc:	f04f 0200 	mov.w	r2, #0
 8008dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008dcc:	4689      	mov	r9, r1
 8008dce:	4692      	mov	sl, r2
 8008dd0:	eb1b 0509 	adds.w	r5, fp, r9
 8008dd4:	eb4c 060a 	adc.w	r6, ip, sl
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f04f 0200 	mov.w	r2, #0
 8008de2:	f04f 0300 	mov.w	r3, #0
 8008de6:	f04f 0400 	mov.w	r4, #0
 8008dea:	0094      	lsls	r4, r2, #2
 8008dec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008df0:	008b      	lsls	r3, r1, #2
 8008df2:	461a      	mov	r2, r3
 8008df4:	4623      	mov	r3, r4
 8008df6:	4628      	mov	r0, r5
 8008df8:	4631      	mov	r1, r6
 8008dfa:	f7f7 ff25 	bl	8000c48 <__aeabi_uldivmod>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	460c      	mov	r4, r1
 8008e02:	461a      	mov	r2, r3
 8008e04:	4b9a      	ldr	r3, [pc, #616]	; (8009070 <UART_SetConfig+0x6f4>)
 8008e06:	fba3 1302 	umull	r1, r3, r3, r2
 8008e0a:	095b      	lsrs	r3, r3, #5
 8008e0c:	2164      	movs	r1, #100	; 0x64
 8008e0e:	fb01 f303 	mul.w	r3, r1, r3
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	3332      	adds	r3, #50	; 0x32
 8008e18:	4a95      	ldr	r2, [pc, #596]	; (8009070 <UART_SetConfig+0x6f4>)
 8008e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e1e:	095b      	lsrs	r3, r3, #5
 8008e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e24:	4498      	add	r8, r3
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	469b      	mov	fp, r3
 8008e2a:	f04f 0c00 	mov.w	ip, #0
 8008e2e:	46d9      	mov	r9, fp
 8008e30:	46e2      	mov	sl, ip
 8008e32:	eb19 0309 	adds.w	r3, r9, r9
 8008e36:	eb4a 040a 	adc.w	r4, sl, sl
 8008e3a:	4699      	mov	r9, r3
 8008e3c:	46a2      	mov	sl, r4
 8008e3e:	eb19 090b 	adds.w	r9, r9, fp
 8008e42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008e46:	f04f 0100 	mov.w	r1, #0
 8008e4a:	f04f 0200 	mov.w	r2, #0
 8008e4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e5a:	4689      	mov	r9, r1
 8008e5c:	4692      	mov	sl, r2
 8008e5e:	eb1b 0509 	adds.w	r5, fp, r9
 8008e62:	eb4c 060a 	adc.w	r6, ip, sl
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	f04f 0200 	mov.w	r2, #0
 8008e70:	f04f 0300 	mov.w	r3, #0
 8008e74:	f04f 0400 	mov.w	r4, #0
 8008e78:	0094      	lsls	r4, r2, #2
 8008e7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008e7e:	008b      	lsls	r3, r1, #2
 8008e80:	461a      	mov	r2, r3
 8008e82:	4623      	mov	r3, r4
 8008e84:	4628      	mov	r0, r5
 8008e86:	4631      	mov	r1, r6
 8008e88:	f7f7 fede 	bl	8000c48 <__aeabi_uldivmod>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	461a      	mov	r2, r3
 8008e92:	4b77      	ldr	r3, [pc, #476]	; (8009070 <UART_SetConfig+0x6f4>)
 8008e94:	fba3 1302 	umull	r1, r3, r3, r2
 8008e98:	095b      	lsrs	r3, r3, #5
 8008e9a:	2164      	movs	r1, #100	; 0x64
 8008e9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	011b      	lsls	r3, r3, #4
 8008ea4:	3332      	adds	r3, #50	; 0x32
 8008ea6:	4a72      	ldr	r2, [pc, #456]	; (8009070 <UART_SetConfig+0x6f4>)
 8008ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8008eac:	095b      	lsrs	r3, r3, #5
 8008eae:	f003 020f 	and.w	r2, r3, #15
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4442      	add	r2, r8
 8008eb8:	609a      	str	r2, [r3, #8]
 8008eba:	e0d0      	b.n	800905e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ebc:	f7fe fc78 	bl	80077b0 <HAL_RCC_GetPCLK1Freq>
 8008ec0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	469a      	mov	sl, r3
 8008ec6:	f04f 0b00 	mov.w	fp, #0
 8008eca:	46d0      	mov	r8, sl
 8008ecc:	46d9      	mov	r9, fp
 8008ece:	eb18 0308 	adds.w	r3, r8, r8
 8008ed2:	eb49 0409 	adc.w	r4, r9, r9
 8008ed6:	4698      	mov	r8, r3
 8008ed8:	46a1      	mov	r9, r4
 8008eda:	eb18 080a 	adds.w	r8, r8, sl
 8008ede:	eb49 090b 	adc.w	r9, r9, fp
 8008ee2:	f04f 0100 	mov.w	r1, #0
 8008ee6:	f04f 0200 	mov.w	r2, #0
 8008eea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008eee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ef2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008ef6:	4688      	mov	r8, r1
 8008ef8:	4691      	mov	r9, r2
 8008efa:	eb1a 0508 	adds.w	r5, sl, r8
 8008efe:	eb4b 0609 	adc.w	r6, fp, r9
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	4619      	mov	r1, r3
 8008f08:	f04f 0200 	mov.w	r2, #0
 8008f0c:	f04f 0300 	mov.w	r3, #0
 8008f10:	f04f 0400 	mov.w	r4, #0
 8008f14:	0094      	lsls	r4, r2, #2
 8008f16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f1a:	008b      	lsls	r3, r1, #2
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	4623      	mov	r3, r4
 8008f20:	4628      	mov	r0, r5
 8008f22:	4631      	mov	r1, r6
 8008f24:	f7f7 fe90 	bl	8000c48 <__aeabi_uldivmod>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	4b50      	ldr	r3, [pc, #320]	; (8009070 <UART_SetConfig+0x6f4>)
 8008f30:	fba3 2302 	umull	r2, r3, r3, r2
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	469b      	mov	fp, r3
 8008f3e:	f04f 0c00 	mov.w	ip, #0
 8008f42:	46d9      	mov	r9, fp
 8008f44:	46e2      	mov	sl, ip
 8008f46:	eb19 0309 	adds.w	r3, r9, r9
 8008f4a:	eb4a 040a 	adc.w	r4, sl, sl
 8008f4e:	4699      	mov	r9, r3
 8008f50:	46a2      	mov	sl, r4
 8008f52:	eb19 090b 	adds.w	r9, r9, fp
 8008f56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f5a:	f04f 0100 	mov.w	r1, #0
 8008f5e:	f04f 0200 	mov.w	r2, #0
 8008f62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f6e:	4689      	mov	r9, r1
 8008f70:	4692      	mov	sl, r2
 8008f72:	eb1b 0509 	adds.w	r5, fp, r9
 8008f76:	eb4c 060a 	adc.w	r6, ip, sl
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	f04f 0200 	mov.w	r2, #0
 8008f84:	f04f 0300 	mov.w	r3, #0
 8008f88:	f04f 0400 	mov.w	r4, #0
 8008f8c:	0094      	lsls	r4, r2, #2
 8008f8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f92:	008b      	lsls	r3, r1, #2
 8008f94:	461a      	mov	r2, r3
 8008f96:	4623      	mov	r3, r4
 8008f98:	4628      	mov	r0, r5
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	f7f7 fe54 	bl	8000c48 <__aeabi_uldivmod>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	4b32      	ldr	r3, [pc, #200]	; (8009070 <UART_SetConfig+0x6f4>)
 8008fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fac:	095b      	lsrs	r3, r3, #5
 8008fae:	2164      	movs	r1, #100	; 0x64
 8008fb0:	fb01 f303 	mul.w	r3, r1, r3
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	011b      	lsls	r3, r3, #4
 8008fb8:	3332      	adds	r3, #50	; 0x32
 8008fba:	4a2d      	ldr	r2, [pc, #180]	; (8009070 <UART_SetConfig+0x6f4>)
 8008fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc0:	095b      	lsrs	r3, r3, #5
 8008fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fc6:	4498      	add	r8, r3
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	469b      	mov	fp, r3
 8008fcc:	f04f 0c00 	mov.w	ip, #0
 8008fd0:	46d9      	mov	r9, fp
 8008fd2:	46e2      	mov	sl, ip
 8008fd4:	eb19 0309 	adds.w	r3, r9, r9
 8008fd8:	eb4a 040a 	adc.w	r4, sl, sl
 8008fdc:	4699      	mov	r9, r3
 8008fde:	46a2      	mov	sl, r4
 8008fe0:	eb19 090b 	adds.w	r9, r9, fp
 8008fe4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008fe8:	f04f 0100 	mov.w	r1, #0
 8008fec:	f04f 0200 	mov.w	r2, #0
 8008ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ff4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ff8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ffc:	4689      	mov	r9, r1
 8008ffe:	4692      	mov	sl, r2
 8009000:	eb1b 0509 	adds.w	r5, fp, r9
 8009004:	eb4c 060a 	adc.w	r6, ip, sl
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	4619      	mov	r1, r3
 800900e:	f04f 0200 	mov.w	r2, #0
 8009012:	f04f 0300 	mov.w	r3, #0
 8009016:	f04f 0400 	mov.w	r4, #0
 800901a:	0094      	lsls	r4, r2, #2
 800901c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009020:	008b      	lsls	r3, r1, #2
 8009022:	461a      	mov	r2, r3
 8009024:	4623      	mov	r3, r4
 8009026:	4628      	mov	r0, r5
 8009028:	4631      	mov	r1, r6
 800902a:	f7f7 fe0d 	bl	8000c48 <__aeabi_uldivmod>
 800902e:	4603      	mov	r3, r0
 8009030:	460c      	mov	r4, r1
 8009032:	461a      	mov	r2, r3
 8009034:	4b0e      	ldr	r3, [pc, #56]	; (8009070 <UART_SetConfig+0x6f4>)
 8009036:	fba3 1302 	umull	r1, r3, r3, r2
 800903a:	095b      	lsrs	r3, r3, #5
 800903c:	2164      	movs	r1, #100	; 0x64
 800903e:	fb01 f303 	mul.w	r3, r1, r3
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	011b      	lsls	r3, r3, #4
 8009046:	3332      	adds	r3, #50	; 0x32
 8009048:	4a09      	ldr	r2, [pc, #36]	; (8009070 <UART_SetConfig+0x6f4>)
 800904a:	fba2 2303 	umull	r2, r3, r2, r3
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	f003 020f 	and.w	r2, r3, #15
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4442      	add	r2, r8
 800905a:	609a      	str	r2, [r3, #8]
}
 800905c:	e7ff      	b.n	800905e <UART_SetConfig+0x6e2>
 800905e:	bf00      	nop
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009068:	40011000 	.word	0x40011000
 800906c:	40011400 	.word	0x40011400
 8009070:	51eb851f 	.word	0x51eb851f

08009074 <__errno>:
 8009074:	4b01      	ldr	r3, [pc, #4]	; (800907c <__errno+0x8>)
 8009076:	6818      	ldr	r0, [r3, #0]
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	2000000c 	.word	0x2000000c

08009080 <__libc_init_array>:
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	4e0d      	ldr	r6, [pc, #52]	; (80090b8 <__libc_init_array+0x38>)
 8009084:	4c0d      	ldr	r4, [pc, #52]	; (80090bc <__libc_init_array+0x3c>)
 8009086:	1ba4      	subs	r4, r4, r6
 8009088:	10a4      	asrs	r4, r4, #2
 800908a:	2500      	movs	r5, #0
 800908c:	42a5      	cmp	r5, r4
 800908e:	d109      	bne.n	80090a4 <__libc_init_array+0x24>
 8009090:	4e0b      	ldr	r6, [pc, #44]	; (80090c0 <__libc_init_array+0x40>)
 8009092:	4c0c      	ldr	r4, [pc, #48]	; (80090c4 <__libc_init_array+0x44>)
 8009094:	f002 f872 	bl	800b17c <_init>
 8009098:	1ba4      	subs	r4, r4, r6
 800909a:	10a4      	asrs	r4, r4, #2
 800909c:	2500      	movs	r5, #0
 800909e:	42a5      	cmp	r5, r4
 80090a0:	d105      	bne.n	80090ae <__libc_init_array+0x2e>
 80090a2:	bd70      	pop	{r4, r5, r6, pc}
 80090a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090a8:	4798      	blx	r3
 80090aa:	3501      	adds	r5, #1
 80090ac:	e7ee      	b.n	800908c <__libc_init_array+0xc>
 80090ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090b2:	4798      	blx	r3
 80090b4:	3501      	adds	r5, #1
 80090b6:	e7f2      	b.n	800909e <__libc_init_array+0x1e>
 80090b8:	0800b4b8 	.word	0x0800b4b8
 80090bc:	0800b4b8 	.word	0x0800b4b8
 80090c0:	0800b4b8 	.word	0x0800b4b8
 80090c4:	0800b4bc 	.word	0x0800b4bc

080090c8 <memcpy>:
 80090c8:	b510      	push	{r4, lr}
 80090ca:	1e43      	subs	r3, r0, #1
 80090cc:	440a      	add	r2, r1
 80090ce:	4291      	cmp	r1, r2
 80090d0:	d100      	bne.n	80090d4 <memcpy+0xc>
 80090d2:	bd10      	pop	{r4, pc}
 80090d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090dc:	e7f7      	b.n	80090ce <memcpy+0x6>

080090de <memset>:
 80090de:	4402      	add	r2, r0
 80090e0:	4603      	mov	r3, r0
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d100      	bne.n	80090e8 <memset+0xa>
 80090e6:	4770      	bx	lr
 80090e8:	f803 1b01 	strb.w	r1, [r3], #1
 80090ec:	e7f9      	b.n	80090e2 <memset+0x4>

080090ee <__cvt>:
 80090ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090f2:	ec55 4b10 	vmov	r4, r5, d0
 80090f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80090f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090fc:	2d00      	cmp	r5, #0
 80090fe:	460e      	mov	r6, r1
 8009100:	4691      	mov	r9, r2
 8009102:	4619      	mov	r1, r3
 8009104:	bfb8      	it	lt
 8009106:	4622      	movlt	r2, r4
 8009108:	462b      	mov	r3, r5
 800910a:	f027 0720 	bic.w	r7, r7, #32
 800910e:	bfbb      	ittet	lt
 8009110:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009114:	461d      	movlt	r5, r3
 8009116:	2300      	movge	r3, #0
 8009118:	232d      	movlt	r3, #45	; 0x2d
 800911a:	bfb8      	it	lt
 800911c:	4614      	movlt	r4, r2
 800911e:	2f46      	cmp	r7, #70	; 0x46
 8009120:	700b      	strb	r3, [r1, #0]
 8009122:	d004      	beq.n	800912e <__cvt+0x40>
 8009124:	2f45      	cmp	r7, #69	; 0x45
 8009126:	d100      	bne.n	800912a <__cvt+0x3c>
 8009128:	3601      	adds	r6, #1
 800912a:	2102      	movs	r1, #2
 800912c:	e000      	b.n	8009130 <__cvt+0x42>
 800912e:	2103      	movs	r1, #3
 8009130:	ab03      	add	r3, sp, #12
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	ab02      	add	r3, sp, #8
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	4632      	mov	r2, r6
 800913a:	4653      	mov	r3, sl
 800913c:	ec45 4b10 	vmov	d0, r4, r5
 8009140:	f000 fcf2 	bl	8009b28 <_dtoa_r>
 8009144:	2f47      	cmp	r7, #71	; 0x47
 8009146:	4680      	mov	r8, r0
 8009148:	d102      	bne.n	8009150 <__cvt+0x62>
 800914a:	f019 0f01 	tst.w	r9, #1
 800914e:	d026      	beq.n	800919e <__cvt+0xb0>
 8009150:	2f46      	cmp	r7, #70	; 0x46
 8009152:	eb08 0906 	add.w	r9, r8, r6
 8009156:	d111      	bne.n	800917c <__cvt+0x8e>
 8009158:	f898 3000 	ldrb.w	r3, [r8]
 800915c:	2b30      	cmp	r3, #48	; 0x30
 800915e:	d10a      	bne.n	8009176 <__cvt+0x88>
 8009160:	2200      	movs	r2, #0
 8009162:	2300      	movs	r3, #0
 8009164:	4620      	mov	r0, r4
 8009166:	4629      	mov	r1, r5
 8009168:	f7f7 fcae 	bl	8000ac8 <__aeabi_dcmpeq>
 800916c:	b918      	cbnz	r0, 8009176 <__cvt+0x88>
 800916e:	f1c6 0601 	rsb	r6, r6, #1
 8009172:	f8ca 6000 	str.w	r6, [sl]
 8009176:	f8da 3000 	ldr.w	r3, [sl]
 800917a:	4499      	add	r9, r3
 800917c:	2200      	movs	r2, #0
 800917e:	2300      	movs	r3, #0
 8009180:	4620      	mov	r0, r4
 8009182:	4629      	mov	r1, r5
 8009184:	f7f7 fca0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009188:	b938      	cbnz	r0, 800919a <__cvt+0xac>
 800918a:	2230      	movs	r2, #48	; 0x30
 800918c:	9b03      	ldr	r3, [sp, #12]
 800918e:	454b      	cmp	r3, r9
 8009190:	d205      	bcs.n	800919e <__cvt+0xb0>
 8009192:	1c59      	adds	r1, r3, #1
 8009194:	9103      	str	r1, [sp, #12]
 8009196:	701a      	strb	r2, [r3, #0]
 8009198:	e7f8      	b.n	800918c <__cvt+0x9e>
 800919a:	f8cd 900c 	str.w	r9, [sp, #12]
 800919e:	9b03      	ldr	r3, [sp, #12]
 80091a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091a2:	eba3 0308 	sub.w	r3, r3, r8
 80091a6:	4640      	mov	r0, r8
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	b004      	add	sp, #16
 80091ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080091b0 <__exponent>:
 80091b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091b2:	2900      	cmp	r1, #0
 80091b4:	4604      	mov	r4, r0
 80091b6:	bfba      	itte	lt
 80091b8:	4249      	neglt	r1, r1
 80091ba:	232d      	movlt	r3, #45	; 0x2d
 80091bc:	232b      	movge	r3, #43	; 0x2b
 80091be:	2909      	cmp	r1, #9
 80091c0:	f804 2b02 	strb.w	r2, [r4], #2
 80091c4:	7043      	strb	r3, [r0, #1]
 80091c6:	dd20      	ble.n	800920a <__exponent+0x5a>
 80091c8:	f10d 0307 	add.w	r3, sp, #7
 80091cc:	461f      	mov	r7, r3
 80091ce:	260a      	movs	r6, #10
 80091d0:	fb91 f5f6 	sdiv	r5, r1, r6
 80091d4:	fb06 1115 	mls	r1, r6, r5, r1
 80091d8:	3130      	adds	r1, #48	; 0x30
 80091da:	2d09      	cmp	r5, #9
 80091dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80091e0:	f103 32ff 	add.w	r2, r3, #4294967295
 80091e4:	4629      	mov	r1, r5
 80091e6:	dc09      	bgt.n	80091fc <__exponent+0x4c>
 80091e8:	3130      	adds	r1, #48	; 0x30
 80091ea:	3b02      	subs	r3, #2
 80091ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80091f0:	42bb      	cmp	r3, r7
 80091f2:	4622      	mov	r2, r4
 80091f4:	d304      	bcc.n	8009200 <__exponent+0x50>
 80091f6:	1a10      	subs	r0, r2, r0
 80091f8:	b003      	add	sp, #12
 80091fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091fc:	4613      	mov	r3, r2
 80091fe:	e7e7      	b.n	80091d0 <__exponent+0x20>
 8009200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009204:	f804 2b01 	strb.w	r2, [r4], #1
 8009208:	e7f2      	b.n	80091f0 <__exponent+0x40>
 800920a:	2330      	movs	r3, #48	; 0x30
 800920c:	4419      	add	r1, r3
 800920e:	7083      	strb	r3, [r0, #2]
 8009210:	1d02      	adds	r2, r0, #4
 8009212:	70c1      	strb	r1, [r0, #3]
 8009214:	e7ef      	b.n	80091f6 <__exponent+0x46>
	...

08009218 <_printf_float>:
 8009218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	b08d      	sub	sp, #52	; 0x34
 800921e:	460c      	mov	r4, r1
 8009220:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009224:	4616      	mov	r6, r2
 8009226:	461f      	mov	r7, r3
 8009228:	4605      	mov	r5, r0
 800922a:	f001 fa35 	bl	800a698 <_localeconv_r>
 800922e:	6803      	ldr	r3, [r0, #0]
 8009230:	9304      	str	r3, [sp, #16]
 8009232:	4618      	mov	r0, r3
 8009234:	f7f6 ffcc 	bl	80001d0 <strlen>
 8009238:	2300      	movs	r3, #0
 800923a:	930a      	str	r3, [sp, #40]	; 0x28
 800923c:	f8d8 3000 	ldr.w	r3, [r8]
 8009240:	9005      	str	r0, [sp, #20]
 8009242:	3307      	adds	r3, #7
 8009244:	f023 0307 	bic.w	r3, r3, #7
 8009248:	f103 0208 	add.w	r2, r3, #8
 800924c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009250:	f8d4 b000 	ldr.w	fp, [r4]
 8009254:	f8c8 2000 	str.w	r2, [r8]
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009260:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009264:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009268:	9307      	str	r3, [sp, #28]
 800926a:	f8cd 8018 	str.w	r8, [sp, #24]
 800926e:	f04f 32ff 	mov.w	r2, #4294967295
 8009272:	4ba7      	ldr	r3, [pc, #668]	; (8009510 <_printf_float+0x2f8>)
 8009274:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009278:	f7f7 fc58 	bl	8000b2c <__aeabi_dcmpun>
 800927c:	bb70      	cbnz	r0, 80092dc <_printf_float+0xc4>
 800927e:	f04f 32ff 	mov.w	r2, #4294967295
 8009282:	4ba3      	ldr	r3, [pc, #652]	; (8009510 <_printf_float+0x2f8>)
 8009284:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009288:	f7f7 fc32 	bl	8000af0 <__aeabi_dcmple>
 800928c:	bb30      	cbnz	r0, 80092dc <_printf_float+0xc4>
 800928e:	2200      	movs	r2, #0
 8009290:	2300      	movs	r3, #0
 8009292:	4640      	mov	r0, r8
 8009294:	4649      	mov	r1, r9
 8009296:	f7f7 fc21 	bl	8000adc <__aeabi_dcmplt>
 800929a:	b110      	cbz	r0, 80092a2 <_printf_float+0x8a>
 800929c:	232d      	movs	r3, #45	; 0x2d
 800929e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092a2:	4a9c      	ldr	r2, [pc, #624]	; (8009514 <_printf_float+0x2fc>)
 80092a4:	4b9c      	ldr	r3, [pc, #624]	; (8009518 <_printf_float+0x300>)
 80092a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80092aa:	bf8c      	ite	hi
 80092ac:	4690      	movhi	r8, r2
 80092ae:	4698      	movls	r8, r3
 80092b0:	2303      	movs	r3, #3
 80092b2:	f02b 0204 	bic.w	r2, fp, #4
 80092b6:	6123      	str	r3, [r4, #16]
 80092b8:	6022      	str	r2, [r4, #0]
 80092ba:	f04f 0900 	mov.w	r9, #0
 80092be:	9700      	str	r7, [sp, #0]
 80092c0:	4633      	mov	r3, r6
 80092c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80092c4:	4621      	mov	r1, r4
 80092c6:	4628      	mov	r0, r5
 80092c8:	f000 f9e6 	bl	8009698 <_printf_common>
 80092cc:	3001      	adds	r0, #1
 80092ce:	f040 808d 	bne.w	80093ec <_printf_float+0x1d4>
 80092d2:	f04f 30ff 	mov.w	r0, #4294967295
 80092d6:	b00d      	add	sp, #52	; 0x34
 80092d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092dc:	4642      	mov	r2, r8
 80092de:	464b      	mov	r3, r9
 80092e0:	4640      	mov	r0, r8
 80092e2:	4649      	mov	r1, r9
 80092e4:	f7f7 fc22 	bl	8000b2c <__aeabi_dcmpun>
 80092e8:	b110      	cbz	r0, 80092f0 <_printf_float+0xd8>
 80092ea:	4a8c      	ldr	r2, [pc, #560]	; (800951c <_printf_float+0x304>)
 80092ec:	4b8c      	ldr	r3, [pc, #560]	; (8009520 <_printf_float+0x308>)
 80092ee:	e7da      	b.n	80092a6 <_printf_float+0x8e>
 80092f0:	6861      	ldr	r1, [r4, #4]
 80092f2:	1c4b      	adds	r3, r1, #1
 80092f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80092f8:	a80a      	add	r0, sp, #40	; 0x28
 80092fa:	d13e      	bne.n	800937a <_printf_float+0x162>
 80092fc:	2306      	movs	r3, #6
 80092fe:	6063      	str	r3, [r4, #4]
 8009300:	2300      	movs	r3, #0
 8009302:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009306:	ab09      	add	r3, sp, #36	; 0x24
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	ec49 8b10 	vmov	d0, r8, r9
 800930e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009312:	6022      	str	r2, [r4, #0]
 8009314:	f8cd a004 	str.w	sl, [sp, #4]
 8009318:	6861      	ldr	r1, [r4, #4]
 800931a:	4628      	mov	r0, r5
 800931c:	f7ff fee7 	bl	80090ee <__cvt>
 8009320:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009324:	2b47      	cmp	r3, #71	; 0x47
 8009326:	4680      	mov	r8, r0
 8009328:	d109      	bne.n	800933e <_printf_float+0x126>
 800932a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800932c:	1cd8      	adds	r0, r3, #3
 800932e:	db02      	blt.n	8009336 <_printf_float+0x11e>
 8009330:	6862      	ldr	r2, [r4, #4]
 8009332:	4293      	cmp	r3, r2
 8009334:	dd47      	ble.n	80093c6 <_printf_float+0x1ae>
 8009336:	f1aa 0a02 	sub.w	sl, sl, #2
 800933a:	fa5f fa8a 	uxtb.w	sl, sl
 800933e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009342:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009344:	d824      	bhi.n	8009390 <_printf_float+0x178>
 8009346:	3901      	subs	r1, #1
 8009348:	4652      	mov	r2, sl
 800934a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800934e:	9109      	str	r1, [sp, #36]	; 0x24
 8009350:	f7ff ff2e 	bl	80091b0 <__exponent>
 8009354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009356:	1813      	adds	r3, r2, r0
 8009358:	2a01      	cmp	r2, #1
 800935a:	4681      	mov	r9, r0
 800935c:	6123      	str	r3, [r4, #16]
 800935e:	dc02      	bgt.n	8009366 <_printf_float+0x14e>
 8009360:	6822      	ldr	r2, [r4, #0]
 8009362:	07d1      	lsls	r1, r2, #31
 8009364:	d501      	bpl.n	800936a <_printf_float+0x152>
 8009366:	3301      	adds	r3, #1
 8009368:	6123      	str	r3, [r4, #16]
 800936a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0a5      	beq.n	80092be <_printf_float+0xa6>
 8009372:	232d      	movs	r3, #45	; 0x2d
 8009374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009378:	e7a1      	b.n	80092be <_printf_float+0xa6>
 800937a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800937e:	f000 8177 	beq.w	8009670 <_printf_float+0x458>
 8009382:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009386:	d1bb      	bne.n	8009300 <_printf_float+0xe8>
 8009388:	2900      	cmp	r1, #0
 800938a:	d1b9      	bne.n	8009300 <_printf_float+0xe8>
 800938c:	2301      	movs	r3, #1
 800938e:	e7b6      	b.n	80092fe <_printf_float+0xe6>
 8009390:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009394:	d119      	bne.n	80093ca <_printf_float+0x1b2>
 8009396:	2900      	cmp	r1, #0
 8009398:	6863      	ldr	r3, [r4, #4]
 800939a:	dd0c      	ble.n	80093b6 <_printf_float+0x19e>
 800939c:	6121      	str	r1, [r4, #16]
 800939e:	b913      	cbnz	r3, 80093a6 <_printf_float+0x18e>
 80093a0:	6822      	ldr	r2, [r4, #0]
 80093a2:	07d2      	lsls	r2, r2, #31
 80093a4:	d502      	bpl.n	80093ac <_printf_float+0x194>
 80093a6:	3301      	adds	r3, #1
 80093a8:	440b      	add	r3, r1
 80093aa:	6123      	str	r3, [r4, #16]
 80093ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80093b0:	f04f 0900 	mov.w	r9, #0
 80093b4:	e7d9      	b.n	800936a <_printf_float+0x152>
 80093b6:	b913      	cbnz	r3, 80093be <_printf_float+0x1a6>
 80093b8:	6822      	ldr	r2, [r4, #0]
 80093ba:	07d0      	lsls	r0, r2, #31
 80093bc:	d501      	bpl.n	80093c2 <_printf_float+0x1aa>
 80093be:	3302      	adds	r3, #2
 80093c0:	e7f3      	b.n	80093aa <_printf_float+0x192>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e7f1      	b.n	80093aa <_printf_float+0x192>
 80093c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80093ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80093ce:	4293      	cmp	r3, r2
 80093d0:	db05      	blt.n	80093de <_printf_float+0x1c6>
 80093d2:	6822      	ldr	r2, [r4, #0]
 80093d4:	6123      	str	r3, [r4, #16]
 80093d6:	07d1      	lsls	r1, r2, #31
 80093d8:	d5e8      	bpl.n	80093ac <_printf_float+0x194>
 80093da:	3301      	adds	r3, #1
 80093dc:	e7e5      	b.n	80093aa <_printf_float+0x192>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	bfd4      	ite	le
 80093e2:	f1c3 0302 	rsble	r3, r3, #2
 80093e6:	2301      	movgt	r3, #1
 80093e8:	4413      	add	r3, r2
 80093ea:	e7de      	b.n	80093aa <_printf_float+0x192>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	055a      	lsls	r2, r3, #21
 80093f0:	d407      	bmi.n	8009402 <_printf_float+0x1ea>
 80093f2:	6923      	ldr	r3, [r4, #16]
 80093f4:	4642      	mov	r2, r8
 80093f6:	4631      	mov	r1, r6
 80093f8:	4628      	mov	r0, r5
 80093fa:	47b8      	blx	r7
 80093fc:	3001      	adds	r0, #1
 80093fe:	d12b      	bne.n	8009458 <_printf_float+0x240>
 8009400:	e767      	b.n	80092d2 <_printf_float+0xba>
 8009402:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009406:	f240 80dc 	bls.w	80095c2 <_printf_float+0x3aa>
 800940a:	2200      	movs	r2, #0
 800940c:	2300      	movs	r3, #0
 800940e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009412:	f7f7 fb59 	bl	8000ac8 <__aeabi_dcmpeq>
 8009416:	2800      	cmp	r0, #0
 8009418:	d033      	beq.n	8009482 <_printf_float+0x26a>
 800941a:	2301      	movs	r3, #1
 800941c:	4a41      	ldr	r2, [pc, #260]	; (8009524 <_printf_float+0x30c>)
 800941e:	4631      	mov	r1, r6
 8009420:	4628      	mov	r0, r5
 8009422:	47b8      	blx	r7
 8009424:	3001      	adds	r0, #1
 8009426:	f43f af54 	beq.w	80092d2 <_printf_float+0xba>
 800942a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800942e:	429a      	cmp	r2, r3
 8009430:	db02      	blt.n	8009438 <_printf_float+0x220>
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	07d8      	lsls	r0, r3, #31
 8009436:	d50f      	bpl.n	8009458 <_printf_float+0x240>
 8009438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800943c:	4631      	mov	r1, r6
 800943e:	4628      	mov	r0, r5
 8009440:	47b8      	blx	r7
 8009442:	3001      	adds	r0, #1
 8009444:	f43f af45 	beq.w	80092d2 <_printf_float+0xba>
 8009448:	f04f 0800 	mov.w	r8, #0
 800944c:	f104 091a 	add.w	r9, r4, #26
 8009450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009452:	3b01      	subs	r3, #1
 8009454:	4543      	cmp	r3, r8
 8009456:	dc09      	bgt.n	800946c <_printf_float+0x254>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	079b      	lsls	r3, r3, #30
 800945c:	f100 8103 	bmi.w	8009666 <_printf_float+0x44e>
 8009460:	68e0      	ldr	r0, [r4, #12]
 8009462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009464:	4298      	cmp	r0, r3
 8009466:	bfb8      	it	lt
 8009468:	4618      	movlt	r0, r3
 800946a:	e734      	b.n	80092d6 <_printf_float+0xbe>
 800946c:	2301      	movs	r3, #1
 800946e:	464a      	mov	r2, r9
 8009470:	4631      	mov	r1, r6
 8009472:	4628      	mov	r0, r5
 8009474:	47b8      	blx	r7
 8009476:	3001      	adds	r0, #1
 8009478:	f43f af2b 	beq.w	80092d2 <_printf_float+0xba>
 800947c:	f108 0801 	add.w	r8, r8, #1
 8009480:	e7e6      	b.n	8009450 <_printf_float+0x238>
 8009482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009484:	2b00      	cmp	r3, #0
 8009486:	dc2b      	bgt.n	80094e0 <_printf_float+0x2c8>
 8009488:	2301      	movs	r3, #1
 800948a:	4a26      	ldr	r2, [pc, #152]	; (8009524 <_printf_float+0x30c>)
 800948c:	4631      	mov	r1, r6
 800948e:	4628      	mov	r0, r5
 8009490:	47b8      	blx	r7
 8009492:	3001      	adds	r0, #1
 8009494:	f43f af1d 	beq.w	80092d2 <_printf_float+0xba>
 8009498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800949a:	b923      	cbnz	r3, 80094a6 <_printf_float+0x28e>
 800949c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800949e:	b913      	cbnz	r3, 80094a6 <_printf_float+0x28e>
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	07d9      	lsls	r1, r3, #31
 80094a4:	d5d8      	bpl.n	8009458 <_printf_float+0x240>
 80094a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094aa:	4631      	mov	r1, r6
 80094ac:	4628      	mov	r0, r5
 80094ae:	47b8      	blx	r7
 80094b0:	3001      	adds	r0, #1
 80094b2:	f43f af0e 	beq.w	80092d2 <_printf_float+0xba>
 80094b6:	f04f 0900 	mov.w	r9, #0
 80094ba:	f104 0a1a 	add.w	sl, r4, #26
 80094be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c0:	425b      	negs	r3, r3
 80094c2:	454b      	cmp	r3, r9
 80094c4:	dc01      	bgt.n	80094ca <_printf_float+0x2b2>
 80094c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c8:	e794      	b.n	80093f4 <_printf_float+0x1dc>
 80094ca:	2301      	movs	r3, #1
 80094cc:	4652      	mov	r2, sl
 80094ce:	4631      	mov	r1, r6
 80094d0:	4628      	mov	r0, r5
 80094d2:	47b8      	blx	r7
 80094d4:	3001      	adds	r0, #1
 80094d6:	f43f aefc 	beq.w	80092d2 <_printf_float+0xba>
 80094da:	f109 0901 	add.w	r9, r9, #1
 80094de:	e7ee      	b.n	80094be <_printf_float+0x2a6>
 80094e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094e4:	429a      	cmp	r2, r3
 80094e6:	bfa8      	it	ge
 80094e8:	461a      	movge	r2, r3
 80094ea:	2a00      	cmp	r2, #0
 80094ec:	4691      	mov	r9, r2
 80094ee:	dd07      	ble.n	8009500 <_printf_float+0x2e8>
 80094f0:	4613      	mov	r3, r2
 80094f2:	4631      	mov	r1, r6
 80094f4:	4642      	mov	r2, r8
 80094f6:	4628      	mov	r0, r5
 80094f8:	47b8      	blx	r7
 80094fa:	3001      	adds	r0, #1
 80094fc:	f43f aee9 	beq.w	80092d2 <_printf_float+0xba>
 8009500:	f104 031a 	add.w	r3, r4, #26
 8009504:	f04f 0b00 	mov.w	fp, #0
 8009508:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800950c:	9306      	str	r3, [sp, #24]
 800950e:	e015      	b.n	800953c <_printf_float+0x324>
 8009510:	7fefffff 	.word	0x7fefffff
 8009514:	0800b254 	.word	0x0800b254
 8009518:	0800b250 	.word	0x0800b250
 800951c:	0800b25c 	.word	0x0800b25c
 8009520:	0800b258 	.word	0x0800b258
 8009524:	0800b260 	.word	0x0800b260
 8009528:	2301      	movs	r3, #1
 800952a:	9a06      	ldr	r2, [sp, #24]
 800952c:	4631      	mov	r1, r6
 800952e:	4628      	mov	r0, r5
 8009530:	47b8      	blx	r7
 8009532:	3001      	adds	r0, #1
 8009534:	f43f aecd 	beq.w	80092d2 <_printf_float+0xba>
 8009538:	f10b 0b01 	add.w	fp, fp, #1
 800953c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009540:	ebaa 0309 	sub.w	r3, sl, r9
 8009544:	455b      	cmp	r3, fp
 8009546:	dcef      	bgt.n	8009528 <_printf_float+0x310>
 8009548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800954c:	429a      	cmp	r2, r3
 800954e:	44d0      	add	r8, sl
 8009550:	db15      	blt.n	800957e <_printf_float+0x366>
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	07da      	lsls	r2, r3, #31
 8009556:	d412      	bmi.n	800957e <_printf_float+0x366>
 8009558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800955a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800955c:	eba3 020a 	sub.w	r2, r3, sl
 8009560:	eba3 0a01 	sub.w	sl, r3, r1
 8009564:	4592      	cmp	sl, r2
 8009566:	bfa8      	it	ge
 8009568:	4692      	movge	sl, r2
 800956a:	f1ba 0f00 	cmp.w	sl, #0
 800956e:	dc0e      	bgt.n	800958e <_printf_float+0x376>
 8009570:	f04f 0800 	mov.w	r8, #0
 8009574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009578:	f104 091a 	add.w	r9, r4, #26
 800957c:	e019      	b.n	80095b2 <_printf_float+0x39a>
 800957e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009582:	4631      	mov	r1, r6
 8009584:	4628      	mov	r0, r5
 8009586:	47b8      	blx	r7
 8009588:	3001      	adds	r0, #1
 800958a:	d1e5      	bne.n	8009558 <_printf_float+0x340>
 800958c:	e6a1      	b.n	80092d2 <_printf_float+0xba>
 800958e:	4653      	mov	r3, sl
 8009590:	4642      	mov	r2, r8
 8009592:	4631      	mov	r1, r6
 8009594:	4628      	mov	r0, r5
 8009596:	47b8      	blx	r7
 8009598:	3001      	adds	r0, #1
 800959a:	d1e9      	bne.n	8009570 <_printf_float+0x358>
 800959c:	e699      	b.n	80092d2 <_printf_float+0xba>
 800959e:	2301      	movs	r3, #1
 80095a0:	464a      	mov	r2, r9
 80095a2:	4631      	mov	r1, r6
 80095a4:	4628      	mov	r0, r5
 80095a6:	47b8      	blx	r7
 80095a8:	3001      	adds	r0, #1
 80095aa:	f43f ae92 	beq.w	80092d2 <_printf_float+0xba>
 80095ae:	f108 0801 	add.w	r8, r8, #1
 80095b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095b6:	1a9b      	subs	r3, r3, r2
 80095b8:	eba3 030a 	sub.w	r3, r3, sl
 80095bc:	4543      	cmp	r3, r8
 80095be:	dcee      	bgt.n	800959e <_printf_float+0x386>
 80095c0:	e74a      	b.n	8009458 <_printf_float+0x240>
 80095c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095c4:	2a01      	cmp	r2, #1
 80095c6:	dc01      	bgt.n	80095cc <_printf_float+0x3b4>
 80095c8:	07db      	lsls	r3, r3, #31
 80095ca:	d53a      	bpl.n	8009642 <_printf_float+0x42a>
 80095cc:	2301      	movs	r3, #1
 80095ce:	4642      	mov	r2, r8
 80095d0:	4631      	mov	r1, r6
 80095d2:	4628      	mov	r0, r5
 80095d4:	47b8      	blx	r7
 80095d6:	3001      	adds	r0, #1
 80095d8:	f43f ae7b 	beq.w	80092d2 <_printf_float+0xba>
 80095dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095e0:	4631      	mov	r1, r6
 80095e2:	4628      	mov	r0, r5
 80095e4:	47b8      	blx	r7
 80095e6:	3001      	adds	r0, #1
 80095e8:	f108 0801 	add.w	r8, r8, #1
 80095ec:	f43f ae71 	beq.w	80092d2 <_printf_float+0xba>
 80095f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f2:	2200      	movs	r2, #0
 80095f4:	f103 3aff 	add.w	sl, r3, #4294967295
 80095f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095fc:	2300      	movs	r3, #0
 80095fe:	f7f7 fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8009602:	b9c8      	cbnz	r0, 8009638 <_printf_float+0x420>
 8009604:	4653      	mov	r3, sl
 8009606:	4642      	mov	r2, r8
 8009608:	4631      	mov	r1, r6
 800960a:	4628      	mov	r0, r5
 800960c:	47b8      	blx	r7
 800960e:	3001      	adds	r0, #1
 8009610:	d10e      	bne.n	8009630 <_printf_float+0x418>
 8009612:	e65e      	b.n	80092d2 <_printf_float+0xba>
 8009614:	2301      	movs	r3, #1
 8009616:	4652      	mov	r2, sl
 8009618:	4631      	mov	r1, r6
 800961a:	4628      	mov	r0, r5
 800961c:	47b8      	blx	r7
 800961e:	3001      	adds	r0, #1
 8009620:	f43f ae57 	beq.w	80092d2 <_printf_float+0xba>
 8009624:	f108 0801 	add.w	r8, r8, #1
 8009628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800962a:	3b01      	subs	r3, #1
 800962c:	4543      	cmp	r3, r8
 800962e:	dcf1      	bgt.n	8009614 <_printf_float+0x3fc>
 8009630:	464b      	mov	r3, r9
 8009632:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009636:	e6de      	b.n	80093f6 <_printf_float+0x1de>
 8009638:	f04f 0800 	mov.w	r8, #0
 800963c:	f104 0a1a 	add.w	sl, r4, #26
 8009640:	e7f2      	b.n	8009628 <_printf_float+0x410>
 8009642:	2301      	movs	r3, #1
 8009644:	e7df      	b.n	8009606 <_printf_float+0x3ee>
 8009646:	2301      	movs	r3, #1
 8009648:	464a      	mov	r2, r9
 800964a:	4631      	mov	r1, r6
 800964c:	4628      	mov	r0, r5
 800964e:	47b8      	blx	r7
 8009650:	3001      	adds	r0, #1
 8009652:	f43f ae3e 	beq.w	80092d2 <_printf_float+0xba>
 8009656:	f108 0801 	add.w	r8, r8, #1
 800965a:	68e3      	ldr	r3, [r4, #12]
 800965c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800965e:	1a9b      	subs	r3, r3, r2
 8009660:	4543      	cmp	r3, r8
 8009662:	dcf0      	bgt.n	8009646 <_printf_float+0x42e>
 8009664:	e6fc      	b.n	8009460 <_printf_float+0x248>
 8009666:	f04f 0800 	mov.w	r8, #0
 800966a:	f104 0919 	add.w	r9, r4, #25
 800966e:	e7f4      	b.n	800965a <_printf_float+0x442>
 8009670:	2900      	cmp	r1, #0
 8009672:	f43f ae8b 	beq.w	800938c <_printf_float+0x174>
 8009676:	2300      	movs	r3, #0
 8009678:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800967c:	ab09      	add	r3, sp, #36	; 0x24
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	ec49 8b10 	vmov	d0, r8, r9
 8009684:	6022      	str	r2, [r4, #0]
 8009686:	f8cd a004 	str.w	sl, [sp, #4]
 800968a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800968e:	4628      	mov	r0, r5
 8009690:	f7ff fd2d 	bl	80090ee <__cvt>
 8009694:	4680      	mov	r8, r0
 8009696:	e648      	b.n	800932a <_printf_float+0x112>

08009698 <_printf_common>:
 8009698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800969c:	4691      	mov	r9, r2
 800969e:	461f      	mov	r7, r3
 80096a0:	688a      	ldr	r2, [r1, #8]
 80096a2:	690b      	ldr	r3, [r1, #16]
 80096a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096a8:	4293      	cmp	r3, r2
 80096aa:	bfb8      	it	lt
 80096ac:	4613      	movlt	r3, r2
 80096ae:	f8c9 3000 	str.w	r3, [r9]
 80096b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096b6:	4606      	mov	r6, r0
 80096b8:	460c      	mov	r4, r1
 80096ba:	b112      	cbz	r2, 80096c2 <_printf_common+0x2a>
 80096bc:	3301      	adds	r3, #1
 80096be:	f8c9 3000 	str.w	r3, [r9]
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	0699      	lsls	r1, r3, #26
 80096c6:	bf42      	ittt	mi
 80096c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80096cc:	3302      	addmi	r3, #2
 80096ce:	f8c9 3000 	strmi.w	r3, [r9]
 80096d2:	6825      	ldr	r5, [r4, #0]
 80096d4:	f015 0506 	ands.w	r5, r5, #6
 80096d8:	d107      	bne.n	80096ea <_printf_common+0x52>
 80096da:	f104 0a19 	add.w	sl, r4, #25
 80096de:	68e3      	ldr	r3, [r4, #12]
 80096e0:	f8d9 2000 	ldr.w	r2, [r9]
 80096e4:	1a9b      	subs	r3, r3, r2
 80096e6:	42ab      	cmp	r3, r5
 80096e8:	dc28      	bgt.n	800973c <_printf_common+0xa4>
 80096ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80096ee:	6822      	ldr	r2, [r4, #0]
 80096f0:	3300      	adds	r3, #0
 80096f2:	bf18      	it	ne
 80096f4:	2301      	movne	r3, #1
 80096f6:	0692      	lsls	r2, r2, #26
 80096f8:	d42d      	bmi.n	8009756 <_printf_common+0xbe>
 80096fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096fe:	4639      	mov	r1, r7
 8009700:	4630      	mov	r0, r6
 8009702:	47c0      	blx	r8
 8009704:	3001      	adds	r0, #1
 8009706:	d020      	beq.n	800974a <_printf_common+0xb2>
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	68e5      	ldr	r5, [r4, #12]
 800970c:	f8d9 2000 	ldr.w	r2, [r9]
 8009710:	f003 0306 	and.w	r3, r3, #6
 8009714:	2b04      	cmp	r3, #4
 8009716:	bf08      	it	eq
 8009718:	1aad      	subeq	r5, r5, r2
 800971a:	68a3      	ldr	r3, [r4, #8]
 800971c:	6922      	ldr	r2, [r4, #16]
 800971e:	bf0c      	ite	eq
 8009720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009724:	2500      	movne	r5, #0
 8009726:	4293      	cmp	r3, r2
 8009728:	bfc4      	itt	gt
 800972a:	1a9b      	subgt	r3, r3, r2
 800972c:	18ed      	addgt	r5, r5, r3
 800972e:	f04f 0900 	mov.w	r9, #0
 8009732:	341a      	adds	r4, #26
 8009734:	454d      	cmp	r5, r9
 8009736:	d11a      	bne.n	800976e <_printf_common+0xd6>
 8009738:	2000      	movs	r0, #0
 800973a:	e008      	b.n	800974e <_printf_common+0xb6>
 800973c:	2301      	movs	r3, #1
 800973e:	4652      	mov	r2, sl
 8009740:	4639      	mov	r1, r7
 8009742:	4630      	mov	r0, r6
 8009744:	47c0      	blx	r8
 8009746:	3001      	adds	r0, #1
 8009748:	d103      	bne.n	8009752 <_printf_common+0xba>
 800974a:	f04f 30ff 	mov.w	r0, #4294967295
 800974e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009752:	3501      	adds	r5, #1
 8009754:	e7c3      	b.n	80096de <_printf_common+0x46>
 8009756:	18e1      	adds	r1, r4, r3
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	2030      	movs	r0, #48	; 0x30
 800975c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009760:	4422      	add	r2, r4
 8009762:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009766:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800976a:	3302      	adds	r3, #2
 800976c:	e7c5      	b.n	80096fa <_printf_common+0x62>
 800976e:	2301      	movs	r3, #1
 8009770:	4622      	mov	r2, r4
 8009772:	4639      	mov	r1, r7
 8009774:	4630      	mov	r0, r6
 8009776:	47c0      	blx	r8
 8009778:	3001      	adds	r0, #1
 800977a:	d0e6      	beq.n	800974a <_printf_common+0xb2>
 800977c:	f109 0901 	add.w	r9, r9, #1
 8009780:	e7d8      	b.n	8009734 <_printf_common+0x9c>
	...

08009784 <_printf_i>:
 8009784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009788:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800978c:	460c      	mov	r4, r1
 800978e:	7e09      	ldrb	r1, [r1, #24]
 8009790:	b085      	sub	sp, #20
 8009792:	296e      	cmp	r1, #110	; 0x6e
 8009794:	4617      	mov	r7, r2
 8009796:	4606      	mov	r6, r0
 8009798:	4698      	mov	r8, r3
 800979a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800979c:	f000 80b3 	beq.w	8009906 <_printf_i+0x182>
 80097a0:	d822      	bhi.n	80097e8 <_printf_i+0x64>
 80097a2:	2963      	cmp	r1, #99	; 0x63
 80097a4:	d036      	beq.n	8009814 <_printf_i+0x90>
 80097a6:	d80a      	bhi.n	80097be <_printf_i+0x3a>
 80097a8:	2900      	cmp	r1, #0
 80097aa:	f000 80b9 	beq.w	8009920 <_printf_i+0x19c>
 80097ae:	2958      	cmp	r1, #88	; 0x58
 80097b0:	f000 8083 	beq.w	80098ba <_printf_i+0x136>
 80097b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80097bc:	e032      	b.n	8009824 <_printf_i+0xa0>
 80097be:	2964      	cmp	r1, #100	; 0x64
 80097c0:	d001      	beq.n	80097c6 <_printf_i+0x42>
 80097c2:	2969      	cmp	r1, #105	; 0x69
 80097c4:	d1f6      	bne.n	80097b4 <_printf_i+0x30>
 80097c6:	6820      	ldr	r0, [r4, #0]
 80097c8:	6813      	ldr	r3, [r2, #0]
 80097ca:	0605      	lsls	r5, r0, #24
 80097cc:	f103 0104 	add.w	r1, r3, #4
 80097d0:	d52a      	bpl.n	8009828 <_printf_i+0xa4>
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6011      	str	r1, [r2, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	da03      	bge.n	80097e2 <_printf_i+0x5e>
 80097da:	222d      	movs	r2, #45	; 0x2d
 80097dc:	425b      	negs	r3, r3
 80097de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80097e2:	486f      	ldr	r0, [pc, #444]	; (80099a0 <_printf_i+0x21c>)
 80097e4:	220a      	movs	r2, #10
 80097e6:	e039      	b.n	800985c <_printf_i+0xd8>
 80097e8:	2973      	cmp	r1, #115	; 0x73
 80097ea:	f000 809d 	beq.w	8009928 <_printf_i+0x1a4>
 80097ee:	d808      	bhi.n	8009802 <_printf_i+0x7e>
 80097f0:	296f      	cmp	r1, #111	; 0x6f
 80097f2:	d020      	beq.n	8009836 <_printf_i+0xb2>
 80097f4:	2970      	cmp	r1, #112	; 0x70
 80097f6:	d1dd      	bne.n	80097b4 <_printf_i+0x30>
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	f043 0320 	orr.w	r3, r3, #32
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	e003      	b.n	800980a <_printf_i+0x86>
 8009802:	2975      	cmp	r1, #117	; 0x75
 8009804:	d017      	beq.n	8009836 <_printf_i+0xb2>
 8009806:	2978      	cmp	r1, #120	; 0x78
 8009808:	d1d4      	bne.n	80097b4 <_printf_i+0x30>
 800980a:	2378      	movs	r3, #120	; 0x78
 800980c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009810:	4864      	ldr	r0, [pc, #400]	; (80099a4 <_printf_i+0x220>)
 8009812:	e055      	b.n	80098c0 <_printf_i+0x13c>
 8009814:	6813      	ldr	r3, [r2, #0]
 8009816:	1d19      	adds	r1, r3, #4
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6011      	str	r1, [r2, #0]
 800981c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009824:	2301      	movs	r3, #1
 8009826:	e08c      	b.n	8009942 <_printf_i+0x1be>
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6011      	str	r1, [r2, #0]
 800982c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009830:	bf18      	it	ne
 8009832:	b21b      	sxthne	r3, r3
 8009834:	e7cf      	b.n	80097d6 <_printf_i+0x52>
 8009836:	6813      	ldr	r3, [r2, #0]
 8009838:	6825      	ldr	r5, [r4, #0]
 800983a:	1d18      	adds	r0, r3, #4
 800983c:	6010      	str	r0, [r2, #0]
 800983e:	0628      	lsls	r0, r5, #24
 8009840:	d501      	bpl.n	8009846 <_printf_i+0xc2>
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	e002      	b.n	800984c <_printf_i+0xc8>
 8009846:	0668      	lsls	r0, r5, #25
 8009848:	d5fb      	bpl.n	8009842 <_printf_i+0xbe>
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	4854      	ldr	r0, [pc, #336]	; (80099a0 <_printf_i+0x21c>)
 800984e:	296f      	cmp	r1, #111	; 0x6f
 8009850:	bf14      	ite	ne
 8009852:	220a      	movne	r2, #10
 8009854:	2208      	moveq	r2, #8
 8009856:	2100      	movs	r1, #0
 8009858:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800985c:	6865      	ldr	r5, [r4, #4]
 800985e:	60a5      	str	r5, [r4, #8]
 8009860:	2d00      	cmp	r5, #0
 8009862:	f2c0 8095 	blt.w	8009990 <_printf_i+0x20c>
 8009866:	6821      	ldr	r1, [r4, #0]
 8009868:	f021 0104 	bic.w	r1, r1, #4
 800986c:	6021      	str	r1, [r4, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d13d      	bne.n	80098ee <_printf_i+0x16a>
 8009872:	2d00      	cmp	r5, #0
 8009874:	f040 808e 	bne.w	8009994 <_printf_i+0x210>
 8009878:	4665      	mov	r5, ip
 800987a:	2a08      	cmp	r2, #8
 800987c:	d10b      	bne.n	8009896 <_printf_i+0x112>
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	07db      	lsls	r3, r3, #31
 8009882:	d508      	bpl.n	8009896 <_printf_i+0x112>
 8009884:	6923      	ldr	r3, [r4, #16]
 8009886:	6862      	ldr	r2, [r4, #4]
 8009888:	429a      	cmp	r2, r3
 800988a:	bfde      	ittt	le
 800988c:	2330      	movle	r3, #48	; 0x30
 800988e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009892:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009896:	ebac 0305 	sub.w	r3, ip, r5
 800989a:	6123      	str	r3, [r4, #16]
 800989c:	f8cd 8000 	str.w	r8, [sp]
 80098a0:	463b      	mov	r3, r7
 80098a2:	aa03      	add	r2, sp, #12
 80098a4:	4621      	mov	r1, r4
 80098a6:	4630      	mov	r0, r6
 80098a8:	f7ff fef6 	bl	8009698 <_printf_common>
 80098ac:	3001      	adds	r0, #1
 80098ae:	d14d      	bne.n	800994c <_printf_i+0x1c8>
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295
 80098b4:	b005      	add	sp, #20
 80098b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098ba:	4839      	ldr	r0, [pc, #228]	; (80099a0 <_printf_i+0x21c>)
 80098bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80098c0:	6813      	ldr	r3, [r2, #0]
 80098c2:	6821      	ldr	r1, [r4, #0]
 80098c4:	1d1d      	adds	r5, r3, #4
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6015      	str	r5, [r2, #0]
 80098ca:	060a      	lsls	r2, r1, #24
 80098cc:	d50b      	bpl.n	80098e6 <_printf_i+0x162>
 80098ce:	07ca      	lsls	r2, r1, #31
 80098d0:	bf44      	itt	mi
 80098d2:	f041 0120 	orrmi.w	r1, r1, #32
 80098d6:	6021      	strmi	r1, [r4, #0]
 80098d8:	b91b      	cbnz	r3, 80098e2 <_printf_i+0x15e>
 80098da:	6822      	ldr	r2, [r4, #0]
 80098dc:	f022 0220 	bic.w	r2, r2, #32
 80098e0:	6022      	str	r2, [r4, #0]
 80098e2:	2210      	movs	r2, #16
 80098e4:	e7b7      	b.n	8009856 <_printf_i+0xd2>
 80098e6:	064d      	lsls	r5, r1, #25
 80098e8:	bf48      	it	mi
 80098ea:	b29b      	uxthmi	r3, r3
 80098ec:	e7ef      	b.n	80098ce <_printf_i+0x14a>
 80098ee:	4665      	mov	r5, ip
 80098f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80098f4:	fb02 3311 	mls	r3, r2, r1, r3
 80098f8:	5cc3      	ldrb	r3, [r0, r3]
 80098fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80098fe:	460b      	mov	r3, r1
 8009900:	2900      	cmp	r1, #0
 8009902:	d1f5      	bne.n	80098f0 <_printf_i+0x16c>
 8009904:	e7b9      	b.n	800987a <_printf_i+0xf6>
 8009906:	6813      	ldr	r3, [r2, #0]
 8009908:	6825      	ldr	r5, [r4, #0]
 800990a:	6961      	ldr	r1, [r4, #20]
 800990c:	1d18      	adds	r0, r3, #4
 800990e:	6010      	str	r0, [r2, #0]
 8009910:	0628      	lsls	r0, r5, #24
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	d501      	bpl.n	800991a <_printf_i+0x196>
 8009916:	6019      	str	r1, [r3, #0]
 8009918:	e002      	b.n	8009920 <_printf_i+0x19c>
 800991a:	066a      	lsls	r2, r5, #25
 800991c:	d5fb      	bpl.n	8009916 <_printf_i+0x192>
 800991e:	8019      	strh	r1, [r3, #0]
 8009920:	2300      	movs	r3, #0
 8009922:	6123      	str	r3, [r4, #16]
 8009924:	4665      	mov	r5, ip
 8009926:	e7b9      	b.n	800989c <_printf_i+0x118>
 8009928:	6813      	ldr	r3, [r2, #0]
 800992a:	1d19      	adds	r1, r3, #4
 800992c:	6011      	str	r1, [r2, #0]
 800992e:	681d      	ldr	r5, [r3, #0]
 8009930:	6862      	ldr	r2, [r4, #4]
 8009932:	2100      	movs	r1, #0
 8009934:	4628      	mov	r0, r5
 8009936:	f7f6 fc53 	bl	80001e0 <memchr>
 800993a:	b108      	cbz	r0, 8009940 <_printf_i+0x1bc>
 800993c:	1b40      	subs	r0, r0, r5
 800993e:	6060      	str	r0, [r4, #4]
 8009940:	6863      	ldr	r3, [r4, #4]
 8009942:	6123      	str	r3, [r4, #16]
 8009944:	2300      	movs	r3, #0
 8009946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800994a:	e7a7      	b.n	800989c <_printf_i+0x118>
 800994c:	6923      	ldr	r3, [r4, #16]
 800994e:	462a      	mov	r2, r5
 8009950:	4639      	mov	r1, r7
 8009952:	4630      	mov	r0, r6
 8009954:	47c0      	blx	r8
 8009956:	3001      	adds	r0, #1
 8009958:	d0aa      	beq.n	80098b0 <_printf_i+0x12c>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	079b      	lsls	r3, r3, #30
 800995e:	d413      	bmi.n	8009988 <_printf_i+0x204>
 8009960:	68e0      	ldr	r0, [r4, #12]
 8009962:	9b03      	ldr	r3, [sp, #12]
 8009964:	4298      	cmp	r0, r3
 8009966:	bfb8      	it	lt
 8009968:	4618      	movlt	r0, r3
 800996a:	e7a3      	b.n	80098b4 <_printf_i+0x130>
 800996c:	2301      	movs	r3, #1
 800996e:	464a      	mov	r2, r9
 8009970:	4639      	mov	r1, r7
 8009972:	4630      	mov	r0, r6
 8009974:	47c0      	blx	r8
 8009976:	3001      	adds	r0, #1
 8009978:	d09a      	beq.n	80098b0 <_printf_i+0x12c>
 800997a:	3501      	adds	r5, #1
 800997c:	68e3      	ldr	r3, [r4, #12]
 800997e:	9a03      	ldr	r2, [sp, #12]
 8009980:	1a9b      	subs	r3, r3, r2
 8009982:	42ab      	cmp	r3, r5
 8009984:	dcf2      	bgt.n	800996c <_printf_i+0x1e8>
 8009986:	e7eb      	b.n	8009960 <_printf_i+0x1dc>
 8009988:	2500      	movs	r5, #0
 800998a:	f104 0919 	add.w	r9, r4, #25
 800998e:	e7f5      	b.n	800997c <_printf_i+0x1f8>
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1ac      	bne.n	80098ee <_printf_i+0x16a>
 8009994:	7803      	ldrb	r3, [r0, #0]
 8009996:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800999a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800999e:	e76c      	b.n	800987a <_printf_i+0xf6>
 80099a0:	0800b262 	.word	0x0800b262
 80099a4:	0800b273 	.word	0x0800b273

080099a8 <siprintf>:
 80099a8:	b40e      	push	{r1, r2, r3}
 80099aa:	b500      	push	{lr}
 80099ac:	b09c      	sub	sp, #112	; 0x70
 80099ae:	ab1d      	add	r3, sp, #116	; 0x74
 80099b0:	9002      	str	r0, [sp, #8]
 80099b2:	9006      	str	r0, [sp, #24]
 80099b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099b8:	4809      	ldr	r0, [pc, #36]	; (80099e0 <siprintf+0x38>)
 80099ba:	9107      	str	r1, [sp, #28]
 80099bc:	9104      	str	r1, [sp, #16]
 80099be:	4909      	ldr	r1, [pc, #36]	; (80099e4 <siprintf+0x3c>)
 80099c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099c4:	9105      	str	r1, [sp, #20]
 80099c6:	6800      	ldr	r0, [r0, #0]
 80099c8:	9301      	str	r3, [sp, #4]
 80099ca:	a902      	add	r1, sp, #8
 80099cc:	f001 fa66 	bl	800ae9c <_svfiprintf_r>
 80099d0:	9b02      	ldr	r3, [sp, #8]
 80099d2:	2200      	movs	r2, #0
 80099d4:	701a      	strb	r2, [r3, #0]
 80099d6:	b01c      	add	sp, #112	; 0x70
 80099d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099dc:	b003      	add	sp, #12
 80099de:	4770      	bx	lr
 80099e0:	2000000c 	.word	0x2000000c
 80099e4:	ffff0208 	.word	0xffff0208

080099e8 <strncat>:
 80099e8:	b530      	push	{r4, r5, lr}
 80099ea:	4603      	mov	r3, r0
 80099ec:	781c      	ldrb	r4, [r3, #0]
 80099ee:	1c5d      	adds	r5, r3, #1
 80099f0:	b944      	cbnz	r4, 8009a04 <strncat+0x1c>
 80099f2:	f112 32ff 	adds.w	r2, r2, #4294967295
 80099f6:	d304      	bcc.n	8009a02 <strncat+0x1a>
 80099f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099fc:	f803 4b01 	strb.w	r4, [r3], #1
 8009a00:	b914      	cbnz	r4, 8009a08 <strncat+0x20>
 8009a02:	bd30      	pop	{r4, r5, pc}
 8009a04:	462b      	mov	r3, r5
 8009a06:	e7f1      	b.n	80099ec <strncat+0x4>
 8009a08:	2a00      	cmp	r2, #0
 8009a0a:	d1f2      	bne.n	80099f2 <strncat+0xa>
 8009a0c:	701a      	strb	r2, [r3, #0]
 8009a0e:	e7f0      	b.n	80099f2 <strncat+0xa>

08009a10 <quorem>:
 8009a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	6903      	ldr	r3, [r0, #16]
 8009a16:	690c      	ldr	r4, [r1, #16]
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	4680      	mov	r8, r0
 8009a1c:	f2c0 8082 	blt.w	8009b24 <quorem+0x114>
 8009a20:	3c01      	subs	r4, #1
 8009a22:	f101 0714 	add.w	r7, r1, #20
 8009a26:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009a2a:	f100 0614 	add.w	r6, r0, #20
 8009a2e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009a32:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009a36:	eb06 030c 	add.w	r3, r6, ip
 8009a3a:	3501      	adds	r5, #1
 8009a3c:	eb07 090c 	add.w	r9, r7, ip
 8009a40:	9301      	str	r3, [sp, #4]
 8009a42:	fbb0 f5f5 	udiv	r5, r0, r5
 8009a46:	b395      	cbz	r5, 8009aae <quorem+0x9e>
 8009a48:	f04f 0a00 	mov.w	sl, #0
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	46b6      	mov	lr, r6
 8009a50:	46d3      	mov	fp, sl
 8009a52:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a56:	b293      	uxth	r3, r2
 8009a58:	fb05 a303 	mla	r3, r5, r3, sl
 8009a5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	ebab 0303 	sub.w	r3, fp, r3
 8009a66:	0c12      	lsrs	r2, r2, #16
 8009a68:	f8de b000 	ldr.w	fp, [lr]
 8009a6c:	fb05 a202 	mla	r2, r5, r2, sl
 8009a70:	fa13 f38b 	uxtah	r3, r3, fp
 8009a74:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009a78:	fa1f fb82 	uxth.w	fp, r2
 8009a7c:	f8de 2000 	ldr.w	r2, [lr]
 8009a80:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a8e:	4581      	cmp	r9, r0
 8009a90:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009a94:	f84e 3b04 	str.w	r3, [lr], #4
 8009a98:	d2db      	bcs.n	8009a52 <quorem+0x42>
 8009a9a:	f856 300c 	ldr.w	r3, [r6, ip]
 8009a9e:	b933      	cbnz	r3, 8009aae <quorem+0x9e>
 8009aa0:	9b01      	ldr	r3, [sp, #4]
 8009aa2:	3b04      	subs	r3, #4
 8009aa4:	429e      	cmp	r6, r3
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	d330      	bcc.n	8009b0c <quorem+0xfc>
 8009aaa:	f8c8 4010 	str.w	r4, [r8, #16]
 8009aae:	4640      	mov	r0, r8
 8009ab0:	f001 f81e 	bl	800aaf0 <__mcmp>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	db25      	blt.n	8009b04 <quorem+0xf4>
 8009ab8:	3501      	adds	r5, #1
 8009aba:	4630      	mov	r0, r6
 8009abc:	f04f 0c00 	mov.w	ip, #0
 8009ac0:	f857 2b04 	ldr.w	r2, [r7], #4
 8009ac4:	f8d0 e000 	ldr.w	lr, [r0]
 8009ac8:	b293      	uxth	r3, r2
 8009aca:	ebac 0303 	sub.w	r3, ip, r3
 8009ace:	0c12      	lsrs	r2, r2, #16
 8009ad0:	fa13 f38e 	uxtah	r3, r3, lr
 8009ad4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ae2:	45b9      	cmp	r9, r7
 8009ae4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ae8:	f840 3b04 	str.w	r3, [r0], #4
 8009aec:	d2e8      	bcs.n	8009ac0 <quorem+0xb0>
 8009aee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009af2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009af6:	b92a      	cbnz	r2, 8009b04 <quorem+0xf4>
 8009af8:	3b04      	subs	r3, #4
 8009afa:	429e      	cmp	r6, r3
 8009afc:	461a      	mov	r2, r3
 8009afe:	d30b      	bcc.n	8009b18 <quorem+0x108>
 8009b00:	f8c8 4010 	str.w	r4, [r8, #16]
 8009b04:	4628      	mov	r0, r5
 8009b06:	b003      	add	sp, #12
 8009b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0c:	6812      	ldr	r2, [r2, #0]
 8009b0e:	3b04      	subs	r3, #4
 8009b10:	2a00      	cmp	r2, #0
 8009b12:	d1ca      	bne.n	8009aaa <quorem+0x9a>
 8009b14:	3c01      	subs	r4, #1
 8009b16:	e7c5      	b.n	8009aa4 <quorem+0x94>
 8009b18:	6812      	ldr	r2, [r2, #0]
 8009b1a:	3b04      	subs	r3, #4
 8009b1c:	2a00      	cmp	r2, #0
 8009b1e:	d1ef      	bne.n	8009b00 <quorem+0xf0>
 8009b20:	3c01      	subs	r4, #1
 8009b22:	e7ea      	b.n	8009afa <quorem+0xea>
 8009b24:	2000      	movs	r0, #0
 8009b26:	e7ee      	b.n	8009b06 <quorem+0xf6>

08009b28 <_dtoa_r>:
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	ec57 6b10 	vmov	r6, r7, d0
 8009b30:	b097      	sub	sp, #92	; 0x5c
 8009b32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b34:	9106      	str	r1, [sp, #24]
 8009b36:	4604      	mov	r4, r0
 8009b38:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b3a:	9312      	str	r3, [sp, #72]	; 0x48
 8009b3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b40:	e9cd 6700 	strd	r6, r7, [sp]
 8009b44:	b93d      	cbnz	r5, 8009b56 <_dtoa_r+0x2e>
 8009b46:	2010      	movs	r0, #16
 8009b48:	f000 fdb4 	bl	800a6b4 <malloc>
 8009b4c:	6260      	str	r0, [r4, #36]	; 0x24
 8009b4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b52:	6005      	str	r5, [r0, #0]
 8009b54:	60c5      	str	r5, [r0, #12]
 8009b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b58:	6819      	ldr	r1, [r3, #0]
 8009b5a:	b151      	cbz	r1, 8009b72 <_dtoa_r+0x4a>
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	604a      	str	r2, [r1, #4]
 8009b60:	2301      	movs	r3, #1
 8009b62:	4093      	lsls	r3, r2
 8009b64:	608b      	str	r3, [r1, #8]
 8009b66:	4620      	mov	r0, r4
 8009b68:	f000 fde0 	bl	800a72c <_Bfree>
 8009b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b6e:	2200      	movs	r2, #0
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	1e3b      	subs	r3, r7, #0
 8009b74:	bfbb      	ittet	lt
 8009b76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b7a:	9301      	strlt	r3, [sp, #4]
 8009b7c:	2300      	movge	r3, #0
 8009b7e:	2201      	movlt	r2, #1
 8009b80:	bfac      	ite	ge
 8009b82:	f8c8 3000 	strge.w	r3, [r8]
 8009b86:	f8c8 2000 	strlt.w	r2, [r8]
 8009b8a:	4baf      	ldr	r3, [pc, #700]	; (8009e48 <_dtoa_r+0x320>)
 8009b8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b90:	ea33 0308 	bics.w	r3, r3, r8
 8009b94:	d114      	bne.n	8009bc0 <_dtoa_r+0x98>
 8009b96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b98:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	9b00      	ldr	r3, [sp, #0]
 8009ba0:	b923      	cbnz	r3, 8009bac <_dtoa_r+0x84>
 8009ba2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	f000 8542 	beq.w	800a630 <_dtoa_r+0xb08>
 8009bac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009e5c <_dtoa_r+0x334>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f000 8544 	beq.w	800a640 <_dtoa_r+0xb18>
 8009bb8:	f10b 0303 	add.w	r3, fp, #3
 8009bbc:	f000 bd3e 	b.w	800a63c <_dtoa_r+0xb14>
 8009bc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	4630      	mov	r0, r6
 8009bca:	4639      	mov	r1, r7
 8009bcc:	f7f6 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bd0:	4681      	mov	r9, r0
 8009bd2:	b168      	cbz	r0, 8009bf0 <_dtoa_r+0xc8>
 8009bd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	6013      	str	r3, [r2, #0]
 8009bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 8524 	beq.w	800a62a <_dtoa_r+0xb02>
 8009be2:	4b9a      	ldr	r3, [pc, #616]	; (8009e4c <_dtoa_r+0x324>)
 8009be4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009be6:	f103 3bff 	add.w	fp, r3, #4294967295
 8009bea:	6013      	str	r3, [r2, #0]
 8009bec:	f000 bd28 	b.w	800a640 <_dtoa_r+0xb18>
 8009bf0:	aa14      	add	r2, sp, #80	; 0x50
 8009bf2:	a915      	add	r1, sp, #84	; 0x54
 8009bf4:	ec47 6b10 	vmov	d0, r6, r7
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f000 fff0 	bl	800abde <__d2b>
 8009bfe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009c02:	9004      	str	r0, [sp, #16]
 8009c04:	2d00      	cmp	r5, #0
 8009c06:	d07c      	beq.n	8009d02 <_dtoa_r+0x1da>
 8009c08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009c10:	46b2      	mov	sl, r6
 8009c12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009c16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009c1e:	2200      	movs	r2, #0
 8009c20:	4b8b      	ldr	r3, [pc, #556]	; (8009e50 <_dtoa_r+0x328>)
 8009c22:	4650      	mov	r0, sl
 8009c24:	4659      	mov	r1, fp
 8009c26:	f7f6 fb2f 	bl	8000288 <__aeabi_dsub>
 8009c2a:	a381      	add	r3, pc, #516	; (adr r3, 8009e30 <_dtoa_r+0x308>)
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	f7f6 fce2 	bl	80005f8 <__aeabi_dmul>
 8009c34:	a380      	add	r3, pc, #512	; (adr r3, 8009e38 <_dtoa_r+0x310>)
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	f7f6 fb27 	bl	800028c <__adddf3>
 8009c3e:	4606      	mov	r6, r0
 8009c40:	4628      	mov	r0, r5
 8009c42:	460f      	mov	r7, r1
 8009c44:	f7f6 fc6e 	bl	8000524 <__aeabi_i2d>
 8009c48:	a37d      	add	r3, pc, #500	; (adr r3, 8009e40 <_dtoa_r+0x318>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f7f6 fcd3 	bl	80005f8 <__aeabi_dmul>
 8009c52:	4602      	mov	r2, r0
 8009c54:	460b      	mov	r3, r1
 8009c56:	4630      	mov	r0, r6
 8009c58:	4639      	mov	r1, r7
 8009c5a:	f7f6 fb17 	bl	800028c <__adddf3>
 8009c5e:	4606      	mov	r6, r0
 8009c60:	460f      	mov	r7, r1
 8009c62:	f7f6 ff79 	bl	8000b58 <__aeabi_d2iz>
 8009c66:	2200      	movs	r2, #0
 8009c68:	4682      	mov	sl, r0
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	4639      	mov	r1, r7
 8009c70:	f7f6 ff34 	bl	8000adc <__aeabi_dcmplt>
 8009c74:	b148      	cbz	r0, 8009c8a <_dtoa_r+0x162>
 8009c76:	4650      	mov	r0, sl
 8009c78:	f7f6 fc54 	bl	8000524 <__aeabi_i2d>
 8009c7c:	4632      	mov	r2, r6
 8009c7e:	463b      	mov	r3, r7
 8009c80:	f7f6 ff22 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c84:	b908      	cbnz	r0, 8009c8a <_dtoa_r+0x162>
 8009c86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c8a:	f1ba 0f16 	cmp.w	sl, #22
 8009c8e:	d859      	bhi.n	8009d44 <_dtoa_r+0x21c>
 8009c90:	4970      	ldr	r1, [pc, #448]	; (8009e54 <_dtoa_r+0x32c>)
 8009c92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009c96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c9e:	f7f6 ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	d050      	beq.n	8009d48 <_dtoa_r+0x220>
 8009ca6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009caa:	2300      	movs	r3, #0
 8009cac:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cb0:	1b5d      	subs	r5, r3, r5
 8009cb2:	f1b5 0801 	subs.w	r8, r5, #1
 8009cb6:	bf49      	itett	mi
 8009cb8:	f1c5 0301 	rsbmi	r3, r5, #1
 8009cbc:	2300      	movpl	r3, #0
 8009cbe:	9305      	strmi	r3, [sp, #20]
 8009cc0:	f04f 0800 	movmi.w	r8, #0
 8009cc4:	bf58      	it	pl
 8009cc6:	9305      	strpl	r3, [sp, #20]
 8009cc8:	f1ba 0f00 	cmp.w	sl, #0
 8009ccc:	db3e      	blt.n	8009d4c <_dtoa_r+0x224>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	44d0      	add	r8, sl
 8009cd2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009cd6:	9307      	str	r3, [sp, #28]
 8009cd8:	9b06      	ldr	r3, [sp, #24]
 8009cda:	2b09      	cmp	r3, #9
 8009cdc:	f200 8090 	bhi.w	8009e00 <_dtoa_r+0x2d8>
 8009ce0:	2b05      	cmp	r3, #5
 8009ce2:	bfc4      	itt	gt
 8009ce4:	3b04      	subgt	r3, #4
 8009ce6:	9306      	strgt	r3, [sp, #24]
 8009ce8:	9b06      	ldr	r3, [sp, #24]
 8009cea:	f1a3 0302 	sub.w	r3, r3, #2
 8009cee:	bfcc      	ite	gt
 8009cf0:	2500      	movgt	r5, #0
 8009cf2:	2501      	movle	r5, #1
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	f200 808f 	bhi.w	8009e18 <_dtoa_r+0x2f0>
 8009cfa:	e8df f003 	tbb	[pc, r3]
 8009cfe:	7f7d      	.short	0x7f7d
 8009d00:	7131      	.short	0x7131
 8009d02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009d06:	441d      	add	r5, r3
 8009d08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009d0c:	2820      	cmp	r0, #32
 8009d0e:	dd13      	ble.n	8009d38 <_dtoa_r+0x210>
 8009d10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009d14:	9b00      	ldr	r3, [sp, #0]
 8009d16:	fa08 f800 	lsl.w	r8, r8, r0
 8009d1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009d1e:	fa23 f000 	lsr.w	r0, r3, r0
 8009d22:	ea48 0000 	orr.w	r0, r8, r0
 8009d26:	f7f6 fbed 	bl	8000504 <__aeabi_ui2d>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4682      	mov	sl, r0
 8009d2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009d32:	3d01      	subs	r5, #1
 8009d34:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d36:	e772      	b.n	8009c1e <_dtoa_r+0xf6>
 8009d38:	9b00      	ldr	r3, [sp, #0]
 8009d3a:	f1c0 0020 	rsb	r0, r0, #32
 8009d3e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d42:	e7f0      	b.n	8009d26 <_dtoa_r+0x1fe>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e7b1      	b.n	8009cac <_dtoa_r+0x184>
 8009d48:	900f      	str	r0, [sp, #60]	; 0x3c
 8009d4a:	e7b0      	b.n	8009cae <_dtoa_r+0x186>
 8009d4c:	9b05      	ldr	r3, [sp, #20]
 8009d4e:	eba3 030a 	sub.w	r3, r3, sl
 8009d52:	9305      	str	r3, [sp, #20]
 8009d54:	f1ca 0300 	rsb	r3, sl, #0
 8009d58:	9307      	str	r3, [sp, #28]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	930e      	str	r3, [sp, #56]	; 0x38
 8009d5e:	e7bb      	b.n	8009cd8 <_dtoa_r+0x1b0>
 8009d60:	2301      	movs	r3, #1
 8009d62:	930a      	str	r3, [sp, #40]	; 0x28
 8009d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	dd59      	ble.n	8009e1e <_dtoa_r+0x2f6>
 8009d6a:	9302      	str	r3, [sp, #8]
 8009d6c:	4699      	mov	r9, r3
 8009d6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d70:	2200      	movs	r2, #0
 8009d72:	6072      	str	r2, [r6, #4]
 8009d74:	2204      	movs	r2, #4
 8009d76:	f102 0014 	add.w	r0, r2, #20
 8009d7a:	4298      	cmp	r0, r3
 8009d7c:	6871      	ldr	r1, [r6, #4]
 8009d7e:	d953      	bls.n	8009e28 <_dtoa_r+0x300>
 8009d80:	4620      	mov	r0, r4
 8009d82:	f000 fc9f 	bl	800a6c4 <_Balloc>
 8009d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d88:	6030      	str	r0, [r6, #0]
 8009d8a:	f1b9 0f0e 	cmp.w	r9, #14
 8009d8e:	f8d3 b000 	ldr.w	fp, [r3]
 8009d92:	f200 80e6 	bhi.w	8009f62 <_dtoa_r+0x43a>
 8009d96:	2d00      	cmp	r5, #0
 8009d98:	f000 80e3 	beq.w	8009f62 <_dtoa_r+0x43a>
 8009d9c:	ed9d 7b00 	vldr	d7, [sp]
 8009da0:	f1ba 0f00 	cmp.w	sl, #0
 8009da4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009da8:	dd74      	ble.n	8009e94 <_dtoa_r+0x36c>
 8009daa:	4a2a      	ldr	r2, [pc, #168]	; (8009e54 <_dtoa_r+0x32c>)
 8009dac:	f00a 030f 	and.w	r3, sl, #15
 8009db0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009db4:	ed93 7b00 	vldr	d7, [r3]
 8009db8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009dbc:	06f0      	lsls	r0, r6, #27
 8009dbe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009dc2:	d565      	bpl.n	8009e90 <_dtoa_r+0x368>
 8009dc4:	4b24      	ldr	r3, [pc, #144]	; (8009e58 <_dtoa_r+0x330>)
 8009dc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009dce:	f7f6 fd3d 	bl	800084c <__aeabi_ddiv>
 8009dd2:	e9cd 0100 	strd	r0, r1, [sp]
 8009dd6:	f006 060f 	and.w	r6, r6, #15
 8009dda:	2503      	movs	r5, #3
 8009ddc:	4f1e      	ldr	r7, [pc, #120]	; (8009e58 <_dtoa_r+0x330>)
 8009dde:	e04c      	b.n	8009e7a <_dtoa_r+0x352>
 8009de0:	2301      	movs	r3, #1
 8009de2:	930a      	str	r3, [sp, #40]	; 0x28
 8009de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de6:	4453      	add	r3, sl
 8009de8:	f103 0901 	add.w	r9, r3, #1
 8009dec:	9302      	str	r3, [sp, #8]
 8009dee:	464b      	mov	r3, r9
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	bfb8      	it	lt
 8009df4:	2301      	movlt	r3, #1
 8009df6:	e7ba      	b.n	8009d6e <_dtoa_r+0x246>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	e7b2      	b.n	8009d62 <_dtoa_r+0x23a>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	e7f0      	b.n	8009de2 <_dtoa_r+0x2ba>
 8009e00:	2501      	movs	r5, #1
 8009e02:	2300      	movs	r3, #0
 8009e04:	9306      	str	r3, [sp, #24]
 8009e06:	950a      	str	r5, [sp, #40]	; 0x28
 8009e08:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0c:	9302      	str	r3, [sp, #8]
 8009e0e:	4699      	mov	r9, r3
 8009e10:	2200      	movs	r2, #0
 8009e12:	2312      	movs	r3, #18
 8009e14:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e16:	e7aa      	b.n	8009d6e <_dtoa_r+0x246>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8009e1c:	e7f4      	b.n	8009e08 <_dtoa_r+0x2e0>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	9302      	str	r3, [sp, #8]
 8009e22:	4699      	mov	r9, r3
 8009e24:	461a      	mov	r2, r3
 8009e26:	e7f5      	b.n	8009e14 <_dtoa_r+0x2ec>
 8009e28:	3101      	adds	r1, #1
 8009e2a:	6071      	str	r1, [r6, #4]
 8009e2c:	0052      	lsls	r2, r2, #1
 8009e2e:	e7a2      	b.n	8009d76 <_dtoa_r+0x24e>
 8009e30:	636f4361 	.word	0x636f4361
 8009e34:	3fd287a7 	.word	0x3fd287a7
 8009e38:	8b60c8b3 	.word	0x8b60c8b3
 8009e3c:	3fc68a28 	.word	0x3fc68a28
 8009e40:	509f79fb 	.word	0x509f79fb
 8009e44:	3fd34413 	.word	0x3fd34413
 8009e48:	7ff00000 	.word	0x7ff00000
 8009e4c:	0800b261 	.word	0x0800b261
 8009e50:	3ff80000 	.word	0x3ff80000
 8009e54:	0800b2c0 	.word	0x0800b2c0
 8009e58:	0800b298 	.word	0x0800b298
 8009e5c:	0800b28d 	.word	0x0800b28d
 8009e60:	07f1      	lsls	r1, r6, #31
 8009e62:	d508      	bpl.n	8009e76 <_dtoa_r+0x34e>
 8009e64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e6c:	f7f6 fbc4 	bl	80005f8 <__aeabi_dmul>
 8009e70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e74:	3501      	adds	r5, #1
 8009e76:	1076      	asrs	r6, r6, #1
 8009e78:	3708      	adds	r7, #8
 8009e7a:	2e00      	cmp	r6, #0
 8009e7c:	d1f0      	bne.n	8009e60 <_dtoa_r+0x338>
 8009e7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e86:	f7f6 fce1 	bl	800084c <__aeabi_ddiv>
 8009e8a:	e9cd 0100 	strd	r0, r1, [sp]
 8009e8e:	e01a      	b.n	8009ec6 <_dtoa_r+0x39e>
 8009e90:	2502      	movs	r5, #2
 8009e92:	e7a3      	b.n	8009ddc <_dtoa_r+0x2b4>
 8009e94:	f000 80a0 	beq.w	8009fd8 <_dtoa_r+0x4b0>
 8009e98:	f1ca 0600 	rsb	r6, sl, #0
 8009e9c:	4b9f      	ldr	r3, [pc, #636]	; (800a11c <_dtoa_r+0x5f4>)
 8009e9e:	4fa0      	ldr	r7, [pc, #640]	; (800a120 <_dtoa_r+0x5f8>)
 8009ea0:	f006 020f 	and.w	r2, r6, #15
 8009ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009eb0:	f7f6 fba2 	bl	80005f8 <__aeabi_dmul>
 8009eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8009eb8:	1136      	asrs	r6, r6, #4
 8009eba:	2300      	movs	r3, #0
 8009ebc:	2502      	movs	r5, #2
 8009ebe:	2e00      	cmp	r6, #0
 8009ec0:	d17f      	bne.n	8009fc2 <_dtoa_r+0x49a>
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e1      	bne.n	8009e8a <_dtoa_r+0x362>
 8009ec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 8087 	beq.w	8009fdc <_dtoa_r+0x4b4>
 8009ece:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	4b93      	ldr	r3, [pc, #588]	; (800a124 <_dtoa_r+0x5fc>)
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	4639      	mov	r1, r7
 8009eda:	f7f6 fdff 	bl	8000adc <__aeabi_dcmplt>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d07c      	beq.n	8009fdc <_dtoa_r+0x4b4>
 8009ee2:	f1b9 0f00 	cmp.w	r9, #0
 8009ee6:	d079      	beq.n	8009fdc <_dtoa_r+0x4b4>
 8009ee8:	9b02      	ldr	r3, [sp, #8]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	dd35      	ble.n	8009f5a <_dtoa_r+0x432>
 8009eee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009ef2:	9308      	str	r3, [sp, #32]
 8009ef4:	4639      	mov	r1, r7
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4b8b      	ldr	r3, [pc, #556]	; (800a128 <_dtoa_r+0x600>)
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7f6 fb7c 	bl	80005f8 <__aeabi_dmul>
 8009f00:	e9cd 0100 	strd	r0, r1, [sp]
 8009f04:	9f02      	ldr	r7, [sp, #8]
 8009f06:	3501      	adds	r5, #1
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f7f6 fb0b 	bl	8000524 <__aeabi_i2d>
 8009f0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f12:	f7f6 fb71 	bl	80005f8 <__aeabi_dmul>
 8009f16:	2200      	movs	r2, #0
 8009f18:	4b84      	ldr	r3, [pc, #528]	; (800a12c <_dtoa_r+0x604>)
 8009f1a:	f7f6 f9b7 	bl	800028c <__adddf3>
 8009f1e:	4605      	mov	r5, r0
 8009f20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009f24:	2f00      	cmp	r7, #0
 8009f26:	d15d      	bne.n	8009fe4 <_dtoa_r+0x4bc>
 8009f28:	2200      	movs	r2, #0
 8009f2a:	4b81      	ldr	r3, [pc, #516]	; (800a130 <_dtoa_r+0x608>)
 8009f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f30:	f7f6 f9aa 	bl	8000288 <__aeabi_dsub>
 8009f34:	462a      	mov	r2, r5
 8009f36:	4633      	mov	r3, r6
 8009f38:	e9cd 0100 	strd	r0, r1, [sp]
 8009f3c:	f7f6 fdec 	bl	8000b18 <__aeabi_dcmpgt>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	f040 8288 	bne.w	800a456 <_dtoa_r+0x92e>
 8009f46:	462a      	mov	r2, r5
 8009f48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f50:	f7f6 fdc4 	bl	8000adc <__aeabi_dcmplt>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	f040 827c 	bne.w	800a452 <_dtoa_r+0x92a>
 8009f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f5e:	e9cd 2300 	strd	r2, r3, [sp]
 8009f62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f2c0 8150 	blt.w	800a20a <_dtoa_r+0x6e2>
 8009f6a:	f1ba 0f0e 	cmp.w	sl, #14
 8009f6e:	f300 814c 	bgt.w	800a20a <_dtoa_r+0x6e2>
 8009f72:	4b6a      	ldr	r3, [pc, #424]	; (800a11c <_dtoa_r+0x5f4>)
 8009f74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f78:	ed93 7b00 	vldr	d7, [r3]
 8009f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f84:	f280 80d8 	bge.w	800a138 <_dtoa_r+0x610>
 8009f88:	f1b9 0f00 	cmp.w	r9, #0
 8009f8c:	f300 80d4 	bgt.w	800a138 <_dtoa_r+0x610>
 8009f90:	f040 825e 	bne.w	800a450 <_dtoa_r+0x928>
 8009f94:	2200      	movs	r2, #0
 8009f96:	4b66      	ldr	r3, [pc, #408]	; (800a130 <_dtoa_r+0x608>)
 8009f98:	ec51 0b17 	vmov	r0, r1, d7
 8009f9c:	f7f6 fb2c 	bl	80005f8 <__aeabi_dmul>
 8009fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fa4:	f7f6 fdae 	bl	8000b04 <__aeabi_dcmpge>
 8009fa8:	464f      	mov	r7, r9
 8009faa:	464e      	mov	r6, r9
 8009fac:	2800      	cmp	r0, #0
 8009fae:	f040 8234 	bne.w	800a41a <_dtoa_r+0x8f2>
 8009fb2:	2331      	movs	r3, #49	; 0x31
 8009fb4:	f10b 0501 	add.w	r5, fp, #1
 8009fb8:	f88b 3000 	strb.w	r3, [fp]
 8009fbc:	f10a 0a01 	add.w	sl, sl, #1
 8009fc0:	e22f      	b.n	800a422 <_dtoa_r+0x8fa>
 8009fc2:	07f2      	lsls	r2, r6, #31
 8009fc4:	d505      	bpl.n	8009fd2 <_dtoa_r+0x4aa>
 8009fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fca:	f7f6 fb15 	bl	80005f8 <__aeabi_dmul>
 8009fce:	3501      	adds	r5, #1
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	1076      	asrs	r6, r6, #1
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	e772      	b.n	8009ebe <_dtoa_r+0x396>
 8009fd8:	2502      	movs	r5, #2
 8009fda:	e774      	b.n	8009ec6 <_dtoa_r+0x39e>
 8009fdc:	f8cd a020 	str.w	sl, [sp, #32]
 8009fe0:	464f      	mov	r7, r9
 8009fe2:	e791      	b.n	8009f08 <_dtoa_r+0x3e0>
 8009fe4:	4b4d      	ldr	r3, [pc, #308]	; (800a11c <_dtoa_r+0x5f4>)
 8009fe6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d047      	beq.n	800a084 <_dtoa_r+0x55c>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	494e      	ldr	r1, [pc, #312]	; (800a134 <_dtoa_r+0x60c>)
 8009ffc:	f7f6 fc26 	bl	800084c <__aeabi_ddiv>
 800a000:	462a      	mov	r2, r5
 800a002:	4633      	mov	r3, r6
 800a004:	f7f6 f940 	bl	8000288 <__aeabi_dsub>
 800a008:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a00c:	465d      	mov	r5, fp
 800a00e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a012:	f7f6 fda1 	bl	8000b58 <__aeabi_d2iz>
 800a016:	4606      	mov	r6, r0
 800a018:	f7f6 fa84 	bl	8000524 <__aeabi_i2d>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a024:	f7f6 f930 	bl	8000288 <__aeabi_dsub>
 800a028:	3630      	adds	r6, #48	; 0x30
 800a02a:	f805 6b01 	strb.w	r6, [r5], #1
 800a02e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a032:	e9cd 0100 	strd	r0, r1, [sp]
 800a036:	f7f6 fd51 	bl	8000adc <__aeabi_dcmplt>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d163      	bne.n	800a106 <_dtoa_r+0x5de>
 800a03e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a042:	2000      	movs	r0, #0
 800a044:	4937      	ldr	r1, [pc, #220]	; (800a124 <_dtoa_r+0x5fc>)
 800a046:	f7f6 f91f 	bl	8000288 <__aeabi_dsub>
 800a04a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a04e:	f7f6 fd45 	bl	8000adc <__aeabi_dcmplt>
 800a052:	2800      	cmp	r0, #0
 800a054:	f040 80b7 	bne.w	800a1c6 <_dtoa_r+0x69e>
 800a058:	eba5 030b 	sub.w	r3, r5, fp
 800a05c:	429f      	cmp	r7, r3
 800a05e:	f77f af7c 	ble.w	8009f5a <_dtoa_r+0x432>
 800a062:	2200      	movs	r2, #0
 800a064:	4b30      	ldr	r3, [pc, #192]	; (800a128 <_dtoa_r+0x600>)
 800a066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a06a:	f7f6 fac5 	bl	80005f8 <__aeabi_dmul>
 800a06e:	2200      	movs	r2, #0
 800a070:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a074:	4b2c      	ldr	r3, [pc, #176]	; (800a128 <_dtoa_r+0x600>)
 800a076:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a07a:	f7f6 fabd 	bl	80005f8 <__aeabi_dmul>
 800a07e:	e9cd 0100 	strd	r0, r1, [sp]
 800a082:	e7c4      	b.n	800a00e <_dtoa_r+0x4e6>
 800a084:	462a      	mov	r2, r5
 800a086:	4633      	mov	r3, r6
 800a088:	f7f6 fab6 	bl	80005f8 <__aeabi_dmul>
 800a08c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a090:	eb0b 0507 	add.w	r5, fp, r7
 800a094:	465e      	mov	r6, fp
 800a096:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a09a:	f7f6 fd5d 	bl	8000b58 <__aeabi_d2iz>
 800a09e:	4607      	mov	r7, r0
 800a0a0:	f7f6 fa40 	bl	8000524 <__aeabi_i2d>
 800a0a4:	3730      	adds	r7, #48	; 0x30
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0ae:	f7f6 f8eb 	bl	8000288 <__aeabi_dsub>
 800a0b2:	f806 7b01 	strb.w	r7, [r6], #1
 800a0b6:	42ae      	cmp	r6, r5
 800a0b8:	e9cd 0100 	strd	r0, r1, [sp]
 800a0bc:	f04f 0200 	mov.w	r2, #0
 800a0c0:	d126      	bne.n	800a110 <_dtoa_r+0x5e8>
 800a0c2:	4b1c      	ldr	r3, [pc, #112]	; (800a134 <_dtoa_r+0x60c>)
 800a0c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0c8:	f7f6 f8e0 	bl	800028c <__adddf3>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0d4:	f7f6 fd20 	bl	8000b18 <__aeabi_dcmpgt>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d174      	bne.n	800a1c6 <_dtoa_r+0x69e>
 800a0dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	4914      	ldr	r1, [pc, #80]	; (800a134 <_dtoa_r+0x60c>)
 800a0e4:	f7f6 f8d0 	bl	8000288 <__aeabi_dsub>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0f0:	f7f6 fcf4 	bl	8000adc <__aeabi_dcmplt>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	f43f af30 	beq.w	8009f5a <_dtoa_r+0x432>
 800a0fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0fe:	2b30      	cmp	r3, #48	; 0x30
 800a100:	f105 32ff 	add.w	r2, r5, #4294967295
 800a104:	d002      	beq.n	800a10c <_dtoa_r+0x5e4>
 800a106:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a10a:	e04a      	b.n	800a1a2 <_dtoa_r+0x67a>
 800a10c:	4615      	mov	r5, r2
 800a10e:	e7f4      	b.n	800a0fa <_dtoa_r+0x5d2>
 800a110:	4b05      	ldr	r3, [pc, #20]	; (800a128 <_dtoa_r+0x600>)
 800a112:	f7f6 fa71 	bl	80005f8 <__aeabi_dmul>
 800a116:	e9cd 0100 	strd	r0, r1, [sp]
 800a11a:	e7bc      	b.n	800a096 <_dtoa_r+0x56e>
 800a11c:	0800b2c0 	.word	0x0800b2c0
 800a120:	0800b298 	.word	0x0800b298
 800a124:	3ff00000 	.word	0x3ff00000
 800a128:	40240000 	.word	0x40240000
 800a12c:	401c0000 	.word	0x401c0000
 800a130:	40140000 	.word	0x40140000
 800a134:	3fe00000 	.word	0x3fe00000
 800a138:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a13c:	465d      	mov	r5, fp
 800a13e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a142:	4630      	mov	r0, r6
 800a144:	4639      	mov	r1, r7
 800a146:	f7f6 fb81 	bl	800084c <__aeabi_ddiv>
 800a14a:	f7f6 fd05 	bl	8000b58 <__aeabi_d2iz>
 800a14e:	4680      	mov	r8, r0
 800a150:	f7f6 f9e8 	bl	8000524 <__aeabi_i2d>
 800a154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a158:	f7f6 fa4e 	bl	80005f8 <__aeabi_dmul>
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	4630      	mov	r0, r6
 800a162:	4639      	mov	r1, r7
 800a164:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a168:	f7f6 f88e 	bl	8000288 <__aeabi_dsub>
 800a16c:	f805 6b01 	strb.w	r6, [r5], #1
 800a170:	eba5 060b 	sub.w	r6, r5, fp
 800a174:	45b1      	cmp	r9, r6
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	d139      	bne.n	800a1f0 <_dtoa_r+0x6c8>
 800a17c:	f7f6 f886 	bl	800028c <__adddf3>
 800a180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a184:	4606      	mov	r6, r0
 800a186:	460f      	mov	r7, r1
 800a188:	f7f6 fcc6 	bl	8000b18 <__aeabi_dcmpgt>
 800a18c:	b9c8      	cbnz	r0, 800a1c2 <_dtoa_r+0x69a>
 800a18e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a192:	4630      	mov	r0, r6
 800a194:	4639      	mov	r1, r7
 800a196:	f7f6 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800a19a:	b110      	cbz	r0, 800a1a2 <_dtoa_r+0x67a>
 800a19c:	f018 0f01 	tst.w	r8, #1
 800a1a0:	d10f      	bne.n	800a1c2 <_dtoa_r+0x69a>
 800a1a2:	9904      	ldr	r1, [sp, #16]
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f000 fac1 	bl	800a72c <_Bfree>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1ae:	702b      	strb	r3, [r5, #0]
 800a1b0:	f10a 0301 	add.w	r3, sl, #1
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 8241 	beq.w	800a640 <_dtoa_r+0xb18>
 800a1be:	601d      	str	r5, [r3, #0]
 800a1c0:	e23e      	b.n	800a640 <_dtoa_r+0xb18>
 800a1c2:	f8cd a020 	str.w	sl, [sp, #32]
 800a1c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1ca:	2a39      	cmp	r2, #57	; 0x39
 800a1cc:	f105 33ff 	add.w	r3, r5, #4294967295
 800a1d0:	d108      	bne.n	800a1e4 <_dtoa_r+0x6bc>
 800a1d2:	459b      	cmp	fp, r3
 800a1d4:	d10a      	bne.n	800a1ec <_dtoa_r+0x6c4>
 800a1d6:	9b08      	ldr	r3, [sp, #32]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	9308      	str	r3, [sp, #32]
 800a1dc:	2330      	movs	r3, #48	; 0x30
 800a1de:	f88b 3000 	strb.w	r3, [fp]
 800a1e2:	465b      	mov	r3, fp
 800a1e4:	781a      	ldrb	r2, [r3, #0]
 800a1e6:	3201      	adds	r2, #1
 800a1e8:	701a      	strb	r2, [r3, #0]
 800a1ea:	e78c      	b.n	800a106 <_dtoa_r+0x5de>
 800a1ec:	461d      	mov	r5, r3
 800a1ee:	e7ea      	b.n	800a1c6 <_dtoa_r+0x69e>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	4b9b      	ldr	r3, [pc, #620]	; (800a460 <_dtoa_r+0x938>)
 800a1f4:	f7f6 fa00 	bl	80005f8 <__aeabi_dmul>
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	460f      	mov	r7, r1
 800a200:	f7f6 fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 800a204:	2800      	cmp	r0, #0
 800a206:	d09a      	beq.n	800a13e <_dtoa_r+0x616>
 800a208:	e7cb      	b.n	800a1a2 <_dtoa_r+0x67a>
 800a20a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a20c:	2a00      	cmp	r2, #0
 800a20e:	f000 808b 	beq.w	800a328 <_dtoa_r+0x800>
 800a212:	9a06      	ldr	r2, [sp, #24]
 800a214:	2a01      	cmp	r2, #1
 800a216:	dc6e      	bgt.n	800a2f6 <_dtoa_r+0x7ce>
 800a218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a21a:	2a00      	cmp	r2, #0
 800a21c:	d067      	beq.n	800a2ee <_dtoa_r+0x7c6>
 800a21e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a222:	9f07      	ldr	r7, [sp, #28]
 800a224:	9d05      	ldr	r5, [sp, #20]
 800a226:	9a05      	ldr	r2, [sp, #20]
 800a228:	2101      	movs	r1, #1
 800a22a:	441a      	add	r2, r3
 800a22c:	4620      	mov	r0, r4
 800a22e:	9205      	str	r2, [sp, #20]
 800a230:	4498      	add	r8, r3
 800a232:	f000 fb1b 	bl	800a86c <__i2b>
 800a236:	4606      	mov	r6, r0
 800a238:	2d00      	cmp	r5, #0
 800a23a:	dd0c      	ble.n	800a256 <_dtoa_r+0x72e>
 800a23c:	f1b8 0f00 	cmp.w	r8, #0
 800a240:	dd09      	ble.n	800a256 <_dtoa_r+0x72e>
 800a242:	4545      	cmp	r5, r8
 800a244:	9a05      	ldr	r2, [sp, #20]
 800a246:	462b      	mov	r3, r5
 800a248:	bfa8      	it	ge
 800a24a:	4643      	movge	r3, r8
 800a24c:	1ad2      	subs	r2, r2, r3
 800a24e:	9205      	str	r2, [sp, #20]
 800a250:	1aed      	subs	r5, r5, r3
 800a252:	eba8 0803 	sub.w	r8, r8, r3
 800a256:	9b07      	ldr	r3, [sp, #28]
 800a258:	b1eb      	cbz	r3, 800a296 <_dtoa_r+0x76e>
 800a25a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d067      	beq.n	800a330 <_dtoa_r+0x808>
 800a260:	b18f      	cbz	r7, 800a286 <_dtoa_r+0x75e>
 800a262:	4631      	mov	r1, r6
 800a264:	463a      	mov	r2, r7
 800a266:	4620      	mov	r0, r4
 800a268:	f000 fba0 	bl	800a9ac <__pow5mult>
 800a26c:	9a04      	ldr	r2, [sp, #16]
 800a26e:	4601      	mov	r1, r0
 800a270:	4606      	mov	r6, r0
 800a272:	4620      	mov	r0, r4
 800a274:	f000 fb03 	bl	800a87e <__multiply>
 800a278:	9904      	ldr	r1, [sp, #16]
 800a27a:	9008      	str	r0, [sp, #32]
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 fa55 	bl	800a72c <_Bfree>
 800a282:	9b08      	ldr	r3, [sp, #32]
 800a284:	9304      	str	r3, [sp, #16]
 800a286:	9b07      	ldr	r3, [sp, #28]
 800a288:	1bda      	subs	r2, r3, r7
 800a28a:	d004      	beq.n	800a296 <_dtoa_r+0x76e>
 800a28c:	9904      	ldr	r1, [sp, #16]
 800a28e:	4620      	mov	r0, r4
 800a290:	f000 fb8c 	bl	800a9ac <__pow5mult>
 800a294:	9004      	str	r0, [sp, #16]
 800a296:	2101      	movs	r1, #1
 800a298:	4620      	mov	r0, r4
 800a29a:	f000 fae7 	bl	800a86c <__i2b>
 800a29e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2a0:	4607      	mov	r7, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 81d0 	beq.w	800a648 <_dtoa_r+0xb20>
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	4601      	mov	r1, r0
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f000 fb7d 	bl	800a9ac <__pow5mult>
 800a2b2:	9b06      	ldr	r3, [sp, #24]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	4607      	mov	r7, r0
 800a2b8:	dc40      	bgt.n	800a33c <_dtoa_r+0x814>
 800a2ba:	9b00      	ldr	r3, [sp, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d139      	bne.n	800a334 <_dtoa_r+0x80c>
 800a2c0:	9b01      	ldr	r3, [sp, #4]
 800a2c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d136      	bne.n	800a338 <_dtoa_r+0x810>
 800a2ca:	9b01      	ldr	r3, [sp, #4]
 800a2cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2d0:	0d1b      	lsrs	r3, r3, #20
 800a2d2:	051b      	lsls	r3, r3, #20
 800a2d4:	b12b      	cbz	r3, 800a2e2 <_dtoa_r+0x7ba>
 800a2d6:	9b05      	ldr	r3, [sp, #20]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	9305      	str	r3, [sp, #20]
 800a2dc:	f108 0801 	add.w	r8, r8, #1
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	9307      	str	r3, [sp, #28]
 800a2e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d12a      	bne.n	800a340 <_dtoa_r+0x818>
 800a2ea:	2001      	movs	r0, #1
 800a2ec:	e030      	b.n	800a350 <_dtoa_r+0x828>
 800a2ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2f4:	e795      	b.n	800a222 <_dtoa_r+0x6fa>
 800a2f6:	9b07      	ldr	r3, [sp, #28]
 800a2f8:	f109 37ff 	add.w	r7, r9, #4294967295
 800a2fc:	42bb      	cmp	r3, r7
 800a2fe:	bfbf      	itttt	lt
 800a300:	9b07      	ldrlt	r3, [sp, #28]
 800a302:	9707      	strlt	r7, [sp, #28]
 800a304:	1afa      	sublt	r2, r7, r3
 800a306:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a308:	bfbb      	ittet	lt
 800a30a:	189b      	addlt	r3, r3, r2
 800a30c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a30e:	1bdf      	subge	r7, r3, r7
 800a310:	2700      	movlt	r7, #0
 800a312:	f1b9 0f00 	cmp.w	r9, #0
 800a316:	bfb5      	itete	lt
 800a318:	9b05      	ldrlt	r3, [sp, #20]
 800a31a:	9d05      	ldrge	r5, [sp, #20]
 800a31c:	eba3 0509 	sublt.w	r5, r3, r9
 800a320:	464b      	movge	r3, r9
 800a322:	bfb8      	it	lt
 800a324:	2300      	movlt	r3, #0
 800a326:	e77e      	b.n	800a226 <_dtoa_r+0x6fe>
 800a328:	9f07      	ldr	r7, [sp, #28]
 800a32a:	9d05      	ldr	r5, [sp, #20]
 800a32c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a32e:	e783      	b.n	800a238 <_dtoa_r+0x710>
 800a330:	9a07      	ldr	r2, [sp, #28]
 800a332:	e7ab      	b.n	800a28c <_dtoa_r+0x764>
 800a334:	2300      	movs	r3, #0
 800a336:	e7d4      	b.n	800a2e2 <_dtoa_r+0x7ba>
 800a338:	9b00      	ldr	r3, [sp, #0]
 800a33a:	e7d2      	b.n	800a2e2 <_dtoa_r+0x7ba>
 800a33c:	2300      	movs	r3, #0
 800a33e:	9307      	str	r3, [sp, #28]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a346:	6918      	ldr	r0, [r3, #16]
 800a348:	f000 fa42 	bl	800a7d0 <__hi0bits>
 800a34c:	f1c0 0020 	rsb	r0, r0, #32
 800a350:	4440      	add	r0, r8
 800a352:	f010 001f 	ands.w	r0, r0, #31
 800a356:	d047      	beq.n	800a3e8 <_dtoa_r+0x8c0>
 800a358:	f1c0 0320 	rsb	r3, r0, #32
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	dd3b      	ble.n	800a3d8 <_dtoa_r+0x8b0>
 800a360:	9b05      	ldr	r3, [sp, #20]
 800a362:	f1c0 001c 	rsb	r0, r0, #28
 800a366:	4403      	add	r3, r0
 800a368:	9305      	str	r3, [sp, #20]
 800a36a:	4405      	add	r5, r0
 800a36c:	4480      	add	r8, r0
 800a36e:	9b05      	ldr	r3, [sp, #20]
 800a370:	2b00      	cmp	r3, #0
 800a372:	dd05      	ble.n	800a380 <_dtoa_r+0x858>
 800a374:	461a      	mov	r2, r3
 800a376:	9904      	ldr	r1, [sp, #16]
 800a378:	4620      	mov	r0, r4
 800a37a:	f000 fb65 	bl	800aa48 <__lshift>
 800a37e:	9004      	str	r0, [sp, #16]
 800a380:	f1b8 0f00 	cmp.w	r8, #0
 800a384:	dd05      	ble.n	800a392 <_dtoa_r+0x86a>
 800a386:	4639      	mov	r1, r7
 800a388:	4642      	mov	r2, r8
 800a38a:	4620      	mov	r0, r4
 800a38c:	f000 fb5c 	bl	800aa48 <__lshift>
 800a390:	4607      	mov	r7, r0
 800a392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a394:	b353      	cbz	r3, 800a3ec <_dtoa_r+0x8c4>
 800a396:	4639      	mov	r1, r7
 800a398:	9804      	ldr	r0, [sp, #16]
 800a39a:	f000 fba9 	bl	800aaf0 <__mcmp>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	da24      	bge.n	800a3ec <_dtoa_r+0x8c4>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	220a      	movs	r2, #10
 800a3a6:	9904      	ldr	r1, [sp, #16]
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 f9d6 	bl	800a75a <__multadd>
 800a3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b0:	9004      	str	r0, [sp, #16]
 800a3b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 814d 	beq.w	800a656 <_dtoa_r+0xb2e>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	4631      	mov	r1, r6
 800a3c0:	220a      	movs	r2, #10
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f000 f9c9 	bl	800a75a <__multadd>
 800a3c8:	9b02      	ldr	r3, [sp, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	4606      	mov	r6, r0
 800a3ce:	dc4f      	bgt.n	800a470 <_dtoa_r+0x948>
 800a3d0:	9b06      	ldr	r3, [sp, #24]
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	dd4c      	ble.n	800a470 <_dtoa_r+0x948>
 800a3d6:	e011      	b.n	800a3fc <_dtoa_r+0x8d4>
 800a3d8:	d0c9      	beq.n	800a36e <_dtoa_r+0x846>
 800a3da:	9a05      	ldr	r2, [sp, #20]
 800a3dc:	331c      	adds	r3, #28
 800a3de:	441a      	add	r2, r3
 800a3e0:	9205      	str	r2, [sp, #20]
 800a3e2:	441d      	add	r5, r3
 800a3e4:	4498      	add	r8, r3
 800a3e6:	e7c2      	b.n	800a36e <_dtoa_r+0x846>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	e7f6      	b.n	800a3da <_dtoa_r+0x8b2>
 800a3ec:	f1b9 0f00 	cmp.w	r9, #0
 800a3f0:	dc38      	bgt.n	800a464 <_dtoa_r+0x93c>
 800a3f2:	9b06      	ldr	r3, [sp, #24]
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	dd35      	ble.n	800a464 <_dtoa_r+0x93c>
 800a3f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a3fc:	9b02      	ldr	r3, [sp, #8]
 800a3fe:	b963      	cbnz	r3, 800a41a <_dtoa_r+0x8f2>
 800a400:	4639      	mov	r1, r7
 800a402:	2205      	movs	r2, #5
 800a404:	4620      	mov	r0, r4
 800a406:	f000 f9a8 	bl	800a75a <__multadd>
 800a40a:	4601      	mov	r1, r0
 800a40c:	4607      	mov	r7, r0
 800a40e:	9804      	ldr	r0, [sp, #16]
 800a410:	f000 fb6e 	bl	800aaf0 <__mcmp>
 800a414:	2800      	cmp	r0, #0
 800a416:	f73f adcc 	bgt.w	8009fb2 <_dtoa_r+0x48a>
 800a41a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a41c:	465d      	mov	r5, fp
 800a41e:	ea6f 0a03 	mvn.w	sl, r3
 800a422:	f04f 0900 	mov.w	r9, #0
 800a426:	4639      	mov	r1, r7
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 f97f 	bl	800a72c <_Bfree>
 800a42e:	2e00      	cmp	r6, #0
 800a430:	f43f aeb7 	beq.w	800a1a2 <_dtoa_r+0x67a>
 800a434:	f1b9 0f00 	cmp.w	r9, #0
 800a438:	d005      	beq.n	800a446 <_dtoa_r+0x91e>
 800a43a:	45b1      	cmp	r9, r6
 800a43c:	d003      	beq.n	800a446 <_dtoa_r+0x91e>
 800a43e:	4649      	mov	r1, r9
 800a440:	4620      	mov	r0, r4
 800a442:	f000 f973 	bl	800a72c <_Bfree>
 800a446:	4631      	mov	r1, r6
 800a448:	4620      	mov	r0, r4
 800a44a:	f000 f96f 	bl	800a72c <_Bfree>
 800a44e:	e6a8      	b.n	800a1a2 <_dtoa_r+0x67a>
 800a450:	2700      	movs	r7, #0
 800a452:	463e      	mov	r6, r7
 800a454:	e7e1      	b.n	800a41a <_dtoa_r+0x8f2>
 800a456:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a45a:	463e      	mov	r6, r7
 800a45c:	e5a9      	b.n	8009fb2 <_dtoa_r+0x48a>
 800a45e:	bf00      	nop
 800a460:	40240000 	.word	0x40240000
 800a464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a466:	f8cd 9008 	str.w	r9, [sp, #8]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 80fa 	beq.w	800a664 <_dtoa_r+0xb3c>
 800a470:	2d00      	cmp	r5, #0
 800a472:	dd05      	ble.n	800a480 <_dtoa_r+0x958>
 800a474:	4631      	mov	r1, r6
 800a476:	462a      	mov	r2, r5
 800a478:	4620      	mov	r0, r4
 800a47a:	f000 fae5 	bl	800aa48 <__lshift>
 800a47e:	4606      	mov	r6, r0
 800a480:	9b07      	ldr	r3, [sp, #28]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d04c      	beq.n	800a520 <_dtoa_r+0x9f8>
 800a486:	6871      	ldr	r1, [r6, #4]
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 f91b 	bl	800a6c4 <_Balloc>
 800a48e:	6932      	ldr	r2, [r6, #16]
 800a490:	3202      	adds	r2, #2
 800a492:	4605      	mov	r5, r0
 800a494:	0092      	lsls	r2, r2, #2
 800a496:	f106 010c 	add.w	r1, r6, #12
 800a49a:	300c      	adds	r0, #12
 800a49c:	f7fe fe14 	bl	80090c8 <memcpy>
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f000 facf 	bl	800aa48 <__lshift>
 800a4aa:	9b00      	ldr	r3, [sp, #0]
 800a4ac:	f8cd b014 	str.w	fp, [sp, #20]
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	46b1      	mov	r9, r6
 800a4b6:	9307      	str	r3, [sp, #28]
 800a4b8:	4606      	mov	r6, r0
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	9804      	ldr	r0, [sp, #16]
 800a4be:	f7ff faa7 	bl	8009a10 <quorem>
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a4ca:	9804      	ldr	r0, [sp, #16]
 800a4cc:	f000 fb10 	bl	800aaf0 <__mcmp>
 800a4d0:	4632      	mov	r2, r6
 800a4d2:	9000      	str	r0, [sp, #0]
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f000 fb24 	bl	800ab24 <__mdiff>
 800a4dc:	68c3      	ldr	r3, [r0, #12]
 800a4de:	4602      	mov	r2, r0
 800a4e0:	bb03      	cbnz	r3, 800a524 <_dtoa_r+0x9fc>
 800a4e2:	4601      	mov	r1, r0
 800a4e4:	9008      	str	r0, [sp, #32]
 800a4e6:	9804      	ldr	r0, [sp, #16]
 800a4e8:	f000 fb02 	bl	800aaf0 <__mcmp>
 800a4ec:	9a08      	ldr	r2, [sp, #32]
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	9308      	str	r3, [sp, #32]
 800a4f6:	f000 f919 	bl	800a72c <_Bfree>
 800a4fa:	9b08      	ldr	r3, [sp, #32]
 800a4fc:	b9a3      	cbnz	r3, 800a528 <_dtoa_r+0xa00>
 800a4fe:	9a06      	ldr	r2, [sp, #24]
 800a500:	b992      	cbnz	r2, 800a528 <_dtoa_r+0xa00>
 800a502:	9a07      	ldr	r2, [sp, #28]
 800a504:	b982      	cbnz	r2, 800a528 <_dtoa_r+0xa00>
 800a506:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a50a:	d029      	beq.n	800a560 <_dtoa_r+0xa38>
 800a50c:	9b00      	ldr	r3, [sp, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	dd01      	ble.n	800a516 <_dtoa_r+0x9ee>
 800a512:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a516:	9b05      	ldr	r3, [sp, #20]
 800a518:	1c5d      	adds	r5, r3, #1
 800a51a:	f883 8000 	strb.w	r8, [r3]
 800a51e:	e782      	b.n	800a426 <_dtoa_r+0x8fe>
 800a520:	4630      	mov	r0, r6
 800a522:	e7c2      	b.n	800a4aa <_dtoa_r+0x982>
 800a524:	2301      	movs	r3, #1
 800a526:	e7e3      	b.n	800a4f0 <_dtoa_r+0x9c8>
 800a528:	9a00      	ldr	r2, [sp, #0]
 800a52a:	2a00      	cmp	r2, #0
 800a52c:	db04      	blt.n	800a538 <_dtoa_r+0xa10>
 800a52e:	d125      	bne.n	800a57c <_dtoa_r+0xa54>
 800a530:	9a06      	ldr	r2, [sp, #24]
 800a532:	bb1a      	cbnz	r2, 800a57c <_dtoa_r+0xa54>
 800a534:	9a07      	ldr	r2, [sp, #28]
 800a536:	bb0a      	cbnz	r2, 800a57c <_dtoa_r+0xa54>
 800a538:	2b00      	cmp	r3, #0
 800a53a:	ddec      	ble.n	800a516 <_dtoa_r+0x9ee>
 800a53c:	2201      	movs	r2, #1
 800a53e:	9904      	ldr	r1, [sp, #16]
 800a540:	4620      	mov	r0, r4
 800a542:	f000 fa81 	bl	800aa48 <__lshift>
 800a546:	4639      	mov	r1, r7
 800a548:	9004      	str	r0, [sp, #16]
 800a54a:	f000 fad1 	bl	800aaf0 <__mcmp>
 800a54e:	2800      	cmp	r0, #0
 800a550:	dc03      	bgt.n	800a55a <_dtoa_r+0xa32>
 800a552:	d1e0      	bne.n	800a516 <_dtoa_r+0x9ee>
 800a554:	f018 0f01 	tst.w	r8, #1
 800a558:	d0dd      	beq.n	800a516 <_dtoa_r+0x9ee>
 800a55a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a55e:	d1d8      	bne.n	800a512 <_dtoa_r+0x9ea>
 800a560:	9b05      	ldr	r3, [sp, #20]
 800a562:	9a05      	ldr	r2, [sp, #20]
 800a564:	1c5d      	adds	r5, r3, #1
 800a566:	2339      	movs	r3, #57	; 0x39
 800a568:	7013      	strb	r3, [r2, #0]
 800a56a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a56e:	2b39      	cmp	r3, #57	; 0x39
 800a570:	f105 32ff 	add.w	r2, r5, #4294967295
 800a574:	d04f      	beq.n	800a616 <_dtoa_r+0xaee>
 800a576:	3301      	adds	r3, #1
 800a578:	7013      	strb	r3, [r2, #0]
 800a57a:	e754      	b.n	800a426 <_dtoa_r+0x8fe>
 800a57c:	9a05      	ldr	r2, [sp, #20]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f102 0501 	add.w	r5, r2, #1
 800a584:	dd06      	ble.n	800a594 <_dtoa_r+0xa6c>
 800a586:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a58a:	d0e9      	beq.n	800a560 <_dtoa_r+0xa38>
 800a58c:	f108 0801 	add.w	r8, r8, #1
 800a590:	9b05      	ldr	r3, [sp, #20]
 800a592:	e7c2      	b.n	800a51a <_dtoa_r+0x9f2>
 800a594:	9a02      	ldr	r2, [sp, #8]
 800a596:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a59a:	eba5 030b 	sub.w	r3, r5, fp
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d021      	beq.n	800a5e6 <_dtoa_r+0xabe>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	220a      	movs	r2, #10
 800a5a6:	9904      	ldr	r1, [sp, #16]
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 f8d6 	bl	800a75a <__multadd>
 800a5ae:	45b1      	cmp	r9, r6
 800a5b0:	9004      	str	r0, [sp, #16]
 800a5b2:	f04f 0300 	mov.w	r3, #0
 800a5b6:	f04f 020a 	mov.w	r2, #10
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	4620      	mov	r0, r4
 800a5be:	d105      	bne.n	800a5cc <_dtoa_r+0xaa4>
 800a5c0:	f000 f8cb 	bl	800a75a <__multadd>
 800a5c4:	4681      	mov	r9, r0
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	9505      	str	r5, [sp, #20]
 800a5ca:	e776      	b.n	800a4ba <_dtoa_r+0x992>
 800a5cc:	f000 f8c5 	bl	800a75a <__multadd>
 800a5d0:	4631      	mov	r1, r6
 800a5d2:	4681      	mov	r9, r0
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	220a      	movs	r2, #10
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 f8be 	bl	800a75a <__multadd>
 800a5de:	4606      	mov	r6, r0
 800a5e0:	e7f2      	b.n	800a5c8 <_dtoa_r+0xaa0>
 800a5e2:	f04f 0900 	mov.w	r9, #0
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	9904      	ldr	r1, [sp, #16]
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f000 fa2c 	bl	800aa48 <__lshift>
 800a5f0:	4639      	mov	r1, r7
 800a5f2:	9004      	str	r0, [sp, #16]
 800a5f4:	f000 fa7c 	bl	800aaf0 <__mcmp>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	dcb6      	bgt.n	800a56a <_dtoa_r+0xa42>
 800a5fc:	d102      	bne.n	800a604 <_dtoa_r+0xadc>
 800a5fe:	f018 0f01 	tst.w	r8, #1
 800a602:	d1b2      	bne.n	800a56a <_dtoa_r+0xa42>
 800a604:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a608:	2b30      	cmp	r3, #48	; 0x30
 800a60a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a60e:	f47f af0a 	bne.w	800a426 <_dtoa_r+0x8fe>
 800a612:	4615      	mov	r5, r2
 800a614:	e7f6      	b.n	800a604 <_dtoa_r+0xadc>
 800a616:	4593      	cmp	fp, r2
 800a618:	d105      	bne.n	800a626 <_dtoa_r+0xafe>
 800a61a:	2331      	movs	r3, #49	; 0x31
 800a61c:	f10a 0a01 	add.w	sl, sl, #1
 800a620:	f88b 3000 	strb.w	r3, [fp]
 800a624:	e6ff      	b.n	800a426 <_dtoa_r+0x8fe>
 800a626:	4615      	mov	r5, r2
 800a628:	e79f      	b.n	800a56a <_dtoa_r+0xa42>
 800a62a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a690 <_dtoa_r+0xb68>
 800a62e:	e007      	b.n	800a640 <_dtoa_r+0xb18>
 800a630:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a632:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a694 <_dtoa_r+0xb6c>
 800a636:	b11b      	cbz	r3, 800a640 <_dtoa_r+0xb18>
 800a638:	f10b 0308 	add.w	r3, fp, #8
 800a63c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a63e:	6013      	str	r3, [r2, #0]
 800a640:	4658      	mov	r0, fp
 800a642:	b017      	add	sp, #92	; 0x5c
 800a644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a648:	9b06      	ldr	r3, [sp, #24]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	f77f ae35 	ble.w	800a2ba <_dtoa_r+0x792>
 800a650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a652:	9307      	str	r3, [sp, #28]
 800a654:	e649      	b.n	800a2ea <_dtoa_r+0x7c2>
 800a656:	9b02      	ldr	r3, [sp, #8]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	dc03      	bgt.n	800a664 <_dtoa_r+0xb3c>
 800a65c:	9b06      	ldr	r3, [sp, #24]
 800a65e:	2b02      	cmp	r3, #2
 800a660:	f73f aecc 	bgt.w	800a3fc <_dtoa_r+0x8d4>
 800a664:	465d      	mov	r5, fp
 800a666:	4639      	mov	r1, r7
 800a668:	9804      	ldr	r0, [sp, #16]
 800a66a:	f7ff f9d1 	bl	8009a10 <quorem>
 800a66e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a672:	f805 8b01 	strb.w	r8, [r5], #1
 800a676:	9a02      	ldr	r2, [sp, #8]
 800a678:	eba5 030b 	sub.w	r3, r5, fp
 800a67c:	429a      	cmp	r2, r3
 800a67e:	ddb0      	ble.n	800a5e2 <_dtoa_r+0xaba>
 800a680:	2300      	movs	r3, #0
 800a682:	220a      	movs	r2, #10
 800a684:	9904      	ldr	r1, [sp, #16]
 800a686:	4620      	mov	r0, r4
 800a688:	f000 f867 	bl	800a75a <__multadd>
 800a68c:	9004      	str	r0, [sp, #16]
 800a68e:	e7ea      	b.n	800a666 <_dtoa_r+0xb3e>
 800a690:	0800b260 	.word	0x0800b260
 800a694:	0800b284 	.word	0x0800b284

0800a698 <_localeconv_r>:
 800a698:	4b04      	ldr	r3, [pc, #16]	; (800a6ac <_localeconv_r+0x14>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6a18      	ldr	r0, [r3, #32]
 800a69e:	4b04      	ldr	r3, [pc, #16]	; (800a6b0 <_localeconv_r+0x18>)
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	bf08      	it	eq
 800a6a4:	4618      	moveq	r0, r3
 800a6a6:	30f0      	adds	r0, #240	; 0xf0
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	2000000c 	.word	0x2000000c
 800a6b0:	20000070 	.word	0x20000070

0800a6b4 <malloc>:
 800a6b4:	4b02      	ldr	r3, [pc, #8]	; (800a6c0 <malloc+0xc>)
 800a6b6:	4601      	mov	r1, r0
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	f000 bb3b 	b.w	800ad34 <_malloc_r>
 800a6be:	bf00      	nop
 800a6c0:	2000000c 	.word	0x2000000c

0800a6c4 <_Balloc>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	460e      	mov	r6, r1
 800a6cc:	b93d      	cbnz	r5, 800a6de <_Balloc+0x1a>
 800a6ce:	2010      	movs	r0, #16
 800a6d0:	f7ff fff0 	bl	800a6b4 <malloc>
 800a6d4:	6260      	str	r0, [r4, #36]	; 0x24
 800a6d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6da:	6005      	str	r5, [r0, #0]
 800a6dc:	60c5      	str	r5, [r0, #12]
 800a6de:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a6e0:	68eb      	ldr	r3, [r5, #12]
 800a6e2:	b183      	cbz	r3, 800a706 <_Balloc+0x42>
 800a6e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a6ec:	b9b8      	cbnz	r0, 800a71e <_Balloc+0x5a>
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	fa01 f506 	lsl.w	r5, r1, r6
 800a6f4:	1d6a      	adds	r2, r5, #5
 800a6f6:	0092      	lsls	r2, r2, #2
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 fabf 	bl	800ac7c <_calloc_r>
 800a6fe:	b160      	cbz	r0, 800a71a <_Balloc+0x56>
 800a700:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a704:	e00e      	b.n	800a724 <_Balloc+0x60>
 800a706:	2221      	movs	r2, #33	; 0x21
 800a708:	2104      	movs	r1, #4
 800a70a:	4620      	mov	r0, r4
 800a70c:	f000 fab6 	bl	800ac7c <_calloc_r>
 800a710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a712:	60e8      	str	r0, [r5, #12]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1e4      	bne.n	800a6e4 <_Balloc+0x20>
 800a71a:	2000      	movs	r0, #0
 800a71c:	bd70      	pop	{r4, r5, r6, pc}
 800a71e:	6802      	ldr	r2, [r0, #0]
 800a720:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a724:	2300      	movs	r3, #0
 800a726:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a72a:	e7f7      	b.n	800a71c <_Balloc+0x58>

0800a72c <_Bfree>:
 800a72c:	b570      	push	{r4, r5, r6, lr}
 800a72e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a730:	4606      	mov	r6, r0
 800a732:	460d      	mov	r5, r1
 800a734:	b93c      	cbnz	r4, 800a746 <_Bfree+0x1a>
 800a736:	2010      	movs	r0, #16
 800a738:	f7ff ffbc 	bl	800a6b4 <malloc>
 800a73c:	6270      	str	r0, [r6, #36]	; 0x24
 800a73e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a742:	6004      	str	r4, [r0, #0]
 800a744:	60c4      	str	r4, [r0, #12]
 800a746:	b13d      	cbz	r5, 800a758 <_Bfree+0x2c>
 800a748:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a74a:	686a      	ldr	r2, [r5, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a752:	6029      	str	r1, [r5, #0]
 800a754:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a758:	bd70      	pop	{r4, r5, r6, pc}

0800a75a <__multadd>:
 800a75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75e:	690d      	ldr	r5, [r1, #16]
 800a760:	461f      	mov	r7, r3
 800a762:	4606      	mov	r6, r0
 800a764:	460c      	mov	r4, r1
 800a766:	f101 0c14 	add.w	ip, r1, #20
 800a76a:	2300      	movs	r3, #0
 800a76c:	f8dc 0000 	ldr.w	r0, [ip]
 800a770:	b281      	uxth	r1, r0
 800a772:	fb02 7101 	mla	r1, r2, r1, r7
 800a776:	0c0f      	lsrs	r7, r1, #16
 800a778:	0c00      	lsrs	r0, r0, #16
 800a77a:	fb02 7000 	mla	r0, r2, r0, r7
 800a77e:	b289      	uxth	r1, r1
 800a780:	3301      	adds	r3, #1
 800a782:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a786:	429d      	cmp	r5, r3
 800a788:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a78c:	f84c 1b04 	str.w	r1, [ip], #4
 800a790:	dcec      	bgt.n	800a76c <__multadd+0x12>
 800a792:	b1d7      	cbz	r7, 800a7ca <__multadd+0x70>
 800a794:	68a3      	ldr	r3, [r4, #8]
 800a796:	42ab      	cmp	r3, r5
 800a798:	dc12      	bgt.n	800a7c0 <__multadd+0x66>
 800a79a:	6861      	ldr	r1, [r4, #4]
 800a79c:	4630      	mov	r0, r6
 800a79e:	3101      	adds	r1, #1
 800a7a0:	f7ff ff90 	bl	800a6c4 <_Balloc>
 800a7a4:	6922      	ldr	r2, [r4, #16]
 800a7a6:	3202      	adds	r2, #2
 800a7a8:	f104 010c 	add.w	r1, r4, #12
 800a7ac:	4680      	mov	r8, r0
 800a7ae:	0092      	lsls	r2, r2, #2
 800a7b0:	300c      	adds	r0, #12
 800a7b2:	f7fe fc89 	bl	80090c8 <memcpy>
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f7ff ffb7 	bl	800a72c <_Bfree>
 800a7be:	4644      	mov	r4, r8
 800a7c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7c4:	3501      	adds	r5, #1
 800a7c6:	615f      	str	r7, [r3, #20]
 800a7c8:	6125      	str	r5, [r4, #16]
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a7d0 <__hi0bits>:
 800a7d0:	0c02      	lsrs	r2, r0, #16
 800a7d2:	0412      	lsls	r2, r2, #16
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	b9b2      	cbnz	r2, 800a806 <__hi0bits+0x36>
 800a7d8:	0403      	lsls	r3, r0, #16
 800a7da:	2010      	movs	r0, #16
 800a7dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a7e0:	bf04      	itt	eq
 800a7e2:	021b      	lsleq	r3, r3, #8
 800a7e4:	3008      	addeq	r0, #8
 800a7e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a7ea:	bf04      	itt	eq
 800a7ec:	011b      	lsleq	r3, r3, #4
 800a7ee:	3004      	addeq	r0, #4
 800a7f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a7f4:	bf04      	itt	eq
 800a7f6:	009b      	lsleq	r3, r3, #2
 800a7f8:	3002      	addeq	r0, #2
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	db06      	blt.n	800a80c <__hi0bits+0x3c>
 800a7fe:	005b      	lsls	r3, r3, #1
 800a800:	d503      	bpl.n	800a80a <__hi0bits+0x3a>
 800a802:	3001      	adds	r0, #1
 800a804:	4770      	bx	lr
 800a806:	2000      	movs	r0, #0
 800a808:	e7e8      	b.n	800a7dc <__hi0bits+0xc>
 800a80a:	2020      	movs	r0, #32
 800a80c:	4770      	bx	lr

0800a80e <__lo0bits>:
 800a80e:	6803      	ldr	r3, [r0, #0]
 800a810:	f013 0207 	ands.w	r2, r3, #7
 800a814:	4601      	mov	r1, r0
 800a816:	d00b      	beq.n	800a830 <__lo0bits+0x22>
 800a818:	07da      	lsls	r2, r3, #31
 800a81a:	d423      	bmi.n	800a864 <__lo0bits+0x56>
 800a81c:	0798      	lsls	r0, r3, #30
 800a81e:	bf49      	itett	mi
 800a820:	085b      	lsrmi	r3, r3, #1
 800a822:	089b      	lsrpl	r3, r3, #2
 800a824:	2001      	movmi	r0, #1
 800a826:	600b      	strmi	r3, [r1, #0]
 800a828:	bf5c      	itt	pl
 800a82a:	600b      	strpl	r3, [r1, #0]
 800a82c:	2002      	movpl	r0, #2
 800a82e:	4770      	bx	lr
 800a830:	b298      	uxth	r0, r3
 800a832:	b9a8      	cbnz	r0, 800a860 <__lo0bits+0x52>
 800a834:	0c1b      	lsrs	r3, r3, #16
 800a836:	2010      	movs	r0, #16
 800a838:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a83c:	bf04      	itt	eq
 800a83e:	0a1b      	lsreq	r3, r3, #8
 800a840:	3008      	addeq	r0, #8
 800a842:	071a      	lsls	r2, r3, #28
 800a844:	bf04      	itt	eq
 800a846:	091b      	lsreq	r3, r3, #4
 800a848:	3004      	addeq	r0, #4
 800a84a:	079a      	lsls	r2, r3, #30
 800a84c:	bf04      	itt	eq
 800a84e:	089b      	lsreq	r3, r3, #2
 800a850:	3002      	addeq	r0, #2
 800a852:	07da      	lsls	r2, r3, #31
 800a854:	d402      	bmi.n	800a85c <__lo0bits+0x4e>
 800a856:	085b      	lsrs	r3, r3, #1
 800a858:	d006      	beq.n	800a868 <__lo0bits+0x5a>
 800a85a:	3001      	adds	r0, #1
 800a85c:	600b      	str	r3, [r1, #0]
 800a85e:	4770      	bx	lr
 800a860:	4610      	mov	r0, r2
 800a862:	e7e9      	b.n	800a838 <__lo0bits+0x2a>
 800a864:	2000      	movs	r0, #0
 800a866:	4770      	bx	lr
 800a868:	2020      	movs	r0, #32
 800a86a:	4770      	bx	lr

0800a86c <__i2b>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	460c      	mov	r4, r1
 800a870:	2101      	movs	r1, #1
 800a872:	f7ff ff27 	bl	800a6c4 <_Balloc>
 800a876:	2201      	movs	r2, #1
 800a878:	6144      	str	r4, [r0, #20]
 800a87a:	6102      	str	r2, [r0, #16]
 800a87c:	bd10      	pop	{r4, pc}

0800a87e <__multiply>:
 800a87e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a882:	4614      	mov	r4, r2
 800a884:	690a      	ldr	r2, [r1, #16]
 800a886:	6923      	ldr	r3, [r4, #16]
 800a888:	429a      	cmp	r2, r3
 800a88a:	bfb8      	it	lt
 800a88c:	460b      	movlt	r3, r1
 800a88e:	4688      	mov	r8, r1
 800a890:	bfbc      	itt	lt
 800a892:	46a0      	movlt	r8, r4
 800a894:	461c      	movlt	r4, r3
 800a896:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a89a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a89e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a8a6:	eb07 0609 	add.w	r6, r7, r9
 800a8aa:	42b3      	cmp	r3, r6
 800a8ac:	bfb8      	it	lt
 800a8ae:	3101      	addlt	r1, #1
 800a8b0:	f7ff ff08 	bl	800a6c4 <_Balloc>
 800a8b4:	f100 0514 	add.w	r5, r0, #20
 800a8b8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a8bc:	462b      	mov	r3, r5
 800a8be:	2200      	movs	r2, #0
 800a8c0:	4573      	cmp	r3, lr
 800a8c2:	d316      	bcc.n	800a8f2 <__multiply+0x74>
 800a8c4:	f104 0214 	add.w	r2, r4, #20
 800a8c8:	f108 0114 	add.w	r1, r8, #20
 800a8cc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a8d0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	9b00      	ldr	r3, [sp, #0]
 800a8d8:	9201      	str	r2, [sp, #4]
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d80c      	bhi.n	800a8f8 <__multiply+0x7a>
 800a8de:	2e00      	cmp	r6, #0
 800a8e0:	dd03      	ble.n	800a8ea <__multiply+0x6c>
 800a8e2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d05d      	beq.n	800a9a6 <__multiply+0x128>
 800a8ea:	6106      	str	r6, [r0, #16]
 800a8ec:	b003      	add	sp, #12
 800a8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f2:	f843 2b04 	str.w	r2, [r3], #4
 800a8f6:	e7e3      	b.n	800a8c0 <__multiply+0x42>
 800a8f8:	f8b2 b000 	ldrh.w	fp, [r2]
 800a8fc:	f1bb 0f00 	cmp.w	fp, #0
 800a900:	d023      	beq.n	800a94a <__multiply+0xcc>
 800a902:	4689      	mov	r9, r1
 800a904:	46ac      	mov	ip, r5
 800a906:	f04f 0800 	mov.w	r8, #0
 800a90a:	f859 4b04 	ldr.w	r4, [r9], #4
 800a90e:	f8dc a000 	ldr.w	sl, [ip]
 800a912:	b2a3      	uxth	r3, r4
 800a914:	fa1f fa8a 	uxth.w	sl, sl
 800a918:	fb0b a303 	mla	r3, fp, r3, sl
 800a91c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a920:	f8dc 4000 	ldr.w	r4, [ip]
 800a924:	4443      	add	r3, r8
 800a926:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a92a:	fb0b 840a 	mla	r4, fp, sl, r8
 800a92e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a932:	46e2      	mov	sl, ip
 800a934:	b29b      	uxth	r3, r3
 800a936:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a93a:	454f      	cmp	r7, r9
 800a93c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a940:	f84a 3b04 	str.w	r3, [sl], #4
 800a944:	d82b      	bhi.n	800a99e <__multiply+0x120>
 800a946:	f8cc 8004 	str.w	r8, [ip, #4]
 800a94a:	9b01      	ldr	r3, [sp, #4]
 800a94c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a950:	3204      	adds	r2, #4
 800a952:	f1ba 0f00 	cmp.w	sl, #0
 800a956:	d020      	beq.n	800a99a <__multiply+0x11c>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	4689      	mov	r9, r1
 800a95c:	46a8      	mov	r8, r5
 800a95e:	f04f 0b00 	mov.w	fp, #0
 800a962:	f8b9 c000 	ldrh.w	ip, [r9]
 800a966:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a96a:	fb0a 440c 	mla	r4, sl, ip, r4
 800a96e:	445c      	add	r4, fp
 800a970:	46c4      	mov	ip, r8
 800a972:	b29b      	uxth	r3, r3
 800a974:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a978:	f84c 3b04 	str.w	r3, [ip], #4
 800a97c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a980:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a984:	0c1b      	lsrs	r3, r3, #16
 800a986:	fb0a b303 	mla	r3, sl, r3, fp
 800a98a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a98e:	454f      	cmp	r7, r9
 800a990:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a994:	d805      	bhi.n	800a9a2 <__multiply+0x124>
 800a996:	f8c8 3004 	str.w	r3, [r8, #4]
 800a99a:	3504      	adds	r5, #4
 800a99c:	e79b      	b.n	800a8d6 <__multiply+0x58>
 800a99e:	46d4      	mov	ip, sl
 800a9a0:	e7b3      	b.n	800a90a <__multiply+0x8c>
 800a9a2:	46e0      	mov	r8, ip
 800a9a4:	e7dd      	b.n	800a962 <__multiply+0xe4>
 800a9a6:	3e01      	subs	r6, #1
 800a9a8:	e799      	b.n	800a8de <__multiply+0x60>
	...

0800a9ac <__pow5mult>:
 800a9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b0:	4615      	mov	r5, r2
 800a9b2:	f012 0203 	ands.w	r2, r2, #3
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	460f      	mov	r7, r1
 800a9ba:	d007      	beq.n	800a9cc <__pow5mult+0x20>
 800a9bc:	3a01      	subs	r2, #1
 800a9be:	4c21      	ldr	r4, [pc, #132]	; (800aa44 <__pow5mult+0x98>)
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9c6:	f7ff fec8 	bl	800a75a <__multadd>
 800a9ca:	4607      	mov	r7, r0
 800a9cc:	10ad      	asrs	r5, r5, #2
 800a9ce:	d035      	beq.n	800aa3c <__pow5mult+0x90>
 800a9d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9d2:	b93c      	cbnz	r4, 800a9e4 <__pow5mult+0x38>
 800a9d4:	2010      	movs	r0, #16
 800a9d6:	f7ff fe6d 	bl	800a6b4 <malloc>
 800a9da:	6270      	str	r0, [r6, #36]	; 0x24
 800a9dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9e0:	6004      	str	r4, [r0, #0]
 800a9e2:	60c4      	str	r4, [r0, #12]
 800a9e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a9e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9ec:	b94c      	cbnz	r4, 800aa02 <__pow5mult+0x56>
 800a9ee:	f240 2171 	movw	r1, #625	; 0x271
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f7ff ff3a 	bl	800a86c <__i2b>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9fe:	4604      	mov	r4, r0
 800aa00:	6003      	str	r3, [r0, #0]
 800aa02:	f04f 0800 	mov.w	r8, #0
 800aa06:	07eb      	lsls	r3, r5, #31
 800aa08:	d50a      	bpl.n	800aa20 <__pow5mult+0x74>
 800aa0a:	4639      	mov	r1, r7
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f7ff ff35 	bl	800a87e <__multiply>
 800aa14:	4639      	mov	r1, r7
 800aa16:	4681      	mov	r9, r0
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7ff fe87 	bl	800a72c <_Bfree>
 800aa1e:	464f      	mov	r7, r9
 800aa20:	106d      	asrs	r5, r5, #1
 800aa22:	d00b      	beq.n	800aa3c <__pow5mult+0x90>
 800aa24:	6820      	ldr	r0, [r4, #0]
 800aa26:	b938      	cbnz	r0, 800aa38 <__pow5mult+0x8c>
 800aa28:	4622      	mov	r2, r4
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f7ff ff26 	bl	800a87e <__multiply>
 800aa32:	6020      	str	r0, [r4, #0]
 800aa34:	f8c0 8000 	str.w	r8, [r0]
 800aa38:	4604      	mov	r4, r0
 800aa3a:	e7e4      	b.n	800aa06 <__pow5mult+0x5a>
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa42:	bf00      	nop
 800aa44:	0800b388 	.word	0x0800b388

0800aa48 <__lshift>:
 800aa48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa52:	6923      	ldr	r3, [r4, #16]
 800aa54:	6849      	ldr	r1, [r1, #4]
 800aa56:	eb0a 0903 	add.w	r9, sl, r3
 800aa5a:	68a3      	ldr	r3, [r4, #8]
 800aa5c:	4607      	mov	r7, r0
 800aa5e:	4616      	mov	r6, r2
 800aa60:	f109 0501 	add.w	r5, r9, #1
 800aa64:	42ab      	cmp	r3, r5
 800aa66:	db32      	blt.n	800aace <__lshift+0x86>
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f7ff fe2b 	bl	800a6c4 <_Balloc>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	4680      	mov	r8, r0
 800aa72:	f100 0114 	add.w	r1, r0, #20
 800aa76:	461a      	mov	r2, r3
 800aa78:	4553      	cmp	r3, sl
 800aa7a:	db2b      	blt.n	800aad4 <__lshift+0x8c>
 800aa7c:	6920      	ldr	r0, [r4, #16]
 800aa7e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa82:	f104 0314 	add.w	r3, r4, #20
 800aa86:	f016 021f 	ands.w	r2, r6, #31
 800aa8a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa8e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa92:	d025      	beq.n	800aae0 <__lshift+0x98>
 800aa94:	f1c2 0e20 	rsb	lr, r2, #32
 800aa98:	2000      	movs	r0, #0
 800aa9a:	681e      	ldr	r6, [r3, #0]
 800aa9c:	468a      	mov	sl, r1
 800aa9e:	4096      	lsls	r6, r2
 800aaa0:	4330      	orrs	r0, r6
 800aaa2:	f84a 0b04 	str.w	r0, [sl], #4
 800aaa6:	f853 0b04 	ldr.w	r0, [r3], #4
 800aaaa:	459c      	cmp	ip, r3
 800aaac:	fa20 f00e 	lsr.w	r0, r0, lr
 800aab0:	d814      	bhi.n	800aadc <__lshift+0x94>
 800aab2:	6048      	str	r0, [r1, #4]
 800aab4:	b108      	cbz	r0, 800aaba <__lshift+0x72>
 800aab6:	f109 0502 	add.w	r5, r9, #2
 800aaba:	3d01      	subs	r5, #1
 800aabc:	4638      	mov	r0, r7
 800aabe:	f8c8 5010 	str.w	r5, [r8, #16]
 800aac2:	4621      	mov	r1, r4
 800aac4:	f7ff fe32 	bl	800a72c <_Bfree>
 800aac8:	4640      	mov	r0, r8
 800aaca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aace:	3101      	adds	r1, #1
 800aad0:	005b      	lsls	r3, r3, #1
 800aad2:	e7c7      	b.n	800aa64 <__lshift+0x1c>
 800aad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800aad8:	3301      	adds	r3, #1
 800aada:	e7cd      	b.n	800aa78 <__lshift+0x30>
 800aadc:	4651      	mov	r1, sl
 800aade:	e7dc      	b.n	800aa9a <__lshift+0x52>
 800aae0:	3904      	subs	r1, #4
 800aae2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aae6:	f841 2f04 	str.w	r2, [r1, #4]!
 800aaea:	459c      	cmp	ip, r3
 800aaec:	d8f9      	bhi.n	800aae2 <__lshift+0x9a>
 800aaee:	e7e4      	b.n	800aaba <__lshift+0x72>

0800aaf0 <__mcmp>:
 800aaf0:	6903      	ldr	r3, [r0, #16]
 800aaf2:	690a      	ldr	r2, [r1, #16]
 800aaf4:	1a9b      	subs	r3, r3, r2
 800aaf6:	b530      	push	{r4, r5, lr}
 800aaf8:	d10c      	bne.n	800ab14 <__mcmp+0x24>
 800aafa:	0092      	lsls	r2, r2, #2
 800aafc:	3014      	adds	r0, #20
 800aafe:	3114      	adds	r1, #20
 800ab00:	1884      	adds	r4, r0, r2
 800ab02:	4411      	add	r1, r2
 800ab04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab0c:	4295      	cmp	r5, r2
 800ab0e:	d003      	beq.n	800ab18 <__mcmp+0x28>
 800ab10:	d305      	bcc.n	800ab1e <__mcmp+0x2e>
 800ab12:	2301      	movs	r3, #1
 800ab14:	4618      	mov	r0, r3
 800ab16:	bd30      	pop	{r4, r5, pc}
 800ab18:	42a0      	cmp	r0, r4
 800ab1a:	d3f3      	bcc.n	800ab04 <__mcmp+0x14>
 800ab1c:	e7fa      	b.n	800ab14 <__mcmp+0x24>
 800ab1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab22:	e7f7      	b.n	800ab14 <__mcmp+0x24>

0800ab24 <__mdiff>:
 800ab24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab28:	460d      	mov	r5, r1
 800ab2a:	4607      	mov	r7, r0
 800ab2c:	4611      	mov	r1, r2
 800ab2e:	4628      	mov	r0, r5
 800ab30:	4614      	mov	r4, r2
 800ab32:	f7ff ffdd 	bl	800aaf0 <__mcmp>
 800ab36:	1e06      	subs	r6, r0, #0
 800ab38:	d108      	bne.n	800ab4c <__mdiff+0x28>
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	4638      	mov	r0, r7
 800ab3e:	f7ff fdc1 	bl	800a6c4 <_Balloc>
 800ab42:	2301      	movs	r3, #1
 800ab44:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ab48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab4c:	bfa4      	itt	ge
 800ab4e:	4623      	movge	r3, r4
 800ab50:	462c      	movge	r4, r5
 800ab52:	4638      	mov	r0, r7
 800ab54:	6861      	ldr	r1, [r4, #4]
 800ab56:	bfa6      	itte	ge
 800ab58:	461d      	movge	r5, r3
 800ab5a:	2600      	movge	r6, #0
 800ab5c:	2601      	movlt	r6, #1
 800ab5e:	f7ff fdb1 	bl	800a6c4 <_Balloc>
 800ab62:	692b      	ldr	r3, [r5, #16]
 800ab64:	60c6      	str	r6, [r0, #12]
 800ab66:	6926      	ldr	r6, [r4, #16]
 800ab68:	f105 0914 	add.w	r9, r5, #20
 800ab6c:	f104 0214 	add.w	r2, r4, #20
 800ab70:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ab74:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ab78:	f100 0514 	add.w	r5, r0, #20
 800ab7c:	f04f 0e00 	mov.w	lr, #0
 800ab80:	f852 ab04 	ldr.w	sl, [r2], #4
 800ab84:	f859 4b04 	ldr.w	r4, [r9], #4
 800ab88:	fa1e f18a 	uxtah	r1, lr, sl
 800ab8c:	b2a3      	uxth	r3, r4
 800ab8e:	1ac9      	subs	r1, r1, r3
 800ab90:	0c23      	lsrs	r3, r4, #16
 800ab92:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ab96:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ab9a:	b289      	uxth	r1, r1
 800ab9c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800aba0:	45c8      	cmp	r8, r9
 800aba2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800aba6:	4694      	mov	ip, r2
 800aba8:	f845 3b04 	str.w	r3, [r5], #4
 800abac:	d8e8      	bhi.n	800ab80 <__mdiff+0x5c>
 800abae:	45bc      	cmp	ip, r7
 800abb0:	d304      	bcc.n	800abbc <__mdiff+0x98>
 800abb2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800abb6:	b183      	cbz	r3, 800abda <__mdiff+0xb6>
 800abb8:	6106      	str	r6, [r0, #16]
 800abba:	e7c5      	b.n	800ab48 <__mdiff+0x24>
 800abbc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800abc0:	fa1e f381 	uxtah	r3, lr, r1
 800abc4:	141a      	asrs	r2, r3, #16
 800abc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800abca:	b29b      	uxth	r3, r3
 800abcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abd0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800abd4:	f845 3b04 	str.w	r3, [r5], #4
 800abd8:	e7e9      	b.n	800abae <__mdiff+0x8a>
 800abda:	3e01      	subs	r6, #1
 800abdc:	e7e9      	b.n	800abb2 <__mdiff+0x8e>

0800abde <__d2b>:
 800abde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abe2:	460e      	mov	r6, r1
 800abe4:	2101      	movs	r1, #1
 800abe6:	ec59 8b10 	vmov	r8, r9, d0
 800abea:	4615      	mov	r5, r2
 800abec:	f7ff fd6a 	bl	800a6c4 <_Balloc>
 800abf0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800abf4:	4607      	mov	r7, r0
 800abf6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abfa:	bb34      	cbnz	r4, 800ac4a <__d2b+0x6c>
 800abfc:	9301      	str	r3, [sp, #4]
 800abfe:	f1b8 0300 	subs.w	r3, r8, #0
 800ac02:	d027      	beq.n	800ac54 <__d2b+0x76>
 800ac04:	a802      	add	r0, sp, #8
 800ac06:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ac0a:	f7ff fe00 	bl	800a80e <__lo0bits>
 800ac0e:	9900      	ldr	r1, [sp, #0]
 800ac10:	b1f0      	cbz	r0, 800ac50 <__d2b+0x72>
 800ac12:	9a01      	ldr	r2, [sp, #4]
 800ac14:	f1c0 0320 	rsb	r3, r0, #32
 800ac18:	fa02 f303 	lsl.w	r3, r2, r3
 800ac1c:	430b      	orrs	r3, r1
 800ac1e:	40c2      	lsrs	r2, r0
 800ac20:	617b      	str	r3, [r7, #20]
 800ac22:	9201      	str	r2, [sp, #4]
 800ac24:	9b01      	ldr	r3, [sp, #4]
 800ac26:	61bb      	str	r3, [r7, #24]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	bf14      	ite	ne
 800ac2c:	2102      	movne	r1, #2
 800ac2e:	2101      	moveq	r1, #1
 800ac30:	6139      	str	r1, [r7, #16]
 800ac32:	b1c4      	cbz	r4, 800ac66 <__d2b+0x88>
 800ac34:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ac38:	4404      	add	r4, r0
 800ac3a:	6034      	str	r4, [r6, #0]
 800ac3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac40:	6028      	str	r0, [r5, #0]
 800ac42:	4638      	mov	r0, r7
 800ac44:	b003      	add	sp, #12
 800ac46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac4e:	e7d5      	b.n	800abfc <__d2b+0x1e>
 800ac50:	6179      	str	r1, [r7, #20]
 800ac52:	e7e7      	b.n	800ac24 <__d2b+0x46>
 800ac54:	a801      	add	r0, sp, #4
 800ac56:	f7ff fdda 	bl	800a80e <__lo0bits>
 800ac5a:	9b01      	ldr	r3, [sp, #4]
 800ac5c:	617b      	str	r3, [r7, #20]
 800ac5e:	2101      	movs	r1, #1
 800ac60:	6139      	str	r1, [r7, #16]
 800ac62:	3020      	adds	r0, #32
 800ac64:	e7e5      	b.n	800ac32 <__d2b+0x54>
 800ac66:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ac6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac6e:	6030      	str	r0, [r6, #0]
 800ac70:	6918      	ldr	r0, [r3, #16]
 800ac72:	f7ff fdad 	bl	800a7d0 <__hi0bits>
 800ac76:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ac7a:	e7e1      	b.n	800ac40 <__d2b+0x62>

0800ac7c <_calloc_r>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	fb02 f401 	mul.w	r4, r2, r1
 800ac82:	4621      	mov	r1, r4
 800ac84:	f000 f856 	bl	800ad34 <_malloc_r>
 800ac88:	4605      	mov	r5, r0
 800ac8a:	b118      	cbz	r0, 800ac94 <_calloc_r+0x18>
 800ac8c:	4622      	mov	r2, r4
 800ac8e:	2100      	movs	r1, #0
 800ac90:	f7fe fa25 	bl	80090de <memset>
 800ac94:	4628      	mov	r0, r5
 800ac96:	bd38      	pop	{r3, r4, r5, pc}

0800ac98 <_free_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	2900      	cmp	r1, #0
 800ac9e:	d045      	beq.n	800ad2c <_free_r+0x94>
 800aca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aca4:	1f0c      	subs	r4, r1, #4
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	bfb8      	it	lt
 800acaa:	18e4      	addlt	r4, r4, r3
 800acac:	f000 fa29 	bl	800b102 <__malloc_lock>
 800acb0:	4a1f      	ldr	r2, [pc, #124]	; (800ad30 <_free_r+0x98>)
 800acb2:	6813      	ldr	r3, [r2, #0]
 800acb4:	4610      	mov	r0, r2
 800acb6:	b933      	cbnz	r3, 800acc6 <_free_r+0x2e>
 800acb8:	6063      	str	r3, [r4, #4]
 800acba:	6014      	str	r4, [r2, #0]
 800acbc:	4628      	mov	r0, r5
 800acbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acc2:	f000 ba1f 	b.w	800b104 <__malloc_unlock>
 800acc6:	42a3      	cmp	r3, r4
 800acc8:	d90c      	bls.n	800ace4 <_free_r+0x4c>
 800acca:	6821      	ldr	r1, [r4, #0]
 800accc:	1862      	adds	r2, r4, r1
 800acce:	4293      	cmp	r3, r2
 800acd0:	bf04      	itt	eq
 800acd2:	681a      	ldreq	r2, [r3, #0]
 800acd4:	685b      	ldreq	r3, [r3, #4]
 800acd6:	6063      	str	r3, [r4, #4]
 800acd8:	bf04      	itt	eq
 800acda:	1852      	addeq	r2, r2, r1
 800acdc:	6022      	streq	r2, [r4, #0]
 800acde:	6004      	str	r4, [r0, #0]
 800ace0:	e7ec      	b.n	800acbc <_free_r+0x24>
 800ace2:	4613      	mov	r3, r2
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	b10a      	cbz	r2, 800acec <_free_r+0x54>
 800ace8:	42a2      	cmp	r2, r4
 800acea:	d9fa      	bls.n	800ace2 <_free_r+0x4a>
 800acec:	6819      	ldr	r1, [r3, #0]
 800acee:	1858      	adds	r0, r3, r1
 800acf0:	42a0      	cmp	r0, r4
 800acf2:	d10b      	bne.n	800ad0c <_free_r+0x74>
 800acf4:	6820      	ldr	r0, [r4, #0]
 800acf6:	4401      	add	r1, r0
 800acf8:	1858      	adds	r0, r3, r1
 800acfa:	4282      	cmp	r2, r0
 800acfc:	6019      	str	r1, [r3, #0]
 800acfe:	d1dd      	bne.n	800acbc <_free_r+0x24>
 800ad00:	6810      	ldr	r0, [r2, #0]
 800ad02:	6852      	ldr	r2, [r2, #4]
 800ad04:	605a      	str	r2, [r3, #4]
 800ad06:	4401      	add	r1, r0
 800ad08:	6019      	str	r1, [r3, #0]
 800ad0a:	e7d7      	b.n	800acbc <_free_r+0x24>
 800ad0c:	d902      	bls.n	800ad14 <_free_r+0x7c>
 800ad0e:	230c      	movs	r3, #12
 800ad10:	602b      	str	r3, [r5, #0]
 800ad12:	e7d3      	b.n	800acbc <_free_r+0x24>
 800ad14:	6820      	ldr	r0, [r4, #0]
 800ad16:	1821      	adds	r1, r4, r0
 800ad18:	428a      	cmp	r2, r1
 800ad1a:	bf04      	itt	eq
 800ad1c:	6811      	ldreq	r1, [r2, #0]
 800ad1e:	6852      	ldreq	r2, [r2, #4]
 800ad20:	6062      	str	r2, [r4, #4]
 800ad22:	bf04      	itt	eq
 800ad24:	1809      	addeq	r1, r1, r0
 800ad26:	6021      	streq	r1, [r4, #0]
 800ad28:	605c      	str	r4, [r3, #4]
 800ad2a:	e7c7      	b.n	800acbc <_free_r+0x24>
 800ad2c:	bd38      	pop	{r3, r4, r5, pc}
 800ad2e:	bf00      	nop
 800ad30:	20000200 	.word	0x20000200

0800ad34 <_malloc_r>:
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	1ccd      	adds	r5, r1, #3
 800ad38:	f025 0503 	bic.w	r5, r5, #3
 800ad3c:	3508      	adds	r5, #8
 800ad3e:	2d0c      	cmp	r5, #12
 800ad40:	bf38      	it	cc
 800ad42:	250c      	movcc	r5, #12
 800ad44:	2d00      	cmp	r5, #0
 800ad46:	4606      	mov	r6, r0
 800ad48:	db01      	blt.n	800ad4e <_malloc_r+0x1a>
 800ad4a:	42a9      	cmp	r1, r5
 800ad4c:	d903      	bls.n	800ad56 <_malloc_r+0x22>
 800ad4e:	230c      	movs	r3, #12
 800ad50:	6033      	str	r3, [r6, #0]
 800ad52:	2000      	movs	r0, #0
 800ad54:	bd70      	pop	{r4, r5, r6, pc}
 800ad56:	f000 f9d4 	bl	800b102 <__malloc_lock>
 800ad5a:	4a21      	ldr	r2, [pc, #132]	; (800ade0 <_malloc_r+0xac>)
 800ad5c:	6814      	ldr	r4, [r2, #0]
 800ad5e:	4621      	mov	r1, r4
 800ad60:	b991      	cbnz	r1, 800ad88 <_malloc_r+0x54>
 800ad62:	4c20      	ldr	r4, [pc, #128]	; (800ade4 <_malloc_r+0xb0>)
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	b91b      	cbnz	r3, 800ad70 <_malloc_r+0x3c>
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f000 f98f 	bl	800b08c <_sbrk_r>
 800ad6e:	6020      	str	r0, [r4, #0]
 800ad70:	4629      	mov	r1, r5
 800ad72:	4630      	mov	r0, r6
 800ad74:	f000 f98a 	bl	800b08c <_sbrk_r>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d124      	bne.n	800adc6 <_malloc_r+0x92>
 800ad7c:	230c      	movs	r3, #12
 800ad7e:	6033      	str	r3, [r6, #0]
 800ad80:	4630      	mov	r0, r6
 800ad82:	f000 f9bf 	bl	800b104 <__malloc_unlock>
 800ad86:	e7e4      	b.n	800ad52 <_malloc_r+0x1e>
 800ad88:	680b      	ldr	r3, [r1, #0]
 800ad8a:	1b5b      	subs	r3, r3, r5
 800ad8c:	d418      	bmi.n	800adc0 <_malloc_r+0x8c>
 800ad8e:	2b0b      	cmp	r3, #11
 800ad90:	d90f      	bls.n	800adb2 <_malloc_r+0x7e>
 800ad92:	600b      	str	r3, [r1, #0]
 800ad94:	50cd      	str	r5, [r1, r3]
 800ad96:	18cc      	adds	r4, r1, r3
 800ad98:	4630      	mov	r0, r6
 800ad9a:	f000 f9b3 	bl	800b104 <__malloc_unlock>
 800ad9e:	f104 000b 	add.w	r0, r4, #11
 800ada2:	1d23      	adds	r3, r4, #4
 800ada4:	f020 0007 	bic.w	r0, r0, #7
 800ada8:	1ac3      	subs	r3, r0, r3
 800adaa:	d0d3      	beq.n	800ad54 <_malloc_r+0x20>
 800adac:	425a      	negs	r2, r3
 800adae:	50e2      	str	r2, [r4, r3]
 800adb0:	e7d0      	b.n	800ad54 <_malloc_r+0x20>
 800adb2:	428c      	cmp	r4, r1
 800adb4:	684b      	ldr	r3, [r1, #4]
 800adb6:	bf16      	itet	ne
 800adb8:	6063      	strne	r3, [r4, #4]
 800adba:	6013      	streq	r3, [r2, #0]
 800adbc:	460c      	movne	r4, r1
 800adbe:	e7eb      	b.n	800ad98 <_malloc_r+0x64>
 800adc0:	460c      	mov	r4, r1
 800adc2:	6849      	ldr	r1, [r1, #4]
 800adc4:	e7cc      	b.n	800ad60 <_malloc_r+0x2c>
 800adc6:	1cc4      	adds	r4, r0, #3
 800adc8:	f024 0403 	bic.w	r4, r4, #3
 800adcc:	42a0      	cmp	r0, r4
 800adce:	d005      	beq.n	800addc <_malloc_r+0xa8>
 800add0:	1a21      	subs	r1, r4, r0
 800add2:	4630      	mov	r0, r6
 800add4:	f000 f95a 	bl	800b08c <_sbrk_r>
 800add8:	3001      	adds	r0, #1
 800adda:	d0cf      	beq.n	800ad7c <_malloc_r+0x48>
 800addc:	6025      	str	r5, [r4, #0]
 800adde:	e7db      	b.n	800ad98 <_malloc_r+0x64>
 800ade0:	20000200 	.word	0x20000200
 800ade4:	20000204 	.word	0x20000204

0800ade8 <__ssputs_r>:
 800ade8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adec:	688e      	ldr	r6, [r1, #8]
 800adee:	429e      	cmp	r6, r3
 800adf0:	4682      	mov	sl, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	4690      	mov	r8, r2
 800adf6:	4699      	mov	r9, r3
 800adf8:	d837      	bhi.n	800ae6a <__ssputs_r+0x82>
 800adfa:	898a      	ldrh	r2, [r1, #12]
 800adfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae00:	d031      	beq.n	800ae66 <__ssputs_r+0x7e>
 800ae02:	6825      	ldr	r5, [r4, #0]
 800ae04:	6909      	ldr	r1, [r1, #16]
 800ae06:	1a6f      	subs	r7, r5, r1
 800ae08:	6965      	ldr	r5, [r4, #20]
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae10:	fb95 f5f3 	sdiv	r5, r5, r3
 800ae14:	f109 0301 	add.w	r3, r9, #1
 800ae18:	443b      	add	r3, r7
 800ae1a:	429d      	cmp	r5, r3
 800ae1c:	bf38      	it	cc
 800ae1e:	461d      	movcc	r5, r3
 800ae20:	0553      	lsls	r3, r2, #21
 800ae22:	d530      	bpl.n	800ae86 <__ssputs_r+0x9e>
 800ae24:	4629      	mov	r1, r5
 800ae26:	f7ff ff85 	bl	800ad34 <_malloc_r>
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	b950      	cbnz	r0, 800ae44 <__ssputs_r+0x5c>
 800ae2e:	230c      	movs	r3, #12
 800ae30:	f8ca 3000 	str.w	r3, [sl]
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae44:	463a      	mov	r2, r7
 800ae46:	6921      	ldr	r1, [r4, #16]
 800ae48:	f7fe f93e 	bl	80090c8 <memcpy>
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae56:	81a3      	strh	r3, [r4, #12]
 800ae58:	6126      	str	r6, [r4, #16]
 800ae5a:	6165      	str	r5, [r4, #20]
 800ae5c:	443e      	add	r6, r7
 800ae5e:	1bed      	subs	r5, r5, r7
 800ae60:	6026      	str	r6, [r4, #0]
 800ae62:	60a5      	str	r5, [r4, #8]
 800ae64:	464e      	mov	r6, r9
 800ae66:	454e      	cmp	r6, r9
 800ae68:	d900      	bls.n	800ae6c <__ssputs_r+0x84>
 800ae6a:	464e      	mov	r6, r9
 800ae6c:	4632      	mov	r2, r6
 800ae6e:	4641      	mov	r1, r8
 800ae70:	6820      	ldr	r0, [r4, #0]
 800ae72:	f000 f92d 	bl	800b0d0 <memmove>
 800ae76:	68a3      	ldr	r3, [r4, #8]
 800ae78:	1b9b      	subs	r3, r3, r6
 800ae7a:	60a3      	str	r3, [r4, #8]
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	441e      	add	r6, r3
 800ae80:	6026      	str	r6, [r4, #0]
 800ae82:	2000      	movs	r0, #0
 800ae84:	e7dc      	b.n	800ae40 <__ssputs_r+0x58>
 800ae86:	462a      	mov	r2, r5
 800ae88:	f000 f93d 	bl	800b106 <_realloc_r>
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d1e2      	bne.n	800ae58 <__ssputs_r+0x70>
 800ae92:	6921      	ldr	r1, [r4, #16]
 800ae94:	4650      	mov	r0, sl
 800ae96:	f7ff feff 	bl	800ac98 <_free_r>
 800ae9a:	e7c8      	b.n	800ae2e <__ssputs_r+0x46>

0800ae9c <_svfiprintf_r>:
 800ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea0:	461d      	mov	r5, r3
 800aea2:	898b      	ldrh	r3, [r1, #12]
 800aea4:	061f      	lsls	r7, r3, #24
 800aea6:	b09d      	sub	sp, #116	; 0x74
 800aea8:	4680      	mov	r8, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	4616      	mov	r6, r2
 800aeae:	d50f      	bpl.n	800aed0 <_svfiprintf_r+0x34>
 800aeb0:	690b      	ldr	r3, [r1, #16]
 800aeb2:	b96b      	cbnz	r3, 800aed0 <_svfiprintf_r+0x34>
 800aeb4:	2140      	movs	r1, #64	; 0x40
 800aeb6:	f7ff ff3d 	bl	800ad34 <_malloc_r>
 800aeba:	6020      	str	r0, [r4, #0]
 800aebc:	6120      	str	r0, [r4, #16]
 800aebe:	b928      	cbnz	r0, 800aecc <_svfiprintf_r+0x30>
 800aec0:	230c      	movs	r3, #12
 800aec2:	f8c8 3000 	str.w	r3, [r8]
 800aec6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeca:	e0c8      	b.n	800b05e <_svfiprintf_r+0x1c2>
 800aecc:	2340      	movs	r3, #64	; 0x40
 800aece:	6163      	str	r3, [r4, #20]
 800aed0:	2300      	movs	r3, #0
 800aed2:	9309      	str	r3, [sp, #36]	; 0x24
 800aed4:	2320      	movs	r3, #32
 800aed6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aeda:	2330      	movs	r3, #48	; 0x30
 800aedc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aee0:	9503      	str	r5, [sp, #12]
 800aee2:	f04f 0b01 	mov.w	fp, #1
 800aee6:	4637      	mov	r7, r6
 800aee8:	463d      	mov	r5, r7
 800aeea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aeee:	b10b      	cbz	r3, 800aef4 <_svfiprintf_r+0x58>
 800aef0:	2b25      	cmp	r3, #37	; 0x25
 800aef2:	d13e      	bne.n	800af72 <_svfiprintf_r+0xd6>
 800aef4:	ebb7 0a06 	subs.w	sl, r7, r6
 800aef8:	d00b      	beq.n	800af12 <_svfiprintf_r+0x76>
 800aefa:	4653      	mov	r3, sl
 800aefc:	4632      	mov	r2, r6
 800aefe:	4621      	mov	r1, r4
 800af00:	4640      	mov	r0, r8
 800af02:	f7ff ff71 	bl	800ade8 <__ssputs_r>
 800af06:	3001      	adds	r0, #1
 800af08:	f000 80a4 	beq.w	800b054 <_svfiprintf_r+0x1b8>
 800af0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af0e:	4453      	add	r3, sl
 800af10:	9309      	str	r3, [sp, #36]	; 0x24
 800af12:	783b      	ldrb	r3, [r7, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 809d 	beq.w	800b054 <_svfiprintf_r+0x1b8>
 800af1a:	2300      	movs	r3, #0
 800af1c:	f04f 32ff 	mov.w	r2, #4294967295
 800af20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af24:	9304      	str	r3, [sp, #16]
 800af26:	9307      	str	r3, [sp, #28]
 800af28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af2c:	931a      	str	r3, [sp, #104]	; 0x68
 800af2e:	462f      	mov	r7, r5
 800af30:	2205      	movs	r2, #5
 800af32:	f817 1b01 	ldrb.w	r1, [r7], #1
 800af36:	4850      	ldr	r0, [pc, #320]	; (800b078 <_svfiprintf_r+0x1dc>)
 800af38:	f7f5 f952 	bl	80001e0 <memchr>
 800af3c:	9b04      	ldr	r3, [sp, #16]
 800af3e:	b9d0      	cbnz	r0, 800af76 <_svfiprintf_r+0xda>
 800af40:	06d9      	lsls	r1, r3, #27
 800af42:	bf44      	itt	mi
 800af44:	2220      	movmi	r2, #32
 800af46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af4a:	071a      	lsls	r2, r3, #28
 800af4c:	bf44      	itt	mi
 800af4e:	222b      	movmi	r2, #43	; 0x2b
 800af50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af54:	782a      	ldrb	r2, [r5, #0]
 800af56:	2a2a      	cmp	r2, #42	; 0x2a
 800af58:	d015      	beq.n	800af86 <_svfiprintf_r+0xea>
 800af5a:	9a07      	ldr	r2, [sp, #28]
 800af5c:	462f      	mov	r7, r5
 800af5e:	2000      	movs	r0, #0
 800af60:	250a      	movs	r5, #10
 800af62:	4639      	mov	r1, r7
 800af64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af68:	3b30      	subs	r3, #48	; 0x30
 800af6a:	2b09      	cmp	r3, #9
 800af6c:	d94d      	bls.n	800b00a <_svfiprintf_r+0x16e>
 800af6e:	b1b8      	cbz	r0, 800afa0 <_svfiprintf_r+0x104>
 800af70:	e00f      	b.n	800af92 <_svfiprintf_r+0xf6>
 800af72:	462f      	mov	r7, r5
 800af74:	e7b8      	b.n	800aee8 <_svfiprintf_r+0x4c>
 800af76:	4a40      	ldr	r2, [pc, #256]	; (800b078 <_svfiprintf_r+0x1dc>)
 800af78:	1a80      	subs	r0, r0, r2
 800af7a:	fa0b f000 	lsl.w	r0, fp, r0
 800af7e:	4318      	orrs	r0, r3
 800af80:	9004      	str	r0, [sp, #16]
 800af82:	463d      	mov	r5, r7
 800af84:	e7d3      	b.n	800af2e <_svfiprintf_r+0x92>
 800af86:	9a03      	ldr	r2, [sp, #12]
 800af88:	1d11      	adds	r1, r2, #4
 800af8a:	6812      	ldr	r2, [r2, #0]
 800af8c:	9103      	str	r1, [sp, #12]
 800af8e:	2a00      	cmp	r2, #0
 800af90:	db01      	blt.n	800af96 <_svfiprintf_r+0xfa>
 800af92:	9207      	str	r2, [sp, #28]
 800af94:	e004      	b.n	800afa0 <_svfiprintf_r+0x104>
 800af96:	4252      	negs	r2, r2
 800af98:	f043 0302 	orr.w	r3, r3, #2
 800af9c:	9207      	str	r2, [sp, #28]
 800af9e:	9304      	str	r3, [sp, #16]
 800afa0:	783b      	ldrb	r3, [r7, #0]
 800afa2:	2b2e      	cmp	r3, #46	; 0x2e
 800afa4:	d10c      	bne.n	800afc0 <_svfiprintf_r+0x124>
 800afa6:	787b      	ldrb	r3, [r7, #1]
 800afa8:	2b2a      	cmp	r3, #42	; 0x2a
 800afaa:	d133      	bne.n	800b014 <_svfiprintf_r+0x178>
 800afac:	9b03      	ldr	r3, [sp, #12]
 800afae:	1d1a      	adds	r2, r3, #4
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	9203      	str	r2, [sp, #12]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	bfb8      	it	lt
 800afb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800afbc:	3702      	adds	r7, #2
 800afbe:	9305      	str	r3, [sp, #20]
 800afc0:	4d2e      	ldr	r5, [pc, #184]	; (800b07c <_svfiprintf_r+0x1e0>)
 800afc2:	7839      	ldrb	r1, [r7, #0]
 800afc4:	2203      	movs	r2, #3
 800afc6:	4628      	mov	r0, r5
 800afc8:	f7f5 f90a 	bl	80001e0 <memchr>
 800afcc:	b138      	cbz	r0, 800afde <_svfiprintf_r+0x142>
 800afce:	2340      	movs	r3, #64	; 0x40
 800afd0:	1b40      	subs	r0, r0, r5
 800afd2:	fa03 f000 	lsl.w	r0, r3, r0
 800afd6:	9b04      	ldr	r3, [sp, #16]
 800afd8:	4303      	orrs	r3, r0
 800afda:	3701      	adds	r7, #1
 800afdc:	9304      	str	r3, [sp, #16]
 800afde:	7839      	ldrb	r1, [r7, #0]
 800afe0:	4827      	ldr	r0, [pc, #156]	; (800b080 <_svfiprintf_r+0x1e4>)
 800afe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afe6:	2206      	movs	r2, #6
 800afe8:	1c7e      	adds	r6, r7, #1
 800afea:	f7f5 f8f9 	bl	80001e0 <memchr>
 800afee:	2800      	cmp	r0, #0
 800aff0:	d038      	beq.n	800b064 <_svfiprintf_r+0x1c8>
 800aff2:	4b24      	ldr	r3, [pc, #144]	; (800b084 <_svfiprintf_r+0x1e8>)
 800aff4:	bb13      	cbnz	r3, 800b03c <_svfiprintf_r+0x1a0>
 800aff6:	9b03      	ldr	r3, [sp, #12]
 800aff8:	3307      	adds	r3, #7
 800affa:	f023 0307 	bic.w	r3, r3, #7
 800affe:	3308      	adds	r3, #8
 800b000:	9303      	str	r3, [sp, #12]
 800b002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b004:	444b      	add	r3, r9
 800b006:	9309      	str	r3, [sp, #36]	; 0x24
 800b008:	e76d      	b.n	800aee6 <_svfiprintf_r+0x4a>
 800b00a:	fb05 3202 	mla	r2, r5, r2, r3
 800b00e:	2001      	movs	r0, #1
 800b010:	460f      	mov	r7, r1
 800b012:	e7a6      	b.n	800af62 <_svfiprintf_r+0xc6>
 800b014:	2300      	movs	r3, #0
 800b016:	3701      	adds	r7, #1
 800b018:	9305      	str	r3, [sp, #20]
 800b01a:	4619      	mov	r1, r3
 800b01c:	250a      	movs	r5, #10
 800b01e:	4638      	mov	r0, r7
 800b020:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b024:	3a30      	subs	r2, #48	; 0x30
 800b026:	2a09      	cmp	r2, #9
 800b028:	d903      	bls.n	800b032 <_svfiprintf_r+0x196>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0c8      	beq.n	800afc0 <_svfiprintf_r+0x124>
 800b02e:	9105      	str	r1, [sp, #20]
 800b030:	e7c6      	b.n	800afc0 <_svfiprintf_r+0x124>
 800b032:	fb05 2101 	mla	r1, r5, r1, r2
 800b036:	2301      	movs	r3, #1
 800b038:	4607      	mov	r7, r0
 800b03a:	e7f0      	b.n	800b01e <_svfiprintf_r+0x182>
 800b03c:	ab03      	add	r3, sp, #12
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	4622      	mov	r2, r4
 800b042:	4b11      	ldr	r3, [pc, #68]	; (800b088 <_svfiprintf_r+0x1ec>)
 800b044:	a904      	add	r1, sp, #16
 800b046:	4640      	mov	r0, r8
 800b048:	f7fe f8e6 	bl	8009218 <_printf_float>
 800b04c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b050:	4681      	mov	r9, r0
 800b052:	d1d6      	bne.n	800b002 <_svfiprintf_r+0x166>
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	065b      	lsls	r3, r3, #25
 800b058:	f53f af35 	bmi.w	800aec6 <_svfiprintf_r+0x2a>
 800b05c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b05e:	b01d      	add	sp, #116	; 0x74
 800b060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b064:	ab03      	add	r3, sp, #12
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	4622      	mov	r2, r4
 800b06a:	4b07      	ldr	r3, [pc, #28]	; (800b088 <_svfiprintf_r+0x1ec>)
 800b06c:	a904      	add	r1, sp, #16
 800b06e:	4640      	mov	r0, r8
 800b070:	f7fe fb88 	bl	8009784 <_printf_i>
 800b074:	e7ea      	b.n	800b04c <_svfiprintf_r+0x1b0>
 800b076:	bf00      	nop
 800b078:	0800b394 	.word	0x0800b394
 800b07c:	0800b39a 	.word	0x0800b39a
 800b080:	0800b39e 	.word	0x0800b39e
 800b084:	08009219 	.word	0x08009219
 800b088:	0800ade9 	.word	0x0800ade9

0800b08c <_sbrk_r>:
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	4c06      	ldr	r4, [pc, #24]	; (800b0a8 <_sbrk_r+0x1c>)
 800b090:	2300      	movs	r3, #0
 800b092:	4605      	mov	r5, r0
 800b094:	4608      	mov	r0, r1
 800b096:	6023      	str	r3, [r4, #0]
 800b098:	f7fa f880 	bl	800519c <_sbrk>
 800b09c:	1c43      	adds	r3, r0, #1
 800b09e:	d102      	bne.n	800b0a6 <_sbrk_r+0x1a>
 800b0a0:	6823      	ldr	r3, [r4, #0]
 800b0a2:	b103      	cbz	r3, 800b0a6 <_sbrk_r+0x1a>
 800b0a4:	602b      	str	r3, [r5, #0]
 800b0a6:	bd38      	pop	{r3, r4, r5, pc}
 800b0a8:	200007f0 	.word	0x200007f0

0800b0ac <__ascii_mbtowc>:
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	b901      	cbnz	r1, 800b0b2 <__ascii_mbtowc+0x6>
 800b0b0:	a901      	add	r1, sp, #4
 800b0b2:	b142      	cbz	r2, 800b0c6 <__ascii_mbtowc+0x1a>
 800b0b4:	b14b      	cbz	r3, 800b0ca <__ascii_mbtowc+0x1e>
 800b0b6:	7813      	ldrb	r3, [r2, #0]
 800b0b8:	600b      	str	r3, [r1, #0]
 800b0ba:	7812      	ldrb	r2, [r2, #0]
 800b0bc:	1c10      	adds	r0, r2, #0
 800b0be:	bf18      	it	ne
 800b0c0:	2001      	movne	r0, #1
 800b0c2:	b002      	add	sp, #8
 800b0c4:	4770      	bx	lr
 800b0c6:	4610      	mov	r0, r2
 800b0c8:	e7fb      	b.n	800b0c2 <__ascii_mbtowc+0x16>
 800b0ca:	f06f 0001 	mvn.w	r0, #1
 800b0ce:	e7f8      	b.n	800b0c2 <__ascii_mbtowc+0x16>

0800b0d0 <memmove>:
 800b0d0:	4288      	cmp	r0, r1
 800b0d2:	b510      	push	{r4, lr}
 800b0d4:	eb01 0302 	add.w	r3, r1, r2
 800b0d8:	d807      	bhi.n	800b0ea <memmove+0x1a>
 800b0da:	1e42      	subs	r2, r0, #1
 800b0dc:	4299      	cmp	r1, r3
 800b0de:	d00a      	beq.n	800b0f6 <memmove+0x26>
 800b0e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b0e8:	e7f8      	b.n	800b0dc <memmove+0xc>
 800b0ea:	4283      	cmp	r3, r0
 800b0ec:	d9f5      	bls.n	800b0da <memmove+0xa>
 800b0ee:	1881      	adds	r1, r0, r2
 800b0f0:	1ad2      	subs	r2, r2, r3
 800b0f2:	42d3      	cmn	r3, r2
 800b0f4:	d100      	bne.n	800b0f8 <memmove+0x28>
 800b0f6:	bd10      	pop	{r4, pc}
 800b0f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b100:	e7f7      	b.n	800b0f2 <memmove+0x22>

0800b102 <__malloc_lock>:
 800b102:	4770      	bx	lr

0800b104 <__malloc_unlock>:
 800b104:	4770      	bx	lr

0800b106 <_realloc_r>:
 800b106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b108:	4607      	mov	r7, r0
 800b10a:	4614      	mov	r4, r2
 800b10c:	460e      	mov	r6, r1
 800b10e:	b921      	cbnz	r1, 800b11a <_realloc_r+0x14>
 800b110:	4611      	mov	r1, r2
 800b112:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b116:	f7ff be0d 	b.w	800ad34 <_malloc_r>
 800b11a:	b922      	cbnz	r2, 800b126 <_realloc_r+0x20>
 800b11c:	f7ff fdbc 	bl	800ac98 <_free_r>
 800b120:	4625      	mov	r5, r4
 800b122:	4628      	mov	r0, r5
 800b124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b126:	f000 f821 	bl	800b16c <_malloc_usable_size_r>
 800b12a:	42a0      	cmp	r0, r4
 800b12c:	d20f      	bcs.n	800b14e <_realloc_r+0x48>
 800b12e:	4621      	mov	r1, r4
 800b130:	4638      	mov	r0, r7
 800b132:	f7ff fdff 	bl	800ad34 <_malloc_r>
 800b136:	4605      	mov	r5, r0
 800b138:	2800      	cmp	r0, #0
 800b13a:	d0f2      	beq.n	800b122 <_realloc_r+0x1c>
 800b13c:	4631      	mov	r1, r6
 800b13e:	4622      	mov	r2, r4
 800b140:	f7fd ffc2 	bl	80090c8 <memcpy>
 800b144:	4631      	mov	r1, r6
 800b146:	4638      	mov	r0, r7
 800b148:	f7ff fda6 	bl	800ac98 <_free_r>
 800b14c:	e7e9      	b.n	800b122 <_realloc_r+0x1c>
 800b14e:	4635      	mov	r5, r6
 800b150:	e7e7      	b.n	800b122 <_realloc_r+0x1c>

0800b152 <__ascii_wctomb>:
 800b152:	b149      	cbz	r1, 800b168 <__ascii_wctomb+0x16>
 800b154:	2aff      	cmp	r2, #255	; 0xff
 800b156:	bf85      	ittet	hi
 800b158:	238a      	movhi	r3, #138	; 0x8a
 800b15a:	6003      	strhi	r3, [r0, #0]
 800b15c:	700a      	strbls	r2, [r1, #0]
 800b15e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b162:	bf98      	it	ls
 800b164:	2001      	movls	r0, #1
 800b166:	4770      	bx	lr
 800b168:	4608      	mov	r0, r1
 800b16a:	4770      	bx	lr

0800b16c <_malloc_usable_size_r>:
 800b16c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b170:	1f18      	subs	r0, r3, #4
 800b172:	2b00      	cmp	r3, #0
 800b174:	bfbc      	itt	lt
 800b176:	580b      	ldrlt	r3, [r1, r0]
 800b178:	18c0      	addlt	r0, r0, r3
 800b17a:	4770      	bx	lr

0800b17c <_init>:
 800b17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17e:	bf00      	nop
 800b180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b182:	bc08      	pop	{r3}
 800b184:	469e      	mov	lr, r3
 800b186:	4770      	bx	lr

0800b188 <_fini>:
 800b188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18a:	bf00      	nop
 800b18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b18e:	bc08      	pop	{r3}
 800b190:	469e      	mov	lr, r3
 800b192:	4770      	bx	lr
