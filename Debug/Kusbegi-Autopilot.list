
Kusbegi-Autopilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c68c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800c820  0800c820  0001c820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccd0  0800ccd0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccd0  0800ccd0  0001ccd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccd8  0800ccd8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccd8  0800ccd8  0001ccd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccdc  0800ccdc  0001ccdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800cce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  200001e0  0800cebc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000086c  0800cebc  0002086c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000229c9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c4b  00000000  00000000  00042bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001290  00000000  00000000  00046820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  00047ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025488  00000000  00000000  00048ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000140c6  00000000  00000000  0006e028  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1117  00000000  00000000  000820ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153205  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000593c  00000000  00000000  00153280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c804 	.word	0x0800c804

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c804 	.word	0x0800c804

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9bd 	b.w	8000fe4 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b972 	b.w	8000fe4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9e08      	ldr	r6, [sp, #32]
 8000d1e:	4604      	mov	r4, r0
 8000d20:	4688      	mov	r8, r1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d14b      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d26:	428a      	cmp	r2, r1
 8000d28:	4615      	mov	r5, r2
 8000d2a:	d967      	bls.n	8000dfc <__udivmoddi4+0xe4>
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0720 	rsb	r7, r2, #32
 8000d36:	fa01 f302 	lsl.w	r3, r1, r2
 8000d3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d3e:	4095      	lsls	r5, r2
 8000d40:	ea47 0803 	orr.w	r8, r7, r3
 8000d44:	4094      	lsls	r4, r2
 8000d46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d4a:	0c23      	lsrs	r3, r4, #16
 8000d4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d50:	fa1f fc85 	uxth.w	ip, r5
 8000d54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x60>
 8000d64:	18eb      	adds	r3, r5, r3
 8000d66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d6a:	f080 811b 	bcs.w	8000fa4 <__udivmoddi4+0x28c>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 8118 	bls.w	8000fa4 <__udivmoddi4+0x28c>
 8000d74:	3f02      	subs	r7, #2
 8000d76:	442b      	add	r3, r5
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d8c:	45a4      	cmp	ip, r4
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x8c>
 8000d90:	192c      	adds	r4, r5, r4
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d96:	f080 8107 	bcs.w	8000fa8 <__udivmoddi4+0x290>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	f240 8104 	bls.w	8000fa8 <__udivmoddi4+0x290>
 8000da0:	3802      	subs	r0, #2
 8000da2:	442c      	add	r4, r5
 8000da4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000da8:	eba4 040c 	sub.w	r4, r4, ip
 8000dac:	2700      	movs	r7, #0
 8000dae:	b11e      	cbz	r6, 8000db8 <__udivmoddi4+0xa0>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c6 4300 	strd	r4, r3, [r6]
 8000db8:	4639      	mov	r1, r7
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0xbe>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80eb 	beq.w	8000f9e <__udivmoddi4+0x286>
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e9c6 0100 	strd	r0, r1, [r6]
 8000dce:	4638      	mov	r0, r7
 8000dd0:	4639      	mov	r1, r7
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f783 	clz	r7, r3
 8000dda:	2f00      	cmp	r7, #0
 8000ddc:	d147      	bne.n	8000e6e <__udivmoddi4+0x156>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0xd0>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80fa 	bhi.w	8000fdc <__udivmoddi4+0x2c4>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0303 	sbc.w	r3, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	4698      	mov	r8, r3
 8000df2:	2e00      	cmp	r6, #0
 8000df4:	d0e0      	beq.n	8000db8 <__udivmoddi4+0xa0>
 8000df6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dfa:	e7dd      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000dfc:	b902      	cbnz	r2, 8000e00 <__udivmoddi4+0xe8>
 8000dfe:	deff      	udf	#255	; 0xff
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f040 808f 	bne.w	8000f28 <__udivmoddi4+0x210>
 8000e0a:	1b49      	subs	r1, r1, r5
 8000e0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e10:	fa1f f885 	uxth.w	r8, r5
 8000e14:	2701      	movs	r7, #1
 8000e16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e1a:	0c23      	lsrs	r3, r4, #16
 8000e1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb08 f10c 	mul.w	r1, r8, ip
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x124>
 8000e2c:	18eb      	adds	r3, r5, r3
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x122>
 8000e34:	4299      	cmp	r1, r3
 8000e36:	f200 80cd 	bhi.w	8000fd4 <__udivmoddi4+0x2bc>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1a59      	subs	r1, r3, r1
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x14c>
 8000e54:	192c      	adds	r4, r5, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x14a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80b6 	bhi.w	8000fce <__udivmoddi4+0x2b6>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e79f      	b.n	8000dae <__udivmoddi4+0x96>
 8000e6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e72:	40bb      	lsls	r3, r7
 8000e74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e8c:	4325      	orrs	r5, r4
 8000e8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e92:	0c2c      	lsrs	r4, r5, #16
 8000e94:	fb08 3319 	mls	r3, r8, r9, r3
 8000e98:	fa1f fa8e 	uxth.w	sl, lr
 8000e9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ea0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eaa:	fa00 f107 	lsl.w	r1, r0, r7
 8000eae:	d90b      	bls.n	8000ec8 <__udivmoddi4+0x1b0>
 8000eb0:	eb1e 0303 	adds.w	r3, lr, r3
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb8:	f080 8087 	bcs.w	8000fca <__udivmoddi4+0x2b2>
 8000ebc:	429c      	cmp	r4, r3
 8000ebe:	f240 8084 	bls.w	8000fca <__udivmoddi4+0x2b2>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4473      	add	r3, lr
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	b2ad      	uxth	r5, r5
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ed4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ed8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000edc:	45a2      	cmp	sl, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1da>
 8000ee0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee8:	d26b      	bcs.n	8000fc2 <__udivmoddi4+0x2aa>
 8000eea:	45a2      	cmp	sl, r4
 8000eec:	d969      	bls.n	8000fc2 <__udivmoddi4+0x2aa>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4474      	add	r4, lr
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	eba4 040a 	sub.w	r4, r4, sl
 8000efe:	454c      	cmp	r4, r9
 8000f00:	46c2      	mov	sl, r8
 8000f02:	464b      	mov	r3, r9
 8000f04:	d354      	bcc.n	8000fb0 <__udivmoddi4+0x298>
 8000f06:	d051      	beq.n	8000fac <__udivmoddi4+0x294>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d069      	beq.n	8000fe0 <__udivmoddi4+0x2c8>
 8000f0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f10:	eb64 0403 	sbc.w	r4, r4, r3
 8000f14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f18:	40fd      	lsrs	r5, r7
 8000f1a:	40fc      	lsrs	r4, r7
 8000f1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f20:	e9c6 5400 	strd	r5, r4, [r6]
 8000f24:	2700      	movs	r7, #0
 8000f26:	e747      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f30:	4095      	lsls	r5, r2
 8000f32:	fa01 f002 	lsl.w	r0, r1, r2
 8000f36:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f3e:	4338      	orrs	r0, r7
 8000f40:	0c01      	lsrs	r1, r0, #16
 8000f42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f46:	fa1f f885 	uxth.w	r8, r5
 8000f4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb07 f308 	mul.w	r3, r7, r8
 8000f56:	428b      	cmp	r3, r1
 8000f58:	fa04 f402 	lsl.w	r4, r4, r2
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x256>
 8000f5e:	1869      	adds	r1, r5, r1
 8000f60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f64:	d22f      	bcs.n	8000fc6 <__udivmoddi4+0x2ae>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d92d      	bls.n	8000fc6 <__udivmoddi4+0x2ae>
 8000f6a:	3f02      	subs	r7, #2
 8000f6c:	4429      	add	r1, r5
 8000f6e:	1acb      	subs	r3, r1, r3
 8000f70:	b281      	uxth	r1, r0
 8000f72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb00 f308 	mul.w	r3, r0, r8
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d907      	bls.n	8000f96 <__udivmoddi4+0x27e>
 8000f86:	1869      	adds	r1, r5, r1
 8000f88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f8c:	d217      	bcs.n	8000fbe <__udivmoddi4+0x2a6>
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d915      	bls.n	8000fbe <__udivmoddi4+0x2a6>
 8000f92:	3802      	subs	r0, #2
 8000f94:	4429      	add	r1, r5
 8000f96:	1ac9      	subs	r1, r1, r3
 8000f98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f9c:	e73b      	b.n	8000e16 <__udivmoddi4+0xfe>
 8000f9e:	4637      	mov	r7, r6
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	e709      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000fa4:	4607      	mov	r7, r0
 8000fa6:	e6e7      	b.n	8000d78 <__udivmoddi4+0x60>
 8000fa8:	4618      	mov	r0, r3
 8000faa:	e6fb      	b.n	8000da4 <__udivmoddi4+0x8c>
 8000fac:	4541      	cmp	r1, r8
 8000fae:	d2ab      	bcs.n	8000f08 <__udivmoddi4+0x1f0>
 8000fb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fb8:	3801      	subs	r0, #1
 8000fba:	4613      	mov	r3, r2
 8000fbc:	e7a4      	b.n	8000f08 <__udivmoddi4+0x1f0>
 8000fbe:	4660      	mov	r0, ip
 8000fc0:	e7e9      	b.n	8000f96 <__udivmoddi4+0x27e>
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	e795      	b.n	8000ef2 <__udivmoddi4+0x1da>
 8000fc6:	4667      	mov	r7, ip
 8000fc8:	e7d1      	b.n	8000f6e <__udivmoddi4+0x256>
 8000fca:	4681      	mov	r9, r0
 8000fcc:	e77c      	b.n	8000ec8 <__udivmoddi4+0x1b0>
 8000fce:	3802      	subs	r0, #2
 8000fd0:	442c      	add	r4, r5
 8000fd2:	e747      	b.n	8000e64 <__udivmoddi4+0x14c>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	442b      	add	r3, r5
 8000fda:	e72f      	b.n	8000e3c <__udivmoddi4+0x124>
 8000fdc:	4638      	mov	r0, r7
 8000fde:	e708      	b.n	8000df2 <__udivmoddi4+0xda>
 8000fe0:	4637      	mov	r7, r6
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0xa0>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8000ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f001 f83d 	bl	800207c <null_ptr_check>
 8001002:	4603      	mov	r3, r0
 8001004:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8001006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d11f      	bne.n	800104e <bmp280_get_regs+0x66>
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d01c      	beq.n	800104e <bmp280_get_regs+0x66>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	789b      	ldrb	r3, [r3, #2]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d103      	bne.n	8001024 <bmp280_get_regs+0x3c>
        {
            reg_addr = reg_addr | 0x80;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001022:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len,huartI2C);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685c      	ldr	r4, [r3, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7858      	ldrb	r0, [r3, #1]
 800102c:	7bbb      	ldrb	r3, [r7, #14]
 800102e:	b29a      	uxth	r2, r3
 8001030:	7bf9      	ldrb	r1, [r7, #15]
 8001032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	4613      	mov	r3, r2
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	47a0      	blx	r4
 800103c:	4603      	mov	r3, r0
 800103e:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8001040:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <bmp280_get_regs+0x6a>
        {
            rslt = BMP280_E_COMM_FAIL;
 8001048:	23fc      	movs	r3, #252	; 0xfc
 800104a:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 800104c:	e001      	b.n	8001052 <bmp280_get_regs+0x6a>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800104e:	23ff      	movs	r3, #255	; 0xff
 8001050:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001052:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd90      	pop	{r4, r7, pc}

0800105e <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 800105e:	b5b0      	push	{r4, r5, r7, lr}
 8001060:	b08a      	sub	sp, #40	; 0x28
 8001062:	af02      	add	r7, sp, #8
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	4613      	mov	r3, r2
 800106c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b04      	cmp	r3, #4
 8001072:	d901      	bls.n	8001078 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8001074:	2304      	movs	r3, #4
 8001076:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev,huartI2C);
 8001078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800107a:	6838      	ldr	r0, [r7, #0]
 800107c:	f000 fffe 	bl	800207c <null_ptr_check>
 8001080:	4603      	mov	r3, r0
 8001082:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001084:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d150      	bne.n	800112e <bmp280_set_regs+0xd0>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d04d      	beq.n	800112e <bmp280_set_regs+0xd0>
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d04a      	beq.n	800112e <bmp280_set_regs+0xd0>
    {
        if (len != 0)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d044      	beq.n	8001128 <bmp280_set_regs+0xca>
        {
            temp_buff[0] = reg_data[0];
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	789b      	ldrb	r3, [r3, #2]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d114      	bne.n	80010d6 <bmp280_set_regs+0x78>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	76fb      	strb	r3, [r7, #27]
 80010b0:	e00d      	b.n	80010ce <bmp280_set_regs+0x70>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80010b2:	7efb      	ldrb	r3, [r7, #27]
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	781a      	ldrb	r2, [r3, #0]
 80010ba:	7efb      	ldrb	r3, [r7, #27]
 80010bc:	68f9      	ldr	r1, [r7, #12]
 80010be:	440b      	add	r3, r1
 80010c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010c8:	7efb      	ldrb	r3, [r7, #27]
 80010ca:	3301      	adds	r3, #1
 80010cc:	76fb      	strb	r3, [r7, #27]
 80010ce:	7efa      	ldrb	r2, [r7, #27]
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d3ed      	bcc.n	80010b2 <bmp280_set_regs+0x54>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d90d      	bls.n	80010f8 <bmp280_set_regs+0x9a>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f107 0110 	add.w	r1, r7, #16
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 ffea 	bl	80020be <interleave_data>
                temp_len = ((len * 2) - 1);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	3b01      	subs	r3, #1
 80010f4:	83bb      	strh	r3, [r7, #28]
 80010f6:	e001      	b.n	80010fc <bmp280_set_regs+0x9e>
            }
            else
            {
                temp_len = len;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len,huartI2C);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689c      	ldr	r4, [r3, #8]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	7858      	ldrb	r0, [r3, #1]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	7819      	ldrb	r1, [r3, #0]
 8001108:	8bbd      	ldrh	r5, [r7, #28]
 800110a:	f107 0210 	add.w	r2, r7, #16
 800110e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	462b      	mov	r3, r5
 8001114:	47a0      	blx	r4
 8001116:	4603      	mov	r3, r0
 8001118:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 800111a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d008      	beq.n	8001134 <bmp280_set_regs+0xd6>
            {
                rslt = BMP280_E_COMM_FAIL;
 8001122:	23fc      	movs	r3, #252	; 0xfc
 8001124:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8001126:	e005      	b.n	8001134 <bmp280_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8001128:	23fd      	movs	r3, #253	; 0xfd
 800112a:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 800112c:	e002      	b.n	8001134 <bmp280_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800112e:	23ff      	movs	r3, #255	; 0xff
 8001130:	77fb      	strb	r3, [r7, #31]
 8001132:	e000      	b.n	8001136 <bmp280_set_regs+0xd8>
        if (len != 0)
 8001134:	bf00      	nop
    }

    return rslt;
 8001136:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3720      	adds	r7, #32
 800113e:	46bd      	mov	sp, r7
 8001140:	bdb0      	pop	{r4, r5, r7, pc}

08001142 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af02      	add	r7, sp, #8
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 800114c:	23e0      	movs	r3, #224	; 0xe0
 800114e:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8001150:	23b6      	movs	r3, #182	; 0xb6
 8001152:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev,huartI2C);
 8001154:	6839      	ldr	r1, [r7, #0]
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 ff90 	bl	800207c <null_ptr_check>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10f      	bne.n	8001188 <bmp280_soft_reset+0x46>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev,huartI2C);
 8001168:	f107 010d 	add.w	r1, r7, #13
 800116c:	f107 000e 	add.w	r0, r7, #14
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f7ff ff71 	bl	800105e <bmp280_set_regs>
 800117c:	4603      	mov	r3, r0
 800117e:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2002      	movs	r0, #2
 8001186:	4798      	blx	r3
    }

    return rslt;
 8001188:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
    int8_t rslt;


    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 800119e:	2305      	movs	r3, #5
 80011a0:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev,huartI2C);
 80011a2:	6839      	ldr	r1, [r7, #0]
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 ff69 	bl	800207c <null_ptr_check>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d154      	bne.n	8001260 <bmp280_init+0xcc>
    {
        while (try_count)
 80011b6:	e031      	b.n	800121c <bmp280_init+0x88>
        {

            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev,huartI2C);
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	20d0      	movs	r0, #208	; 0xd0
 80011c4:	f7ff ff10 	bl	8000fe8 <bmp280_get_regs>
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]


            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 80011cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d11c      	bne.n	800120e <bmp280_init+0x7a>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 80011d8:	2b56      	cmp	r3, #86	; 0x56
 80011da:	d007      	beq.n	80011ec <bmp280_init+0x58>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b57      	cmp	r3, #87	; 0x57
 80011e2:	d003      	beq.n	80011ec <bmp280_init+0x58>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b58      	cmp	r3, #88	; 0x58
 80011ea:	d110      	bne.n	800120e <bmp280_init+0x7a>
            {
                rslt = bmp280_soft_reset(dev,huartI2C);
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffa7 	bl	8001142 <bmp280_soft_reset>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80011f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d111      	bne.n	8001224 <bmp280_init+0x90>
                {
                    rslt = get_calib_param(dev,huartI2C);
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 ff86 	bl	8002114 <get_calib_param>
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
                }
                break;
 800120c:	e00a      	b.n	8001224 <bmp280_init+0x90>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	200a      	movs	r0, #10
 8001214:	4798      	blx	r3
            --try_count;
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	3b01      	subs	r3, #1
 800121a:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1ca      	bne.n	80011b8 <bmp280_init+0x24>
 8001222:	e000      	b.n	8001226 <bmp280_init+0x92>
                break;
 8001224:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <bmp280_init+0x9c>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 800122c:	23fe      	movs	r3, #254	; 0xfe
 800122e:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8001230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d113      	bne.n	8001260 <bmp280_init+0xcc>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }


    return rslt;
 8001260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af02      	add	r7, sp, #8
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001278:	2300      	movs	r3, #0
 800127a:	753b      	strb	r3, [r7, #20]
 800127c:	2300      	movs	r3, #0
 800127e:	757b      	strb	r3, [r7, #21]

    rslt = null_ptr_check(dev,huartI2C);
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	68b8      	ldr	r0, [r7, #8]
 8001284:	f000 fefa 	bl	800207c <null_ptr_check>
 8001288:	4603      	mov	r3, r0
 800128a:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 800128c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d139      	bne.n	8001308 <bmp280_get_config+0x9c>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d036      	beq.n	8001308 <bmp280_get_config+0x9c>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev,huartI2C);
 800129a:	f107 0114 	add.w	r1, r7, #20
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2202      	movs	r2, #2
 80012a6:	20f4      	movs	r0, #244	; 0xf4
 80012a8:	f7ff fe9e 	bl	8000fe8 <bmp280_get_regs>
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80012b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d129      	bne.n	800130c <bmp280_get_config+0xa0>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 80012b8:	7d3b      	ldrb	r3, [r7, #20]
 80012ba:	095b      	lsrs	r3, r3, #5
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 80012c2:	7d3b      	ldrb	r3, [r7, #20]
 80012c4:	109b      	asrs	r3, r3, #2
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80012d2:	7d7b      	ldrb	r3, [r7, #21]
 80012d4:	095b      	lsrs	r3, r3, #5
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80012dc:	7d7b      	ldrb	r3, [r7, #21]
 80012de:	109b      	asrs	r3, r3, #2
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80012ec:	7d7b      	ldrb	r3, [r7, #21]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	332c      	adds	r3, #44	; 0x2c
 80012fe:	6810      	ldr	r0, [r2, #0]
 8001300:	6018      	str	r0, [r3, #0]
 8001302:	7912      	ldrb	r2, [r2, #4]
 8001304:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 8001306:	e001      	b.n	800130c <bmp280_get_config+0xa0>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001308:	23ff      	movs	r3, #255	; 0xff
 800130a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800130c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev,huartI2C);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	68f9      	ldr	r1, [r7, #12]
 800132a:	2000      	movs	r0, #0
 800132c:	f000 ff94 	bl	8002258 <conf_sensor>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	68b8      	ldr	r0, [r7, #8]
 800134c:	f000 fe96 	bl	800207c <null_ptr_check>
 8001350:	4603      	mov	r3, r0
 8001352:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMP280_OK)
 8001354:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d109      	bne.n	8001370 <bmp280_set_power_mode+0x36>
    {
        rslt = conf_sensor(mode, &dev->conf, dev,huartI2C);
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001362:	7bf8      	ldrb	r0, [r7, #15]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f000 ff76 	bl	8002258 <conf_sensor>
 800136c:	4603      	mov	r3, r0
 800136e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001370:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af02      	add	r7, sp, #8
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev,huartI2C);
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f000 fe71 	bl	800207c <null_ptr_check>
 800139a:	4603      	mov	r3, r0
 800139c:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 800139e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d135      	bne.n	8001412 <bmp280_get_uncomp_data+0x96>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d032      	beq.n	8001412 <bmp280_get_uncomp_data+0x96>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev,huartI2C);
 80013ac:	f107 0110 	add.w	r1, r7, #16
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2206      	movs	r2, #6
 80013b8:	20f7      	movs	r0, #247	; 0xf7
 80013ba:	f7ff fe15 	bl	8000fe8 <bmp280_get_regs>
 80013be:	4603      	mov	r3, r0
 80013c0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80013c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d120      	bne.n	800140c <bmp280_get_uncomp_data+0x90>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 80013ca:	7c3b      	ldrb	r3, [r7, #16]
 80013cc:	031a      	lsls	r2, r3, #12
 80013ce:	7c7b      	ldrb	r3, [r7, #17]
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	4313      	orrs	r3, r2
 80013d4:	7cba      	ldrb	r2, [r7, #18]
 80013d6:	0912      	lsrs	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 80013e0:	7cfb      	ldrb	r3, [r7, #19]
 80013e2:	031a      	lsls	r2, r3, #12
 80013e4:	7d3b      	ldrb	r3, [r7, #20]
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	4313      	orrs	r3, r2
 80013ea:	7d7a      	ldrb	r2, [r7, #21]
 80013ec:	0912      	lsrs	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4619      	mov	r1, r3
 8001400:	4610      	mov	r0, r2
 8001402:	f000 ffed 	bl	80023e0 <st_check_boundaries>
 8001406:	4603      	mov	r3, r0
 8001408:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 800140a:	e004      	b.n	8001416 <bmp280_get_uncomp_data+0x9a>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 800140c:	23f3      	movs	r3, #243	; 0xf3
 800140e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001410:	e001      	b.n	8001416 <bmp280_get_uncomp_data+0x9a>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001412:	23ff      	movs	r3, #255	; 0xff
 8001414:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001416:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b088      	sub	sp, #32
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	603b      	str	r3, [r7, #0]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8001430:	6839      	ldr	r1, [r7, #0]
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fe22 	bl	800207c <null_ptr_check>
 8001438:	4603      	mov	r3, r0
 800143a:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 800143c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d14f      	bne.n	80014e4 <bmp280_get_comp_temp_32bit+0xc2>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	da00      	bge.n	800144c <bmp280_get_comp_temp_32bit+0x2a>
 800144a:	3307      	adds	r3, #7
 800144c:	10db      	asrs	r3, r3, #3
 800144e:	461a      	mov	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	8a1b      	ldrh	r3, [r3, #16]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800145e:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 8001462:	2b00      	cmp	r3, #0
 8001464:	da01      	bge.n	800146a <bmp280_get_comp_temp_32bit+0x48>
 8001466:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800146a:	12db      	asrs	r3, r3, #11
 800146c:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	da00      	bge.n	8001476 <bmp280_get_comp_temp_32bit+0x54>
 8001474:	330f      	adds	r3, #15
 8001476:	111b      	asrs	r3, r3, #4
 8001478:	461a      	mov	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	8a1b      	ldrh	r3, [r3, #16]
 800147e:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	da00      	bge.n	8001488 <bmp280_get_comp_temp_32bit+0x66>
 8001486:	330f      	adds	r3, #15
 8001488:	111b      	asrs	r3, r3, #4
 800148a:	4619      	mov	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	8a1b      	ldrh	r3, [r3, #16]
 8001490:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8001492:	fb03 f302 	mul.w	r3, r3, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001496:	2b00      	cmp	r3, #0
 8001498:	da01      	bge.n	800149e <bmp280_get_comp_temp_32bit+0x7c>
 800149a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800149e:	131b      	asrs	r3, r3, #12
 80014a0:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 80014a8:	fb03 f302 	mul.w	r3, r3, r2
        var2 =
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da02      	bge.n	80014b6 <bmp280_get_comp_temp_32bit+0x94>
 80014b0:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80014b4:	333f      	adds	r3, #63	; 0x3f
 80014b6:	139b      	asrs	r3, r3, #14
 80014b8:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	441a      	add	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	3380      	adds	r3, #128	; 0x80
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da00      	bge.n	80014d6 <bmp280_get_comp_temp_32bit+0xb4>
 80014d4:	33ff      	adds	r3, #255	; 0xff
 80014d6:	121b      	asrs	r3, r3, #8
 80014d8:	461a      	mov	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	77fb      	strb	r3, [r7, #31]
 80014e2:	e004      	b.n	80014ee <bmp280_get_comp_temp_32bit+0xcc>
    }
    else
    {
        *comp_temp = 0;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 80014ea:	23f2      	movs	r3, #242	; 0xf2
 80014ec:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80014ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <bmp280_get_comp_pres_32bit>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_pres_32bit(uint32_t *comp_pres, uint32_t uncomp_pres, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b088      	sub	sp, #32
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	603b      	str	r3, [r7, #0]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8001508:	6839      	ldr	r1, [r7, #0]
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 fdb6 	bl	800207c <null_ptr_check>
 8001510:	4603      	mov	r3, r0
 8001512:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 8001514:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001518:	2b00      	cmp	r3, #0
 800151a:	f040 80e2 	bne.w	80016e2 <bmp280_get_comp_pres_32bit+0x1e8>
    {
        var1 = (((int32_t) dev->calib_param.t_fine) / 2) - (int32_t) 64000;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	0fda      	lsrs	r2, r3, #31
 8001524:	4413      	add	r3, r2
 8001526:	105b      	asrs	r3, r3, #1
 8001528:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 800152c:	61bb      	str	r3, [r7, #24]
        var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t) dev->calib_param.dig_p6);
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b00      	cmp	r3, #0
 8001532:	da00      	bge.n	8001536 <bmp280_get_comp_pres_32bit+0x3c>
 8001534:	3303      	adds	r3, #3
 8001536:	109b      	asrs	r3, r3, #2
 8001538:	461a      	mov	r2, r3
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	da00      	bge.n	8001542 <bmp280_get_comp_pres_32bit+0x48>
 8001540:	3303      	adds	r3, #3
 8001542:	109b      	asrs	r3, r3, #2
 8001544:	fb03 f302 	mul.w	r3, r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	da01      	bge.n	8001550 <bmp280_get_comp_pres_32bit+0x56>
 800154c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001550:	12db      	asrs	r3, r3, #11
 8001552:	461a      	mov	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800155a:	fb03 f302 	mul.w	r3, r3, r2
 800155e:	617b      	str	r3, [r7, #20]
        var2 = var2 + ((var1 * ((int32_t) dev->calib_param.dig_p5)) * 2);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001566:	461a      	mov	r2, r3
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fb03 f302 	mul.w	r3, r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	4413      	add	r3, r2
 8001574:	617b      	str	r3, [r7, #20]
        var2 = (var2 / 4) + (((int32_t) dev->calib_param.dig_p4) * 65536);
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2b00      	cmp	r3, #0
 800157a:	da00      	bge.n	800157e <bmp280_get_comp_pres_32bit+0x84>
 800157c:	3303      	adds	r3, #3
 800157e:	109b      	asrs	r3, r3, #2
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001588:	041b      	lsls	r3, r3, #16
 800158a:	4413      	add	r3, r2
 800158c:	617b      	str	r3, [r7, #20]
        var1 =
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001594:	461a      	mov	r2, r3
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2b00      	cmp	r3, #0
 800159a:	da00      	bge.n	800159e <bmp280_get_comp_pres_32bit+0xa4>
 800159c:	3303      	adds	r3, #3
 800159e:	109b      	asrs	r3, r3, #2
 80015a0:	4619      	mov	r1, r3
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da00      	bge.n	80015aa <bmp280_get_comp_pres_32bit+0xb0>
 80015a8:	3303      	adds	r3, #3
 80015aa:	109b      	asrs	r3, r3, #2
 80015ac:	fb03 f301 	mul.w	r3, r3, r1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	da02      	bge.n	80015ba <bmp280_get_comp_pres_32bit+0xc0>
 80015b4:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80015b8:	331f      	adds	r3, #31
 80015ba:	135b      	asrs	r3, r3, #13
 80015bc:	fb03 f302 	mul.w	r3, r3, r2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	da00      	bge.n	80015c6 <bmp280_get_comp_pres_32bit+0xcc>
 80015c4:	3307      	adds	r3, #7
 80015c6:	10db      	asrs	r3, r3, #3
 80015c8:	4619      	mov	r1, r3
             ((((int32_t) dev->calib_param.dig_p2) * var1) / 2)) / 262144;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80015d0:	461a      	mov	r2, r3
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	fb03 f302 	mul.w	r3, r3, r2
 80015d8:	0fda      	lsrs	r2, r3, #31
 80015da:	4413      	add	r3, r2
 80015dc:	105b      	asrs	r3, r3, #1
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
 80015de:	440b      	add	r3, r1
        var1 =
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da03      	bge.n	80015ec <bmp280_get_comp_pres_32bit+0xf2>
 80015e4:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 80015e8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80015ec:	149b      	asrs	r3, r3, #18
 80015ee:	61bb      	str	r3, [r7, #24]
        var1 = ((((32768 + var1)) * ((int32_t) dev->calib_param.dig_p1)) / 32768);
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	8ad2      	ldrh	r2, [r2, #22]
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	da02      	bge.n	8001608 <bmp280_get_comp_pres_32bit+0x10e>
 8001602:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001606:	337f      	adds	r3, #127	; 0x7f
 8001608:	13db      	asrs	r3, r3, #15
 800160a:	61bb      	str	r3, [r7, #24]
        *comp_pres = (uint32_t)(((int32_t)(1048576 - uncomp_pres) - (var2 / 4096)) * 3125);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	da01      	bge.n	8001616 <bmp280_get_comp_pres_32bit+0x11c>
 8001612:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001616:	131b      	asrs	r3, r3, #12
 8001618:	425b      	negs	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f640 4235 	movw	r2, #3125	; 0xc35
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 800162c:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	6013      	str	r3, [r2, #0]

        /* Avoid exception caused by division with zero */
        if (var1 != 0)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d04e      	beq.n	80016d8 <bmp280_get_comp_pres_32bit+0x1de>
        {
            /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
            if (*comp_pres < 0x80000000)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db08      	blt.n	8001654 <bmp280_get_comp_pres_32bit+0x15a>
            {
                *comp_pres = (*comp_pres << 1) / ((uint32_t) var1);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	005a      	lsls	r2, r3, #1
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fbb2 f2f3 	udiv	r2, r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e007      	b.n	8001664 <bmp280_get_comp_pres_32bit+0x16a>
            }
            else
            {
                *comp_pres = (*comp_pres / (uint32_t) var1) * 2;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	005a      	lsls	r2, r3, #1
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	601a      	str	r2, [r3, #0]
            }
            var1 = (((int32_t) dev->calib_param.dig_p9) * ((int32_t) (((*comp_pres / 8) * (*comp_pres / 8)) / 8192))) /
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800166a:	4619      	mov	r1, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	08db      	lsrs	r3, r3, #3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	08d2      	lsrs	r2, r2, #3
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	0b5b      	lsrs	r3, r3, #13
 800167e:	fb03 f301 	mul.w	r3, r3, r1
 8001682:	2b00      	cmp	r3, #0
 8001684:	da01      	bge.n	800168a <bmp280_get_comp_pres_32bit+0x190>
 8001686:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800168a:	131b      	asrs	r3, r3, #12
 800168c:	61bb      	str	r3, [r7, #24]
                   4096;
            var2 = (((int32_t) (*comp_pres / 4)) * ((int32_t) dev->calib_param.dig_p8)) / 8192;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800169c:	fb03 f302 	mul.w	r3, r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da02      	bge.n	80016aa <bmp280_get_comp_pres_32bit+0x1b0>
 80016a4:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80016a8:	331f      	adds	r3, #31
 80016aa:	135b      	asrs	r3, r3, #13
 80016ac:	617b      	str	r3, [r7, #20]
            *comp_pres = (uint32_t) ((int32_t) *comp_pres + ((var1 + var2 + dev->calib_param.dig_p7) / 16));
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	4413      	add	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 80016c0:	4413      	add	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	da00      	bge.n	80016c8 <bmp280_get_comp_pres_32bit+0x1ce>
 80016c6:	330f      	adds	r3, #15
 80016c8:	111b      	asrs	r3, r3, #4
 80016ca:	440b      	add	r3, r1
 80016cc:	461a      	mov	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	601a      	str	r2, [r3, #0]
            rslt = BMP280_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	77fb      	strb	r3, [r7, #31]
 80016d6:	e004      	b.n	80016e2 <bmp280_get_comp_pres_32bit+0x1e8>
        }
        else
        {
            *comp_pres = 0;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
            rslt = BMP280_E_32BIT_COMP_PRESS;
 80016de:	23f1      	movs	r3, #241	; 0xf1
 80016e0:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 80016e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <bmp280_get_comp_pres_64bit>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses 64 bit integers.
 */
int8_t bmp280_get_comp_pres_64bit(uint32_t *pressure, uint32_t uncomp_pres, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 80016f0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80016f4:	b08c      	sub	sp, #48	; 0x30
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
    int64_t var1, var2, p;
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8001700:	6839      	ldr	r1, [r7, #0]
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fcba 	bl	800207c <null_ptr_check>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMP280_OK)
 800170e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 81f7 	bne.w	8001b06 <bmp280_get_comp_pres_64bit+0x416>
    {
        var1 = ((int64_t) (dev->calib_param.t_fine)) - 128000;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	4619      	mov	r1, r3
 800171e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001722:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001726:	f142 34ff 	adc.w	r4, r2, #4294967295
 800172a:	e9c7 3408 	strd	r3, r4, [r7, #32]
        var2 = var1 * var1 * (int64_t) dev->calib_param.dig_p6;
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	6a3a      	ldr	r2, [r7, #32]
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	6a39      	ldr	r1, [r7, #32]
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	441a      	add	r2, r3
 8001740:	6a39      	ldr	r1, [r7, #32]
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	fba1 3403 	umull	r3, r4, r1, r3
 8001748:	4422      	add	r2, r4
 800174a:	4614      	mov	r4, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8001752:	b211      	sxth	r1, r2
 8001754:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001758:	fb01 f504 	mul.w	r5, r1, r4
 800175c:	fb03 f002 	mul.w	r0, r3, r2
 8001760:	4428      	add	r0, r5
 8001762:	fba3 3401 	umull	r3, r4, r3, r1
 8001766:	1902      	adds	r2, r0, r4
 8001768:	4614      	mov	r4, r2
 800176a:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800176e:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 = var2 + ((var1 * (int64_t) dev->calib_param.dig_p5) * 131072);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001778:	b21b      	sxth	r3, r3
 800177a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800177e:	6a3a      	ldr	r2, [r7, #32]
 8001780:	fb04 f102 	mul.w	r1, r4, r2
 8001784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001786:	fb03 f202 	mul.w	r2, r3, r2
 800178a:	1888      	adds	r0, r1, r2
 800178c:	6a3a      	ldr	r2, [r7, #32]
 800178e:	fba2 1203 	umull	r1, r2, r2, r3
 8001792:	1883      	adds	r3, r0, r2
 8001794:	461a      	mov	r2, r3
 8001796:	f04f 0500 	mov.w	r5, #0
 800179a:	f04f 0600 	mov.w	r6, #0
 800179e:	0456      	lsls	r6, r2, #17
 80017a0:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80017a4:	044d      	lsls	r5, r1, #17
 80017a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80017aa:	186b      	adds	r3, r5, r1
 80017ac:	eb46 0402 	adc.w	r4, r6, r2
 80017b0:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 = var2 + (((int64_t) dev->calib_param.dig_p4) * 34359738368);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80017ba:	b219      	sxth	r1, r3
 80017bc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80017c0:	f04f 0500 	mov.w	r5, #0
 80017c4:	f04f 0600 	mov.w	r6, #0
 80017c8:	00ce      	lsls	r6, r1, #3
 80017ca:	2500      	movs	r5, #0
 80017cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80017d0:	186b      	adds	r3, r5, r1
 80017d2:	eb46 0402 	adc.w	r4, r6, r2
 80017d6:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var1 = ((var1 * var1 * (int64_t) dev->calib_param.dig_p3) / 256) +
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	fb02 f203 	mul.w	r2, r2, r3
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	6a39      	ldr	r1, [r7, #32]
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	441a      	add	r2, r3
 80017ec:	6a39      	ldr	r1, [r7, #32]
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	fba1 3403 	umull	r3, r4, r1, r3
 80017f4:	4422      	add	r2, r4
 80017f6:	4614      	mov	r4, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 80017fe:	b211      	sxth	r1, r2
 8001800:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001804:	fb01 f504 	mul.w	r5, r1, r4
 8001808:	fb03 f002 	mul.w	r0, r3, r2
 800180c:	4428      	add	r0, r5
 800180e:	fba3 3401 	umull	r3, r4, r3, r1
 8001812:	1902      	adds	r2, r0, r4
 8001814:	4614      	mov	r4, r2
 8001816:	2b00      	cmp	r3, #0
 8001818:	f174 0200 	sbcs.w	r2, r4, #0
 800181c:	da02      	bge.n	8001824 <bmp280_get_comp_pres_64bit+0x134>
 800181e:	33ff      	adds	r3, #255	; 0xff
 8001820:	f144 0400 	adc.w	r4, r4, #0
 8001824:	f04f 0100 	mov.w	r1, #0
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	0a19      	lsrs	r1, r3, #8
 800182e:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001832:	1222      	asrs	r2, r4, #8
 8001834:	460d      	mov	r5, r1
 8001836:	4616      	mov	r6, r2
               ((var1 * (int64_t) dev->calib_param.dig_p2) * 4096);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800183e:	b21b      	sxth	r3, r3
 8001840:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001844:	6a3a      	ldr	r2, [r7, #32]
 8001846:	fb04 f102 	mul.w	r1, r4, r2
 800184a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184c:	fb03 f202 	mul.w	r2, r3, r2
 8001850:	1888      	adds	r0, r1, r2
 8001852:	6a3a      	ldr	r2, [r7, #32]
 8001854:	fba2 1203 	umull	r1, r2, r2, r3
 8001858:	1883      	adds	r3, r0, r2
 800185a:	461a      	mov	r2, r3
 800185c:	f04f 0b00 	mov.w	fp, #0
 8001860:	f04f 0c00 	mov.w	ip, #0
 8001864:	ea4f 3c02 	mov.w	ip, r2, lsl #12
 8001868:	ea4c 5c11 	orr.w	ip, ip, r1, lsr #20
 800186c:	ea4f 3b01 	mov.w	fp, r1, lsl #12
        var1 = ((var1 * var1 * (int64_t) dev->calib_param.dig_p3) / 256) +
 8001870:	eb1b 0305 	adds.w	r3, fp, r5
 8001874:	eb4c 0406 	adc.w	r4, ip, r6
 8001878:	e9c7 3408 	strd	r3, r4, [r7, #32]
        var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)dev->calib_param.dig_p1)) / 8589934592;
 800187c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001880:	1c19      	adds	r1, r3, #0
 8001882:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	8adb      	ldrh	r3, [r3, #22]
 800188a:	b29b      	uxth	r3, r3
 800188c:	f04f 0400 	mov.w	r4, #0
 8001890:	fb03 f502 	mul.w	r5, r3, r2
 8001894:	fb01 f004 	mul.w	r0, r1, r4
 8001898:	4428      	add	r0, r5
 800189a:	fba1 3403 	umull	r3, r4, r1, r3
 800189e:	1902      	adds	r2, r0, r4
 80018a0:	4614      	mov	r4, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f174 0200 	sbcs.w	r2, r4, #0
 80018a8:	da03      	bge.n	80018b2 <bmp280_get_comp_pres_64bit+0x1c2>
 80018aa:	f113 33ff 	adds.w	r3, r3, #4294967295
 80018ae:	f144 0401 	adc.w	r4, r4, #1
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	1061      	asrs	r1, r4, #1
 80018bc:	17e2      	asrs	r2, r4, #31
 80018be:	e9c7 1208 	strd	r1, r2, [r7, #32]
        if (var1 != 0)
 80018c2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80018c6:	4323      	orrs	r3, r4
 80018c8:	f000 8117 	beq.w	8001afa <bmp280_get_comp_pres_64bit+0x40a>
        {
            p = 1048576 - uncomp_pres;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80018d2:	f04f 0400 	mov.w	r4, #0
 80018d6:	e9c7 3404 	strd	r3, r4, [r7, #16]
            p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 80018da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	f04f 0400 	mov.w	r4, #0
 80018e6:	07d4      	lsls	r4, r2, #31
 80018e8:	ea44 0451 	orr.w	r4, r4, r1, lsr #1
 80018ec:	07cb      	lsls	r3, r1, #31
 80018ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80018f2:	1a5b      	subs	r3, r3, r1
 80018f4:	eb64 0402 	sbc.w	r4, r4, r2
 80018f8:	461d      	mov	r5, r3
 80018fa:	4626      	mov	r6, r4
 80018fc:	46ab      	mov	fp, r5
 80018fe:	46b4      	mov	ip, r6
 8001900:	eb1b 030b 	adds.w	r3, fp, fp
 8001904:	eb4c 040c 	adc.w	r4, ip, ip
 8001908:	469b      	mov	fp, r3
 800190a:	46a4      	mov	ip, r4
 800190c:	eb1b 0b05 	adds.w	fp, fp, r5
 8001910:	eb4c 0c06 	adc.w	ip, ip, r6
 8001914:	f04f 0100 	mov.w	r1, #0
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	ea4f 128c 	mov.w	r2, ip, lsl #6
 8001920:	ea42 629b 	orr.w	r2, r2, fp, lsr #26
 8001924:	ea4f 118b 	mov.w	r1, fp, lsl #6
 8001928:	eb1b 0b01 	adds.w	fp, fp, r1
 800192c:	eb4c 0c02 	adc.w	ip, ip, r2
 8001930:	f04f 0100 	mov.w	r1, #0
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800193c:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 8001940:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8001944:	468b      	mov	fp, r1
 8001946:	4694      	mov	ip, r2
 8001948:	eb1b 0b05 	adds.w	fp, fp, r5
 800194c:	eb4c 0c06 	adc.w	ip, ip, r6
 8001950:	f04f 0100 	mov.w	r1, #0
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800195c:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 8001960:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8001964:	468b      	mov	fp, r1
 8001966:	4694      	mov	ip, r2
 8001968:	eb1b 0005 	adds.w	r0, fp, r5
 800196c:	eb4c 0106 	adc.w	r1, ip, r6
 8001970:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001974:	f7ff f968 	bl	8000c48 <__aeabi_ldivmod>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	e9c7 3404 	strd	r3, r4, [r7, #16]
            var1 = (((int64_t) dev->calib_param.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001986:	b21d      	sxth	r5, r3
 8001988:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800198c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f174 0200 	sbcs.w	r2, r4, #0
 8001996:	da06      	bge.n	80019a6 <bmp280_get_comp_pres_64bit+0x2b6>
 8001998:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	185b      	adds	r3, r3, r1
 80019a2:	eb44 0402 	adc.w	r4, r4, r2
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	0b59      	lsrs	r1, r3, #13
 80019b0:	ea41 41c4 	orr.w	r1, r1, r4, lsl #19
 80019b4:	1362      	asrs	r2, r4, #13
 80019b6:	460b      	mov	r3, r1
 80019b8:	4614      	mov	r4, r2
 80019ba:	fb03 f106 	mul.w	r1, r3, r6
 80019be:	fb05 f204 	mul.w	r2, r5, r4
 80019c2:	1888      	adds	r0, r1, r2
 80019c4:	fba5 1203 	umull	r1, r2, r5, r3
 80019c8:	1883      	adds	r3, r0, r2
 80019ca:	461a      	mov	r2, r3
 80019cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f174 0000 	sbcs.w	r0, r4, #0
 80019d6:	da06      	bge.n	80019e6 <bmp280_get_comp_pres_64bit+0x2f6>
 80019d8:	f641 75ff 	movw	r5, #8191	; 0x1fff
 80019dc:	f04f 0600 	mov.w	r6, #0
 80019e0:	195b      	adds	r3, r3, r5
 80019e2:	eb44 0406 	adc.w	r4, r4, r6
 80019e6:	f04f 0500 	mov.w	r5, #0
 80019ea:	f04f 0600 	mov.w	r6, #0
 80019ee:	0b5d      	lsrs	r5, r3, #13
 80019f0:	ea45 45c4 	orr.w	r5, r5, r4, lsl #19
 80019f4:	1366      	asrs	r6, r4, #13
 80019f6:	462b      	mov	r3, r5
 80019f8:	4634      	mov	r4, r6
 80019fa:	fb03 f502 	mul.w	r5, r3, r2
 80019fe:	fb01 f004 	mul.w	r0, r1, r4
 8001a02:	4428      	add	r0, r5
 8001a04:	fba1 3403 	umull	r3, r4, r1, r3
 8001a08:	1902      	adds	r2, r0, r4
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f174 0200 	sbcs.w	r2, r4, #0
 8001a12:	da06      	bge.n	8001a22 <bmp280_get_comp_pres_64bit+0x332>
 8001a14:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	185b      	adds	r3, r3, r1
 8001a1e:	eb44 0402 	adc.w	r4, r4, r2
 8001a22:	f04f 0100 	mov.w	r1, #0
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	0e59      	lsrs	r1, r3, #25
 8001a2c:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 8001a30:	1662      	asrs	r2, r4, #25
 8001a32:	e9c7 1208 	strd	r1, r2, [r7, #32]
            var2 = (((int64_t) dev->calib_param.dig_p8) * p) / 524288;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	fb04 f102 	mul.w	r1, r4, r2
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	fb03 f202 	mul.w	r2, r3, r2
 8001a4e:	440a      	add	r2, r1
 8001a50:	6939      	ldr	r1, [r7, #16]
 8001a52:	fba1 3403 	umull	r3, r4, r1, r3
 8001a56:	4422      	add	r2, r4
 8001a58:	4614      	mov	r4, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f174 0200 	sbcs.w	r2, r4, #0
 8001a60:	da05      	bge.n	8001a6e <bmp280_get_comp_pres_64bit+0x37e>
 8001a62:	492c      	ldr	r1, [pc, #176]	; (8001b14 <bmp280_get_comp_pres_64bit+0x424>)
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	185b      	adds	r3, r3, r1
 8001a6a:	eb44 0402 	adc.w	r4, r4, r2
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	0cd9      	lsrs	r1, r3, #19
 8001a78:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
 8001a7c:	14e2      	asrs	r2, r4, #19
 8001a7e:	e9c7 1206 	strd	r1, r2, [r7, #24]
            p = ((p + var1 + var2) / 256) + (((int64_t)dev->calib_param.dig_p7) * 16);
 8001a82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a86:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001a8a:	18cd      	adds	r5, r1, r3
 8001a8c:	eb42 0604 	adc.w	r6, r2, r4
 8001a90:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a94:	1959      	adds	r1, r3, r5
 8001a96:	eb44 0206 	adc.w	r2, r4, r6
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4614      	mov	r4, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f174 0200 	sbcs.w	r2, r4, #0
 8001aa4:	da02      	bge.n	8001aac <bmp280_get_comp_pres_64bit+0x3bc>
 8001aa6:	33ff      	adds	r3, #255	; 0xff
 8001aa8:	f144 0400 	adc.w	r4, r4, #0
 8001aac:	f04f 0100 	mov.w	r1, #0
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	0a19      	lsrs	r1, r3, #8
 8001ab6:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001aba:	1222      	asrs	r2, r4, #8
 8001abc:	460d      	mov	r5, r1
 8001abe:	4616      	mov	r6, r2
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001ac6:	b219      	sxth	r1, r3
 8001ac8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001acc:	f04f 0b00 	mov.w	fp, #0
 8001ad0:	f04f 0c00 	mov.w	ip, #0
 8001ad4:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8001ad8:	ea4c 7c11 	orr.w	ip, ip, r1, lsr #28
 8001adc:	ea4f 1b01 	mov.w	fp, r1, lsl #4
 8001ae0:	eb1b 0305 	adds.w	r3, fp, r5
 8001ae4:	eb4c 0406 	adc.w	r4, ip, r6
 8001ae8:	e9c7 3404 	strd	r3, r4, [r7, #16]
            *pressure = (uint32_t)p;
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	601a      	str	r2, [r3, #0]
            rslt = BMP280_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001af8:	e005      	b.n	8001b06 <bmp280_get_comp_pres_64bit+0x416>
        }
        else
        {
            *pressure = 0;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
            rslt = BMP280_E_64BIT_COMP_PRESS;
 8001b00:	23f0      	movs	r3, #240	; 0xf0
 8001b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    return rslt;
 8001b06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3730      	adds	r7, #48	; 0x30
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8001b14:	0007ffff 	.word	0x0007ffff

08001b18 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001b18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b1c:	b08a      	sub	sp, #40	; 0x28
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	603b      	str	r3, [r7, #0]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 faa6 	bl	800207c <null_ptr_check>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001b36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 80ac 	bne.w	8001c98 <bmp280_get_comp_temp_double+0x180>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001b40:	68b8      	ldr	r0, [r7, #8]
 8001b42:	f7fe fcef 	bl	8000524 <__aeabi_i2d>
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b5c      	ldr	r3, [pc, #368]	; (8001cbc <bmp280_get_comp_temp_double+0x1a4>)
 8001b4c:	f7fe fe7e 	bl	800084c <__aeabi_ddiv>
 8001b50:	4603      	mov	r3, r0
 8001b52:	460c      	mov	r4, r1
 8001b54:	4625      	mov	r5, r4
 8001b56:	461c      	mov	r4, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	8a1b      	ldrh	r3, [r3, #16]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fcd1 	bl	8000504 <__aeabi_ui2d>
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	4b56      	ldr	r3, [pc, #344]	; (8001cc0 <bmp280_get_comp_temp_double+0x1a8>)
 8001b68:	f7fe fe70 	bl	800084c <__aeabi_ddiv>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4620      	mov	r0, r4
 8001b72:	4629      	mov	r1, r5
 8001b74:	f7fe fb88 	bl	8000288 <__aeabi_dsub>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	460c      	mov	r4, r1
 8001b7c:	4625      	mov	r5, r4
 8001b7e:	461c      	mov	r4, r3
               ((double) dev->calib_param.dig_t2);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fccc 	bl	8000524 <__aeabi_i2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001b90:	4620      	mov	r0, r4
 8001b92:	4629      	mov	r1, r5
 8001b94:	f7fe fd30 	bl	80005f8 <__aeabi_dmul>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	460c      	mov	r4, r1
 8001b9c:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001ba0:	68b8      	ldr	r0, [r7, #8]
 8001ba2:	f7fe fcbf 	bl	8000524 <__aeabi_i2d>
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001bae:	f7fe fe4d 	bl	800084c <__aeabi_ddiv>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	460c      	mov	r4, r1
 8001bb6:	4625      	mov	r5, r4
 8001bb8:	461c      	mov	r4, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	8a1b      	ldrh	r3, [r3, #16]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fca0 	bl	8000504 <__aeabi_ui2d>
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b3e      	ldr	r3, [pc, #248]	; (8001cc4 <bmp280_get_comp_temp_double+0x1ac>)
 8001bca:	f7fe fe3f 	bl	800084c <__aeabi_ddiv>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	f7fe fb57 	bl	8000288 <__aeabi_dsub>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	460c      	mov	r4, r1
 8001bde:	4625      	mov	r5, r4
 8001be0:	461c      	mov	r4, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001be2:	68b8      	ldr	r0, [r7, #8]
 8001be4:	f7fe fc9e 	bl	8000524 <__aeabi_i2d>
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001bf0:	f7fe fe2c 	bl	800084c <__aeabi_ddiv>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4690      	mov	r8, r2
 8001bfa:	4699      	mov	r9, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	8a1b      	ldrh	r3, [r3, #16]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc7f 	bl	8000504 <__aeabi_ui2d>
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <bmp280_get_comp_temp_double+0x1ac>)
 8001c0c:	f7fe fe1e 	bl	800084c <__aeabi_ddiv>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4640      	mov	r0, r8
 8001c16:	4649      	mov	r1, r9
 8001c18:	f7fe fb36 	bl	8000288 <__aeabi_dsub>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001c20:	4620      	mov	r0, r4
 8001c22:	4629      	mov	r1, r5
 8001c24:	f7fe fce8 	bl	80005f8 <__aeabi_dmul>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	4625      	mov	r5, r4
 8001c2e:	461c      	mov	r4, r3
            ((double) dev->calib_param.dig_t3);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fc74 	bl	8000524 <__aeabi_i2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
        var2 =
 8001c40:	4620      	mov	r0, r4
 8001c42:	4629      	mov	r1, r5
 8001c44:	f7fe fcd8 	bl	80005f8 <__aeabi_dmul>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	e9c7 3404 	strd	r3, r4, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001c50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c58:	f7fe fb18 	bl	800028c <__adddf3>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	460c      	mov	r4, r1
 8001c60:	4618      	mov	r0, r3
 8001c62:	4621      	mov	r1, r4
 8001c64:	f7fe ff78 	bl	8000b58 <__aeabi_d2iz>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 8001c6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c76:	f7fe fb09 	bl	800028c <__adddf3>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	4618      	mov	r0, r3
 8001c80:	4621      	mov	r1, r4
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <bmp280_get_comp_temp_double+0x1b0>)
 8001c88:	f7fe fde0 	bl	800084c <__aeabi_ddiv>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	460c      	mov	r4, r1
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	e9c2 3400 	strd	r3, r4, [r2]
 8001c96:	e009      	b.n	8001cac <bmp280_get_comp_temp_double+0x194>
    }
    else
    {
        *temperature = 0;
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	f04f 0400 	mov.w	r4, #0
 8001ca2:	e9c2 3400 	strd	r3, r4, [r2]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 8001ca6:	23ef      	movs	r3, #239	; 0xef
 8001ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001cac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cba:	bf00      	nop
 8001cbc:	40d00000 	.word	0x40d00000
 8001cc0:	40900000 	.word	0x40900000
 8001cc4:	40c00000 	.word	0x40c00000
 8001cc8:	40b40000 	.word	0x40b40000
 8001ccc:	00000000 	.word	0x00000000

08001cd0 <bmp280_get_comp_pres_double>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses double floating precision.
 */
int8_t bmp280_get_comp_pres_double(double *pressure, uint32_t uncomp_pres, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001cd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cd4:	b08a      	sub	sp, #40	; 0x28
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	603b      	str	r3, [r7, #0]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8001ce0:	6839      	ldr	r1, [r7, #0]
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f9ca 	bl	800207c <null_ptr_check>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001cee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f040 81ba 	bne.w	800206c <bmp280_get_comp_pres_double+0x39c>
    {
        var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fc11 	bl	8000524 <__aeabi_i2d>
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d0a:	f7fe fd9f 	bl	800084c <__aeabi_ddiv>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	460c      	mov	r4, r1
 8001d12:	4618      	mov	r0, r3
 8001d14:	4621      	mov	r1, r4
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	4bc5      	ldr	r3, [pc, #788]	; (8002030 <bmp280_get_comp_pres_double+0x360>)
 8001d1c:	f7fe fab4 	bl	8000288 <__aeabi_dsub>
 8001d20:	4603      	mov	r3, r0
 8001d22:	460c      	mov	r4, r1
 8001d24:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d30:	f7fe fc62 	bl	80005f8 <__aeabi_dmul>
 8001d34:	4603      	mov	r3, r0
 8001d36:	460c      	mov	r4, r1
 8001d38:	4625      	mov	r5, r4
 8001d3a:	461c      	mov	r4, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fbee 	bl	8000524 <__aeabi_i2d>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	4629      	mov	r1, r5
 8001d50:	f7fe fc52 	bl	80005f8 <__aeabi_dmul>
 8001d54:	4603      	mov	r3, r0
 8001d56:	460c      	mov	r4, r1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	4bb4      	ldr	r3, [pc, #720]	; (8002034 <bmp280_get_comp_pres_double+0x364>)
 8001d62:	f7fe fd73 	bl	800084c <__aeabi_ddiv>
 8001d66:	4603      	mov	r3, r0
 8001d68:	460c      	mov	r4, r1
 8001d6a:	e9c7 3404 	strd	r3, r4, [r7, #16]
        var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fbd5 	bl	8000524 <__aeabi_i2d>
 8001d7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d7e:	f7fe fc3b 	bl	80005f8 <__aeabi_dmul>
 8001d82:	4603      	mov	r3, r0
 8001d84:	460c      	mov	r4, r1
 8001d86:	4618      	mov	r0, r3
 8001d88:	4621      	mov	r1, r4
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	f7fe fa7d 	bl	800028c <__adddf3>
 8001d92:	4603      	mov	r3, r0
 8001d94:	460c      	mov	r4, r1
 8001d96:	461a      	mov	r2, r3
 8001d98:	4623      	mov	r3, r4
 8001d9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d9e:	f7fe fa75 	bl	800028c <__adddf3>
 8001da2:	4603      	mov	r3, r0
 8001da4:	460c      	mov	r4, r1
 8001da6:	e9c7 3404 	strd	r3, r4, [r7, #16]
        var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	4ba2      	ldr	r3, [pc, #648]	; (8002038 <bmp280_get_comp_pres_double+0x368>)
 8001db0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001db4:	f7fe fd4a 	bl	800084c <__aeabi_ddiv>
 8001db8:	4603      	mov	r3, r0
 8001dba:	460c      	mov	r4, r1
 8001dbc:	4625      	mov	r5, r4
 8001dbe:	461c      	mov	r4, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fbac 	bl	8000524 <__aeabi_i2d>
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	4b9a      	ldr	r3, [pc, #616]	; (800203c <bmp280_get_comp_pres_double+0x36c>)
 8001dd2:	f7fe fc11 	bl	80005f8 <__aeabi_dmul>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4620      	mov	r0, r4
 8001ddc:	4629      	mov	r1, r5
 8001dde:	f7fe fa55 	bl	800028c <__adddf3>
 8001de2:	4603      	mov	r3, r0
 8001de4:	460c      	mov	r4, r1
 8001de6:	e9c7 3404 	strd	r3, r4, [r7, #16]
        var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fb97 	bl	8000524 <__aeabi_i2d>
 8001df6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dfa:	f7fe fbfd 	bl	80005f8 <__aeabi_dmul>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	460c      	mov	r4, r1
 8001e02:	4618      	mov	r0, r3
 8001e04:	4621      	mov	r1, r4
 8001e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e0a:	f7fe fbf5 	bl	80005f8 <__aeabi_dmul>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460c      	mov	r4, r1
 8001e12:	4618      	mov	r0, r3
 8001e14:	4621      	mov	r1, r4
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	4b89      	ldr	r3, [pc, #548]	; (8002040 <bmp280_get_comp_pres_double+0x370>)
 8001e1c:	f7fe fd16 	bl	800084c <__aeabi_ddiv>
 8001e20:	4603      	mov	r3, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	4625      	mov	r5, r4
 8001e26:	461c      	mov	r4, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb78 	bl	8000524 <__aeabi_i2d>
 8001e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e38:	f7fe fbde 	bl	80005f8 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4620      	mov	r0, r4
 8001e42:	4629      	mov	r1, r5
 8001e44:	f7fe fa22 	bl	800028c <__adddf3>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	4621      	mov	r1, r4
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	4b7a      	ldr	r3, [pc, #488]	; (8002040 <bmp280_get_comp_pres_double+0x370>)
 8001e56:	f7fe fcf9 	bl	800084c <__aeabi_ddiv>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	460c      	mov	r4, r1
 8001e5e:	e9c7 3406 	strd	r3, r4, [r7, #24]
               524288.0;
        var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	4b73      	ldr	r3, [pc, #460]	; (8002034 <bmp280_get_comp_pres_double+0x364>)
 8001e68:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e6c:	f7fe fcee 	bl	800084c <__aeabi_ddiv>
 8001e70:	4603      	mov	r3, r0
 8001e72:	460c      	mov	r4, r1
 8001e74:	4618      	mov	r0, r3
 8001e76:	4621      	mov	r1, r4
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	4b71      	ldr	r3, [pc, #452]	; (8002044 <bmp280_get_comp_pres_double+0x374>)
 8001e7e:	f7fe fa05 	bl	800028c <__adddf3>
 8001e82:	4603      	mov	r3, r0
 8001e84:	460c      	mov	r4, r1
 8001e86:	4625      	mov	r5, r4
 8001e88:	461c      	mov	r4, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	8adb      	ldrh	r3, [r3, #22]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fb38 	bl	8000504 <__aeabi_ui2d>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4620      	mov	r0, r4
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	f7fe fbac 	bl	80005f8 <__aeabi_dmul>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	460c      	mov	r4, r1
 8001ea4:	e9c7 3406 	strd	r3, r4, [r7, #24]

        *pressure = 1048576.0 - (double)uncomp_pres;
 8001ea8:	68b8      	ldr	r0, [r7, #8]
 8001eaa:	f7fe fb2b 	bl	8000504 <__aeabi_ui2d>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	460c      	mov	r4, r1
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4623      	mov	r3, r4
 8001eb6:	f04f 0000 	mov.w	r0, #0
 8001eba:	4963      	ldr	r1, [pc, #396]	; (8002048 <bmp280_get_comp_pres_double+0x378>)
 8001ebc:	f7fe f9e4 	bl	8000288 <__aeabi_dsub>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	460c      	mov	r4, r1
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	e9c2 3400 	strd	r3, r4, [r2]
        if (var1 < 0 || var1 > 0)
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ed6:	f7fe fe01 	bl	8000adc <__aeabi_dcmplt>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10b      	bne.n	8001ef8 <bmp280_get_comp_pres_double+0x228>
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001eec:	f7fe fe14 	bl	8000b18 <__aeabi_dcmpgt>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80b0 	beq.w	8002058 <bmp280_get_comp_pres_double+0x388>
        {
            *pressure = (*pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	4b52      	ldr	r3, [pc, #328]	; (800204c <bmp280_get_comp_pres_double+0x37c>)
 8001f04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f08:	f7fe fca0 	bl	800084c <__aeabi_ddiv>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4620      	mov	r0, r4
 8001f12:	4629      	mov	r1, r5
 8001f14:	f7fe f9b8 	bl	8000288 <__aeabi_dsub>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	460c      	mov	r4, r1
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	4621      	mov	r1, r4
 8001f20:	a341      	add	r3, pc, #260	; (adr r3, 8002028 <bmp280_get_comp_pres_double+0x358>)
 8001f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f26:	f7fe fb67 	bl	80005f8 <__aeabi_dmul>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	460c      	mov	r4, r1
 8001f2e:	4618      	mov	r0, r3
 8001f30:	4621      	mov	r1, r4
 8001f32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f36:	f7fe fc89 	bl	800084c <__aeabi_ddiv>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	460c      	mov	r4, r1
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	e9c2 3400 	strd	r3, r4, [r2]
            var1 = ((double)dev->calib_param.dig_p9) * (*pressure) * (*pressure) / 2147483648.0;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe faea 	bl	8000524 <__aeabi_i2d>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4623      	mov	r3, r4
 8001f5a:	f7fe fb4d 	bl	80005f8 <__aeabi_dmul>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	460c      	mov	r4, r1
 8001f62:	4618      	mov	r0, r3
 8001f64:	4621      	mov	r1, r4
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4623      	mov	r3, r4
 8001f70:	f7fe fb42 	bl	80005f8 <__aeabi_dmul>
 8001f74:	4603      	mov	r3, r0
 8001f76:	460c      	mov	r4, r1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	4b33      	ldr	r3, [pc, #204]	; (8002050 <bmp280_get_comp_pres_double+0x380>)
 8001f82:	f7fe fc63 	bl	800084c <__aeabi_ddiv>
 8001f86:	4603      	mov	r3, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	e9c7 3406 	strd	r3, r4, [r7, #24]
            var2 = (*pressure) * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fac2 	bl	8000524 <__aeabi_i2d>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	f7fe fb26 	bl	80005f8 <__aeabi_dmul>
 8001fac:	4603      	mov	r3, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <bmp280_get_comp_pres_double+0x364>)
 8001fba:	f7fe fc47 	bl	800084c <__aeabi_ddiv>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	e9c7 3404 	strd	r3, r4, [r7, #16]
            *pressure = *pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001fcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fd0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fd4:	f7fe f95a 	bl	800028c <__adddf3>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4690      	mov	r8, r2
 8001fde:	4699      	mov	r9, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fa9c 	bl	8000524 <__aeabi_i2d>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4640      	mov	r0, r8
 8001ff2:	4649      	mov	r1, r9
 8001ff4:	f7fe f94a 	bl	800028c <__adddf3>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <bmp280_get_comp_pres_double+0x384>)
 8002006:	f7fe fc21 	bl	800084c <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4620      	mov	r0, r4
 8002010:	4629      	mov	r1, r5
 8002012:	f7fe f93b 	bl	800028c <__adddf3>
 8002016:	4603      	mov	r3, r0
 8002018:	460c      	mov	r4, r1
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	e9c2 3400 	strd	r3, r4, [r2]
 8002020:	e024      	b.n	800206c <bmp280_get_comp_pres_double+0x39c>
 8002022:	bf00      	nop
 8002024:	f3af 8000 	nop.w
 8002028:	00000000 	.word	0x00000000
 800202c:	40b86a00 	.word	0x40b86a00
 8002030:	40ef4000 	.word	0x40ef4000
 8002034:	40e00000 	.word	0x40e00000
 8002038:	40100000 	.word	0x40100000
 800203c:	40f00000 	.word	0x40f00000
 8002040:	41200000 	.word	0x41200000
 8002044:	3ff00000 	.word	0x3ff00000
 8002048:	41300000 	.word	0x41300000
 800204c:	40b00000 	.word	0x40b00000
 8002050:	41e00000 	.word	0x41e00000
 8002054:	40300000 	.word	0x40300000
        }
        else
        {
            *pressure = 0;
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	f04f 0400 	mov.w	r4, #0
 8002062:	e9c2 3400 	strd	r3, r4, [r2]
            rslt = BMP280_E_DOUBLE_COMP_PRESS;
 8002066:	23ee      	movs	r3, #238	; 0xee
 8002068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return rslt;
 800206c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002070:	4618      	mov	r0, r3
 8002072:	3728      	adds	r7, #40	; 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800207a:	bf00      	nop

0800207c <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00b      	beq.n	80020a4 <null_ptr_check+0x28>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <null_ptr_check+0x28>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <null_ptr_check+0x28>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <null_ptr_check+0x2e>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 80020a4:	23ff      	movs	r3, #255	; 0xff
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e001      	b.n	80020ae <null_ptr_check+0x32>
    }
    else
    {
        rslt = BMP280_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80020ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80020be:	b480      	push	{r7}
 80020c0:	b087      	sub	sp, #28
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 80020cc:	2301      	movs	r3, #1
 80020ce:	75fb      	strb	r3, [r7, #23]
 80020d0:	e016      	b.n	8002100 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	441a      	add	r2, r3
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	3b01      	subs	r3, #1
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	440b      	add	r3, r1
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	441a      	add	r2, r3
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4619      	mov	r1, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	440b      	add	r3, r1
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80020fa:	7dfb      	ldrb	r3, [r7, #23]
 80020fc:	3301      	adds	r3, #1
 80020fe:	75fb      	strb	r3, [r7, #23]
 8002100:	7dfa      	ldrb	r2, [r7, #23]
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	429a      	cmp	r2, r3
 8002106:	d3e4      	bcc.n	80020d2 <interleave_data+0x14>
    }
}
 8002108:	bf00      	nop
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08c      	sub	sp, #48	; 0x30
 8002118:	af02      	add	r7, sp, #8
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	611a      	str	r2, [r3, #16]
 800212e:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev,huartI2C);
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ffa2 	bl	800207c <null_ptr_check>
 8002138:	4603      	mov	r3, r0
 800213a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 800213e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 8082 	bne.w	800224c <get_calib_param+0x138>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev,huartI2C);
 8002148:	f107 010c 	add.w	r1, r7, #12
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2218      	movs	r2, #24
 8002154:	2088      	movs	r0, #136	; 0x88
 8002156:	f7fe ff47 	bl	8000fe8 <bmp280_get_regs>
 800215a:	4603      	mov	r3, r0
 800215c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8002160:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002164:	2b00      	cmp	r3, #0
 8002166:	d171      	bne.n	800224c <get_calib_param+0x138>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8002168:	7b7b      	ldrb	r3, [r7, #13]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	b21a      	sxth	r2, r3
 800216e:	7b3b      	ldrb	r3, [r7, #12]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21b      	sxth	r3, r3
 8002176:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	b21a      	sxth	r2, r3
 8002182:	7bbb      	ldrb	r3, [r7, #14]
 8002184:	b21b      	sxth	r3, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 800218e:	7c7b      	ldrb	r3, [r7, #17]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	b21a      	sxth	r2, r3
 8002194:	7c3b      	ldrb	r3, [r7, #16]
 8002196:	b21b      	sxth	r3, r3
 8002198:	4313      	orrs	r3, r2
 800219a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	b21a      	sxth	r2, r3
 80021a6:	7cbb      	ldrb	r3, [r7, #18]
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 80021b4:	7d7b      	ldrb	r3, [r7, #21]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	7d3b      	ldrb	r3, [r7, #20]
 80021bc:	b21b      	sxth	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	7dbb      	ldrb	r3, [r7, #22]
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 80021d8:	7e7b      	ldrb	r3, [r7, #25]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	b21a      	sxth	r2, r3
 80021de:	7e3b      	ldrb	r3, [r7, #24]
 80021e0:	b21b      	sxth	r3, r3
 80021e2:	4313      	orrs	r3, r2
 80021e4:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 80021ea:	7efb      	ldrb	r3, [r7, #27]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	b21a      	sxth	r2, r3
 80021f0:	7ebb      	ldrb	r3, [r7, #26]
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 80021fc:	7f7b      	ldrb	r3, [r7, #29]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	b21a      	sxth	r2, r3
 8002202:	7f3b      	ldrb	r3, [r7, #28]
 8002204:	b21b      	sxth	r3, r3
 8002206:	4313      	orrs	r3, r2
 8002208:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 800220e:	7ffb      	ldrb	r3, [r7, #31]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	b21a      	sxth	r2, r3
 8002214:	7fbb      	ldrb	r3, [r7, #30]
 8002216:	b21b      	sxth	r3, r3
 8002218:	4313      	orrs	r3, r2
 800221a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8002220:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	b21a      	sxth	r2, r3
 8002228:	f897 3020 	ldrb.w	r3, [r7, #32]
 800222c:	b21b      	sxth	r3, r3
 800222e:	4313      	orrs	r3, r2
 8002230:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8002236:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	b21a      	sxth	r2, r3
 800223e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002242:	b21b      	sxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 800224c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002250:	4618      	mov	r0, r3
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af02      	add	r7, sp, #8
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8002268:	2300      	movs	r3, #0
 800226a:	753b      	strb	r3, [r7, #20]
 800226c:	2300      	movs	r3, #0
 800226e:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8002270:	4b5a      	ldr	r3, [pc, #360]	; (80023dc <conf_sensor+0x184>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev,huartI2C);
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff feff 	bl	800207c <null_ptr_check>
 800227e:	4603      	mov	r3, r0
 8002280:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8002282:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 809d 	bne.w	80023c6 <conf_sensor+0x16e>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8099 	beq.w	80023c6 <conf_sensor+0x16e>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev,huartI2C);
 8002294:	f107 0114 	add.w	r1, r7, #20
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	20f4      	movs	r0, #244	; 0xf4
 80022a2:	f7fe fea1 	bl	8000fe8 <bmp280_get_regs>
 80022a6:	4603      	mov	r3, r0
 80022a8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80022aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 808c 	bne.w	80023cc <conf_sensor+0x174>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev,huartI2C);
 80022b4:	6839      	ldr	r1, [r7, #0]
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe ff43 	bl	8001142 <bmp280_soft_reset>
 80022bc:	4603      	mov	r3, r0
 80022be:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 80022c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f040 8081 	bne.w	80023cc <conf_sensor+0x174>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 80022ca:	7d3b      	ldrb	r3, [r7, #20]
 80022cc:	b25b      	sxtb	r3, r3
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	b25a      	sxtb	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	015b      	lsls	r3, r3, #5
 80022da:	b25b      	sxtb	r3, r3
 80022dc:	4313      	orrs	r3, r2
 80022de:	b25b      	sxtb	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 80022e4:	7d3b      	ldrb	r3, [r7, #20]
 80022e6:	b25b      	sxtb	r3, r3
 80022e8:	f023 031c 	bic.w	r3, r3, #28
 80022ec:	b25a      	sxtb	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	785b      	ldrb	r3, [r3, #1]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	f003 031c 	and.w	r3, r3, #28
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b25b      	sxtb	r3, r3
 8002300:	b2db      	uxtb	r3, r3
 8002302:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8002304:	7d7b      	ldrb	r3, [r7, #21]
 8002306:	b25b      	sxtb	r3, r3
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	b25a      	sxtb	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	789b      	ldrb	r3, [r3, #2]
 8002312:	015b      	lsls	r3, r3, #5
 8002314:	b25b      	sxtb	r3, r3
 8002316:	4313      	orrs	r3, r2
 8002318:	b25b      	sxtb	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 800231e:	7d7b      	ldrb	r3, [r7, #21]
 8002320:	b25b      	sxtb	r3, r3
 8002322:	f023 031c 	bic.w	r3, r3, #28
 8002326:	b25a      	sxtb	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	78db      	ldrb	r3, [r3, #3]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	b25b      	sxtb	r3, r3
 8002330:	f003 031c 	and.w	r3, r3, #28
 8002334:	b25b      	sxtb	r3, r3
 8002336:	4313      	orrs	r3, r2
 8002338:	b25b      	sxtb	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 800233e:	7d7b      	ldrb	r3, [r7, #21]
 8002340:	b25b      	sxtb	r3, r3
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	b25a      	sxtb	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	791b      	ldrb	r3, [r3, #4]
 800234c:	b25b      	sxtb	r3, r3
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	b25b      	sxtb	r3, r3
 8002354:	4313      	orrs	r3, r2
 8002356:	b25b      	sxtb	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev,huartI2C);
 800235c:	f107 0114 	add.w	r1, r7, #20
 8002360:	f107 0010 	add.w	r0, r7, #16
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f7fe fe77 	bl	800105e <bmp280_set_regs>
 8002370:	4603      	mov	r3, r0
 8002372:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8002374:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d127      	bne.n	80023cc <conf_sensor+0x174>
                {
                    dev->conf = *conf;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	332c      	adds	r3, #44	; 0x2c
 8002382:	6810      	ldr	r0, [r2, #0]
 8002384:	6018      	str	r0, [r3, #0]
 8002386:	7912      	ldrb	r2, [r2, #4]
 8002388:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01d      	beq.n	80023cc <conf_sensor+0x174>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8002390:	7d3b      	ldrb	r3, [r7, #20]
 8002392:	b25b      	sxtb	r3, r3
 8002394:	f023 0303 	bic.w	r3, r3, #3
 8002398:	b25a      	sxtb	r2, r3
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b25b      	sxtb	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev,huartI2C);
 80023ac:	f107 0114 	add.w	r1, r7, #20
 80023b0:	f107 0010 	add.w	r0, r7, #16
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f7fe fe4f 	bl	800105e <bmp280_set_regs>
 80023c0:	4603      	mov	r3, r0
 80023c2:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80023c4:	e002      	b.n	80023cc <conf_sensor+0x174>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80023c6:	23ff      	movs	r3, #255	; 0xff
 80023c8:	75fb      	strb	r3, [r7, #23]
 80023ca:	e000      	b.n	80023ce <conf_sensor+0x176>
        if (rslt == BMP280_OK)
 80023cc:	bf00      	nop
    }

    return rslt;
 80023ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	0800c820 	.word	0x0800c820

080023e0 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	dd03      	ble.n	80023fc <st_check_boundaries+0x1c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a15      	ldr	r2, [pc, #84]	; (800244c <st_check_boundaries+0x6c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	dd09      	ble.n	8002410 <st_check_boundaries+0x30>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	dd03      	ble.n	800240a <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	4a11      	ldr	r2, [pc, #68]	; (800244c <st_check_boundaries+0x6c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	dd02      	ble.n	8002410 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 800240a:	23f4      	movs	r3, #244	; 0xf4
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	e015      	b.n	800243c <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	dd03      	ble.n	800241e <st_check_boundaries+0x3e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a0c      	ldr	r2, [pc, #48]	; (800244c <st_check_boundaries+0x6c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	dd02      	ble.n	8002424 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 800241e:	23f6      	movs	r3, #246	; 0xf6
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e00b      	b.n	800243c <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	dd03      	ble.n	8002432 <st_check_boundaries+0x52>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	4a07      	ldr	r2, [pc, #28]	; (800244c <st_check_boundaries+0x6c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	dd02      	ble.n	8002438 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8002432:	23f5      	movs	r3, #245	; 0xf5
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	e001      	b.n	800243c <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800243c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	000fffef 	.word	0x000fffef

08002450 <reset_Buffer>:
 */


#include <drivers/BNO055/BNO055.h>

void reset_Buffer(void){
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
	buffer[0] = 0;
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <reset_Buffer+0x44>)
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <reset_Buffer+0x44>)
 800245c:	2200      	movs	r2, #0
 800245e:	705a      	strb	r2, [r3, #1]
	buffer[2] = 0;
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <reset_Buffer+0x44>)
 8002462:	2200      	movs	r2, #0
 8002464:	709a      	strb	r2, [r3, #2]
	buffer[3] = 0;
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <reset_Buffer+0x44>)
 8002468:	2200      	movs	r2, #0
 800246a:	70da      	strb	r2, [r3, #3]
	buffer[4] = 0;
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <reset_Buffer+0x44>)
 800246e:	2200      	movs	r2, #0
 8002470:	711a      	strb	r2, [r3, #4]
	buffer[5] = 0;
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <reset_Buffer+0x44>)
 8002474:	2200      	movs	r2, #0
 8002476:	715a      	strb	r2, [r3, #5]
	buffer[6] = 0;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <reset_Buffer+0x44>)
 800247a:	2200      	movs	r2, #0
 800247c:	719a      	strb	r2, [r3, #6]
	buffer[7] = 0;
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <reset_Buffer+0x44>)
 8002480:	2200      	movs	r2, #0
 8002482:	71da      	strb	r2, [r3, #7]
	buffer[8] = 0;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <reset_Buffer+0x44>)
 8002486:	2200      	movs	r2, #0
 8002488:	721a      	strb	r2, [r3, #8]
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	20000228 	.word	0x20000228

08002498 <BNO055_Chip_ID_Check>:

int8_t BNO055_Chip_ID_Check(I2C_HandleTypeDef *huart) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	uint8_t chip_id;
	int8_t rslt;
	reset_Buffer();
 80024a0:	f7ff ffd6 	bl	8002450 <reset_Buffer>
	rslt = read8(huart, BNO055_READ_ADDR, BNO055_CHIP_ID_ADDR, &chip_id);
 80024a4:	f107 030e 	add.w	r3, r7, #14
 80024a8:	2200      	movs	r2, #0
 80024aa:	2151      	movs	r1, #81	; 0x51
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f002 f8ad 	bl	800460c <read8>
 80024b2:	4603      	mov	r3, r0
 80024b4:	73fb      	strb	r3, [r7, #15]
	if (rslt == HAL_OK) {
 80024b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d107      	bne.n	80024ce <BNO055_Chip_ID_Check+0x36>
		if (chip_id == BNO055_ID) {
 80024be:	7bbb      	ldrb	r3, [r7, #14]
 80024c0:	2ba0      	cmp	r3, #160	; 0xa0
 80024c2:	d101      	bne.n	80024c8 <BNO055_Chip_ID_Check+0x30>
			return BNO055_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e004      	b.n	80024d2 <BNO055_Chip_ID_Check+0x3a>
		} else
			return BNO055_E_DEV_NOT_FOUND;
 80024c8:	f06f 0312 	mvn.w	r3, #18
 80024cc:	e001      	b.n	80024d2 <BNO055_Chip_ID_Check+0x3a>
	} else{
		return rslt;
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
	}


}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <BNO055_Init>:

int8_t BNO055_Init(I2C_HandleTypeDef *huart, bno055_opmode_t mode,uint8_t delay_time) {
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	70fb      	strb	r3, [r7, #3]
 80024e6:	4613      	mov	r3, r2
 80024e8:	70bb      	strb	r3, [r7, #2]
	int8_t rslt;
	rslt = BNO055_Chip_ID_Check(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ffd4 	bl	8002498 <BNO055_Chip_ID_Check>
 80024f0:	4603      	mov	r3, r0
 80024f2:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 80024f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <BNO055_Init+0x28>
		return rslt;
 80024fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002500:	e00c      	b.n	800251c <BNO055_Init+0x42>
	}

	//TODO: Add counter to count try. and try 5 times
	rslt = BNO055_SetMode(huart, mode);
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	4619      	mov	r1, r3
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f936 	bl	8002778 <BNO055_SetMode>
 800250c:	4603      	mov	r3, r0
 800250e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(delay_time);
 8002510:	78bb      	ldrb	r3, [r7, #2]
 8002512:	4618      	mov	r0, r3
 8002514:	f002 ffa0 	bl	8005458 <HAL_Delay>
	return rslt;
 8002518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	0000      	movs	r0, r0
	...

08002528 <BNO055_Read_Qua>:
	eulerXYZ[2] = (float) data_read[2] / 16.0;

	return BNO055_OK;
}

int8_t BNO055_Read_Qua(I2C_HandleTypeDef *huart,double *quaternionWXYZ) {
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t temp;
	rslt = BNO055_Chip_ID_Check(huart);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ffb0 	bl	8002498 <BNO055_Chip_ID_Check>
 8002538:	4603      	mov	r3, r0
 800253a:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 800253c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <BNO055_Read_Qua+0x22>
		return rslt;
 8002544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002548:	e10a      	b.n	8002760 <BNO055_Read_Qua+0x238>
	}

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_W_LSB_ADDR, &temp);
 800254a:	f107 030e 	add.w	r3, r7, #14
 800254e:	2220      	movs	r2, #32
 8002550:	2151      	movs	r1, #81	; 0x51
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f002 f85a 	bl	800460c <read8>
 8002558:	4603      	mov	r3, r0
 800255a:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 800255c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <BNO055_Read_Qua+0x42>
		return rslt;
 8002564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002568:	e0fa      	b.n	8002760 <BNO055_Read_Qua+0x238>
	buffer[1] = temp;
 800256a:	7bba      	ldrb	r2, [r7, #14]
 800256c:	4b80      	ldr	r3, [pc, #512]	; (8002770 <BNO055_Read_Qua+0x248>)
 800256e:	705a      	strb	r2, [r3, #1]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_W_MSB_ADDR, &temp);
 8002570:	f107 030e 	add.w	r3, r7, #14
 8002574:	2221      	movs	r2, #33	; 0x21
 8002576:	2151      	movs	r1, #81	; 0x51
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f002 f847 	bl	800460c <read8>
 800257e:	4603      	mov	r3, r0
 8002580:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <BNO055_Read_Qua+0x68>
		return rslt;
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258e:	e0e7      	b.n	8002760 <BNO055_Read_Qua+0x238>
	buffer[2] = temp;
 8002590:	7bba      	ldrb	r2, [r7, #14]
 8002592:	4b77      	ldr	r3, [pc, #476]	; (8002770 <BNO055_Read_Qua+0x248>)
 8002594:	709a      	strb	r2, [r3, #2]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_X_LSB_ADDR, &temp);
 8002596:	f107 030e 	add.w	r3, r7, #14
 800259a:	2222      	movs	r2, #34	; 0x22
 800259c:	2151      	movs	r1, #81	; 0x51
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f002 f834 	bl	800460c <read8>
 80025a4:	4603      	mov	r3, r0
 80025a6:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80025a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <BNO055_Read_Qua+0x8e>
		return rslt;
 80025b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b4:	e0d4      	b.n	8002760 <BNO055_Read_Qua+0x238>
	buffer[3] = temp;
 80025b6:	7bba      	ldrb	r2, [r7, #14]
 80025b8:	4b6d      	ldr	r3, [pc, #436]	; (8002770 <BNO055_Read_Qua+0x248>)
 80025ba:	70da      	strb	r2, [r3, #3]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_X_MSB_ADDR, &temp);
 80025bc:	f107 030e 	add.w	r3, r7, #14
 80025c0:	2223      	movs	r2, #35	; 0x23
 80025c2:	2151      	movs	r1, #81	; 0x51
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f002 f821 	bl	800460c <read8>
 80025ca:	4603      	mov	r3, r0
 80025cc:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80025ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <BNO055_Read_Qua+0xb4>
		return rslt;
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	e0c1      	b.n	8002760 <BNO055_Read_Qua+0x238>
	buffer[4] = temp;
 80025dc:	7bba      	ldrb	r2, [r7, #14]
 80025de:	4b64      	ldr	r3, [pc, #400]	; (8002770 <BNO055_Read_Qua+0x248>)
 80025e0:	711a      	strb	r2, [r3, #4]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_Y_LSB_ADDR, &temp);
 80025e2:	f107 030e 	add.w	r3, r7, #14
 80025e6:	2224      	movs	r2, #36	; 0x24
 80025e8:	2151      	movs	r1, #81	; 0x51
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f002 f80e 	bl	800460c <read8>
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80025f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <BNO055_Read_Qua+0xda>
		return rslt;
 80025fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002600:	e0ae      	b.n	8002760 <BNO055_Read_Qua+0x238>
	buffer[5] = temp;
 8002602:	7bba      	ldrb	r2, [r7, #14]
 8002604:	4b5a      	ldr	r3, [pc, #360]	; (8002770 <BNO055_Read_Qua+0x248>)
 8002606:	715a      	strb	r2, [r3, #5]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_Y_MSB_ADDR, &temp);
 8002608:	f107 030e 	add.w	r3, r7, #14
 800260c:	2225      	movs	r2, #37	; 0x25
 800260e:	2151      	movs	r1, #81	; 0x51
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f001 fffb 	bl	800460c <read8>
 8002616:	4603      	mov	r3, r0
 8002618:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <BNO055_Read_Qua+0x100>
		return rslt;
 8002622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002626:	e09b      	b.n	8002760 <BNO055_Read_Qua+0x238>
	buffer[6] = temp;
 8002628:	7bba      	ldrb	r2, [r7, #14]
 800262a:	4b51      	ldr	r3, [pc, #324]	; (8002770 <BNO055_Read_Qua+0x248>)
 800262c:	719a      	strb	r2, [r3, #6]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_Z_LSB_ADDR, &temp);
 800262e:	f107 030e 	add.w	r3, r7, #14
 8002632:	2226      	movs	r2, #38	; 0x26
 8002634:	2151      	movs	r1, #81	; 0x51
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f001 ffe8 	bl	800460c <read8>
 800263c:	4603      	mov	r3, r0
 800263e:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <BNO055_Read_Qua+0x126>
		return rslt;
 8002648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264c:	e088      	b.n	8002760 <BNO055_Read_Qua+0x238>
	buffer[7] = temp;
 800264e:	7bba      	ldrb	r2, [r7, #14]
 8002650:	4b47      	ldr	r3, [pc, #284]	; (8002770 <BNO055_Read_Qua+0x248>)
 8002652:	71da      	strb	r2, [r3, #7]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_Z_MSB_ADDR, &temp);
 8002654:	f107 030e 	add.w	r3, r7, #14
 8002658:	2227      	movs	r2, #39	; 0x27
 800265a:	2151      	movs	r1, #81	; 0x51
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f001 ffd5 	bl	800460c <read8>
 8002662:	4603      	mov	r3, r0
 8002664:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8002666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <BNO055_Read_Qua+0x14c>
		return rslt;
 800266e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002672:	e075      	b.n	8002760 <BNO055_Read_Qua+0x238>
	buffer[8] = temp;
 8002674:	7bba      	ldrb	r2, [r7, #14]
 8002676:	4b3e      	ldr	r3, [pc, #248]	; (8002770 <BNO055_Read_Qua+0x248>)
 8002678:	721a      	strb	r2, [r3, #8]

	//TODO: Check NDOF OR Other modes if they supports Quaternion

	data_read[0] = (buffer[1]) | ((buffer[2]) << 8);
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <BNO055_Read_Qua+0x248>)
 800267c:	785b      	ldrb	r3, [r3, #1]
 800267e:	b21a      	sxth	r2, r3
 8002680:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <BNO055_Read_Qua+0x248>)
 8002682:	789b      	ldrb	r3, [r3, #2]
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	b21b      	sxth	r3, r3
 8002688:	4313      	orrs	r3, r2
 800268a:	b21a      	sxth	r2, r3
 800268c:	4b39      	ldr	r3, [pc, #228]	; (8002774 <BNO055_Read_Qua+0x24c>)
 800268e:	801a      	strh	r2, [r3, #0]
	data_read[1] = (buffer[3]) | ((buffer[4]) << 8);
 8002690:	4b37      	ldr	r3, [pc, #220]	; (8002770 <BNO055_Read_Qua+0x248>)
 8002692:	78db      	ldrb	r3, [r3, #3]
 8002694:	b21a      	sxth	r2, r3
 8002696:	4b36      	ldr	r3, [pc, #216]	; (8002770 <BNO055_Read_Qua+0x248>)
 8002698:	791b      	ldrb	r3, [r3, #4]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	b21b      	sxth	r3, r3
 800269e:	4313      	orrs	r3, r2
 80026a0:	b21a      	sxth	r2, r3
 80026a2:	4b34      	ldr	r3, [pc, #208]	; (8002774 <BNO055_Read_Qua+0x24c>)
 80026a4:	805a      	strh	r2, [r3, #2]
	data_read[2] = (buffer[5]) | ((buffer[6]) << 8);
 80026a6:	4b32      	ldr	r3, [pc, #200]	; (8002770 <BNO055_Read_Qua+0x248>)
 80026a8:	795b      	ldrb	r3, [r3, #5]
 80026aa:	b21a      	sxth	r2, r3
 80026ac:	4b30      	ldr	r3, [pc, #192]	; (8002770 <BNO055_Read_Qua+0x248>)
 80026ae:	799b      	ldrb	r3, [r3, #6]
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	b21b      	sxth	r3, r3
 80026b4:	4313      	orrs	r3, r2
 80026b6:	b21a      	sxth	r2, r3
 80026b8:	4b2e      	ldr	r3, [pc, #184]	; (8002774 <BNO055_Read_Qua+0x24c>)
 80026ba:	809a      	strh	r2, [r3, #4]
	data_read[3] = (buffer[7]) | ((buffer[8]) << 8);
 80026bc:	4b2c      	ldr	r3, [pc, #176]	; (8002770 <BNO055_Read_Qua+0x248>)
 80026be:	79db      	ldrb	r3, [r3, #7]
 80026c0:	b21a      	sxth	r2, r3
 80026c2:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <BNO055_Read_Qua+0x248>)
 80026c4:	7a1b      	ldrb	r3, [r3, #8]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	b21a      	sxth	r2, r3
 80026ce:	4b29      	ldr	r3, [pc, #164]	; (8002774 <BNO055_Read_Qua+0x24c>)
 80026d0:	80da      	strh	r2, [r3, #6]

	quaternionWXYZ[0] = (double) data_read[0] / 16383.0;
 80026d2:	4b28      	ldr	r3, [pc, #160]	; (8002774 <BNO055_Read_Qua+0x24c>)
 80026d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd ff23 	bl	8000524 <__aeabi_i2d>
 80026de:	a322      	add	r3, pc, #136	; (adr r3, 8002768 <BNO055_Read_Qua+0x240>)
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	f7fe f8b2 	bl	800084c <__aeabi_ddiv>
 80026e8:	4603      	mov	r3, r0
 80026ea:	460c      	mov	r4, r1
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	e9c2 3400 	strd	r3, r4, [r2]
	quaternionWXYZ[1] = (double) data_read[1] / 16383.0;
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <BNO055_Read_Qua+0x24c>)
 80026f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd ff13 	bl	8000524 <__aeabi_i2d>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f103 0508 	add.w	r5, r3, #8
 8002704:	a318      	add	r3, pc, #96	; (adr r3, 8002768 <BNO055_Read_Qua+0x240>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	f7fe f89f 	bl	800084c <__aeabi_ddiv>
 800270e:	4603      	mov	r3, r0
 8002710:	460c      	mov	r4, r1
 8002712:	e9c5 3400 	strd	r3, r4, [r5]
	quaternionWXYZ[2] = (double) data_read[2] / 16383.0;
 8002716:	4b17      	ldr	r3, [pc, #92]	; (8002774 <BNO055_Read_Qua+0x24c>)
 8002718:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd ff01 	bl	8000524 <__aeabi_i2d>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f103 0510 	add.w	r5, r3, #16
 8002728:	a30f      	add	r3, pc, #60	; (adr r3, 8002768 <BNO055_Read_Qua+0x240>)
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	f7fe f88d 	bl	800084c <__aeabi_ddiv>
 8002732:	4603      	mov	r3, r0
 8002734:	460c      	mov	r4, r1
 8002736:	e9c5 3400 	strd	r3, r4, [r5]
	quaternionWXYZ[3] = (double) data_read[3] / 16383.0;
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <BNO055_Read_Qua+0x24c>)
 800273c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd feef 	bl	8000524 <__aeabi_i2d>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f103 0518 	add.w	r5, r3, #24
 800274c:	a306      	add	r3, pc, #24	; (adr r3, 8002768 <BNO055_Read_Qua+0x240>)
 800274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002752:	f7fe f87b 	bl	800084c <__aeabi_ddiv>
 8002756:	4603      	mov	r3, r0
 8002758:	460c      	mov	r4, r1
 800275a:	e9c5 3400 	strd	r3, r4, [r5]

	return BNO055_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bdb0      	pop	{r4, r5, r7, pc}
 8002768:	00000000 	.word	0x00000000
 800276c:	40cfff80 	.word	0x40cfff80
 8002770:	20000228 	.word	0x20000228
 8002774:	20000218 	.word	0x20000218

08002778 <BNO055_SetMode>:
	}

	return BNO055_E_EMPTY_FUNCTION;
}

int8_t BNO055_SetMode(I2C_HandleTypeDef *huart,bno055_opmode_t mode){
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	70fb      	strb	r3, [r7, #3]
	int8_t rslt;
	rslt = BNO055_Chip_ID_Check(huart);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff fe87 	bl	8002498 <BNO055_Chip_ID_Check>
 800278a:	4603      	mov	r3, r0
 800278c:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 800278e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <BNO055_SetMode+0x24>
		return rslt;
 8002796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279a:	e012      	b.n	80027c2 <BNO055_SetMode+0x4a>
	}

	rslt = write8(huart, BNO055_WRITE_ADDR, BNO055_OPR_MODE_ADDR, mode);
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	223d      	movs	r2, #61	; 0x3d
 80027a0:	2150      	movs	r1, #80	; 0x50
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f001 ff0c 	bl	80045c0 <write8>
 80027a8:	4603      	mov	r3, r0
 80027aa:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 80027ac:	2014      	movs	r0, #20
 80027ae:	f002 fe53 	bl	8005458 <HAL_Delay>
	if(rslt == HAL_OK)
 80027b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <BNO055_SetMode+0x46>
		return BNO055_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e001      	b.n	80027c2 <BNO055_SetMode+0x4a>
	else
		return BNO055_E_SET_MODE_FAIL;
 80027be:	f06f 0314 	mvn.w	r3, #20
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <init_imu>:
 */

#include "imu.h"


int8_t init_imu(IMU *imu,I2C_HandleTypeDef *huartI2C){
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	imu->eulerXYZ[0] = 0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
	imu->eulerXYZ[1] = 0;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	605a      	str	r2, [r3, #4]
	imu->eulerXYZ[2] = 0;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]

	imu->quaternionWXYZ[0] = 0;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	f04f 0400 	mov.w	r4, #0
 80027f8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	imu->quaternionWXYZ[1] = 0;
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	f04f 0400 	mov.w	r4, #0
 8002806:	e9c2 3406 	strd	r3, r4, [r2, #24]
	imu->quaternionWXYZ[2] = 0;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	f04f 0400 	mov.w	r4, #0
 8002814:	e9c2 3408 	strd	r3, r4, [r2, #32]
	imu->quaternionWXYZ[3] = 0;
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	f04f 0400 	mov.w	r4, #0
 8002822:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	imu->accelXYZ[0] = 0;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
	imu->accelXYZ[1] = 0;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	635a      	str	r2, [r3, #52]	; 0x34
	imu->accelXYZ[2] = 0;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	639a      	str	r2, [r3, #56]	; 0x38

	imu->magXYZ[0] = 0;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	63da      	str	r2, [r3, #60]	; 0x3c
	imu->magXYZ[1] = 0;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
	imu->magXYZ[2] = 0;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	645a      	str	r2, [r3, #68]	; 0x44

	imu->liaXYZ[0] = 0;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	649a      	str	r2, [r3, #72]	; 0x48
	imu->liaXYZ[1] = 0;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	64da      	str	r2, [r3, #76]	; 0x4c
	imu->liaXYZ[2] = 0;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	651a      	str	r2, [r3, #80]	; 0x50

	imu->grvXYZ[0] = 0;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
	imu->grvXYZ[1] = 0;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	659a      	str	r2, [r3, #88]	; 0x58
	imu->grvXYZ[2] = 0;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	65da      	str	r2, [r3, #92]	; 0x5c

	imu->gyrXYZ[0] = 0;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	661a      	str	r2, [r3, #96]	; 0x60
	imu->gyrXYZ[1] = 0;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	665a      	str	r2, [r3, #100]	; 0x64
	imu->gyrXYZ[2] = 0;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	669a      	str	r2, [r3, #104]	; 0x68

	imu->ypr[0] = 0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	66da      	str	r2, [r3, #108]	; 0x6c
	imu->ypr[1] = 0;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	671a      	str	r2, [r3, #112]	; 0x70
	imu->ypr[2] = 0;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	675a      	str	r2, [r3, #116]	; 0x74

	imu->yaw_dps = 0.0f;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	67da      	str	r2, [r3, #124]	; 0x7c

	imu->deltaT = 0.0f;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	imu->last_read_time = 0;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#ifdef Selected_IMU_BNO055

	rslt = BNO055_Init(huartI2C, OPERATION_MODE_NDOF, 10);
 80028d0:	220a      	movs	r2, #10
 80028d2:	210c      	movs	r1, #12
 80028d4:	6838      	ldr	r0, [r7, #0]
 80028d6:	f7ff fe00 	bl	80024da <BNO055_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	73fb      	strb	r3, [r7, #15]
	if(rslt != BNO055_OK){
 80028de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <init_imu+0x120>
		return rslt;
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ea:	e05c      	b.n	80029a6 <init_imu+0x1da>
#endif

#ifdef Selected_BAR_BMP280

	//init Temp
	temp32 = 0;
 80028ec:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <init_imu+0x1e4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
	temp = 0;
 80028f2:	4a30      	ldr	r2, [pc, #192]	; (80029b4 <init_imu+0x1e8>)
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	f04f 0400 	mov.w	r4, #0
 80028fc:	e9c2 3400 	strd	r3, r4, [r2]

	//init Barometer
	/* Map the delay function pointer with the function responsible for implementing the delay */
	bmp.delay_ms = delay_ms;
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <init_imu+0x1ec>)
 8002902:	4a2e      	ldr	r2, [pc, #184]	; (80029bc <init_imu+0x1f0>)
 8002904:	60da      	str	r2, [r3, #12]

	/* Assign device I2C address based on the status of SDO pin (GND for PRIMARY(0x76) & VDD for SECONDARY(0x77)) */
	bmp.dev_id = BMP280_ADDR_R;
 8002906:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <init_imu+0x1ec>)
 8002908:	22ed      	movs	r2, #237	; 0xed
 800290a:	705a      	strb	r2, [r3, #1]

	/* Select the interface mode as I2C */
	bmp.intf = BMP280_I2C_INTF;
 800290c:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <init_imu+0x1ec>)
 800290e:	2201      	movs	r2, #1
 8002910:	709a      	strb	r2, [r3, #2]

	/* Map the I2C read & write function pointer with the functions responsible for I2C bus transfer */
	bmp.read = i2c_reg_read;
 8002912:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <init_imu+0x1ec>)
 8002914:	4a2a      	ldr	r2, [pc, #168]	; (80029c0 <init_imu+0x1f4>)
 8002916:	605a      	str	r2, [r3, #4]
	bmp.write = i2c_reg_write;
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <init_imu+0x1ec>)
 800291a:	4a2a      	ldr	r2, [pc, #168]	; (80029c4 <init_imu+0x1f8>)
 800291c:	609a      	str	r2, [r3, #8]

	rslt = bmp280_init(&bmp, huartI2C);
 800291e:	6839      	ldr	r1, [r7, #0]
 8002920:	4825      	ldr	r0, [pc, #148]	; (80029b8 <init_imu+0x1ec>)
 8002922:	f7fe fc37 	bl	8001194 <bmp280_init>
 8002926:	4603      	mov	r3, r0
 8002928:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 800292a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <init_imu+0x16c>
		return rslt;
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	e036      	b.n	80029a6 <init_imu+0x1da>
	}

	rslt = bmp280_get_config(&conf, &bmp, huartI2C);
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	491f      	ldr	r1, [pc, #124]	; (80029b8 <init_imu+0x1ec>)
 800293c:	4822      	ldr	r0, [pc, #136]	; (80029c8 <init_imu+0x1fc>)
 800293e:	f7fe fc95 	bl	800126c <bmp280_get_config>
 8002942:	4603      	mov	r3, r0
 8002944:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8002946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <init_imu+0x188>
		return rslt;
 800294e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002952:	e028      	b.n	80029a6 <init_imu+0x1da>
	}
	conf.filter = BMP280_FILTER_COEFF_2;
 8002954:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <init_imu+0x1fc>)
 8002956:	2201      	movs	r2, #1
 8002958:	70da      	strb	r2, [r3, #3]
	conf.os_temp = BMP280_OS_4X;
 800295a:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <init_imu+0x1fc>)
 800295c:	2203      	movs	r2, #3
 800295e:	701a      	strb	r2, [r3, #0]
	/* Pressure oversampling set at 4x */
	conf.os_pres = BMP280_OS_4X;
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <init_imu+0x1fc>)
 8002962:	2203      	movs	r2, #3
 8002964:	705a      	strb	r2, [r3, #1]

	/* Setting the output data rate as 1HZ(1000ms) */
	conf.odr = BMP280_ODR_1000_MS;
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <init_imu+0x1fc>)
 8002968:	2205      	movs	r2, #5
 800296a:	709a      	strb	r2, [r3, #2]

	rslt = bmp280_set_config(&conf, &bmp, huartI2C);
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	4912      	ldr	r1, [pc, #72]	; (80029b8 <init_imu+0x1ec>)
 8002970:	4815      	ldr	r0, [pc, #84]	; (80029c8 <init_imu+0x1fc>)
 8002972:	f7fe fcd1 	bl	8001318 <bmp280_set_config>
 8002976:	4603      	mov	r3, r0
 8002978:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 800297a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <init_imu+0x1bc>
		return rslt;
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	e00e      	b.n	80029a6 <init_imu+0x1da>
	}

	/* Always set the power mode after setting the configuration */
	rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp, huartI2C);
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	490b      	ldr	r1, [pc, #44]	; (80029b8 <init_imu+0x1ec>)
 800298c:	2003      	movs	r0, #3
 800298e:	f7fe fcd4 	bl	800133a <bmp280_set_power_mode>
 8002992:	4603      	mov	r3, r0
 8002994:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8002996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <init_imu+0x1d8>
		return rslt;
 800299e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a2:	e000      	b.n	80029a6 <init_imu+0x1da>
	}

/* #ifdef Selected_BAR_BMP280 */
#endif

	return IMU_INIT_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd90      	pop	{r4, r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200002ec 	.word	0x200002ec
 80029b4:	200002d8 	.word	0x200002d8
 80029b8:	20000298 	.word	0x20000298
 80029bc:	08002e95 	.word	0x08002e95
 80029c0:	08002ee1 	.word	0x08002ee1
 80029c4:	08002eab 	.word	0x08002eab
 80029c8:	20000240 	.word	0x20000240

080029cc <read_imu>:

int8_t read_imu(IMU *imu,I2C_HandleTypeDef *huartI2C,KUSBEGI_FLAGS *kusbegi_flags){
 80029cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ce:	ed2d 8b02 	vpush	{d8}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
//		kusbegi_flags->FLAG_IMU_EUL_R_OK = 0;
//		return rslt;
//	}
//	kusbegi_flags->FLAG_IMU_EUL_R_OK = 1;

	rslt = BNO055_Read_Qua(huartI2C, imu->quaternionWXYZ);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3310      	adds	r3, #16
 80029e0:	4619      	mov	r1, r3
 80029e2:	68b8      	ldr	r0, [r7, #8]
 80029e4:	f7ff fda0 	bl	8002528 <BNO055_Read_Qua>
 80029e8:	4603      	mov	r3, r0
 80029ea:	75fb      	strb	r3, [r7, #23]
	if (rslt != BNO055_OK) {
 80029ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <read_imu+0x34>
		kusbegi_flags->FLAG_IMU_QUA_R_OK = 0;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	711a      	strb	r2, [r3, #4]
		return rslt;
 80029fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029fe:	e1ac      	b.n	8002d5a <read_imu+0x38e>
	}
	kusbegi_flags->FLAG_IMU_QUA_R_OK = 1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	711a      	strb	r2, [r3, #4]
//	imu->ypr[2] = (-1.0f) * imu->eulerXYZ[1];
//	imu->ypr[0] = imu->eulerXYZ[0];
//	imu->ypr[1] = (1.0f) * imu->eulerXYZ[2];
//	imu->yaw_dps =(-1.0f) * imu->gyrXYZ[2];

	float old_yaw = imu->ypr[0];
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a0a:	613b      	str	r3, [r7, #16]



	imu->ypr[0] = (float)atan2(
			2.0
					* (imu->quaternionWXYZ[1] * imu->quaternionWXYZ[2]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4623      	mov	r3, r4
 8002a1c:	f7fd fdec 	bl	80005f8 <__aeabi_dmul>
 8002a20:	4603      	mov	r3, r0
 8002a22:	460c      	mov	r4, r1
 8002a24:	461d      	mov	r5, r3
 8002a26:	4626      	mov	r6, r4
							+ imu->quaternionWXYZ[0] * imu->quaternionWXYZ[3]),
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002a34:	461a      	mov	r2, r3
 8002a36:	4623      	mov	r3, r4
 8002a38:	f7fd fdde 	bl	80005f8 <__aeabi_dmul>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	460c      	mov	r4, r1
 8002a40:	461a      	mov	r2, r3
 8002a42:	4623      	mov	r3, r4
 8002a44:	4628      	mov	r0, r5
 8002a46:	4631      	mov	r1, r6
 8002a48:	f7fd fc20 	bl	800028c <__adddf3>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	460c      	mov	r4, r1
 8002a50:	4618      	mov	r0, r3
 8002a52:	4621      	mov	r1, r4
	imu->ypr[0] = (float)atan2(
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	f7fd fc18 	bl	800028c <__adddf3>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	460c      	mov	r4, r1
 8002a60:	ec44 3b18 	vmov	d8, r3, r4
			imu->quaternionWXYZ[0] * imu->quaternionWXYZ[0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4623      	mov	r3, r4
 8002a74:	f7fd fdc0 	bl	80005f8 <__aeabi_dmul>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	460c      	mov	r4, r1
 8002a7c:	461d      	mov	r5, r3
 8002a7e:	4626      	mov	r6, r4
					+ imu->quaternionWXYZ[1] * imu->quaternionWXYZ[1]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4623      	mov	r3, r4
 8002a90:	f7fd fdb2 	bl	80005f8 <__aeabi_dmul>
 8002a94:	4603      	mov	r3, r0
 8002a96:	460c      	mov	r4, r1
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4623      	mov	r3, r4
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	4631      	mov	r1, r6
 8002aa0:	f7fd fbf4 	bl	800028c <__adddf3>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	461d      	mov	r5, r3
 8002aaa:	4626      	mov	r6, r4
					- imu->quaternionWXYZ[2] * imu->quaternionWXYZ[2]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4623      	mov	r3, r4
 8002abc:	f7fd fd9c 	bl	80005f8 <__aeabi_dmul>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	4628      	mov	r0, r5
 8002aca:	4631      	mov	r1, r6
 8002acc:	f7fd fbdc 	bl	8000288 <__aeabi_dsub>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	460c      	mov	r4, r1
 8002ad4:	461d      	mov	r5, r3
 8002ad6:	4626      	mov	r6, r4
					- imu->quaternionWXYZ[3] * imu->quaternionWXYZ[3]);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	f7fd fd86 	bl	80005f8 <__aeabi_dmul>
 8002aec:	4603      	mov	r3, r0
 8002aee:	460c      	mov	r4, r1
	imu->ypr[0] = (float)atan2(
 8002af0:	461a      	mov	r2, r3
 8002af2:	4623      	mov	r3, r4
 8002af4:	4628      	mov	r0, r5
 8002af6:	4631      	mov	r1, r6
 8002af8:	f7fd fbc6 	bl	8000288 <__aeabi_dsub>
 8002afc:	4603      	mov	r3, r0
 8002afe:	460c      	mov	r4, r1
 8002b00:	ec44 3b17 	vmov	d7, r3, r4
 8002b04:	eeb0 1a47 	vmov.f32	s2, s14
 8002b08:	eef0 1a67 	vmov.f32	s3, s15
 8002b0c:	eeb0 0a48 	vmov.f32	s0, s16
 8002b10:	eef0 0a68 	vmov.f32	s1, s17
 8002b14:	f008 fc24 	bl	800b360 <atan2>
 8002b18:	ec54 3b10 	vmov	r3, r4, d0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	4621      	mov	r1, r4
 8002b20:	f7fe f842 	bl	8000ba8 <__aeabi_d2f>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	66da      	str	r2, [r3, #108]	; 0x6c


	imu->ypr[2] = (float) -sin(
			2.0
					* (imu->quaternionWXYZ[1] * imu->quaternionWXYZ[3]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002b36:	461a      	mov	r2, r3
 8002b38:	4623      	mov	r3, r4
 8002b3a:	f7fd fd5d 	bl	80005f8 <__aeabi_dmul>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	460c      	mov	r4, r1
 8002b42:	461d      	mov	r5, r3
 8002b44:	4626      	mov	r6, r4
							- imu->quaternionWXYZ[0] * imu->quaternionWXYZ[2]));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002b52:	461a      	mov	r2, r3
 8002b54:	4623      	mov	r3, r4
 8002b56:	f7fd fd4f 	bl	80005f8 <__aeabi_dmul>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	460c      	mov	r4, r1
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4623      	mov	r3, r4
 8002b62:	4628      	mov	r0, r5
 8002b64:	4631      	mov	r1, r6
 8002b66:	f7fd fb8f 	bl	8000288 <__aeabi_dsub>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	4618      	mov	r0, r3
 8002b70:	4621      	mov	r1, r4
	imu->ypr[2] = (float) -sin(
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	f7fd fb89 	bl	800028c <__adddf3>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	ec44 3b17 	vmov	d7, r3, r4
 8002b82:	eeb0 0a47 	vmov.f32	s0, s14
 8002b86:	eef0 0a67 	vmov.f32	s1, s15
 8002b8a:	f008 fba1 	bl	800b2d0 <sin>
 8002b8e:	ec54 3b10 	vmov	r3, r4, d0
 8002b92:	4618      	mov	r0, r3
 8002b94:	4621      	mov	r1, r4
 8002b96:	f7fe f807 	bl	8000ba8 <__aeabi_d2f>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	ee07 3a90 	vmov	s15, r3
 8002ba0:	eef1 7a67 	vneg.f32	s15, s15
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

	imu->ypr[1] = (float)atan2(
			2.0
					* (imu->quaternionWXYZ[0] * imu->quaternionWXYZ[1]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4623      	mov	r3, r4
 8002bba:	f7fd fd1d 	bl	80005f8 <__aeabi_dmul>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	461d      	mov	r5, r3
 8002bc4:	4626      	mov	r6, r4
							+ imu->quaternionWXYZ[2] * imu->quaternionWXYZ[3]),
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4623      	mov	r3, r4
 8002bd6:	f7fd fd0f 	bl	80005f8 <__aeabi_dmul>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	460c      	mov	r4, r1
 8002bde:	461a      	mov	r2, r3
 8002be0:	4623      	mov	r3, r4
 8002be2:	4628      	mov	r0, r5
 8002be4:	4631      	mov	r1, r6
 8002be6:	f7fd fb51 	bl	800028c <__adddf3>
 8002bea:	4603      	mov	r3, r0
 8002bec:	460c      	mov	r4, r1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	4621      	mov	r1, r4
	imu->ypr[1] = (float)atan2(
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	f7fd fb49 	bl	800028c <__adddf3>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	460c      	mov	r4, r1
 8002bfe:	ec44 3b18 	vmov	d8, r3, r4
			imu->quaternionWXYZ[0] * imu->quaternionWXYZ[0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4623      	mov	r3, r4
 8002c12:	f7fd fcf1 	bl	80005f8 <__aeabi_dmul>
 8002c16:	4603      	mov	r3, r0
 8002c18:	460c      	mov	r4, r1
 8002c1a:	461d      	mov	r5, r3
 8002c1c:	4626      	mov	r6, r4
					- imu->quaternionWXYZ[1] * imu->quaternionWXYZ[1]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	f7fd fce3 	bl	80005f8 <__aeabi_dmul>
 8002c32:	4603      	mov	r3, r0
 8002c34:	460c      	mov	r4, r1
 8002c36:	461a      	mov	r2, r3
 8002c38:	4623      	mov	r3, r4
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	4631      	mov	r1, r6
 8002c3e:	f7fd fb23 	bl	8000288 <__aeabi_dsub>
 8002c42:	4603      	mov	r3, r0
 8002c44:	460c      	mov	r4, r1
 8002c46:	461d      	mov	r5, r3
 8002c48:	4626      	mov	r6, r4
					- imu->quaternionWXYZ[2] * imu->quaternionWXYZ[2]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002c56:	461a      	mov	r2, r3
 8002c58:	4623      	mov	r3, r4
 8002c5a:	f7fd fccd 	bl	80005f8 <__aeabi_dmul>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	460c      	mov	r4, r1
 8002c62:	461a      	mov	r2, r3
 8002c64:	4623      	mov	r3, r4
 8002c66:	4628      	mov	r0, r5
 8002c68:	4631      	mov	r1, r6
 8002c6a:	f7fd fb0d 	bl	8000288 <__aeabi_dsub>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	460c      	mov	r4, r1
 8002c72:	461d      	mov	r5, r3
 8002c74:	4626      	mov	r6, r4
					+ imu->quaternionWXYZ[3] * imu->quaternionWXYZ[3]);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002c82:	461a      	mov	r2, r3
 8002c84:	4623      	mov	r3, r4
 8002c86:	f7fd fcb7 	bl	80005f8 <__aeabi_dmul>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	460c      	mov	r4, r1
	imu->ypr[1] = (float)atan2(
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4623      	mov	r3, r4
 8002c92:	4628      	mov	r0, r5
 8002c94:	4631      	mov	r1, r6
 8002c96:	f7fd faf9 	bl	800028c <__adddf3>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	460c      	mov	r4, r1
 8002c9e:	ec44 3b17 	vmov	d7, r3, r4
 8002ca2:	eeb0 1a47 	vmov.f32	s2, s14
 8002ca6:	eef0 1a67 	vmov.f32	s3, s15
 8002caa:	eeb0 0a48 	vmov.f32	s0, s16
 8002cae:	eef0 0a68 	vmov.f32	s1, s17
 8002cb2:	f008 fb55 	bl	800b360 <atan2>
 8002cb6:	ec54 3b10 	vmov	r3, r4, d0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	f7fd ff73 	bl	8000ba8 <__aeabi_d2f>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	671a      	str	r2, [r3, #112]	; 0x70

	imu->ypr[1] *= -180.0f / 3.141592653589793f;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002cce:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002d68 <read_imu+0x39c>
 8002cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	imu->ypr[0] *= -180.0f / 3.141592653589793f;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002ce2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002d68 <read_imu+0x39c>
 8002ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	imu->ypr[2] *= 180.0f / 3.141592653589793f;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002cf6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002d6c <read_imu+0x3a0>
 8002cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

	imu->deltaT = ((float)(HAL_GetTick() - imu->last_read_time)) / 1000.0f;
 8002d04:	f002 fb9c 	bl	8005440 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	ee07 3a90 	vmov	s15, r3
 8002d16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d1a:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002d70 <read_imu+0x3a4>
 8002d1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

	imu->yaw_dps = (imu->ypr[0] - old_yaw) / imu->deltaT;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8002d2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d32:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8002d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

	old_yaw = imu->ypr[0];
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d4a:	613b      	str	r3, [r7, #16]

	imu->last_read_time = HAL_GetTick();
 8002d4c:	f002 fb78 	bl	8005440 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	return IMU_READ_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	ecbd 8b02 	vpop	{d8}
 8002d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d66:	bf00      	nop
 8002d68:	c2652ee0 	.word	0xc2652ee0
 8002d6c:	42652ee0 	.word	0x42652ee0
 8002d70:	447a0000 	.word	0x447a0000

08002d74 <read_barometer>:
}


#ifdef Selected_BAR_BMP280

int8_t read_barometer(IMU *imu,I2C_HandleTypeDef *huartI2C){
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp, huartI2C);
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	493d      	ldr	r1, [pc, #244]	; (8002e78 <read_barometer+0x104>)
 8002d82:	483e      	ldr	r0, [pc, #248]	; (8002e7c <read_barometer+0x108>)
 8002d84:	f7fe fafa 	bl	800137c <bmp280_get_uncomp_data>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8002d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <read_barometer+0x26>
		return rslt;
 8002d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d98:	e06a      	b.n	8002e70 <read_barometer+0xfc>
	}
	/* Getting the compensated pressure using 32 bit precision */
	rslt = bmp280_get_comp_pres_32bit(&pres32, ucomp_data.uncomp_press, &bmp,
 8002d9a:	4b38      	ldr	r3, [pc, #224]	; (8002e7c <read_barometer+0x108>)
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	4a35      	ldr	r2, [pc, #212]	; (8002e78 <read_barometer+0x104>)
 8002da2:	4837      	ldr	r0, [pc, #220]	; (8002e80 <read_barometer+0x10c>)
 8002da4:	f7fe fba9 	bl	80014fa <bmp280_get_comp_pres_32bit>
 8002da8:	4603      	mov	r3, r0
 8002daa:	73fb      	strb	r3, [r7, #15]
			huartI2C);
	if (rslt != BMP280_OK) {
 8002dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <read_barometer+0x46>
		return rslt;
 8002db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db8:	e05a      	b.n	8002e70 <read_barometer+0xfc>
	}
	/* Getting the compensated pressure using 64 bit precision */
	rslt = bmp280_get_comp_pres_64bit(&pres64, ucomp_data.uncomp_press, &bmp,
 8002dba:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <read_barometer+0x108>)
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	4a2d      	ldr	r2, [pc, #180]	; (8002e78 <read_barometer+0x104>)
 8002dc2:	4830      	ldr	r0, [pc, #192]	; (8002e84 <read_barometer+0x110>)
 8002dc4:	f7fe fc94 	bl	80016f0 <bmp280_get_comp_pres_64bit>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	73fb      	strb	r3, [r7, #15]
			huartI2C);
	if (rslt != BMP280_OK) {
 8002dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <read_barometer+0x66>
		return rslt;
 8002dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd8:	e04a      	b.n	8002e70 <read_barometer+0xfc>
	}
	/* Getting the compensated pressure as floating point value */
	rslt = bmp280_get_comp_pres_double(&pres, ucomp_data.uncomp_press, &bmp,
 8002dda:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <read_barometer+0x108>)
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	4a25      	ldr	r2, [pc, #148]	; (8002e78 <read_barometer+0x104>)
 8002de2:	4829      	ldr	r0, [pc, #164]	; (8002e88 <read_barometer+0x114>)
 8002de4:	f7fe ff74 	bl	8001cd0 <bmp280_get_comp_pres_double>
 8002de8:	4603      	mov	r3, r0
 8002dea:	73fb      	strb	r3, [r7, #15]
			huartI2C);
	if (rslt != BMP280_OK) {
 8002dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <read_barometer+0x86>
		return rslt;
 8002df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df8:	e03a      	b.n	8002e70 <read_barometer+0xfc>
	}
	/* Reading the raw data from sensor */
	rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp, huartI2C);
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	491e      	ldr	r1, [pc, #120]	; (8002e78 <read_barometer+0x104>)
 8002dfe:	481f      	ldr	r0, [pc, #124]	; (8002e7c <read_barometer+0x108>)
 8002e00:	f7fe fabc 	bl	800137c <bmp280_get_uncomp_data>
 8002e04:	4603      	mov	r3, r0
 8002e06:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8002e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <read_barometer+0xa2>
		return rslt;
 8002e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e14:	e02c      	b.n	8002e70 <read_barometer+0xfc>
	}
	/* Getting the 32 bit compensated temperature */
	rslt = bmp280_get_comp_temp_32bit(&temp32, ucomp_data.uncomp_temp, &bmp,
 8002e16:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <read_barometer+0x108>)
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	4a16      	ldr	r2, [pc, #88]	; (8002e78 <read_barometer+0x104>)
 8002e1e:	481b      	ldr	r0, [pc, #108]	; (8002e8c <read_barometer+0x118>)
 8002e20:	f7fe faff 	bl	8001422 <bmp280_get_comp_temp_32bit>
 8002e24:	4603      	mov	r3, r0
 8002e26:	73fb      	strb	r3, [r7, #15]
			huartI2C);
	if (rslt != BMP280_OK) {
 8002e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <read_barometer+0xc2>
		return rslt;
 8002e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e34:	e01c      	b.n	8002e70 <read_barometer+0xfc>
	}
	/* Getting the compensated temperature as floating point value */
	rslt = bmp280_get_comp_temp_double(&temp, ucomp_data.uncomp_temp, &bmp,
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <read_barometer+0x108>)
 8002e38:	6819      	ldr	r1, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <read_barometer+0x104>)
 8002e3e:	4814      	ldr	r0, [pc, #80]	; (8002e90 <read_barometer+0x11c>)
 8002e40:	f7fe fe6a 	bl	8001b18 <bmp280_get_comp_temp_double>
 8002e44:	4603      	mov	r3, r0
 8002e46:	73fb      	strb	r3, [r7, #15]
			huartI2C);
	if (rslt != BMP280_OK) {
 8002e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <read_barometer+0xe2>
		return rslt;
 8002e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e54:	e00c      	b.n	8002e70 <read_barometer+0xfc>
	}
	imu->pressure = pres64 / 256;
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <read_barometer+0x110>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	0a1a      	lsrs	r2, r3, #8
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	imu->temperature = temp;
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <read_barometer+0x11c>)
 8002e64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return IMU_READ_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd90      	pop	{r4, r7, pc}
 8002e78:	20000298 	.word	0x20000298
 8002e7c:	200002e0 	.word	0x200002e0
 8002e80:	200002cc 	.word	0x200002cc
 8002e84:	200002e8 	.word	0x200002e8
 8002e88:	20000238 	.word	0x20000238
 8002e8c:	200002ec 	.word	0x200002ec
 8002e90:	200002d8 	.word	0x200002d8

08002e94 <delay_ms>:

void delay_ms(uint32_t period_ms)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
    HAL_Delay(period_ms);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f002 fadb 	bl	8005458 <HAL_Delay>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <i2c_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_write(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length,I2C_HandleTypeDef *huartI2C)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	603a      	str	r2, [r7, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	71fb      	strb	r3, [r7, #7]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	71bb      	strb	r3, [r7, #6]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	80bb      	strh	r3, [r7, #4]
//	for(uint8_t i=0;i<length;i++){
//		bmp_i2c_buff[i+1] = reg_data[i];
//	}
//
//	HAL_I2C_Master_Transmit(huartI2C, i2c_addr, bmp_i2c_buff, (length + 1), I2C_TRANSMIT_TIMEOUT);
	rslt = write8(huartI2C,0XEC,reg_addr,*reg_data);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	79ba      	ldrb	r2, [r7, #6]
 8002ec6:	21ec      	movs	r1, #236	; 0xec
 8002ec8:	69b8      	ldr	r0, [r7, #24]
 8002eca:	f001 fb79 	bl	80045c0 <write8>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8002ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <i2c_reg_read>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_read(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length,I2C_HandleTypeDef *huartI2C)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	603a      	str	r2, [r7, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	71bb      	strb	r3, [r7, #6]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80bb      	strh	r3, [r7, #4]
	int8_t rslt;
	bmp_i2c_buff[0] = reg_addr;
 8002ef6:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <i2c_reg_read+0x8c>)
 8002ef8:	79bb      	ldrb	r3, [r7, #6]
 8002efa:	7013      	strb	r3, [r2, #0]


	rslt = HAL_I2C_Master_Transmit(huartI2C, i2c_addr, bmp_i2c_buff, 1, I2C_TRANSMIT_TIMEOUT);
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	b299      	uxth	r1, r3
 8002f00:	2301      	movs	r3, #1
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2301      	movs	r3, #1
 8002f06:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <i2c_reg_read+0x8c>)
 8002f08:	69b8      	ldr	r0, [r7, #24]
 8002f0a:	f003 fa6d 	bl	80063e8 <HAL_I2C_Master_Transmit>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	73bb      	strb	r3, [r7, #14]
	if (rslt != HAL_OK) {
 8002f12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <i2c_reg_read+0x40>
		return rslt;
 8002f1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f1e:	e020      	b.n	8002f62 <i2c_reg_read+0x82>
	}
	rslt = HAL_I2C_Master_Receive(huartI2C, i2c_addr, &bmp_i2c_buff[1], length, I2C_RECEIVE_TIMEOUT);
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	b299      	uxth	r1, r3
 8002f24:	88ba      	ldrh	r2, [r7, #4]
 8002f26:	2301      	movs	r3, #1
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <i2c_reg_read+0x90>)
 8002f2e:	69b8      	ldr	r0, [r7, #24]
 8002f30:	f003 fb58 	bl	80065e4 <HAL_I2C_Master_Receive>
 8002f34:	4603      	mov	r3, r0
 8002f36:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < length; i++) {
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73fb      	strb	r3, [r7, #15]
 8002f3c:	e00a      	b.n	8002f54 <i2c_reg_read+0x74>
		reg_data[i] = bmp_i2c_buff[i + 1];
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	6839      	ldr	r1, [r7, #0]
 8002f46:	440b      	add	r3, r1
 8002f48:	4908      	ldr	r1, [pc, #32]	; (8002f6c <i2c_reg_read+0x8c>)
 8002f4a:	5c8a      	ldrb	r2, [r1, r2]
 8002f4c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < length; i++) {
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	3301      	adds	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	88ba      	ldrh	r2, [r7, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d8ef      	bhi.n	8002f3e <i2c_reg_read+0x5e>
	}

    return rslt;
 8002f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000248 	.word	0x20000248
 8002f70:	20000249 	.word	0x20000249

08002f74 <flight_mode_update>:
 */

#include "flight_mode.h"


int8_t flight_mode_update(FLIGHT_MODE *flight_mode,OUTPUT_MIXER *output_mixer,KUSBEGI_FLAGS *kusbegi_flags){
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
	 * Then we will determine that we can still use this flight mode
	 * If we have to switch another mode we will call:
	 * flight_mode_transition
	 * After we get mode update will set up for flight task
	 */
	if ((kusbegi_flags->FLAG_RC_FAILSAFE) || (kusbegi_flags->FLAG_RC_FRAME_LOST)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	7b9b      	ldrb	r3, [r3, #14]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10b      	bne.n	8002fa0 <flight_mode_update+0x2c>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7b1b      	ldrb	r3, [r3, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <flight_mode_update+0x2c>
			|| (kusbegi_flags->FLAG_RC_CONNECTION_E)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	7b5b      	ldrb	r3, [r3, #13]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d103      	bne.n	8002fa0 <flight_mode_update+0x2c>
			|| (kusbegi_flags->FLAG_IMU_READ_OK == 0)) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d11a      	bne.n	8002fd6 <flight_mode_update+0x62>

		if (flight_mode->failsafe_timer_active == 0) {
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	7a1b      	ldrb	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d107      	bne.n	8002fb8 <flight_mode_update+0x44>
			flight_mode->failsafe_timer = HAL_GetTick();
 8002fa8:	f002 fa4a 	bl	8005440 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	605a      	str	r2, [r3, #4]
			flight_mode->failsafe_timer_active = 1;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	721a      	strb	r2, [r3, #8]
		}

		if((HAL_GetTick() - flight_mode->failsafe_timer) > RC_FAILSAFE_TIME_MS){
 8002fb8:	f002 fa42 	bl	8005440 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002fc8:	d905      	bls.n	8002fd6 <flight_mode_update+0x62>
			/*
			 * We set the flag up
			 * Because new mod is Failsafe
			 * We want to start mode transition
			 */
			kusbegi_flags->FLAG_MODE_CHANGE = 1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	729a      	strb	r2, [r3, #10]
			flight_mode->mode_type = mode_failsafe;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2264      	movs	r2, #100	; 0x64
 8002fd4:	701a      	strb	r2, [r3, #0]
		}
	}


	if(kusbegi_flags->FLAG_MODE_CHANGE){
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	7a9b      	ldrb	r3, [r3, #10]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <flight_mode_update+0x7a>
		/*
		 * Set flag down to detect next mode change
		 */
		kusbegi_flags->FLAG_MODE_CHANGE = 0;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	729a      	strb	r2, [r3, #10]
		flight_mode_transition(flight_mode, output_mixer, kusbegi_flags);
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f81b 	bl	8003024 <flight_mode_transition>

	}


	rslt = flight_mode_available(flight_mode->mode_type,kusbegi_flags);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 f832 	bl	800305e <flight_mode_available>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	75fb      	strb	r3, [r7, #23]
	if(rslt == FLIGHT_MODE_AVAILABLE){
 8002ffe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d104      	bne.n	8003010 <flight_mode_update+0x9c>
		/*
		 * We will pass the new mode
		 * Before we return, We set last mode as new mode
		 * This means mode change is success
		 */
		flight_mode->last_mode_type = flight_mode->mode_type;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	705a      	strb	r2, [r3, #1]
 800300e:	e003      	b.n	8003018 <flight_mode_update+0xa4>
		/*
		 * If we can not change mode
		 * We have to continue pass old mode
		 * Failsafe is handled above but TODO: need to handle imu err
		 */
		flight_mode->mode_type = flight_mode->last_mode_type;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	785a      	ldrb	r2, [r3, #1]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	701a      	strb	r2, [r3, #0]
	}



	return rslt;
 8003018:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <flight_mode_transition>:

int8_t flight_mode_transition(FLIGHT_MODE *flight_mode,OUTPUT_MIXER *output_mixer,KUSBEGI_FLAGS *kusbegi_flags){
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]

	if(output_mixer->RC_INPUT.rc_channels[mode].mapped_value == RC_MODE_STABILIZE){
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800303a:	eef4 7a47 	vcmp.f32	s15, s14
 800303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003042:	d104      	bne.n	800304e <flight_mode_transition+0x2a>
		flight_mode->mode_type = mode_stabilize;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
		return FLIGHT_MODE_AVAILABLE;
 800304a:	2300      	movs	r3, #0
 800304c:	e001      	b.n	8003052 <flight_mode_transition+0x2e>
	}



	return FLIGHT_MODE_E_UNKOWN_MODE;
 800304e:	f06f 031e 	mvn.w	r3, #30
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <flight_mode_available>:

int8_t flight_mode_available(MODE_TYPE mode_type,KUSBEGI_FLAGS *kusbegi_flags){
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	6039      	str	r1, [r7, #0]
 8003068:	71fb      	strb	r3, [r7, #7]

	if(mode_type == mode_stabilize){
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <flight_mode_available+0x16>
		return FLIGHT_MODE_AVAILABLE;
 8003070:	2300      	movs	r3, #0
 8003072:	e001      	b.n	8003078 <flight_mode_available+0x1a>
	}


	return FLIGHT_MODE_E_UNKOWN_MODE;
 8003074:	f06f 031e 	mvn.w	r3, #30
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <flight_task_update>:
 * Language:  C
 */

#include "flight_task.h"

int8_t flight_task_update(FLIGHT_TASK *flight_task,FLIGHT_MODE *flight_mode,OUTPUT_MIXER *output_mixer,KUSBEGI_FLAGS *kusbegi_flags){
 8003084:	b5b0      	push	{r4, r5, r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]


	if(flight_mode->mode_type == mode_stabilize){
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d109      	bne.n	80030ae <flight_task_update+0x2a>

		run_task_manuel(output_mixer,kusbegi_flags,&task_yaw,&task_pitch,&task_roll,&task_altitude);
 800309a:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <flight_task_update+0x8c>)
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <flight_task_update+0x90>)
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <flight_task_update+0x94>)
 80030a4:	4a1d      	ldr	r2, [pc, #116]	; (800311c <flight_task_update+0x98>)
 80030a6:	6839      	ldr	r1, [r7, #0]
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f839 	bl	8003120 <run_task_manuel>

	}

	flight_task->flight_task_setpoint.yaw = task_yaw;
 80030ae:	4b1b      	ldr	r3, [pc, #108]	; (800311c <flight_task_update+0x98>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	611a      	str	r2, [r3, #16]
	flight_task->flight_task_setpoint.pitch = task_pitch;
 80030b6:	4b18      	ldr	r3, [pc, #96]	; (8003118 <flight_task_update+0x94>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	615a      	str	r2, [r3, #20]
	flight_task->flight_task_setpoint.roll = task_roll;
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <flight_task_update+0x90>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	619a      	str	r2, [r3, #24]
	flight_task->flight_task_setpoint.altitude = task_altitude;
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <flight_task_update+0x8c>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	61da      	str	r2, [r3, #28]

	output_mixer->SETPOINT_YPRA[0] = task_yaw;
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <flight_task_update+0x98>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	619a      	str	r2, [r3, #24]
	output_mixer->SETPOINT_YPRA[1] = task_pitch;
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <flight_task_update+0x94>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	61da      	str	r2, [r3, #28]
	output_mixer->SETPOINT_YPRA[2] = task_roll;
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <flight_task_update+0x90>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	621a      	str	r2, [r3, #32]
	output_mixer->SETPOINT_YPRA[3] = task_altitude;
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <flight_task_update+0x8c>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

	flight_task->lastflight_task_setpoint = flight_task->flight_task_setpoint;
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f102 0420 	add.w	r4, r2, #32
 80030f6:	1d1d      	adds	r5, r3, #4
 80030f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003100:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return 0;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bdb0      	pop	{r4, r5, r7, pc}
 800310e:	bf00      	nop
 8003110:	20000530 	.word	0x20000530
 8003114:	20000534 	.word	0x20000534
 8003118:	20000528 	.word	0x20000528
 800311c:	20000524 	.word	0x20000524

08003120 <run_task_manuel>:
#include "task_manuel.h"

int8_t run_task_manuel(OUTPUT_MIXER *output_mixer, KUSBEGI_FLAGS *kusbegi_flags,
		float *task_yaw, float *task_pitch, float *task_roll, float *task_altitude) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	603b      	str	r3, [r7, #0]

	*task_altitude = output_mixer->RC_INPUT.rc_channels[throttle].mapped_value;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	601a      	str	r2, [r3, #0]

	*task_pitch = output_mixer->RC_INPUT.rc_channels[pitch].mapped_value;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	601a      	str	r2, [r3, #0]
	*task_roll = output_mixer->RC_INPUT.rc_channels[roll].mapped_value;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	601a      	str	r2, [r3, #0]


	*task_yaw = output_mixer->RC_INPUT.rc_channels[yaw].mapped_value;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	601a      	str	r2, [r3, #0]

	if(kusbegi_flags->FLAG_ARM_CHANGE){
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	7adb      	ldrb	r3, [r3, #11]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d013      	beq.n	800317e <run_task_manuel+0x5e>

		if (output_mixer->RC_INPUT.arm_state) {
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <run_task_manuel+0x52>
			first_arm = 1;
 8003160:	4b28      	ldr	r3, [pc, #160]	; (8003204 <run_task_manuel+0xe4>)
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
			time_arm = HAL_GetTick();
 8003166:	f002 f96b 	bl	8005440 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	4b26      	ldr	r3, [pc, #152]	; (8003208 <run_task_manuel+0xe8>)
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e002      	b.n	8003178 <run_task_manuel+0x58>
		}
		else {
			first_arm = 0;
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <run_task_manuel+0xe4>)
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
		}

		kusbegi_flags->FLAG_ARM_CHANGE = 0;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2200      	movs	r2, #0
 800317c:	72da      	strb	r2, [r3, #11]
	}

	if(((HAL_GetTick() - time_arm) < ARM_SPIN_MOTOR_TIME)&&(first_arm)){
 800317e:	f002 f95f 	bl	8005440 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	4b20      	ldr	r3, [pc, #128]	; (8003208 <run_task_manuel+0xe8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f240 52db 	movw	r2, #1499	; 0x5db
 800318e:	4293      	cmp	r3, r2
 8003190:	d807      	bhi.n	80031a2 <run_task_manuel+0x82>
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <run_task_manuel+0xe4>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <run_task_manuel+0x82>

		kusbegi_flags->FLAG_SPIN_MOTOR = 1;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2201      	movs	r2, #1
 800319e:	73da      	strb	r2, [r3, #15]
 80031a0:	e013      	b.n	80031ca <run_task_manuel+0xaa>

	}
	else if(((HAL_GetTick() - time_arm) > ARM_SPIN_MOTOR_TIME)&&(first_arm)){
 80031a2:	f002 f94d 	bl	8005440 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	4b17      	ldr	r3, [pc, #92]	; (8003208 <run_task_manuel+0xe8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d909      	bls.n	80031ca <run_task_manuel+0xaa>
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <run_task_manuel+0xe4>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <run_task_manuel+0xaa>
		kusbegi_flags->FLAG_SPIN_MOTOR = 0;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2200      	movs	r2, #0
 80031c2:	73da      	strb	r2, [r3, #15]
		first_arm = 0;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <run_task_manuel+0xe4>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
		}
	if(!output_mixer->RC_INPUT.arm_state){
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <run_task_manuel+0xba>
		kusbegi_flags->FLAG_SPIN_MOTOR = 0;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2200      	movs	r2, #0
 80031d8:	73da      	strb	r2, [r3, #15]
	}


	kusbegi_flags->FLAG_ARM = output_mixer->RC_INPUT.arm_state;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	71da      	strb	r2, [r3, #7]

	if(kusbegi_flags->FLAG_RC_FRAME_LOST || kusbegi_flags->FLAG_RC_FAILSAFE){
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	7b1b      	ldrb	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <run_task_manuel+0xd4>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	7b9b      	ldrb	r3, [r3, #14]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <run_task_manuel+0xda>
		kusbegi_flags->FLAG_ARM = 0;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2200      	movs	r2, #0
 80031f8:	71da      	strb	r2, [r3, #7]
	}


	return 0;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	2000052c 	.word	0x2000052c
 8003208:	20000520 	.word	0x20000520

0800320c <kusbegi_init>:
 * Purpose: Autopilot
 * Language:  C
 */
#include "kusbegi_autopilot.h"

int8_t kusbegi_init(UART_HandleTypeDef* huartMsg,I2C_HandleTypeDef *huartI2C,UART_HandleTypeDef* huartRC,KUSBEGI *kusbegi){
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
	int8_t rslt;
	/* init output_mixer */
	rslt = init_output_mixer(&output_mixer, huartI2C);
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	4827      	ldr	r0, [pc, #156]	; (80032bc <kusbegi_init+0xb0>)
 800321e:	f000 f925 	bl	800346c <init_output_mixer>
 8003222:	4603      	mov	r3, r0
 8003224:	75bb      	strb	r3, [r7, #22]

	/* init kusbegi autopilot*/
	kusbegi->mc_arm_state = MC_DISARM;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	705a      	strb	r2, [r3, #1]
	kusbegi->mc_fc_state = KUSBEGI_INIT;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	709a      	strb	r2, [r3, #2]
	kusbegi->mc_flight_mode = MC_MODE_STABILIZE;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
	kusbegi->mc_gps_available = MC_GPS_UNAVAILABLE;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2201      	movs	r2, #1
 800323c:	711a      	strb	r2, [r3, #4]
	kusbegi->mc_kill_switch = 0;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2200      	movs	r2, #0
 8003242:	719a      	strb	r2, [r3, #6]
	kusbegi->mc_land_state = MC_LANDED;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2200      	movs	r2, #0
 8003248:	70da      	strb	r2, [r3, #3]

	for(uint8_t i = 0;i<4;i++){
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]
 800324e:	e008      	b.n	8003262 <kusbegi_init+0x56>
		kusbegi->PWM_US_MOTOR[i] = 0;
 8003250:	7dfa      	ldrb	r2, [r7, #23]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	3204      	adds	r2, #4
 8003256:	2100      	movs	r1, #0
 8003258:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i = 0;i<4;i++){
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	3301      	adds	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	2b03      	cmp	r3, #3
 8003266:	d9f3      	bls.n	8003250 <kusbegi_init+0x44>
	}

	last_tick_l1 = 0;
 8003268:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <kusbegi_init+0xb4>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
	last_tick_l2 = 0;
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <kusbegi_init+0xb8>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
	last_tick_l3 = 0;
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <kusbegi_init+0xbc>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
	last_tick_l4 = 0;
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <kusbegi_init+0xc0>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
	last_tick_l5 = 0;
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <kusbegi_init+0xc4>)
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
	last_tick_l6 = 0;
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <kusbegi_init+0xc8>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
	kusbegi_tick = 0;
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <kusbegi_init+0xcc>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

	flight_mode.mode_type = mode_stabilize;
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <kusbegi_init+0xd0>)
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
	flight_task.task_type = task_manuel;
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <kusbegi_init+0xd4>)
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]

	debugger_flag = 0;
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <kusbegi_init+0xd8>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
	count_for_debug = 0;
 80032a4:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <kusbegi_init+0xdc>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
	count_for_debug2 = 0;
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <kusbegi_init+0xe0>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

	return rslt;
 80032b0:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000580 	.word	0x20000580
 80032c0:	200006c4 	.word	0x200006c4
 80032c4:	200006cc 	.word	0x200006cc
 80032c8:	20000578 	.word	0x20000578
 80032cc:	20000538 	.word	0x20000538
 80032d0:	200006e0 	.word	0x200006e0
 80032d4:	200006c8 	.word	0x200006c8
 80032d8:	200006c0 	.word	0x200006c0
 80032dc:	200006e4 	.word	0x200006e4
 80032e0:	2000053c 	.word	0x2000053c
 80032e4:	20000210 	.word	0x20000210
 80032e8:	2000020c 	.word	0x2000020c
 80032ec:	20000208 	.word	0x20000208

080032f0 <kusbegi_loop>:

void kusbegi_loop(UART_HandleTypeDef* huartMsg,I2C_HandleTypeDef *huartI2C,UART_HandleTypeDef* huartRC,KUSBEGI *kusbegi){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]

	if (HAL_GetTick() - last_tick_l1 >= LOOP1DELAY_MS) {
 80032fe:	f002 f89f 	bl	8005440 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	4b15      	ldr	r3, [pc, #84]	; (800335c <kusbegi_loop+0x6c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b09      	cmp	r3, #9
 800330c:	d90c      	bls.n	8003328 <kusbegi_loop+0x38>
		loop1(huartMsg,huartI2C,huartRC,kusbegi,&kusbegi_flags);
 800330e:	4b14      	ldr	r3, [pc, #80]	; (8003360 <kusbegi_loop+0x70>)
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f825 	bl	8003368 <loop1>
		last_tick_l1 = HAL_GetTick();
 800331e:	f002 f88f 	bl	8005440 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	4b0d      	ldr	r3, [pc, #52]	; (800335c <kusbegi_loop+0x6c>)
 8003326:	601a      	str	r2, [r3, #0]

	}
	if (HAL_GetTick() - last_tick_l2 >= LOOP2DELAY_MS) {
 8003328:	f002 f88a 	bl	8005440 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <kusbegi_loop+0x74>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b13      	cmp	r3, #19
 8003336:	d90c      	bls.n	8003352 <kusbegi_loop+0x62>
		loop2(huartMsg,huartI2C,huartRC,kusbegi,&kusbegi_flags);
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <kusbegi_loop+0x70>)
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f872 	bl	800342c <loop2>
		last_tick_l2 = HAL_GetTick();
 8003348:	f002 f87a 	bl	8005440 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <kusbegi_loop+0x74>)
 8003350:	601a      	str	r2, [r3, #0]
//	if (kusbegi_tick - last_tick_l6 >= LOOP6DELAY_MS) {
//		loop6(huartMsg,huartI2C,huartRC,kusbegi,&kusbegi_flags);
//		last_tick_l6 = HAL_GetTick();
//	}

}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200006c4 	.word	0x200006c4
 8003360:	200006d0 	.word	0x200006d0
 8003364:	200006cc 	.word	0x200006cc

08003368 <loop1>:

void loop1(UART_HandleTypeDef* huartMsg,I2C_HandleTypeDef *huartI2C,UART_HandleTypeDef* huartRC,KUSBEGI *kusbegi,KUSBEGI_FLAGS *kusbegi_flags){
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]

	if(update_imu(&output_mixer, huartI2C,kusbegi_flags) == OUTPUT_MIXER_OK){
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	4829      	ldr	r0, [pc, #164]	; (8003420 <loop1+0xb8>)
 800337c:	f000 fb20 	bl	80039c0 <update_imu>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <loop1+0x26>
		kusbegi_flags->FLAG_IMU_READ_OK = 1;
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2201      	movs	r2, #1
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e002      	b.n	8003394 <loop1+0x2c>
	}
	else{
		kusbegi_flags->FLAG_IMU_READ_OK = 0;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
	}

	flight_mode_update(&flight_mode, &output_mixer, kusbegi_flags);
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4922      	ldr	r1, [pc, #136]	; (8003420 <loop1+0xb8>)
 8003398:	4822      	ldr	r0, [pc, #136]	; (8003424 <loop1+0xbc>)
 800339a:	f7ff fdeb 	bl	8002f74 <flight_mode_update>
	flight_task_update(&flight_task, &flight_mode, &output_mixer,
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <loop1+0xb8>)
 80033a2:	4920      	ldr	r1, [pc, #128]	; (8003424 <loop1+0xbc>)
 80033a4:	4820      	ldr	r0, [pc, #128]	; (8003428 <loop1+0xc0>)
 80033a6:	f7ff fe6d 	bl	8003084 <flight_task_update>
			kusbegi_flags);
	update_pid(&output_mixer,huartMsg);
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	481c      	ldr	r0, [pc, #112]	; (8003420 <loop1+0xb8>)
 80033ae:	f000 faf3 	bl	8003998 <update_pid>
	if ((kusbegi_flags->FLAG_ARM == 1) && (kusbegi_flags->KILL_S == 0)) {
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	79db      	ldrb	r3, [r3, #7]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d107      	bne.n	80033ca <loop1+0x62>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	7a1b      	ldrb	r3, [r3, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <loop1+0x62>
		//TODO: For test.
		//Change later
//		output_mixer.PID_PITCH_OUTPUT = 0.0f;
//		output_mixer.PID_ROLL_OUTPUT = 0.0f;
//		output_mixer.PID_YAW_OUTPUT = 0.0f;
		set_motor_pwm_values(&output_mixer);
 80033c2:	4817      	ldr	r0, [pc, #92]	; (8003420 <loop1+0xb8>)
 80033c4:	f000 fa3e 	bl	8003844 <set_motor_pwm_values>
 80033c8:	e002      	b.n	80033d0 <loop1+0x68>
	}
	else{
		stop_motors(&output_mixer);
 80033ca:	4815      	ldr	r0, [pc, #84]	; (8003420 <loop1+0xb8>)
 80033cc:	f000 facd 	bl	800396a <stop_motors>
	}
	if(kusbegi_flags->FLAG_SPIN_MOTOR){
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	7bdb      	ldrb	r3, [r3, #15]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00f      	beq.n	80033f8 <loop1+0x90>
		output_mixer.PWM_US_MOTOR[0] = 1000;
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <loop1+0xb8>)
 80033da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033de:	801a      	strh	r2, [r3, #0]
		output_mixer.PWM_US_MOTOR[1] = 1000;
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <loop1+0xb8>)
 80033e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033e6:	805a      	strh	r2, [r3, #2]
		output_mixer.PWM_US_MOTOR[2] = 1000;
 80033e8:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <loop1+0xb8>)
 80033ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033ee:	809a      	strh	r2, [r3, #4]
		output_mixer.PWM_US_MOTOR[3] = 1000;
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <loop1+0xb8>)
 80033f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033f6:	80da      	strh	r2, [r3, #6]
	}
	kusbegi->PWM_US_MOTOR[0] = output_mixer.PWM_US_MOTOR[0];
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <loop1+0xb8>)
 80033fa:	881a      	ldrh	r2, [r3, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	811a      	strh	r2, [r3, #8]
	kusbegi->PWM_US_MOTOR[1] = output_mixer.PWM_US_MOTOR[1];
 8003400:	4b07      	ldr	r3, [pc, #28]	; (8003420 <loop1+0xb8>)
 8003402:	885a      	ldrh	r2, [r3, #2]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	815a      	strh	r2, [r3, #10]
	kusbegi->PWM_US_MOTOR[2] = output_mixer.PWM_US_MOTOR[2];
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <loop1+0xb8>)
 800340a:	889a      	ldrh	r2, [r3, #4]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	819a      	strh	r2, [r3, #12]
	kusbegi->PWM_US_MOTOR[3] = output_mixer.PWM_US_MOTOR[3];
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <loop1+0xb8>)
 8003412:	88da      	ldrh	r2, [r3, #6]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	81da      	strh	r2, [r3, #14]

}
 8003418:	bf00      	nop
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000580 	.word	0x20000580
 8003424:	200006e4 	.word	0x200006e4
 8003428:	2000053c 	.word	0x2000053c

0800342c <loop2>:

void loop2(UART_HandleTypeDef* huartMsg,I2C_HandleTypeDef *huartI2C,UART_HandleTypeDef* huartRC,KUSBEGI *kusbegi,KUSBEGI_FLAGS *kusbegi_flags){
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]

	update_rc(&output_mixer, huartRC,kusbegi_flags);
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	480a      	ldr	r0, [pc, #40]	; (8003468 <loop2+0x3c>)
 8003440:	f000 fb04 	bl	8003a4c <update_rc>


	if(update_barometer(&output_mixer, huartI2C) == OUTPUT_MIXER_OK){
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	4808      	ldr	r0, [pc, #32]	; (8003468 <loop2+0x3c>)
 8003448:	f000 fade 	bl	8003a08 <update_barometer>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d103      	bne.n	800345a <loop2+0x2e>
			kusbegi_flags->FLAG_BARO_R_OK = 1;
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2201      	movs	r2, #1
 8003456:	719a      	strb	r2, [r3, #6]
		}
		else{
			kusbegi_flags->FLAG_BARO_R_OK = 0;
		}
}
 8003458:	e002      	b.n	8003460 <loop2+0x34>
			kusbegi_flags->FLAG_BARO_R_OK = 0;
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2200      	movs	r2, #0
 800345e:	719a      	strb	r2, [r3, #6]
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000580 	.word	0x20000580

0800346c <init_output_mixer>:
 * Language:  C
 */
#include "output_mixer.h"


int8_t init_output_mixer(OUTPUT_MIXER *output_mixer,I2C_HandleTypeDef *huartI2C){
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/*Set PID values */
	pid_roll.Kp = PID_ROLL_PITCH_KP;
 8003476:	4bab      	ldr	r3, [pc, #684]	; (8003724 <init_output_mixer+0x2b8>)
 8003478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800347c:	605a      	str	r2, [r3, #4]
	pid_altitude.Kp = PID_ALTITUDE_KP;
 800347e:	4baa      	ldr	r3, [pc, #680]	; (8003728 <init_output_mixer+0x2bc>)
 8003480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003484:	605a      	str	r2, [r3, #4]
	pid_pitch.Kp = PID_ROLL_PITCH_KP;
 8003486:	4ba9      	ldr	r3, [pc, #676]	; (800372c <init_output_mixer+0x2c0>)
 8003488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800348c:	605a      	str	r2, [r3, #4]
	pid_yaw.Kp = PID_YAW_KP;
 800348e:	4ba8      	ldr	r3, [pc, #672]	; (8003730 <init_output_mixer+0x2c4>)
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	605a      	str	r2, [r3, #4]

	pid_roll.Ki = PID_ROLL_PITCH_KI;
 8003496:	4ba3      	ldr	r3, [pc, #652]	; (8003724 <init_output_mixer+0x2b8>)
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
	pid_altitude.Ki = PID_ALTITUDE_KI;
 800349e:	4ba2      	ldr	r3, [pc, #648]	; (8003728 <init_output_mixer+0x2bc>)
 80034a0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80034a4:	609a      	str	r2, [r3, #8]
	pid_pitch.Ki = PID_ROLL_PITCH_KI;
 80034a6:	4ba1      	ldr	r3, [pc, #644]	; (800372c <init_output_mixer+0x2c0>)
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
	pid_yaw.Ki = PID_YAW_KI;
 80034ae:	4ba0      	ldr	r3, [pc, #640]	; (8003730 <init_output_mixer+0x2c4>)
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]

	pid_roll.Kd = PID_ROLL_PITCH_KD;
 80034b6:	4b9b      	ldr	r3, [pc, #620]	; (8003724 <init_output_mixer+0x2b8>)
 80034b8:	4a9e      	ldr	r2, [pc, #632]	; (8003734 <init_output_mixer+0x2c8>)
 80034ba:	60da      	str	r2, [r3, #12]
	pid_altitude.Kd = PID_ALTITUDE_KD;
 80034bc:	4b9a      	ldr	r3, [pc, #616]	; (8003728 <init_output_mixer+0x2bc>)
 80034be:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80034c2:	60da      	str	r2, [r3, #12]
	pid_pitch.Kd = PID_ROLL_PITCH_KD;
 80034c4:	4b99      	ldr	r3, [pc, #612]	; (800372c <init_output_mixer+0x2c0>)
 80034c6:	4a9b      	ldr	r2, [pc, #620]	; (8003734 <init_output_mixer+0x2c8>)
 80034c8:	60da      	str	r2, [r3, #12]
	pid_yaw.Kd = PID_YAW_KD;
 80034ca:	4b99      	ldr	r3, [pc, #612]	; (8003730 <init_output_mixer+0x2c4>)
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	60da      	str	r2, [r3, #12]

	pid_roll.limMin = PID_ROLL_PITCH_LIM_MIN;
 80034d2:	4b94      	ldr	r3, [pc, #592]	; (8003724 <init_output_mixer+0x2b8>)
 80034d4:	4a98      	ldr	r2, [pc, #608]	; (8003738 <init_output_mixer+0x2cc>)
 80034d6:	611a      	str	r2, [r3, #16]
	pid_altitude.limMin = PID_ALTITUDE_LIM_MIN;
 80034d8:	4b93      	ldr	r3, [pc, #588]	; (8003728 <init_output_mixer+0x2bc>)
 80034da:	4a98      	ldr	r2, [pc, #608]	; (800373c <init_output_mixer+0x2d0>)
 80034dc:	611a      	str	r2, [r3, #16]
	pid_pitch.limMin = PID_ROLL_PITCH_LIM_MIN;
 80034de:	4b93      	ldr	r3, [pc, #588]	; (800372c <init_output_mixer+0x2c0>)
 80034e0:	4a95      	ldr	r2, [pc, #596]	; (8003738 <init_output_mixer+0x2cc>)
 80034e2:	611a      	str	r2, [r3, #16]
	pid_yaw.limMin = PID_YAW_LIM_MIN;
 80034e4:	4b92      	ldr	r3, [pc, #584]	; (8003730 <init_output_mixer+0x2c4>)
 80034e6:	4a96      	ldr	r2, [pc, #600]	; (8003740 <init_output_mixer+0x2d4>)
 80034e8:	611a      	str	r2, [r3, #16]

	pid_roll.limMax = PID_ROLL_PITCH_LIM_MAX;
 80034ea:	4b8e      	ldr	r3, [pc, #568]	; (8003724 <init_output_mixer+0x2b8>)
 80034ec:	4a95      	ldr	r2, [pc, #596]	; (8003744 <init_output_mixer+0x2d8>)
 80034ee:	615a      	str	r2, [r3, #20]
	pid_altitude.limMax = PID_ALTITUDE_LIM_MAX;
 80034f0:	4b8d      	ldr	r3, [pc, #564]	; (8003728 <init_output_mixer+0x2bc>)
 80034f2:	4a95      	ldr	r2, [pc, #596]	; (8003748 <init_output_mixer+0x2dc>)
 80034f4:	615a      	str	r2, [r3, #20]
	pid_pitch.limMax = PID_ROLL_PITCH_LIM_MAX;
 80034f6:	4b8d      	ldr	r3, [pc, #564]	; (800372c <init_output_mixer+0x2c0>)
 80034f8:	4a92      	ldr	r2, [pc, #584]	; (8003744 <init_output_mixer+0x2d8>)
 80034fa:	615a      	str	r2, [r3, #20]
	pid_yaw.limMax = PID_YAW_LIM_MAX;
 80034fc:	4b8c      	ldr	r3, [pc, #560]	; (8003730 <init_output_mixer+0x2c4>)
 80034fe:	4a93      	ldr	r2, [pc, #588]	; (800374c <init_output_mixer+0x2e0>)
 8003500:	615a      	str	r2, [r3, #20]

	pid_roll.limMinInt = PID_ROLL_PITCH_LIM_MIN_INT;
 8003502:	4b88      	ldr	r3, [pc, #544]	; (8003724 <init_output_mixer+0x2b8>)
 8003504:	4a8d      	ldr	r2, [pc, #564]	; (800373c <init_output_mixer+0x2d0>)
 8003506:	619a      	str	r2, [r3, #24]
	pid_altitude.limMinInt = PID_ALTITUDE_LIM_MIN_INT;
 8003508:	4b87      	ldr	r3, [pc, #540]	; (8003728 <init_output_mixer+0x2bc>)
 800350a:	4a91      	ldr	r2, [pc, #580]	; (8003750 <init_output_mixer+0x2e4>)
 800350c:	619a      	str	r2, [r3, #24]
	pid_pitch.limMinInt = PID_ROLL_PITCH_LIM_MIN_INT;
 800350e:	4b87      	ldr	r3, [pc, #540]	; (800372c <init_output_mixer+0x2c0>)
 8003510:	4a8a      	ldr	r2, [pc, #552]	; (800373c <init_output_mixer+0x2d0>)
 8003512:	619a      	str	r2, [r3, #24]
	pid_yaw.limMinInt = PID_YAW_LIM_MIN_INT;
 8003514:	4b86      	ldr	r3, [pc, #536]	; (8003730 <init_output_mixer+0x2c4>)
 8003516:	4a8f      	ldr	r2, [pc, #572]	; (8003754 <init_output_mixer+0x2e8>)
 8003518:	619a      	str	r2, [r3, #24]

	pid_roll.limMaxInt = PID_ROLL_PITCH_LIM_MAX_INT;
 800351a:	4b82      	ldr	r3, [pc, #520]	; (8003724 <init_output_mixer+0x2b8>)
 800351c:	4a8a      	ldr	r2, [pc, #552]	; (8003748 <init_output_mixer+0x2dc>)
 800351e:	61da      	str	r2, [r3, #28]
	pid_altitude.limMaxInt = PID_ALTITUDE_LIM_MAX_INT;
 8003520:	4b81      	ldr	r3, [pc, #516]	; (8003728 <init_output_mixer+0x2bc>)
 8003522:	4a8d      	ldr	r2, [pc, #564]	; (8003758 <init_output_mixer+0x2ec>)
 8003524:	61da      	str	r2, [r3, #28]
	pid_pitch.limMaxInt = PID_ROLL_PITCH_LIM_MAX_INT;
 8003526:	4b81      	ldr	r3, [pc, #516]	; (800372c <init_output_mixer+0x2c0>)
 8003528:	4a87      	ldr	r2, [pc, #540]	; (8003748 <init_output_mixer+0x2dc>)
 800352a:	61da      	str	r2, [r3, #28]
	pid_yaw.limMaxInt = PID_YAW_LIM_MAX_INT;
 800352c:	4b80      	ldr	r3, [pc, #512]	; (8003730 <init_output_mixer+0x2c4>)
 800352e:	4a8b      	ldr	r2, [pc, #556]	; (800375c <init_output_mixer+0x2f0>)
 8003530:	61da      	str	r2, [r3, #28]


	/*Init PID */
	PIDController_Init(&pid_altitude);
 8003532:	487d      	ldr	r0, [pc, #500]	; (8003728 <init_output_mixer+0x2bc>)
 8003534:	f000 fafe 	bl	8003b34 <PIDController_Init>
	PIDController_Init(&pid_roll);
 8003538:	487a      	ldr	r0, [pc, #488]	; (8003724 <init_output_mixer+0x2b8>)
 800353a:	f000 fafb 	bl	8003b34 <PIDController_Init>
	PIDController_Init(&pid_pitch);
 800353e:	487b      	ldr	r0, [pc, #492]	; (800372c <init_output_mixer+0x2c0>)
 8003540:	f000 faf8 	bl	8003b34 <PIDController_Init>
	PIDController_Init(&pid_yaw);
 8003544:	487a      	ldr	r0, [pc, #488]	; (8003730 <init_output_mixer+0x2c4>)
 8003546:	f000 faf5 	bl	8003b34 <PIDController_Init>

	/*Init output_mixer */
	output_mixer->PWM_US_MOTOR[0] = 0;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	801a      	strh	r2, [r3, #0]
	output_mixer->PWM_US_MOTOR[1] = 0;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	805a      	strh	r2, [r3, #2]
	output_mixer->PWM_US_MOTOR[2] = 0;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	809a      	strh	r2, [r3, #4]
	output_mixer->PWM_US_MOTOR[3] = 0;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	80da      	strh	r2, [r3, #6]

	output_mixer->PID_ALTITUDE_OUTPUT = 0;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	615a      	str	r2, [r3, #20]
	output_mixer->PID_ROLL_OUTPUT = 0;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
	output_mixer->PID_PITCH_OUTPUT = 0;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	60da      	str	r2, [r3, #12]
	output_mixer->PID_YAW_OUTPUT = 0;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	611a      	str	r2, [r3, #16]

	output_mixer->IMU.eulerXYZ[0] = 0;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	output_mixer->IMU.eulerXYZ[1] = 0;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	output_mixer->IMU.eulerXYZ[2] = 0;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	output_mixer->IMU.quaternionWXYZ[0] = 0;
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	f04f 0400 	mov.w	r4, #0
 80035aa:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	output_mixer->IMU.quaternionWXYZ[1] = 0;
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	f04f 0400 	mov.w	r4, #0
 80035b8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	output_mixer->IMU.quaternionWXYZ[2] = 0;
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	f04f 0400 	mov.w	r4, #0
 80035c6:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	output_mixer->IMU.quaternionWXYZ[3] = 0;
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	f04f 0400 	mov.w	r4, #0
 80035d4:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0

	output_mixer->IMU.accelXYZ[0] = 0;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	output_mixer->IMU.accelXYZ[1] = 0;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	output_mixer->IMU.accelXYZ[2] = 0;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	output_mixer->IMU.magXYZ[0] = 0;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	output_mixer->IMU.magXYZ[1] = 0;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	output_mixer->IMU.magXYZ[2] = 0;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	output_mixer->IMU.liaXYZ[0] = 0;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	output_mixer->IMU.liaXYZ[1] = 0;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	output_mixer->IMU.liaXYZ[2] = 0;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	output_mixer->IMU.grvXYZ[0] = 0;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	output_mixer->IMU.grvXYZ[1] = 0;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	output_mixer->IMU.grvXYZ[2] = 0;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	output_mixer->IMU.gyrXYZ[0] = 0;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	output_mixer->IMU.gyrXYZ[1] = 0;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	output_mixer->IMU.gyrXYZ[2] = 0;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	output_mixer->IMU.ypr[0] = 0;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	output_mixer->IMU.ypr[1] = 0;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	output_mixer->IMU.ypr[2] = 0;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	output_mixer->IMU.temperature = 0;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	f04f 0400 	mov.w	r4, #0
 8003696:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
	output_mixer->IMU.pressure = 0;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	output_mixer->RC_INPUT.rc_channels[throttle].pwm_value = 0;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	875a      	strh	r2, [r3, #58]	; 0x3a
	output_mixer->RC_INPUT.rc_channels[yaw].pwm_value = 0;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	output_mixer->RC_INPUT.rc_channels[pitch].pwm_value = 0;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	output_mixer->RC_INPUT.rc_channels[roll].pwm_value = 0;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	output_mixer->MEASURE_YPRA[0] = 0;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
	output_mixer->MEASURE_YPRA[1] = 0;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c
	output_mixer->MEASURE_YPRA[2] = 0;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
	output_mixer->MEASURE_YPRA[3] = 0;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	635a      	str	r2, [r3, #52]	; 0x34

	output_mixer->SETPOINT_YPRA[0] = 0;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	619a      	str	r2, [r3, #24]
	output_mixer->SETPOINT_YPRA[1] = 0;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	61da      	str	r2, [r3, #28]
	output_mixer->SETPOINT_YPRA[2] = 0;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	621a      	str	r2, [r3, #32]
	output_mixer->SETPOINT_YPRA[3] = 0;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24

	old_yaw = 0;
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <init_output_mixer+0x2f4>)
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

	/*init IMU */
	rslt = init_imu(&imu, huartI2C);
 8003708:	6839      	ldr	r1, [r7, #0]
 800370a:	4816      	ldr	r0, [pc, #88]	; (8003764 <init_output_mixer+0x2f8>)
 800370c:	f7ff f85e 	bl	80027cc <init_imu>
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]
	if(rslt != IMU_INIT_OK){
 8003714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d025      	beq.n	8003768 <init_output_mixer+0x2fc>
		return rslt;
 800371c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003720:	e02f      	b.n	8003782 <init_output_mixer+0x316>
 8003722:	bf00      	nop
 8003724:	200002f0 	.word	0x200002f0
 8003728:	200003f8 	.word	0x200003f8
 800372c:	20000430 	.word	0x20000430
 8003730:	200003c0 	.word	0x200003c0
 8003734:	3fb33333 	.word	0x3fb33333
 8003738:	c3c80000 	.word	0xc3c80000
 800373c:	c1200000 	.word	0xc1200000
 8003740:	c33e0000 	.word	0xc33e0000
 8003744:	43c80000 	.word	0x43c80000
 8003748:	41200000 	.word	0x41200000
 800374c:	433e0000 	.word	0x433e0000
 8003750:	c0a00000 	.word	0xc0a00000
 8003754:	c1380000 	.word	0xc1380000
 8003758:	40a00000 	.word	0x40a00000
 800375c:	41380000 	.word	0x41380000
 8003760:	2000051c 	.word	0x2000051c
 8003764:	20000328 	.word	0x20000328
	}

	/*init RC_input */
	rslt = init_rc_input(&rc_input);
 8003768:	4808      	ldr	r0, [pc, #32]	; (800378c <init_output_mixer+0x320>)
 800376a:	f000 fce5 	bl	8004138 <init_rc_input>
 800376e:	4603      	mov	r3, r0
 8003770:	73fb      	strb	r3, [r7, #15]
	if (rslt != RC_INPUT_OK) {
 8003772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <init_output_mixer+0x314>
		return rslt;
 800377a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377e:	e000      	b.n	8003782 <init_output_mixer+0x316>
	}

	return OUTPUT_MIXER_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bd90      	pop	{r4, r7, pc}
 800378a:	bf00      	nop
 800378c:	20000468 	.word	0x20000468

08003790 <calculate_pid_values>:

int8_t calculate_pid_values(OUTPUT_MIXER *output_mixer,IMU *imu,UART_HandleTypeDef* huartMsg){
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]

	output_mixer->MEASURE_YPRA[0] = imu->yaw_dps;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
	output_mixer->MEASURE_YPRA[1] = imu->ypr[1];
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c
	output_mixer->MEASURE_YPRA[2] = imu->ypr[2];
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30

	output_mixer->PID_YAW_OUTPUT = PIDController_Update(&pid_yaw,output_mixer->SETPOINT_YPRA[0],output_mixer->MEASURE_YPRA[0],huartMsg);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	eef0 0a47 	vmov.f32	s1, s14
 80037c6:	eeb0 0a67 	vmov.f32	s0, s15
 80037ca:	481b      	ldr	r0, [pc, #108]	; (8003838 <calculate_pid_values+0xa8>)
 80037cc:	f000 f9d6 	bl	8003b7c <PIDController_Update>
 80037d0:	eef0 7a40 	vmov.f32	s15, s0
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	edc3 7a04 	vstr	s15, [r3, #16]
	output_mixer->PID_PITCH_OUTPUT = PIDController_Update(&pid_pitch,output_mixer->SETPOINT_YPRA[1],output_mixer->MEASURE_YPRA[1],huartMsg);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	eef0 0a47 	vmov.f32	s1, s14
 80037ec:	eeb0 0a67 	vmov.f32	s0, s15
 80037f0:	4812      	ldr	r0, [pc, #72]	; (800383c <calculate_pid_values+0xac>)
 80037f2:	f000 f9c3 	bl	8003b7c <PIDController_Update>
 80037f6:	eef0 7a40 	vmov.f32	s15, s0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	edc3 7a03 	vstr	s15, [r3, #12]
	output_mixer->PID_ROLL_OUTPUT = PIDController_Update(&pid_roll,output_mixer->SETPOINT_YPRA[2],output_mixer->MEASURE_YPRA[2],huartMsg);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	edd3 7a08 	vldr	s15, [r3, #32]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	eef0 0a47 	vmov.f32	s1, s14
 8003812:	eeb0 0a67 	vmov.f32	s0, s15
 8003816:	480a      	ldr	r0, [pc, #40]	; (8003840 <calculate_pid_values+0xb0>)
 8003818:	f000 f9b0 	bl	8003b7c <PIDController_Update>
 800381c:	eef0 7a40 	vmov.f32	s15, s0
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	edc3 7a02 	vstr	s15, [r3, #8]
	//output_mixer->PID_ALTITUDE_OUTPUT = PIDController_Update(&pid_altitude,setpoint_altitude,imu->altitude);
	output_mixer->PID_ALTITUDE_OUTPUT = output_mixer->SETPOINT_YPRA[3];
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	615a      	str	r2, [r3, #20]
	return OUTPUT_MIXER_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	200003c0 	.word	0x200003c0
 800383c:	20000430 	.word	0x20000430
 8003840:	200002f0 	.word	0x200002f0

08003844 <set_motor_pwm_values>:

int8_t set_motor_pwm_values(OUTPUT_MIXER *output_mixer){
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	 * 2		4			 [1]		[3]
	 *
	 *
	 */
	output_mixer->PWM_US_MOTOR[0] =
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	ed93 7a05 	vldr	s14, [r3, #20]
					- output_mixer->PID_ROLL_OUTPUT
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	edd3 7a02 	vldr	s15, [r3, #8]
 8003858:	ee37 7a67 	vsub.f32	s14, s14, s15
					- output_mixer->PID_PITCH_OUTPUT
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003862:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ output_mixer->PID_YAW_OUTPUT);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	edd3 7a04 	vldr	s15, [r3, #16]
 800386c:	ee77 7a27 	vadd.f32	s15, s14, s15
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 8003870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003874:	ee17 3a90 	vmov	r3, s15
 8003878:	b29a      	uxth	r2, r3
	output_mixer->PWM_US_MOTOR[0] =
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	801a      	strh	r2, [r3, #0]
	output_mixer->PWM_US_MOTOR[1] =
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	ed93 7a05 	vldr	s14, [r3, #20]
					+ output_mixer->PID_ROLL_OUTPUT
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	edd3 7a02 	vldr	s15, [r3, #8]
 800388a:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ output_mixer->PID_PITCH_OUTPUT
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	edd3 7a03 	vldr	s15, [r3, #12]
 8003894:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ output_mixer->PID_YAW_OUTPUT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	edd3 7a04 	vldr	s15, [r3, #16]
 800389e:	ee77 7a27 	vadd.f32	s15, s14, s15
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 80038a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038a6:	ee17 3a90 	vmov	r3, s15
 80038aa:	b29a      	uxth	r2, r3
	output_mixer->PWM_US_MOTOR[1] =
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	805a      	strh	r2, [r3, #2]
	output_mixer->PWM_US_MOTOR[2] =
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	ed93 7a05 	vldr	s14, [r3, #20]
					+ output_mixer->PID_ROLL_OUTPUT
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80038bc:	ee37 7a27 	vadd.f32	s14, s14, s15
					- output_mixer->PID_PITCH_OUTPUT
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80038c6:	ee37 7a67 	vsub.f32	s14, s14, s15
					- output_mixer->PID_YAW_OUTPUT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80038d0:	ee77 7a67 	vsub.f32	s15, s14, s15
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 80038d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038d8:	ee17 3a90 	vmov	r3, s15
 80038dc:	b29a      	uxth	r2, r3
	output_mixer->PWM_US_MOTOR[2] =
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	809a      	strh	r2, [r3, #4]
	output_mixer->PWM_US_MOTOR[3] =
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	ed93 7a05 	vldr	s14, [r3, #20]
					- output_mixer->PID_ROLL_OUTPUT
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80038ee:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ output_mixer->PID_PITCH_OUTPUT
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80038f8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- output_mixer->PID_YAW_OUTPUT);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8003902:	ee77 7a67 	vsub.f32	s15, s14, s15
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 8003906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800390a:	ee17 3a90 	vmov	r3, s15
 800390e:	b29a      	uxth	r2, r3
	output_mixer->PWM_US_MOTOR[3] =
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	80da      	strh	r2, [r3, #6]
	/* Clamp output*/
	for (uint8_t i = 0; i < 4; i++) {
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	e01d      	b.n	8003956 <set_motor_pwm_values+0x112>
		if (output_mixer->PWM_US_MOTOR[i] > OUTPUT_MIXER_MAX_PWM) {
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003922:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003926:	d906      	bls.n	8003936 <set_motor_pwm_values+0xf2>
			output_mixer->PWM_US_MOTOR[i] = OUTPUT_MIXER_MAX_PWM;
 8003928:	7bfa      	ldrb	r2, [r7, #15]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003930:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003934:	e00c      	b.n	8003950 <set_motor_pwm_values+0x10c>
		} else if (output_mixer->PWM_US_MOTOR[i] < OUTPUT_MIXER_MIN_PWM) {
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800393e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003942:	d205      	bcs.n	8003950 <set_motor_pwm_values+0x10c>
			output_mixer->PWM_US_MOTOR[i] = OUTPUT_MIXER_MIN_PWM;
 8003944:	7bfa      	ldrb	r2, [r7, #15]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800394c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint8_t i = 0; i < 4; i++) {
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	3301      	adds	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d9de      	bls.n	800391a <set_motor_pwm_values+0xd6>
		}
	}

	return OUTPUT_MIXER_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <stop_motors>:

int8_t stop_motors(OUTPUT_MIXER *output_mixer){
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]

	output_mixer->PWM_US_MOTOR[0] = 0;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	801a      	strh	r2, [r3, #0]
	output_mixer->PWM_US_MOTOR[1] = 0;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	805a      	strh	r2, [r3, #2]
	output_mixer->PWM_US_MOTOR[2] = 0;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	809a      	strh	r2, [r3, #4]
	output_mixer->PWM_US_MOTOR[3] = 0;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	80da      	strh	r2, [r3, #6]

	return 1;
 800398a:	2301      	movs	r3, #1
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <update_pid>:

int8_t update_pid(OUTPUT_MIXER *output_mixer,UART_HandleTypeDef* huartMsg) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Calculate PID*/
	rslt = calculate_pid_values(output_mixer, &imu,huartMsg);
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	4905      	ldr	r1, [pc, #20]	; (80039bc <update_pid+0x24>)
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff fef2 	bl	8003790 <calculate_pid_values>
 80039ac:	4603      	mov	r3, r0
 80039ae:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80039b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000328 	.word	0x20000328

080039c0 <update_imu>:

int8_t update_imu(OUTPUT_MIXER *output_mixer, I2C_HandleTypeDef *huartI2C,
		KUSBEGI_FLAGS *kusbegi_flags) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
	int8_t rslt;

	/* Read IMU*/
	rslt = read_imu(&imu, huartI2C, kusbegi_flags);
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	480c      	ldr	r0, [pc, #48]	; (8003a04 <update_imu+0x44>)
 80039d2:	f7fe fffb 	bl	80029cc <read_imu>
 80039d6:	4603      	mov	r3, r0
 80039d8:	75fb      	strb	r3, [r7, #23]
	if (rslt != IMU_READ_OK) {
 80039da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <update_imu+0x28>
		return rslt;
 80039e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039e6:	e008      	b.n	80039fa <update_imu+0x3a>
	}

	/* Copy IMU to output_mixer struct*/
	output_mixer->IMU = imu;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a06      	ldr	r2, [pc, #24]	; (8003a04 <update_imu+0x44>)
 80039ec:	33a8      	adds	r3, #168	; 0xa8
 80039ee:	4611      	mov	r1, r2
 80039f0:	2298      	movs	r2, #152	; 0x98
 80039f2:	4618      	mov	r0, r3
 80039f4:	f005 fc10 	bl	8009218 <memcpy>

	return OUTPUT_MIXER_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000328 	.word	0x20000328

08003a08 <update_barometer>:

int8_t update_barometer(OUTPUT_MIXER *output_mixer, I2C_HandleTypeDef *huartI2C){
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Read Barometer*/
	rslt = read_barometer(&imu,huartI2C);
 8003a12:	6839      	ldr	r1, [r7, #0]
 8003a14:	480c      	ldr	r0, [pc, #48]	; (8003a48 <update_barometer+0x40>)
 8003a16:	f7ff f9ad 	bl	8002d74 <read_barometer>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	73fb      	strb	r3, [r7, #15]
	if (rslt != IMU_READ_OK) {
 8003a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <update_barometer+0x24>
		return rslt;
 8003a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2a:	e008      	b.n	8003a3e <update_barometer+0x36>
	}

	/* Copy IMU to output_mixer struct*/
	output_mixer->IMU = imu;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a06      	ldr	r2, [pc, #24]	; (8003a48 <update_barometer+0x40>)
 8003a30:	33a8      	adds	r3, #168	; 0xa8
 8003a32:	4611      	mov	r1, r2
 8003a34:	2298      	movs	r2, #152	; 0x98
 8003a36:	4618      	mov	r0, r3
 8003a38:	f005 fbee 	bl	8009218 <memcpy>

	return OUTPUT_MIXER_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000328 	.word	0x20000328

08003a4c <update_rc>:

int8_t update_rc(OUTPUT_MIXER *output_mixer, UART_HandleTypeDef *huartRC,KUSBEGI_FLAGS *kusbegi_flags) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
	int8_t rslt;
	/*Read RC*/
	rslt = update_rc_input(huartRC, &rc_input);
 8003a58:	4935      	ldr	r1, [pc, #212]	; (8003b30 <update_rc+0xe4>)
 8003a5a:	68b8      	ldr	r0, [r7, #8]
 8003a5c:	f000 f956 	bl	8003d0c <update_rc_input>
 8003a60:	4603      	mov	r3, r0
 8003a62:	75fb      	strb	r3, [r7, #23]
	if (rslt != RC_INPUT_OK) {
 8003a64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <update_rc+0x26>
		return rslt;
 8003a6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a70:	e059      	b.n	8003b26 <update_rc+0xda>
	}

	if(rc_input.connection_error){
 8003a72:	4b2f      	ldr	r3, [pc, #188]	; (8003b30 <update_rc+0xe4>)
 8003a74:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <update_rc+0x3c>
		kusbegi_flags->FLAG_RC_CONNECTION_E = 1;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	735a      	strb	r2, [r3, #13]
		return RC_INPUT_E_CONN_LOST;
 8003a82:	f06f 0316 	mvn.w	r3, #22
 8003a86:	e04e      	b.n	8003b26 <update_rc+0xda>
	}
	else{
		kusbegi_flags->FLAG_RC_CONNECTION_E = 0;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	735a      	strb	r2, [r3, #13]
	}

	if(rc_input.failsafe_state){
 8003a8e:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <update_rc+0xe4>)
 8003a90:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <update_rc+0x58>
		kusbegi_flags->FLAG_RC_FAILSAFE = 1;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	739a      	strb	r2, [r3, #14]
		return RC_INPUT_E_FAILSAFE;
 8003a9e:	f06f 0318 	mvn.w	r3, #24
 8003aa2:	e040      	b.n	8003b26 <update_rc+0xda>
	}
	else{
		kusbegi_flags->FLAG_RC_FAILSAFE = 0;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	739a      	strb	r2, [r3, #14]
	}

	if(rc_input.frame_lost){
 8003aaa:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <update_rc+0xe4>)
 8003aac:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <update_rc+0x74>
		kusbegi_flags->FLAG_RC_FRAME_LOST = 1;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	731a      	strb	r2, [r3, #12]
		return RC_INPUT_E_FRAME_LOST;
 8003aba:	f06f 0317 	mvn.w	r3, #23
 8003abe:	e032      	b.n	8003b26 <update_rc+0xda>
	}
	else{
		kusbegi_flags->FLAG_RC_FRAME_LOST = 0;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	731a      	strb	r2, [r3, #12]
	}

	if(rc_input.rc_channels[kill_s].bool_value != kusbegi_flags->KILL_S){
 8003ac6:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <update_rc+0xe4>)
 8003ac8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	7a1b      	ldrb	r3, [r3, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d007      	beq.n	8003ae4 <update_rc+0x98>
		kusbegi_flags->KILL_S = rc_input.rc_channels[kill_s].bool_value;
 8003ad4:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <update_rc+0xe4>)
 8003ad6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	721a      	strb	r2, [r3, #8]
		kusbegi_flags->KILL_S_CHANGE = 1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	725a      	strb	r2, [r3, #9]
	}

	if(output_mixer->RC_INPUT.arm_state !=rc_input.arm_state){
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <update_rc+0xe4>)
 8003aec:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d002      	beq.n	8003afa <update_rc+0xae>
		kusbegi_flags->FLAG_ARM_CHANGE = 1;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	72da      	strb	r2, [r3, #11]
	}

	if ((output_mixer->RC_INPUT.rc_channels[mode].bool_value
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
			!= rc_input.rc_channels[mode].bool_value)) {
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <update_rc+0xe4>)
 8003b02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	if ((output_mixer->RC_INPUT.rc_channels[mode].bool_value
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d002      	beq.n	8003b10 <update_rc+0xc4>

		kusbegi_flags->FLAG_MODE_CHANGE = 1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	729a      	strb	r2, [r3, #10]
	}


	/* Copy RC to output_mixer struct*/
	output_mixer->RC_INPUT = rc_input;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a07      	ldr	r2, [pc, #28]	; (8003b30 <update_rc+0xe4>)
 8003b14:	3338      	adds	r3, #56	; 0x38
 8003b16:	4611      	mov	r1, r2
 8003b18:	2270      	movs	r2, #112	; 0x70
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f005 fb7c 	bl	8009218 <memcpy>





	return rc_input.rc_channels[throttle].pwm_value;
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <update_rc+0xe4>)
 8003b22:	885b      	ldrh	r3, [r3, #2]
 8003b24:	b25b      	sxtb	r3, r3
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000468 	.word	0x20000468

08003b34 <PIDController_Init>:
 * Language:  C
 */

#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	635a      	str	r2, [r3, #52]	; 0x34

	/* In order to avoid divide by zero error*/
	pid->deltaT = 0.01f;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <PIDController_Init+0x44>)
 8003b68:	621a      	str	r2, [r3, #32]

}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	3c23d70a 	.word	0x3c23d70a

08003b7c <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement,UART_HandleTypeDef* huartMsg) {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b88:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]

	/*
	 * Get time passed
	 */
	pid->deltaT = (float)(HAL_GetTick() - pid->last_pid_time);
 8003b8e:	f001 fc57 	bl	8005440 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	edc3 7a08 	vstr	s15, [r3, #32]

	/*
	 * Time should be in second. Should translate from ms to s.
	 */
	pid->deltaT = pid->deltaT / 1000.0f;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	ed93 7a08 	vldr	s14, [r3, #32]
 8003bae:	eddf 6a56 	vldr	s13, [pc, #344]	; 8003d08 <PIDController_Update+0x18c>
 8003bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	edc3 7a08 	vstr	s15, [r3, #32]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8003bbc:	ed97 7a02 	vldr	s14, [r7, #8]
 8003bc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bc8:	edc7 7a05 	vstr	s15, [r7, #20]

	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bd2:	ed97 7a05 	vldr	s14, [r7, #20]
 8003bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bda:	edc7 7a04 	vstr	s15, [r7, #16]

	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->deltaT * (error + pid->prevError);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003bee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	edd3 7a08 	vldr	s15, [r3, #32]
 8003bf8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8003c02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c06:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	edd3 7a07 	vldr	s15, [r3, #28]
 8003c24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2c:	dd04      	ble.n	8003c38 <PIDController_Update+0xbc>

        pid->integrator = pid->limMaxInt;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24
 8003c36:	e00e      	b.n	8003c56 <PIDController_Update+0xda>

    } else if (pid->integrator < pid->limMinInt) {
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4c:	d503      	bpl.n	8003c56 <PIDController_Update+0xda>

        pid->integrator = pid->limMinInt;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24

	/*
	* Derivative (band-limited differentiator)
	* To eleminate derivative kick we use change in measurement
	*/
    pid->differentiator = -1.0f * pid->Kd * (measurement - pid->prevMeasurement)/ pid->deltaT;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c5c:	eeb1 7a67 	vneg.f32	s14, s15
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003c66:	edd7 6a01 	vldr	s13, [r7, #4]
 8003c6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c6e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	ed93 7a08 	vldr	s14, [r3, #32]
 8003c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	/*
	* Compute output and clamp
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003c88:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	edd3 7a05 	vldr	s15, [r3, #20]
 8003cac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb4:	dd04      	ble.n	8003cc0 <PIDController_Update+0x144>

        pid->out = pid->limMax;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8003cbe:	e00e      	b.n	8003cde <PIDController_Update+0x162>

    } else if (pid->out < pid->limMin) {
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ccc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd4:	d503      	bpl.n	8003cde <PIDController_Update+0x162>

        pid->out = pid->limMin;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	635a      	str	r2, [r3, #52]	; 0x34
//	sendString(" pid->differentiator : ",huartMsg,0);
//	sendFloat( pid->differentiator,huartMsg,1);


	/* Store error and measurement for later use */
    pid->prevError       = error;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30

    /*
     * Save last pid time for later use
     */
    pid->last_pid_time = HAL_GetTick();
 8003cea:	f001 fba9 	bl	8005440 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	601a      	str	r2, [r3, #0]


	/* Return controller output */
    return pid->out;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf8:	ee07 3a90 	vmov	s15, r3

}
 8003cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	447a0000 	.word	0x447a0000

08003d0c <update_rc_input>:
#include "rc_input_mixer.h"

#ifdef RC_INPUT_IS_SBUS
#include "rc_input_sbus.h"

int8_t update_rc_input(UART_HandleTypeDef *huartRC,RC_INPUT *rc_input){
 8003d0c:	b590      	push	{r4, r7, lr}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
	if(RC_READ_SBUS(huartRC,&sbus)){
 8003d16:	49b5      	ldr	r1, [pc, #724]	; (8003fec <update_rc_input+0x2e0>)
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fa3b 	bl	8004194 <RC_READ_SBUS>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 81f3 	beq.w	800410c <update_rc_input+0x400>

		/* Reading channel pwm values */
		for (uint8_t i = 0; i < RC_INPUT_MIXER_CHANNEL_CNT; i++) {
 8003d26:	2300      	movs	r3, #0
 8003d28:	73fb      	strb	r3, [r7, #15]
 8003d2a:	e1bd      	b.n	80040a8 <update_rc_input+0x39c>
			rc_input->rc_channels[i].pwm_value = sbus.PWM_US_RC_CH[i];
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	49ae      	ldr	r1, [pc, #696]	; (8003fec <update_rc_input+0x2e0>)
 8003d32:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8003d36:	6839      	ldr	r1, [r7, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	3302      	adds	r3, #2
 8003d44:	4602      	mov	r2, r0
 8003d46:	801a      	strh	r2, [r3, #0]
			rc_input->rc_channels[i].channel_name = i;
 8003d48:	7bfa      	ldrb	r2, [r7, #15]
 8003d4a:	6839      	ldr	r1, [r7, #0]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	701a      	strb	r2, [r3, #0]

			/* Now Map the values.
			 * Each channel has its own mapping or bool state.
			 */
			if (rc_input->rc_channels[i].channel_name == throttle) {
 8003d5a:	7bfa      	ldrb	r2, [r7, #15]
 8003d5c:	6839      	ldr	r1, [r7, #0]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d120      	bne.n	8003db0 <update_rc_input+0xa4>
				rc_input->rc_channels[i].mapped_value = MAPF(
 8003d6e:	7bfa      	ldrb	r2, [r7, #15]
 8003d70:	6839      	ldr	r1, [r7, #0]
 8003d72:	4613      	mov	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	8818      	ldrh	r0, [r3, #0]
 8003d80:	7bfc      	ldrb	r4, [r7, #15]
 8003d82:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d8c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003d90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003d94:	f000 fe39 	bl	8004a0a <MAPF>
 8003d98:	eef0 7a40 	vmov.f32	s15, s0
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	4623      	mov	r3, r4
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4423      	add	r3, r4
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	3304      	adds	r3, #4
 8003daa:	edc3 7a00 	vstr	s15, [r3]
 8003dae:	e178      	b.n	80040a2 <update_rc_input+0x396>
						rc_input->rc_channels[i].pwm_value, 1000, 2000, 1000, 2000);
			} else if (rc_input->rc_channels[i].channel_name == yaw) {
 8003db0:	7bfa      	ldrb	r2, [r7, #15]
 8003db2:	6839      	ldr	r1, [r7, #0]
 8003db4:	4613      	mov	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d11f      	bne.n	8003e04 <update_rc_input+0xf8>
				rc_input->rc_channels[i].mapped_value = MAPF(
 8003dc4:	7bfa      	ldrb	r2, [r7, #15]
 8003dc6:	6839      	ldr	r1, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	3302      	adds	r3, #2
 8003dd4:	8818      	ldrh	r0, [r3, #0]
 8003dd6:	7bfc      	ldrb	r4, [r7, #15]
 8003dd8:	2314      	movs	r3, #20
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	f06f 0313 	mvn.w	r3, #19
 8003de0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003de4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003de8:	f000 fe0f 	bl	8004a0a <MAPF>
 8003dec:	eef0 7a40 	vmov.f32	s15, s0
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	4623      	mov	r3, r4
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4423      	add	r3, r4
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	edc3 7a00 	vstr	s15, [r3]
 8003e02:	e14e      	b.n	80040a2 <update_rc_input+0x396>
						rc_input->rc_channels[i].pwm_value, 1000, 2000,
						-RC_INPUT_MIXER_YAW_MINMAX, RC_INPUT_MIXER_YAW_MINMAX);
			} else if (rc_input->rc_channels[i].channel_name == pitch) {
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	6839      	ldr	r1, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d11f      	bne.n	8003e58 <update_rc_input+0x14c>
				rc_input->rc_channels[i].mapped_value = MAPF(
 8003e18:	7bfa      	ldrb	r2, [r7, #15]
 8003e1a:	6839      	ldr	r1, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	3302      	adds	r3, #2
 8003e28:	8818      	ldrh	r0, [r3, #0]
 8003e2a:	7bfc      	ldrb	r4, [r7, #15]
 8003e2c:	2314      	movs	r3, #20
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	f06f 0313 	mvn.w	r3, #19
 8003e34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e3c:	f000 fde5 	bl	8004a0a <MAPF>
 8003e40:	eef0 7a40 	vmov.f32	s15, s0
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	4623      	mov	r3, r4
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4423      	add	r3, r4
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	3304      	adds	r3, #4
 8003e52:	edc3 7a00 	vstr	s15, [r3]
 8003e56:	e124      	b.n	80040a2 <update_rc_input+0x396>
						rc_input->rc_channels[i].pwm_value, 1000, 2000,
						-RC_INPUT_MIXER_PITCH_MINMAX,
						RC_INPUT_MIXER_PITCH_MINMAX);
			} else if (rc_input->rc_channels[i].channel_name == roll) {
 8003e58:	7bfa      	ldrb	r2, [r7, #15]
 8003e5a:	6839      	ldr	r1, [r7, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d11f      	bne.n	8003eac <update_rc_input+0x1a0>
				rc_input->rc_channels[i].mapped_value = MAPF(
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	6839      	ldr	r1, [r7, #0]
 8003e70:	4613      	mov	r3, r2
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	8818      	ldrh	r0, [r3, #0]
 8003e7e:	7bfc      	ldrb	r4, [r7, #15]
 8003e80:	2314      	movs	r3, #20
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	f06f 0313 	mvn.w	r3, #19
 8003e88:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e90:	f000 fdbb 	bl	8004a0a <MAPF>
 8003e94:	eef0 7a40 	vmov.f32	s15, s0
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	4423      	add	r3, r4
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	edc3 7a00 	vstr	s15, [r3]
 8003eaa:	e0fa      	b.n	80040a2 <update_rc_input+0x396>
						rc_input->rc_channels[i].pwm_value, 1000, 2000,
						-RC_INPUT_MIXER_ROLL_MINMAX,
						RC_INPUT_MIXER_ROLL_MINMAX);
			} else if (rc_input->rc_channels[i].channel_name == mode) {
 8003eac:	7bfa      	ldrb	r2, [r7, #15]
 8003eae:	6839      	ldr	r1, [r7, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d13a      	bne.n	8003f36 <update_rc_input+0x22a>
				if (rc_input->rc_channels[i].pwm_value
 8003ec0:	7bfa      	ldrb	r2, [r7, #15]
 8003ec2:	6839      	ldr	r1, [r7, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	3302      	adds	r3, #2
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	f240 5245 	movw	r2, #1349	; 0x545
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d80a      	bhi.n	8003ef0 <update_rc_input+0x1e4>
						< RC_INPUT_MIXER_MODE1_TH)
					rc_input->rc_channels[i].bool_value = 1;
 8003eda:	7bfa      	ldrb	r2, [r7, #15]
 8003edc:	6839      	ldr	r1, [r7, #0]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3308      	adds	r3, #8
 8003eea:	2201      	movs	r2, #1
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e0d8      	b.n	80040a2 <update_rc_input+0x396>
				else if(rc_input->rc_channels[i].pwm_value
 8003ef0:	7bfa      	ldrb	r2, [r7, #15]
 8003ef2:	6839      	ldr	r1, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	3302      	adds	r3, #2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d80a      	bhi.n	8003f20 <update_rc_input+0x214>
						< RC_INPUT_MIXER_MODE2_TH)
					rc_input->rc_channels[i].bool_value = 2;
 8003f0a:	7bfa      	ldrb	r2, [r7, #15]
 8003f0c:	6839      	ldr	r1, [r7, #0]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	3308      	adds	r3, #8
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e0c0      	b.n	80040a2 <update_rc_input+0x396>
				else
					rc_input->rc_channels[i].bool_value = 3;
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	6839      	ldr	r1, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3308      	adds	r3, #8
 8003f30:	2203      	movs	r2, #3
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	e0b5      	b.n	80040a2 <update_rc_input+0x396>
			} else if (rc_input->rc_channels[i].channel_name == kill_s) {
 8003f36:	7bfa      	ldrb	r2, [r7, #15]
 8003f38:	6839      	ldr	r1, [r7, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d122      	bne.n	8003f90 <update_rc_input+0x284>
				if (rc_input->rc_channels[i].pwm_value
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	6839      	ldr	r1, [r7, #0]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	3302      	adds	r3, #2
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	f240 52db 	movw	r2, #1499	; 0x5db
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d90a      	bls.n	8003f7a <update_rc_input+0x26e>
						>= RC_INPUT_MIXER_SWITCH_TH)
					rc_input->rc_channels[i].bool_value = 1;
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	6839      	ldr	r1, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	3308      	adds	r3, #8
 8003f74:	2201      	movs	r2, #1
 8003f76:	701a      	strb	r2, [r3, #0]
 8003f78:	e093      	b.n	80040a2 <update_rc_input+0x396>
				else
					rc_input->rc_channels[i].bool_value = 0;
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	6839      	ldr	r1, [r7, #0]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	3308      	adds	r3, #8
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	e088      	b.n	80040a2 <update_rc_input+0x396>
			} else if (rc_input->rc_channels[i].channel_name == rth) {
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	6839      	ldr	r1, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b06      	cmp	r3, #6
 8003fa2:	d125      	bne.n	8003ff0 <update_rc_input+0x2e4>
				if (rc_input->rc_channels[i].pwm_value
 8003fa4:	7bfa      	ldrb	r2, [r7, #15]
 8003fa6:	6839      	ldr	r1, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	3302      	adds	r3, #2
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	f240 52db 	movw	r2, #1499	; 0x5db
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d90a      	bls.n	8003fd4 <update_rc_input+0x2c8>
						>= RC_INPUT_MIXER_SWITCH_TH)
					rc_input->rc_channels[i].bool_value = 1;
 8003fbe:	7bfa      	ldrb	r2, [r7, #15]
 8003fc0:	6839      	ldr	r1, [r7, #0]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	3308      	adds	r3, #8
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e066      	b.n	80040a2 <update_rc_input+0x396>
				else
					rc_input->rc_channels[i].bool_value = 0;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	6839      	ldr	r1, [r7, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e05b      	b.n	80040a2 <update_rc_input+0x396>
 8003fea:	bf00      	nop
 8003fec:	200004d8 	.word	0x200004d8
			} else if (rc_input->rc_channels[i].channel_name == land) {
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6839      	ldr	r1, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b07      	cmp	r3, #7
 8004002:	d122      	bne.n	800404a <update_rc_input+0x33e>
				if (rc_input->rc_channels[i].pwm_value
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	6839      	ldr	r1, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	3302      	adds	r3, #2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	f240 52db 	movw	r2, #1499	; 0x5db
 800401a:	4293      	cmp	r3, r2
 800401c:	d90a      	bls.n	8004034 <update_rc_input+0x328>
						>= RC_INPUT_MIXER_SWITCH_TH)
					rc_input->rc_channels[i].bool_value = 1;
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	4613      	mov	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	3308      	adds	r3, #8
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	e036      	b.n	80040a2 <update_rc_input+0x396>
				else
					rc_input->rc_channels[i].bool_value = 0;
 8004034:	7bfa      	ldrb	r2, [r7, #15]
 8004036:	6839      	ldr	r1, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	3308      	adds	r3, #8
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
 8004048:	e02b      	b.n	80040a2 <update_rc_input+0x396>
			} else if (rc_input->rc_channels[i].channel_name == offboard) {
 800404a:	7bfa      	ldrb	r2, [r7, #15]
 800404c:	6839      	ldr	r1, [r7, #0]
 800404e:	4613      	mov	r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b08      	cmp	r3, #8
 800405c:	d121      	bne.n	80040a2 <update_rc_input+0x396>
				if (rc_input->rc_channels[i].pwm_value
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	6839      	ldr	r1, [r7, #0]
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	3302      	adds	r3, #2
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	f240 52db 	movw	r2, #1499	; 0x5db
 8004074:	4293      	cmp	r3, r2
 8004076:	d90a      	bls.n	800408e <update_rc_input+0x382>
						>= RC_INPUT_MIXER_SWITCH_TH)
					rc_input->rc_channels[i].bool_value = 1;
 8004078:	7bfa      	ldrb	r2, [r7, #15]
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	3308      	adds	r3, #8
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e009      	b.n	80040a2 <update_rc_input+0x396>
				else
					rc_input->rc_channels[i].bool_value = 0;
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	6839      	ldr	r1, [r7, #0]
 8004092:	4613      	mov	r3, r2
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	3308      	adds	r3, #8
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < RC_INPUT_MIXER_CHANNEL_CNT; i++) {
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	3301      	adds	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	f67f ae3e 	bls.w	8003d2c <update_rc_input+0x20>
			}

		}

		/* Check if arm state changed*/
		if(sbus.arm){
 80040b0:	4b20      	ldr	r3, [pc, #128]	; (8004134 <update_rc_input+0x428>)
 80040b2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <update_rc_input+0x3b6>
			rc_input->arm_state = 1;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		}

		/* Check if arm state changed*/
		if(sbus.disarm){
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <update_rc_input+0x428>)
 80040c4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <update_rc_input+0x3c8>
			rc_input->arm_state = 0;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		}

		/* Check failsafe*/
		if(sbus.failsafe){
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <update_rc_input+0x428>)
 80040d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <update_rc_input+0x3dc>
			rc_input->failsafe_state = 1;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 80040e6:	e003      	b.n	80040f0 <update_rc_input+0x3e4>
		}
		else{
			rc_input->failsafe_state = 0;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		}

		/* Check frame lost */
		if(sbus.frame_lost){
 80040f0:	4b10      	ldr	r3, [pc, #64]	; (8004134 <update_rc_input+0x428>)
 80040f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d004      	beq.n	8004104 <update_rc_input+0x3f8>
			rc_input->failsafe_state = 1;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8004102:	e003      	b.n	800410c <update_rc_input+0x400>
		}
		else{
			rc_input->failsafe_state = 0;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d




	}
	if(sbus.error){
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <update_rc_input+0x428>)
 800410e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <update_rc_input+0x414>
		rc_input->connection_error = 1;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 800411e:	e003      	b.n	8004128 <update_rc_input+0x41c>
	}
	else{
		rc_input->connection_error = 0;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	}

	return RC_INPUT_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	bd90      	pop	{r4, r7, pc}
 8004132:	bf00      	nop
 8004134:	200004d8 	.word	0x200004d8

08004138 <init_rc_input>:


int8_t init_rc_input(RC_INPUT *rc_input){
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	rc_input->rc_channels[throttle].pwm_value = 0;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	805a      	strh	r2, [r3, #2]
	rc_input->rc_channels[yaw].pwm_value = 0;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	84da      	strh	r2, [r3, #38]	; 0x26
	rc_input->rc_channels[pitch].pwm_value = 0;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	835a      	strh	r2, [r3, #26]
	rc_input->rc_channels[roll].pwm_value = 0;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	81da      	strh	r2, [r3, #14]
	rc_input->arm_state = 0;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	sbus.arm = 0;
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <init_rc_input+0x58>)
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sbus.disarm = 0;
 8004168:	4b09      	ldr	r3, [pc, #36]	; (8004190 <init_rc_input+0x58>)
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	sbus.arm_cnt = 0;
 8004170:	4b07      	ldr	r3, [pc, #28]	; (8004190 <init_rc_input+0x58>)
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	sbus.disarm_cnt = 0;
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <init_rc_input+0x58>)
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	return RC_INPUT_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	200004d8 	.word	0x200004d8

08004194 <RC_READ_SBUS>:
 * Language:  C
 */
#include <lib/rc_input/rc_input_sbus.h>


uint8_t RC_READ_SBUS(UART_HandleTypeDef *huart,SBUS *sbus) {
 8004194:	b590      	push	{r4, r7, lr}
 8004196:	b087      	sub	sp, #28
 8004198:	af02      	add	r7, sp, #8
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]

	HAL_UART_Receive_DMA(huart, sbus->sbus_msg_bytes, 25);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	3325      	adds	r3, #37	; 0x25
 80041a2:	2219      	movs	r2, #25
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f004 f8da 	bl	8008360 <HAL_UART_Receive_DMA>

	if (sbus->sbus_msg_bytes[0] != 0x0F) {
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041b2:	2b0f      	cmp	r3, #15
 80041b4:	d012      	beq.n	80041dc <RC_READ_SBUS+0x48>
		//Error out of sync
		sbus->error_cnt++;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041bc:	3301      	adds	r3, #1
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		if (sbus->error_cnt > SBUS_ERROR_CNT) {
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041cc:	2b0a      	cmp	r3, #10
 80041ce:	d903      	bls.n	80041d8 <RC_READ_SBUS+0x44>
			sbus->error = 1;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		}
		return 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	e1ec      	b.n	80045b6 <RC_READ_SBUS+0x422>
	}

	sbus->error = 0;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sbus->error_cnt = 0;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sbus->frame_lost = 0;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2020 	strb.w	r2, [r3, #32]
	sbus->failsafe = 0;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004202:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[2] << 8)) & 0x07FF;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	b21b      	sxth	r3, r3
 800420e:	4313      	orrs	r3, r2
 8004210:	b21b      	sxth	r3, r3
 8004212:	b29b      	uxth	r3, r3
 8004214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004218:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	801a      	strh	r2, [r3, #0]
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
				| ((uint16_t) sbus->sbus_msg_bytes[3] << 5)) & 0x07FF;
 8004224:	08db      	lsrs	r3, r3, #3
 8004226:	b2db      	uxtb	r3, r3
 8004228:	b21a      	sxth	r2, r3
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004230:	015b      	lsls	r3, r3, #5
 8004232:	b21b      	sxth	r3, r3
 8004234:	4313      	orrs	r3, r2
 8004236:	b21b      	sxth	r3, r3
 8004238:	b29b      	uxth	r3, r3
 800423a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800423e:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	805a      	strh	r2, [r3, #2]
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
				| ((uint16_t) sbus->sbus_msg_bytes[4] << 2)
 800424a:	099b      	lsrs	r3, r3, #6
 800424c:	b2db      	uxtb	r3, r3
 800424e:	b21a      	sxth	r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	b21b      	sxth	r3, r3
 800425a:	4313      	orrs	r3, r2
 800425c:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[5] << 10)) & 0x07FF;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004264:	029b      	lsls	r3, r3, #10
 8004266:	b21b      	sxth	r3, r3
 8004268:	4313      	orrs	r3, r2
 800426a:	b21b      	sxth	r3, r3
 800426c:	b29b      	uxth	r3, r3
 800426e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004272:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	809a      	strh	r2, [r3, #4]
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
				| ((uint16_t) sbus->sbus_msg_bytes[6] << 7)) & 0x07FF;
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	b2db      	uxtb	r3, r3
 8004282:	b21a      	sxth	r2, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800428a:	01db      	lsls	r3, r3, #7
 800428c:	b21b      	sxth	r3, r3
 800428e:	4313      	orrs	r3, r2
 8004290:	b21b      	sxth	r3, r3
 8004292:	b29b      	uxth	r3, r3
 8004294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004298:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	80da      	strh	r2, [r3, #6]
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
				| ((uint16_t) sbus->sbus_msg_bytes[7] << 4)) & 0x07FF;
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	b21a      	sxth	r2, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	b21b      	sxth	r3, r3
 80042b4:	4313      	orrs	r3, r2
 80042b6:	b21b      	sxth	r3, r3
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042be:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	811a      	strh	r2, [r3, #8]
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
				| ((uint16_t) sbus->sbus_msg_bytes[8] << 1)
 80042ca:	09db      	lsrs	r3, r3, #7
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	b21a      	sxth	r2, r3
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	b21b      	sxth	r3, r3
 80042da:	4313      	orrs	r3, r2
 80042dc:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[9] << 9)) & 0x07FF;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80042e4:	025b      	lsls	r3, r3, #9
 80042e6:	b21b      	sxth	r3, r3
 80042e8:	4313      	orrs	r3, r2
 80042ea:	b21b      	sxth	r3, r3
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042f2:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	815a      	strh	r2, [r3, #10]
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
				| ((uint16_t) sbus->sbus_msg_bytes[10] << 6)) & 0x07FF;
 80042fe:	089b      	lsrs	r3, r3, #2
 8004300:	b2db      	uxtb	r3, r3
 8004302:	b21a      	sxth	r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800430a:	019b      	lsls	r3, r3, #6
 800430c:	b21b      	sxth	r3, r3
 800430e:	4313      	orrs	r3, r2
 8004310:	b21b      	sxth	r3, r3
 8004312:	b29b      	uxth	r3, r3
 8004314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004318:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	819a      	strh	r2, [r3, #12]
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
				| ((uint16_t) sbus->sbus_msg_bytes[11] << 3)) & 0x07FF;
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	b2db      	uxtb	r3, r3
 8004328:	b21a      	sxth	r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	b21b      	sxth	r3, r3
 8004334:	4313      	orrs	r3, r2
 8004336:	b21b      	sxth	r3, r3
 8004338:	b29b      	uxth	r3, r3
 800433a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800433e:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	81da      	strh	r2, [r3, #14]
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800434a:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[13] << 8)) & 0x07FF;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	b21b      	sxth	r3, r3
 8004356:	4313      	orrs	r3, r2
 8004358:	b21b      	sxth	r3, r3
 800435a:	b29b      	uxth	r3, r3
 800435c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004360:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	821a      	strh	r2, [r3, #16]
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
				| ((uint16_t) sbus->sbus_msg_bytes[14] << 5)) & 0x07FF;
 800436c:	08db      	lsrs	r3, r3, #3
 800436e:	b2db      	uxtb	r3, r3
 8004370:	b21a      	sxth	r2, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004378:	015b      	lsls	r3, r3, #5
 800437a:	b21b      	sxth	r3, r3
 800437c:	4313      	orrs	r3, r2
 800437e:	b21b      	sxth	r3, r3
 8004380:	b29b      	uxth	r3, r3
 8004382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004386:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	825a      	strh	r2, [r3, #18]
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
				| ((uint16_t) sbus->sbus_msg_bytes[15] << 2)
 8004392:	099b      	lsrs	r3, r3, #6
 8004394:	b2db      	uxtb	r3, r3
 8004396:	b21a      	sxth	r2, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	b21b      	sxth	r3, r3
 80043a2:	4313      	orrs	r3, r2
 80043a4:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[16] << 10)) & 0x07FF;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043ac:	029b      	lsls	r3, r3, #10
 80043ae:	b21b      	sxth	r3, r3
 80043b0:	4313      	orrs	r3, r2
 80043b2:	b21b      	sxth	r3, r3
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043ba:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	829a      	strh	r2, [r3, #20]
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				| ((uint16_t) sbus->sbus_msg_bytes[17] << 7)) & 0x07FF;
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	b21a      	sxth	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80043d2:	01db      	lsls	r3, r3, #7
 80043d4:	b21b      	sxth	r3, r3
 80043d6:	4313      	orrs	r3, r2
 80043d8:	b21b      	sxth	r3, r3
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043e0:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	82da      	strh	r2, [r3, #22]
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
				| ((uint16_t) sbus->sbus_msg_bytes[18] << 4)) & 0x07FF;
 80043ec:	091b      	lsrs	r3, r3, #4
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	b21a      	sxth	r2, r3
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	b21b      	sxth	r3, r3
 80043fc:	4313      	orrs	r3, r2
 80043fe:	b21b      	sxth	r3, r3
 8004400:	b29b      	uxth	r3, r3
 8004402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004406:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	831a      	strh	r2, [r3, #24]
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
				| ((uint16_t) sbus->sbus_msg_bytes[19] << 1)
 8004412:	09db      	lsrs	r3, r3, #7
 8004414:	b2db      	uxtb	r3, r3
 8004416:	b21a      	sxth	r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	b21b      	sxth	r3, r3
 8004422:	4313      	orrs	r3, r2
 8004424:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[20] << 9)) & 0x07FF;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800442c:	025b      	lsls	r3, r3, #9
 800442e:	b21b      	sxth	r3, r3
 8004430:	4313      	orrs	r3, r2
 8004432:	b21b      	sxth	r3, r3
 8004434:	b29b      	uxth	r3, r3
 8004436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800443a:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	835a      	strh	r2, [r3, #26]
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
				| ((uint16_t) sbus->sbus_msg_bytes[21] << 6)) & 0x07FF;
 8004446:	089b      	lsrs	r3, r3, #2
 8004448:	b2db      	uxtb	r3, r3
 800444a:	b21a      	sxth	r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004452:	019b      	lsls	r3, r3, #6
 8004454:	b21b      	sxth	r3, r3
 8004456:	4313      	orrs	r3, r2
 8004458:	b21b      	sxth	r3, r3
 800445a:	b29b      	uxth	r3, r3
 800445c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004460:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	839a      	strh	r2, [r3, #28]
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
				| ((uint16_t) sbus->sbus_msg_bytes[22] << 3)) & 0x07FF;
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	b2db      	uxtb	r3, r3
 8004470:	b21a      	sxth	r2, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	b21b      	sxth	r3, r3
 800447c:	4313      	orrs	r3, r2
 800447e:	b21b      	sxth	r3, r3
 8004480:	b29b      	uxth	r3, r3
 8004482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004486:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	83da      	strh	r2, [r3, #30]

	for (uint8_t i = 0; i <= SBUS_MAX_CHANNEL_CNT; i++) {
 800448c:	2300      	movs	r3, #0
 800448e:	73fb      	strb	r3, [r7, #15]
 8004490:	e016      	b.n	80044c0 <RC_READ_SBUS+0x32c>
		sbus->PWM_US_RC_CH[i] = MAP(sbus->PWM_US_RC_CH[i], SBUS_IN_MIN_PWM,
 8004492:	7bfa      	ldrb	r2, [r7, #15]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800449a:	7bfc      	ldrb	r4, [r7, #15]
 800449c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044a6:	f240 7213 	movw	r2, #1811	; 0x713
 80044aa:	21ac      	movs	r1, #172	; 0xac
 80044ac:	f000 fa88 	bl	80049c0 <MAP>
 80044b0:	4603      	mov	r3, r0
 80044b2:	461a      	mov	r2, r3
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (uint8_t i = 0; i <= SBUS_MAX_CHANNEL_CNT; i++) {
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	3301      	adds	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d9e5      	bls.n	8004492 <RC_READ_SBUS+0x2fe>
				SBUS_IN_MAX_PWM, SBUS_OUT_MIN_PWM, SBUS_OUT_MAX_PWM);
	}

	if (sbus->sbus_msg_bytes[23] & (1 << 2)) {
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <RC_READ_SBUS+0x348>
		sbus->frame_lost = 1;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2020 	strb.w	r2, [r3, #32]
	}

	if (sbus->sbus_msg_bytes[23] & (1 << 3)) {
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <RC_READ_SBUS+0x35e>
		sbus->failsafe = 1;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

#ifdef SBUS_ARM_DISARM_STICKS
	if (sbus->PWM_US_RC_CH[SBUS_THROTTLE_CHANNEL]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	f240 4206 	movw	r2, #1030	; 0x406
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d84a      	bhi.n	8004594 <RC_READ_SBUS+0x400>
			<= (1000 + SBUS_ARM_DISARM_TOLARANCE)) {
		if (sbus->PWM_US_RC_CH[SBUS_YAW_CHANNEL]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	88db      	ldrh	r3, [r3, #6]
 8004502:	f240 4206 	movw	r2, #1030	; 0x406
 8004506:	4293      	cmp	r3, r2
 8004508:	d816      	bhi.n	8004538 <RC_READ_SBUS+0x3a4>
				<= (1000 + SBUS_ARM_DISARM_TOLARANCE)) {
			sbus->disarm_cnt++;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004510:	3301      	adds	r3, #1
 8004512:	b2da      	uxtb	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			if ((sbus->disarm_cnt >= SBUS_DISARM_CNT)&&(!sbus->failsafe)) {
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004520:	2b09      	cmp	r3, #9
 8004522:	d911      	bls.n	8004548 <RC_READ_SBUS+0x3b4>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <RC_READ_SBUS+0x3b4>
				sbus->disarm = 1;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8004536:	e007      	b.n	8004548 <RC_READ_SBUS+0x3b4>
			}
		} else {
			sbus->disarm_cnt = 0;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			sbus->disarm = 0;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (sbus->PWM_US_RC_CH[SBUS_YAW_CHANNEL]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	88db      	ldrh	r3, [r3, #6]
 800454c:	f240 72b1 	movw	r2, #1969	; 0x7b1
 8004550:	4293      	cmp	r3, r2
 8004552:	d916      	bls.n	8004582 <RC_READ_SBUS+0x3ee>
				>= (2000 - SBUS_ARM_DISARM_TOLARANCE)) {
			sbus->arm_cnt++;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800455a:	3301      	adds	r3, #1
 800455c:	b2da      	uxtb	r2, r3
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
			if ((sbus->arm_cnt >= SBUS_ARM_CNT)&&(!sbus->failsafe)) {
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800456a:	2b09      	cmp	r3, #9
 800456c:	d922      	bls.n	80045b4 <RC_READ_SBUS+0x420>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004574:	2b00      	cmp	r3, #0
 8004576:	d11d      	bne.n	80045b4 <RC_READ_SBUS+0x420>
				sbus->arm = 1;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004580:	e018      	b.n	80045b4 <RC_READ_SBUS+0x420>
			}
		} else {
			sbus->arm_cnt = 0;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
			sbus->arm = 0;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004592:	e00f      	b.n	80045b4 <RC_READ_SBUS+0x420>
		}

	} else {
		sbus->disarm_cnt = 0;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		sbus->arm_cnt = 0;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		sbus->arm = 0;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		sbus->disarm = 0;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
/* #ifdef SBUS_ARM_DISARM_STICKS */
#endif

	return 1;
 80045b4:	2301      	movs	r3, #1
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd90      	pop	{r4, r7, pc}
	...

080045c0 <write8>:
#include <module/i2c/i2c_read_write.h>




int8_t write8(I2C_HandleTypeDef *huart,uint8_t device,uint8_t reg,uint8_t val){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	4608      	mov	r0, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	461a      	mov	r2, r3
 80045ce:	4603      	mov	r3, r0
 80045d0:	70fb      	strb	r3, [r7, #3]
 80045d2:	460b      	mov	r3, r1
 80045d4:	70bb      	strb	r3, [r7, #2]
 80045d6:	4613      	mov	r3, r2
 80045d8:	707b      	strb	r3, [r7, #1]
	int8_t rslt;
	buffer_i2c[0] = reg;
 80045da:	4a0b      	ldr	r2, [pc, #44]	; (8004608 <write8+0x48>)
 80045dc:	78bb      	ldrb	r3, [r7, #2]
 80045de:	7013      	strb	r3, [r2, #0]
	buffer_i2c[1] = val;
 80045e0:	4a09      	ldr	r2, [pc, #36]	; (8004608 <write8+0x48>)
 80045e2:	787b      	ldrb	r3, [r7, #1]
 80045e4:	7053      	strb	r3, [r2, #1]
	rslt = HAL_I2C_Master_Transmit(huart, device, buffer_i2c, 2, I2C_TRANSMIT_TIMEOUT);
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	b299      	uxth	r1, r3
 80045ea:	2301      	movs	r3, #1
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	2302      	movs	r3, #2
 80045f0:	4a05      	ldr	r2, [pc, #20]	; (8004608 <write8+0x48>)
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f001 fef8 	bl	80063e8 <HAL_I2C_Master_Transmit>
 80045f8:	4603      	mov	r3, r0
 80045fa:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80045fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000224 	.word	0x20000224

0800460c <read8>:

int8_t read8(I2C_HandleTypeDef *huart,uint8_t device,uint8_t reg,uint8_t *val){
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	72fb      	strb	r3, [r7, #11]
 800461a:	4613      	mov	r3, r2
 800461c:	72bb      	strb	r3, [r7, #10]
	int8_t rslt;
	int8_t cnt = 3;
 800461e:	2303      	movs	r3, #3
 8004620:	75bb      	strb	r3, [r7, #22]
	buffer_i2c[0] = reg;
 8004622:	4a1f      	ldr	r2, [pc, #124]	; (80046a0 <read8+0x94>)
 8004624:	7abb      	ldrb	r3, [r7, #10]
 8004626:	7013      	strb	r3, [r2, #0]

	while(cnt){
 8004628:	e02a      	b.n	8004680 <read8+0x74>
		rslt = HAL_I2C_Master_Transmit(huart, device, buffer_i2c, 1, I2C_TRANSMIT_TIMEOUT);
 800462a:	7afb      	ldrb	r3, [r7, #11]
 800462c:	b299      	uxth	r1, r3
 800462e:	2301      	movs	r3, #1
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2301      	movs	r3, #1
 8004634:	4a1a      	ldr	r2, [pc, #104]	; (80046a0 <read8+0x94>)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f001 fed6 	bl	80063e8 <HAL_I2C_Master_Transmit>
 800463c:	4603      	mov	r3, r0
 800463e:	75fb      	strb	r3, [r7, #23]
		if(rslt == HAL_OK){
 8004640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d112      	bne.n	800466e <read8+0x62>
			rslt = HAL_I2C_Master_Receive(huart, device, &buffer_i2c[1], 1, I2C_RECEIVE_TIMEOUT);
 8004648:	7afb      	ldrb	r3, [r7, #11]
 800464a:	b299      	uxth	r1, r3
 800464c:	2301      	movs	r3, #1
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2301      	movs	r3, #1
 8004652:	4a14      	ldr	r2, [pc, #80]	; (80046a4 <read8+0x98>)
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f001 ffc5 	bl	80065e4 <HAL_I2C_Master_Receive>
 800465a:	4603      	mov	r3, r0
 800465c:	75fb      	strb	r3, [r7, #23]
			if(rslt == HAL_OK){
 800465e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d011      	beq.n	800468a <read8+0x7e>
				break;
			}
			else{
				I2C1_ClearBusyFlagErratum(huart);
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f81e 	bl	80046a8 <I2C1_ClearBusyFlagErratum>
 800466c:	e002      	b.n	8004674 <read8+0x68>
			}
		}
		else{
			I2C1_ClearBusyFlagErratum(huart);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f81a 	bl	80046a8 <I2C1_ClearBusyFlagErratum>
		}
		cnt--;
 8004674:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b2db      	uxtb	r3, r3
 800467e:	75bb      	strb	r3, [r7, #22]
	while(cnt){
 8004680:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1d0      	bne.n	800462a <read8+0x1e>
 8004688:	e000      	b.n	800468c <read8+0x80>
				break;
 800468a:	bf00      	nop

	}


	*val = buffer_i2c[1];
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <read8+0x94>)
 800468e:	785a      	ldrb	r2, [r3, #1]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	701a      	strb	r2, [r3, #0]
	return rslt;
 8004694:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000224 	.word	0x20000224
 80046a4:	20000225 	.word	0x20000225

080046a8 <I2C1_ClearBusyFlagErratum>:

void I2C1_ClearBusyFlagErratum(I2C_HandleTypeDef *instance)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08c      	sub	sp, #48	; 0x30
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;
    int timeout =100;
 80046b0:	2364      	movs	r3, #100	; 0x64
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28
    int timeout_cnt=0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
//    GPIOB = GPIOB;
//    GPIOB = GPIOB;
    uint32_t I2C1_SCL_PIN = GPIO_PIN_6;
 80046b8:	2340      	movs	r3, #64	; 0x40
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t I2C1_SDA_PIN = GPIO_PIN_7;
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	623b      	str	r3, [r7, #32]
    // 1. Clear PE bit.
    instance->Instance->CR1 &= ~(0x0001);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    GPIO_InitStruct.Mode         = GPIO_MODE_OUTPUT_OD;
 80046d0:	2311      	movs	r3, #17
 80046d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate    = GPIO_AF4_I2C1;
 80046d4:	2304      	movs	r3, #4
 80046d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull         = GPIO_PULLUP;
 80046d8:	2301      	movs	r3, #1
 80046da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed        = GPIO_SPEED_FREQ_HIGH;
 80046dc:	2302      	movs	r3, #2
 80046de:	61bb      	str	r3, [r7, #24]

    GPIO_InitStruct.Pin          = I2C1_SCL_PIN;
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e4:	f107 030c 	add.w	r3, r7, #12
 80046e8:	4619      	mov	r1, r3
 80046ea:	4880      	ldr	r0, [pc, #512]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 80046ec:	f001 fb78 	bl	8005de0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, I2C1_SCL_PIN, GPIO_PIN_SET);
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2201      	movs	r2, #1
 80046f6:	4619      	mov	r1, r3
 80046f8:	487c      	ldr	r0, [pc, #496]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 80046fa:	f001 fd23 	bl	8006144 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin          = I2C1_SDA_PIN;
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004702:	f107 030c 	add.w	r3, r7, #12
 8004706:	4619      	mov	r1, r3
 8004708:	4878      	ldr	r0, [pc, #480]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 800470a:	f001 fb69 	bl	8005de0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, I2C1_SDA_PIN, GPIO_PIN_SET);
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	b29b      	uxth	r3, r3
 8004712:	2201      	movs	r2, #1
 8004714:	4619      	mov	r1, r3
 8004716:	4875      	ldr	r0, [pc, #468]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 8004718:	f001 fd14 	bl	8006144 <HAL_GPIO_WritePin>


    // 3. Check SCL and SDA High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(GPIOB, I2C1_SCL_PIN))
 800471c:	e007      	b.n	800472e <I2C1_ClearBusyFlagErratum+0x86>
    {
        timeout_cnt++;
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	3301      	adds	r3, #1
 8004722:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(timeout_cnt>timeout)
 8004724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	429a      	cmp	r2, r3
 800472a:	f300 80d0 	bgt.w	80048ce <I2C1_ClearBusyFlagErratum+0x226>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(GPIOB, I2C1_SCL_PIN))
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	b29b      	uxth	r3, r3
 8004732:	4619      	mov	r1, r3
 8004734:	486d      	ldr	r0, [pc, #436]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 8004736:	f001 fced 	bl	8006114 <HAL_GPIO_ReadPin>
 800473a:	4603      	mov	r3, r0
 800473c:	2b01      	cmp	r3, #1
 800473e:	d1ee      	bne.n	800471e <I2C1_ClearBusyFlagErratum+0x76>
            return;
    }

    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(GPIOB, I2C1_SDA_PIN))
 8004740:	e016      	b.n	8004770 <I2C1_ClearBusyFlagErratum+0xc8>
    {
        //Move clock to release I2C
        HAL_GPIO_WritePin(GPIOB, I2C1_SCL_PIN, GPIO_PIN_RESET);
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	b29b      	uxth	r3, r3
 8004746:	2200      	movs	r2, #0
 8004748:	4619      	mov	r1, r3
 800474a:	4868      	ldr	r0, [pc, #416]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 800474c:	f001 fcfa 	bl	8006144 <HAL_GPIO_WritePin>
        asm("nop");
 8004750:	bf00      	nop
        HAL_GPIO_WritePin(GPIOB, I2C1_SCL_PIN, GPIO_PIN_SET);
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	b29b      	uxth	r3, r3
 8004756:	2201      	movs	r2, #1
 8004758:	4619      	mov	r1, r3
 800475a:	4864      	ldr	r0, [pc, #400]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 800475c:	f001 fcf2 	bl	8006144 <HAL_GPIO_WritePin>

        timeout_cnt++;
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	3301      	adds	r3, #1
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(timeout_cnt>timeout)
 8004766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	429a      	cmp	r2, r3
 800476c:	f300 80b1 	bgt.w	80048d2 <I2C1_ClearBusyFlagErratum+0x22a>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(GPIOB, I2C1_SDA_PIN))
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	b29b      	uxth	r3, r3
 8004774:	4619      	mov	r1, r3
 8004776:	485d      	ldr	r0, [pc, #372]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 8004778:	f001 fccc 	bl	8006114 <HAL_GPIO_ReadPin>
 800477c:	4603      	mov	r3, r0
 800477e:	2b01      	cmp	r3, #1
 8004780:	d1df      	bne.n	8004742 <I2C1_ClearBusyFlagErratum+0x9a>
            return;
    }

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(GPIOB, I2C1_SDA_PIN, GPIO_PIN_RESET);
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	b29b      	uxth	r3, r3
 8004786:	2200      	movs	r2, #0
 8004788:	4619      	mov	r1, r3
 800478a:	4858      	ldr	r0, [pc, #352]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 800478c:	f001 fcda 	bl	8006144 <HAL_GPIO_WritePin>

    //  5. Check SDA Low level in GPIOx_IDR.
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(GPIOB, I2C1_SDA_PIN))
 8004790:	e007      	b.n	80047a2 <I2C1_ClearBusyFlagErratum+0xfa>
    {
        timeout_cnt++;
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	3301      	adds	r3, #1
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(timeout_cnt>timeout)
 8004798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	429a      	cmp	r2, r3
 800479e:	f300 809a 	bgt.w	80048d6 <I2C1_ClearBusyFlagErratum+0x22e>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(GPIOB, I2C1_SDA_PIN))
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	4619      	mov	r1, r3
 80047a8:	4850      	ldr	r0, [pc, #320]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 80047aa:	f001 fcb3 	bl	8006114 <HAL_GPIO_ReadPin>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ee      	bne.n	8004792 <I2C1_ClearBusyFlagErratum+0xea>
            return;
    }

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(GPIOB, I2C1_SCL_PIN, GPIO_PIN_RESET);
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2200      	movs	r2, #0
 80047ba:	4619      	mov	r1, r3
 80047bc:	484b      	ldr	r0, [pc, #300]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 80047be:	f001 fcc1 	bl	8006144 <HAL_GPIO_WritePin>

    //  7. Check SCL Low level in GPIOx_IDR.
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(GPIOB, I2C1_SCL_PIN))
 80047c2:	e007      	b.n	80047d4 <I2C1_ClearBusyFlagErratum+0x12c>
    {
        timeout_cnt++;
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	3301      	adds	r3, #1
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(timeout_cnt>timeout)
 80047ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ce:	429a      	cmp	r2, r3
 80047d0:	f300 8083 	bgt.w	80048da <I2C1_ClearBusyFlagErratum+0x232>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(GPIOB, I2C1_SCL_PIN))
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	4619      	mov	r1, r3
 80047da:	4844      	ldr	r0, [pc, #272]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 80047dc:	f001 fc9a 	bl	8006114 <HAL_GPIO_ReadPin>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1ee      	bne.n	80047c4 <I2C1_ClearBusyFlagErratum+0x11c>
            return;
    }

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(GPIOB, I2C1_SCL_PIN, GPIO_PIN_SET);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2201      	movs	r2, #1
 80047ec:	4619      	mov	r1, r3
 80047ee:	483f      	ldr	r0, [pc, #252]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 80047f0:	f001 fca8 	bl	8006144 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(GPIOB, I2C1_SCL_PIN))
 80047f4:	e006      	b.n	8004804 <I2C1_ClearBusyFlagErratum+0x15c>
    {
        timeout_cnt++;
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	3301      	adds	r3, #1
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(timeout_cnt>timeout)
 80047fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	429a      	cmp	r2, r3
 8004802:	dc6c      	bgt.n	80048de <I2C1_ClearBusyFlagErratum+0x236>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(GPIOB, I2C1_SCL_PIN))
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	b29b      	uxth	r3, r3
 8004808:	4619      	mov	r1, r3
 800480a:	4838      	ldr	r0, [pc, #224]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 800480c:	f001 fc82 	bl	8006114 <HAL_GPIO_ReadPin>
 8004810:	4603      	mov	r3, r0
 8004812:	2b01      	cmp	r3, #1
 8004814:	d1ef      	bne.n	80047f6 <I2C1_ClearBusyFlagErratum+0x14e>
            return;
    }

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(GPIOB, I2C1_SDA_PIN, GPIO_PIN_SET);
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	b29b      	uxth	r3, r3
 800481a:	2201      	movs	r2, #1
 800481c:	4619      	mov	r1, r3
 800481e:	4833      	ldr	r0, [pc, #204]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 8004820:	f001 fc90 	bl	8006144 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(GPIOB, I2C1_SDA_PIN))
 8004824:	e006      	b.n	8004834 <I2C1_ClearBusyFlagErratum+0x18c>
    {
        timeout_cnt++;
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	3301      	adds	r3, #1
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(timeout_cnt>timeout)
 800482c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	429a      	cmp	r2, r3
 8004832:	dc56      	bgt.n	80048e2 <I2C1_ClearBusyFlagErratum+0x23a>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(GPIOB, I2C1_SDA_PIN))
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	b29b      	uxth	r3, r3
 8004838:	4619      	mov	r1, r3
 800483a:	482c      	ldr	r0, [pc, #176]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 800483c:	f001 fc6a 	bl	8006114 <HAL_GPIO_ReadPin>
 8004840:	4603      	mov	r3, r0
 8004842:	2b01      	cmp	r3, #1
 8004844:	d1ef      	bne.n	8004826 <I2C1_ClearBusyFlagErratum+0x17e>
            return;
    }

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004846:	2312      	movs	r3, #18
 8004848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800484a:	2301      	movs	r3, #1
 800484c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484e:	2300      	movs	r3, #0
 8004850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004852:	2304      	movs	r3, #4
 8004854:	61fb      	str	r3, [r7, #28]

    GPIO_InitStruct.Pin = I2C1_SCL_PIN;
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800485a:	f107 030c 	add.w	r3, r7, #12
 800485e:	4619      	mov	r1, r3
 8004860:	4822      	ldr	r0, [pc, #136]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 8004862:	f001 fabd 	bl	8005de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_PIN;
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800486a:	f107 030c 	add.w	r3, r7, #12
 800486e:	4619      	mov	r1, r3
 8004870:	481e      	ldr	r0, [pc, #120]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 8004872:	f001 fab5 	bl	8005de0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, I2C1_SCL_PIN, GPIO_PIN_SET);
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	b29b      	uxth	r3, r3
 800487a:	2201      	movs	r2, #1
 800487c:	4619      	mov	r1, r3
 800487e:	481b      	ldr	r0, [pc, #108]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 8004880:	f001 fc60 	bl	8006144 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, I2C1_SDA_PIN, GPIO_PIN_SET);
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	b29b      	uxth	r3, r3
 8004888:	2201      	movs	r2, #1
 800488a:	4619      	mov	r1, r3
 800488c:	4817      	ldr	r0, [pc, #92]	; (80048ec <I2C1_ClearBusyFlagErratum+0x244>)
 800488e:	f001 fc59 	bl	8006144 <HAL_GPIO_WritePin>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    instance->Instance->CR1 |= 0x8000;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048a0:	601a      	str	r2, [r3, #0]

    asm("nop");
 80048a2:	bf00      	nop

    // 14. Clear SWRST bit in I2Cx_CR1 register.
    instance->Instance->CR1 &= ~0x8000;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048b2:	601a      	str	r2, [r3, #0]

    asm("nop");
 80048b4:	bf00      	nop

    // 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register
    instance->Instance->CR1 |= 0x0001;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0201 	orr.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

    // Call initialization function.
    HAL_I2C_Init(instance);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f001 fc56 	bl	8006178 <HAL_I2C_Init>
 80048cc:	e00a      	b.n	80048e4 <I2C1_ClearBusyFlagErratum+0x23c>
            return;
 80048ce:	bf00      	nop
 80048d0:	e008      	b.n	80048e4 <I2C1_ClearBusyFlagErratum+0x23c>
            return;
 80048d2:	bf00      	nop
 80048d4:	e006      	b.n	80048e4 <I2C1_ClearBusyFlagErratum+0x23c>
            return;
 80048d6:	bf00      	nop
 80048d8:	e004      	b.n	80048e4 <I2C1_ClearBusyFlagErratum+0x23c>
            return;
 80048da:	bf00      	nop
 80048dc:	e002      	b.n	80048e4 <I2C1_ClearBusyFlagErratum+0x23c>
            return;
 80048de:	bf00      	nop
 80048e0:	e000      	b.n	80048e4 <I2C1_ClearBusyFlagErratum+0x23c>
            return;
 80048e2:	bf00      	nop
}
 80048e4:	3730      	adds	r7, #48	; 0x30
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40020400 	.word	0x40020400

080048f0 <sendInt>:


#include <module/send_message/sendMsg.h>


void sendInt(int32_t myInt,UART_HandleTypeDef* huart,uint8_t newLine){
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08c      	sub	sp, #48	; 0x30
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	71fb      	strb	r3, [r7, #7]
	char sendBuffer[30]="";
 80048fe:	2300      	movs	r3, #0
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	f107 0314 	add.w	r3, r7, #20
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	605a      	str	r2, [r3, #4]
 800490c:	609a      	str	r2, [r3, #8]
 800490e:	60da      	str	r2, [r3, #12]
 8004910:	611a      	str	r2, [r3, #16]
 8004912:	615a      	str	r2, [r3, #20]
 8004914:	831a      	strh	r2, [r3, #24]
	sprintf(sendBuffer, "%lu", myInt);
 8004916:	f107 0310 	add.w	r3, r7, #16
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4907      	ldr	r1, [pc, #28]	; (800493c <sendInt+0x4c>)
 800491e:	4618      	mov	r0, r3
 8004920:	f005 f8ea 	bl	8009af8 <siprintf>
	sendString(sendBuffer,huart,newLine);
 8004924:	79fa      	ldrb	r2, [r7, #7]
 8004926:	f107 0310 	add.w	r3, r7, #16
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	4618      	mov	r0, r3
 800492e:	f000 f807 	bl	8004940 <sendString>
}
 8004932:	bf00      	nop
 8004934:	3730      	adds	r7, #48	; 0x30
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	0800c824 	.word	0x0800c824

08004940 <sendString>:
	char sendBuffer[30]="";
	sprintf(sendBuffer, "%.2f", myFloat);
	sendString(sendBuffer,huart,newLine);
}

void sendString(char* myString,UART_HandleTypeDef* huart,uint8_t newLine){
 8004940:	b580      	push	{r7, lr}
 8004942:	b094      	sub	sp, #80	; 0x50
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	4613      	mov	r3, r2
 800494c:	71fb      	strb	r3, [r7, #7]
	char sendBuffer[60]="";
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	f107 0318 	add.w	r3, r7, #24
 8004956:	2238      	movs	r2, #56	; 0x38
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f004 fc67 	bl	800922e <memset>
	strncat(sendBuffer, myString, strlen(myString));
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7fb fc35 	bl	80001d0 <strlen>
 8004966:	4602      	mov	r2, r0
 8004968:	f107 0314 	add.w	r3, r7, #20
 800496c:	68f9      	ldr	r1, [r7, #12]
 800496e:	4618      	mov	r0, r3
 8004970:	f005 f8e2 	bl	8009b38 <strncat>
	if(newLine)
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00e      	beq.n	8004998 <sendString+0x58>
		strncat(sendBuffer, "\r\n", strlen("\r\n"));
 800497a:	f107 0314 	add.w	r3, r7, #20
 800497e:	4618      	mov	r0, r3
 8004980:	f7fb fc26 	bl	80001d0 <strlen>
 8004984:	4603      	mov	r3, r0
 8004986:	461a      	mov	r2, r3
 8004988:	f107 0314 	add.w	r3, r7, #20
 800498c:	4413      	add	r3, r2
 800498e:	4a0b      	ldr	r2, [pc, #44]	; (80049bc <sendString+0x7c>)
 8004990:	8811      	ldrh	r1, [r2, #0]
 8004992:	7892      	ldrb	r2, [r2, #2]
 8004994:	8019      	strh	r1, [r3, #0]
 8004996:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(huart, (uint8_t *)sendBuffer, strlen(sendBuffer), 10);
 8004998:	f107 0314 	add.w	r3, r7, #20
 800499c:	4618      	mov	r0, r3
 800499e:	f7fb fc17 	bl	80001d0 <strlen>
 80049a2:	4603      	mov	r3, r0
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	f107 0114 	add.w	r1, r7, #20
 80049aa:	230a      	movs	r3, #10
 80049ac:	68b8      	ldr	r0, [r7, #8]
 80049ae:	f003 fc3e 	bl	800822e <HAL_UART_Transmit>
}
 80049b2:	bf00      	nop
 80049b4:	3750      	adds	r7, #80	; 0x50
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	0800c830 	.word	0x0800c830

080049c0 <MAP>:
 * Language:  C
 */
#include "utility_math.h"

uint16_t MAP(uint16_t au32_IN, uint16_t au32_INmin, uint16_t au32_INmax,
		uint16_t au32_OUTmin, uint16_t au32_OUTmax) {
 80049c0:	b490      	push	{r4, r7}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	4611      	mov	r1, r2
 80049cc:	461a      	mov	r2, r3
 80049ce:	4623      	mov	r3, r4
 80049d0:	80fb      	strh	r3, [r7, #6]
 80049d2:	4603      	mov	r3, r0
 80049d4:	80bb      	strh	r3, [r7, #4]
 80049d6:	460b      	mov	r3, r1
 80049d8:	807b      	strh	r3, [r7, #2]
 80049da:	4613      	mov	r3, r2
 80049dc:	803b      	strh	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 80049de:	88fa      	ldrh	r2, [r7, #6]
 80049e0:	88bb      	ldrh	r3, [r7, #4]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	8a39      	ldrh	r1, [r7, #16]
 80049e6:	883a      	ldrh	r2, [r7, #0]
 80049e8:	1a8a      	subs	r2, r1, r2
 80049ea:	fb02 f203 	mul.w	r2, r2, r3
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 80049ee:	8879      	ldrh	r1, [r7, #2]
 80049f0:	88bb      	ldrh	r3, [r7, #4]
 80049f2:	1acb      	subs	r3, r1, r3
 80049f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	883b      	ldrh	r3, [r7, #0]
 80049fc:	4413      	add	r3, r2
 80049fe:	b29b      	uxth	r3, r3
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc90      	pop	{r4, r7}
 8004a08:	4770      	bx	lr

08004a0a <MAPF>:

float MAPF(uint16_t au32_IN, uint16_t au32_INmin, uint16_t au32_INmax,
		int16_t au32_OUTmin, int16_t au32_OUTmax){
 8004a0a:	b490      	push	{r4, r7}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	4604      	mov	r4, r0
 8004a12:	4608      	mov	r0, r1
 8004a14:	4611      	mov	r1, r2
 8004a16:	461a      	mov	r2, r3
 8004a18:	4623      	mov	r3, r4
 8004a1a:	80fb      	strh	r3, [r7, #6]
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	80bb      	strh	r3, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
 8004a24:	4613      	mov	r3, r2
 8004a26:	803b      	strh	r3, [r7, #0]

	return (((((float)au32_IN - (float)au32_INmin) * ((float)au32_OUTmax - (float)au32_OUTmin))
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a32:	88bb      	ldrh	r3, [r7, #4]
 8004a34:	ee07 3a90 	vmov	s15, r3
 8004a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a44:	ee07 3a90 	vmov	s15, r3
 8004a48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a4c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004a50:	ee07 3a90 	vmov	s15, r3
 8004a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004a5c:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ ((float)au32_INmax - (float)au32_INmin)) + (float)au32_OUTmin);
 8004a60:	887b      	ldrh	r3, [r7, #2]
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a6a:	88bb      	ldrh	r3, [r7, #4]
 8004a6c:	ee07 3a90 	vmov	s15, r3
 8004a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a88:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc90      	pop	{r4, r7}
 8004a96:	4770      	bx	lr

08004a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a9e:	f000 fc69 	bl	8005374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004aa2:	f000 f855 	bl	8004b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aa6:	f000 f9dd 	bl	8004e64 <MX_GPIO_Init>
  MX_DMA_Init();
 8004aaa:	f000 f9bb 	bl	8004e24 <MX_DMA_Init>
  MX_I2C1_Init();
 8004aae:	f000 f8b9 	bl	8004c24 <MX_I2C1_Init>
  MX_TIM4_Init();
 8004ab2:	f000 f8e7 	bl	8004c84 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8004ab6:	f000 f95f 	bl	8004d78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004aba:	f000 f989 	bl	8004dd0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004abe:	2100      	movs	r1, #0
 8004ac0:	481c      	ldr	r0, [pc, #112]	; (8004b34 <main+0x9c>)
 8004ac2:	f002 ff71 	bl	80079a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004ac6:	2104      	movs	r1, #4
 8004ac8:	481a      	ldr	r0, [pc, #104]	; (8004b34 <main+0x9c>)
 8004aca:	f002 ff6d 	bl	80079a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004ace:	2108      	movs	r1, #8
 8004ad0:	4818      	ldr	r0, [pc, #96]	; (8004b34 <main+0x9c>)
 8004ad2:	f002 ff69 	bl	80079a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004ad6:	210c      	movs	r1, #12
 8004ad8:	4816      	ldr	r0, [pc, #88]	; (8004b34 <main+0x9c>)
 8004ada:	f002 ff65 	bl	80079a8 <HAL_TIM_PWM_Start>

	KUSBEGI kusbegi;

	sendString("init:", &huart2, 1);
 8004ade:	2201      	movs	r2, #1
 8004ae0:	4915      	ldr	r1, [pc, #84]	; (8004b38 <main+0xa0>)
 8004ae2:	4816      	ldr	r0, [pc, #88]	; (8004b3c <main+0xa4>)
 8004ae4:	f7ff ff2c 	bl	8004940 <sendString>
	sendInt(kusbegi_init(&huart2, &hi2c1, &huart1, &kusbegi), &huart2, 1);
 8004ae8:	463b      	mov	r3, r7
 8004aea:	4a15      	ldr	r2, [pc, #84]	; (8004b40 <main+0xa8>)
 8004aec:	4915      	ldr	r1, [pc, #84]	; (8004b44 <main+0xac>)
 8004aee:	4812      	ldr	r0, [pc, #72]	; (8004b38 <main+0xa0>)
 8004af0:	f7fe fb8c 	bl	800320c <kusbegi_init>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2201      	movs	r2, #1
 8004af8:	490f      	ldr	r1, [pc, #60]	; (8004b38 <main+0xa0>)
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fef8 	bl	80048f0 <sendInt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	if(debugger_flag != -1){
 8004b00:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <main+0xb0>)
 8004b02:	f993 3000 	ldrsb.w	r3, [r3]
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d005      	beq.n	8004b18 <main+0x80>
		kusbegi_loop(&huart2, &hi2c1, &huart1, &kusbegi);
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	4a0c      	ldr	r2, [pc, #48]	; (8004b40 <main+0xa8>)
 8004b10:	490c      	ldr	r1, [pc, #48]	; (8004b44 <main+0xac>)
 8004b12:	4809      	ldr	r0, [pc, #36]	; (8004b38 <main+0xa0>)
 8004b14:	f7fe fbec 	bl	80032f0 <kusbegi_loop>
	  	}


		TIM4->CCR1 = kusbegi.PWM_US_MOTOR[0];
 8004b18:	893a      	ldrh	r2, [r7, #8]
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <main+0xb4>)
 8004b1c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = kusbegi.PWM_US_MOTOR[1];
 8004b1e:	897a      	ldrh	r2, [r7, #10]
 8004b20:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <main+0xb4>)
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3 = kusbegi.PWM_US_MOTOR[2];
 8004b24:	89ba      	ldrh	r2, [r7, #12]
 8004b26:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <main+0xb4>)
 8004b28:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = kusbegi.PWM_US_MOTOR[3];
 8004b2a:	89fa      	ldrh	r2, [r7, #14]
 8004b2c:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <main+0xb4>)
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40
	  	if(debugger_flag != -1){
 8004b30:	e7e6      	b.n	8004b00 <main+0x68>
 8004b32:	bf00      	nop
 8004b34:	200006f0 	.word	0x200006f0
 8004b38:	20000824 	.word	0x20000824
 8004b3c:	0800c834 	.word	0x0800c834
 8004b40:	200007e4 	.word	0x200007e4
 8004b44:	20000730 	.word	0x20000730
 8004b48:	20000210 	.word	0x20000210
 8004b4c:	40000800 	.word	0x40000800

08004b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b094      	sub	sp, #80	; 0x50
 8004b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b56:	f107 0320 	add.w	r3, r7, #32
 8004b5a:	2230      	movs	r2, #48	; 0x30
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f004 fb65 	bl	800922e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b64:	f107 030c 	add.w	r3, r7, #12
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	609a      	str	r2, [r3, #8]
 8004b70:	60da      	str	r2, [r3, #12]
 8004b72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b74:	2300      	movs	r3, #0
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	4b28      	ldr	r3, [pc, #160]	; (8004c1c <SystemClock_Config+0xcc>)
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	4a27      	ldr	r2, [pc, #156]	; (8004c1c <SystemClock_Config+0xcc>)
 8004b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b82:	6413      	str	r3, [r2, #64]	; 0x40
 8004b84:	4b25      	ldr	r3, [pc, #148]	; (8004c1c <SystemClock_Config+0xcc>)
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b90:	2300      	movs	r3, #0
 8004b92:	607b      	str	r3, [r7, #4]
 8004b94:	4b22      	ldr	r3, [pc, #136]	; (8004c20 <SystemClock_Config+0xd0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a21      	ldr	r2, [pc, #132]	; (8004c20 <SystemClock_Config+0xd0>)
 8004b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	4b1f      	ldr	r3, [pc, #124]	; (8004c20 <SystemClock_Config+0xd0>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba8:	607b      	str	r3, [r7, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004bba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004bc4:	23a8      	movs	r3, #168	; 0xa8
 8004bc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004bcc:	2304      	movs	r3, #4
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bd0:	f107 0320 	add.w	r3, r7, #32
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f002 fa59 	bl	800708c <HAL_RCC_OscConfig>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004be0:	f000 f984 	bl	8004eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004be4:	230f      	movs	r3, #15
 8004be6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004be8:	2302      	movs	r3, #2
 8004bea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004bf0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004bf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004bfc:	f107 030c 	add.w	r3, r7, #12
 8004c00:	2105      	movs	r1, #5
 8004c02:	4618      	mov	r0, r3
 8004c04:	f002 fcb2 	bl	800756c <HAL_RCC_ClockConfig>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004c0e:	f000 f96d 	bl	8004eec <Error_Handler>
  }
}
 8004c12:	bf00      	nop
 8004c14:	3750      	adds	r7, #80	; 0x50
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	40007000 	.word	0x40007000

08004c24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c28:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <MX_I2C1_Init+0x54>)
 8004c2a:	4a14      	ldr	r2, [pc, #80]	; (8004c7c <MX_I2C1_Init+0x58>)
 8004c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004c2e:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <MX_I2C1_Init+0x54>)
 8004c30:	4a13      	ldr	r2, [pc, #76]	; (8004c80 <MX_I2C1_Init+0x5c>)
 8004c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8004c34:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <MX_I2C1_Init+0x54>)
 8004c36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c3a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <MX_I2C1_Init+0x54>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <MX_I2C1_Init+0x54>)
 8004c44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <MX_I2C1_Init+0x54>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004c50:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <MX_I2C1_Init+0x54>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <MX_I2C1_Init+0x54>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <MX_I2C1_Init+0x54>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c62:	4805      	ldr	r0, [pc, #20]	; (8004c78 <MX_I2C1_Init+0x54>)
 8004c64:	f001 fa88 	bl	8006178 <HAL_I2C_Init>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8004c6e:	f000 f93d 	bl	8004eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004c72:	bf00      	nop
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000730 	.word	0x20000730
 8004c7c:	40005400 	.word	0x40005400
 8004c80:	00061a80 	.word	0x00061a80

08004c84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	; 0x28
 8004c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c8a:	f107 0320 	add.w	r3, r7, #32
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c94:	1d3b      	adds	r3, r7, #4
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	605a      	str	r2, [r3, #4]
 8004c9c:	609a      	str	r2, [r3, #8]
 8004c9e:	60da      	str	r2, [r3, #12]
 8004ca0:	611a      	str	r2, [r3, #16]
 8004ca2:	615a      	str	r2, [r3, #20]
 8004ca4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ca6:	4b32      	ldr	r3, [pc, #200]	; (8004d70 <MX_TIM4_Init+0xec>)
 8004ca8:	4a32      	ldr	r2, [pc, #200]	; (8004d74 <MX_TIM4_Init+0xf0>)
 8004caa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8004cac:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <MX_TIM4_Init+0xec>)
 8004cae:	2253      	movs	r2, #83	; 0x53
 8004cb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cb2:	4b2f      	ldr	r3, [pc, #188]	; (8004d70 <MX_TIM4_Init+0xec>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8004cb8:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <MX_TIM4_Init+0xec>)
 8004cba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004cbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cc0:	4b2b      	ldr	r3, [pc, #172]	; (8004d70 <MX_TIM4_Init+0xec>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cc6:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <MX_TIM4_Init+0xec>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004ccc:	4828      	ldr	r0, [pc, #160]	; (8004d70 <MX_TIM4_Init+0xec>)
 8004cce:	f002 fe3f 	bl	8007950 <HAL_TIM_PWM_Init>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004cd8:	f000 f908 	bl	8004eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004ce4:	f107 0320 	add.w	r3, r7, #32
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4821      	ldr	r0, [pc, #132]	; (8004d70 <MX_TIM4_Init+0xec>)
 8004cec:	f003 f9d6 	bl	800809c <HAL_TIMEx_MasterConfigSynchronization>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004cf6:	f000 f8f9 	bl	8004eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cfa:	2360      	movs	r3, #96	; 0x60
 8004cfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d0a:	1d3b      	adds	r3, r7, #4
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4817      	ldr	r0, [pc, #92]	; (8004d70 <MX_TIM4_Init+0xec>)
 8004d12:	f002 fe87 	bl	8007a24 <HAL_TIM_PWM_ConfigChannel>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004d1c:	f000 f8e6 	bl	8004eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d20:	1d3b      	adds	r3, r7, #4
 8004d22:	2204      	movs	r2, #4
 8004d24:	4619      	mov	r1, r3
 8004d26:	4812      	ldr	r0, [pc, #72]	; (8004d70 <MX_TIM4_Init+0xec>)
 8004d28:	f002 fe7c 	bl	8007a24 <HAL_TIM_PWM_ConfigChannel>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004d32:	f000 f8db 	bl	8004eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	2208      	movs	r2, #8
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	480c      	ldr	r0, [pc, #48]	; (8004d70 <MX_TIM4_Init+0xec>)
 8004d3e:	f002 fe71 	bl	8007a24 <HAL_TIM_PWM_ConfigChannel>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8004d48:	f000 f8d0 	bl	8004eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004d4c:	1d3b      	adds	r3, r7, #4
 8004d4e:	220c      	movs	r2, #12
 8004d50:	4619      	mov	r1, r3
 8004d52:	4807      	ldr	r0, [pc, #28]	; (8004d70 <MX_TIM4_Init+0xec>)
 8004d54:	f002 fe66 	bl	8007a24 <HAL_TIM_PWM_ConfigChannel>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8004d5e:	f000 f8c5 	bl	8004eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004d62:	4803      	ldr	r0, [pc, #12]	; (8004d70 <MX_TIM4_Init+0xec>)
 8004d64:	f000 f95c 	bl	8005020 <HAL_TIM_MspPostInit>

}
 8004d68:	bf00      	nop
 8004d6a:	3728      	adds	r7, #40	; 0x28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	200006f0 	.word	0x200006f0
 8004d74:	40000800 	.word	0x40000800

08004d78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d7c:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <MX_USART1_UART_Init+0x4c>)
 8004d7e:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <MX_USART1_UART_Init+0x50>)
 8004d80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8004d82:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <MX_USART1_UART_Init+0x4c>)
 8004d84:	4a11      	ldr	r2, [pc, #68]	; (8004dcc <MX_USART1_UART_Init+0x54>)
 8004d86:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <MX_USART1_UART_Init+0x4c>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <MX_USART1_UART_Init+0x4c>)
 8004d90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <MX_USART1_UART_Init+0x4c>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <MX_USART1_UART_Init+0x4c>)
 8004d9e:	220c      	movs	r2, #12
 8004da0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004da2:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <MX_USART1_UART_Init+0x4c>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004da8:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <MX_USART1_UART_Init+0x4c>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004dae:	4805      	ldr	r0, [pc, #20]	; (8004dc4 <MX_USART1_UART_Init+0x4c>)
 8004db0:	f003 f9f0 	bl	8008194 <HAL_UART_Init>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004dba:	f000 f897 	bl	8004eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004dbe:	bf00      	nop
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	200007e4 	.word	0x200007e4
 8004dc8:	40011000 	.word	0x40011000
 8004dcc:	000186a0 	.word	0x000186a0

08004dd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004dd4:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <MX_USART2_UART_Init+0x4c>)
 8004dd6:	4a12      	ldr	r2, [pc, #72]	; (8004e20 <MX_USART2_UART_Init+0x50>)
 8004dd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004dda:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <MX_USART2_UART_Init+0x4c>)
 8004ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004de0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004de2:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <MX_USART2_UART_Init+0x4c>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004de8:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <MX_USART2_UART_Init+0x4c>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004dee:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <MX_USART2_UART_Init+0x4c>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004df4:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <MX_USART2_UART_Init+0x4c>)
 8004df6:	220c      	movs	r2, #12
 8004df8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dfa:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <MX_USART2_UART_Init+0x4c>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e00:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <MX_USART2_UART_Init+0x4c>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e06:	4805      	ldr	r0, [pc, #20]	; (8004e1c <MX_USART2_UART_Init+0x4c>)
 8004e08:	f003 f9c4 	bl	8008194 <HAL_UART_Init>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004e12:	f000 f86b 	bl	8004eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000824 	.word	0x20000824
 8004e20:	40004400 	.word	0x40004400

08004e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <MX_DMA_Init+0x3c>)
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	4a0b      	ldr	r2, [pc, #44]	; (8004e60 <MX_DMA_Init+0x3c>)
 8004e34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e38:	6313      	str	r3, [r2, #48]	; 0x30
 8004e3a:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <MX_DMA_Init+0x3c>)
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e42:	607b      	str	r3, [r7, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004e46:	2200      	movs	r2, #0
 8004e48:	2100      	movs	r1, #0
 8004e4a:	203a      	movs	r0, #58	; 0x3a
 8004e4c:	f000 fc01 	bl	8005652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004e50:	203a      	movs	r0, #58	; 0x3a
 8004e52:	f000 fc1a 	bl	800568a <HAL_NVIC_EnableIRQ>

}
 8004e56:	bf00      	nop
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800

08004e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ee8 <MX_GPIO_Init+0x84>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <MX_GPIO_Init+0x84>)
 8004e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e78:	6313      	str	r3, [r2, #48]	; 0x30
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <MX_GPIO_Init+0x84>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <MX_GPIO_Init+0x84>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	4a16      	ldr	r2, [pc, #88]	; (8004ee8 <MX_GPIO_Init+0x84>)
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	6313      	str	r3, [r2, #48]	; 0x30
 8004e96:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <MX_GPIO_Init+0x84>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	60bb      	str	r3, [r7, #8]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <MX_GPIO_Init+0x84>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	4a0f      	ldr	r2, [pc, #60]	; (8004ee8 <MX_GPIO_Init+0x84>)
 8004eac:	f043 0308 	orr.w	r3, r3, #8
 8004eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <MX_GPIO_Init+0x84>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	607b      	str	r3, [r7, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	603b      	str	r3, [r7, #0]
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <MX_GPIO_Init+0x84>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	4a08      	ldr	r2, [pc, #32]	; (8004ee8 <MX_GPIO_Init+0x84>)
 8004ec8:	f043 0302 	orr.w	r3, r3, #2
 8004ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <MX_GPIO_Init+0x84>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]

}
 8004eda:	bf00      	nop
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40023800 	.word	0x40023800

08004eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004ef0:	bf00      	nop
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
	...

08004efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <HAL_MspInit+0x4c>)
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	4a0f      	ldr	r2, [pc, #60]	; (8004f48 <HAL_MspInit+0x4c>)
 8004f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f10:	6453      	str	r3, [r2, #68]	; 0x44
 8004f12:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <HAL_MspInit+0x4c>)
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1a:	607b      	str	r3, [r7, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	603b      	str	r3, [r7, #0]
 8004f22:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <HAL_MspInit+0x4c>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	4a08      	ldr	r2, [pc, #32]	; (8004f48 <HAL_MspInit+0x4c>)
 8004f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_MspInit+0x4c>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800

08004f4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08a      	sub	sp, #40	; 0x28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f54:	f107 0314 	add.w	r3, r7, #20
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	609a      	str	r2, [r3, #8]
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a19      	ldr	r2, [pc, #100]	; (8004fd0 <HAL_I2C_MspInit+0x84>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d12b      	bne.n	8004fc6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <HAL_I2C_MspInit+0x88>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	4a17      	ldr	r2, [pc, #92]	; (8004fd4 <HAL_I2C_MspInit+0x88>)
 8004f78:	f043 0302 	orr.w	r3, r3, #2
 8004f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f7e:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <HAL_I2C_MspInit+0x88>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f8a:	23c0      	movs	r3, #192	; 0xc0
 8004f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f8e:	2312      	movs	r3, #18
 8004f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f92:	2301      	movs	r3, #1
 8004f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f96:	2303      	movs	r3, #3
 8004f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f9a:	2304      	movs	r3, #4
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f9e:	f107 0314 	add.w	r3, r7, #20
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	480c      	ldr	r0, [pc, #48]	; (8004fd8 <HAL_I2C_MspInit+0x8c>)
 8004fa6:	f000 ff1b 	bl	8005de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <HAL_I2C_MspInit+0x88>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	4a08      	ldr	r2, [pc, #32]	; (8004fd4 <HAL_I2C_MspInit+0x88>)
 8004fb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_I2C_MspInit+0x88>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004fc6:	bf00      	nop
 8004fc8:	3728      	adds	r7, #40	; 0x28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40005400 	.word	0x40005400
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	40020400 	.word	0x40020400

08004fdc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a0b      	ldr	r2, [pc, #44]	; (8005018 <HAL_TIM_PWM_MspInit+0x3c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10d      	bne.n	800500a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	4b0a      	ldr	r3, [pc, #40]	; (800501c <HAL_TIM_PWM_MspInit+0x40>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <HAL_TIM_PWM_MspInit+0x40>)
 8004ff8:	f043 0304 	orr.w	r3, r3, #4
 8004ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffe:	4b07      	ldr	r3, [pc, #28]	; (800501c <HAL_TIM_PWM_MspInit+0x40>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40000800 	.word	0x40000800
 800501c:	40023800 	.word	0x40023800

08005020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005028:	f107 030c 	add.w	r3, r7, #12
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	605a      	str	r2, [r3, #4]
 8005032:	609a      	str	r2, [r3, #8]
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a12      	ldr	r2, [pc, #72]	; (8005088 <HAL_TIM_MspPostInit+0x68>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d11e      	bne.n	8005080 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	4b11      	ldr	r3, [pc, #68]	; (800508c <HAL_TIM_MspPostInit+0x6c>)
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	4a10      	ldr	r2, [pc, #64]	; (800508c <HAL_TIM_MspPostInit+0x6c>)
 800504c:	f043 0308 	orr.w	r3, r3, #8
 8005050:	6313      	str	r3, [r2, #48]	; 0x30
 8005052:	4b0e      	ldr	r3, [pc, #56]	; (800508c <HAL_TIM_MspPostInit+0x6c>)
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	f003 0308 	and.w	r3, r3, #8
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800505e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005062:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005064:	2302      	movs	r3, #2
 8005066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005070:	2302      	movs	r3, #2
 8005072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005074:	f107 030c 	add.w	r3, r7, #12
 8005078:	4619      	mov	r1, r3
 800507a:	4805      	ldr	r0, [pc, #20]	; (8005090 <HAL_TIM_MspPostInit+0x70>)
 800507c:	f000 feb0 	bl	8005de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005080:	bf00      	nop
 8005082:	3720      	adds	r7, #32
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40000800 	.word	0x40000800
 800508c:	40023800 	.word	0x40023800
 8005090:	40020c00 	.word	0x40020c00

08005094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08c      	sub	sp, #48	; 0x30
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800509c:	f107 031c 	add.w	r3, r7, #28
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	605a      	str	r2, [r3, #4]
 80050a6:	609a      	str	r2, [r3, #8]
 80050a8:	60da      	str	r2, [r3, #12]
 80050aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a4e      	ldr	r2, [pc, #312]	; (80051ec <HAL_UART_MspInit+0x158>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d15c      	bne.n	8005170 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	4b4d      	ldr	r3, [pc, #308]	; (80051f0 <HAL_UART_MspInit+0x15c>)
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	4a4c      	ldr	r2, [pc, #304]	; (80051f0 <HAL_UART_MspInit+0x15c>)
 80050c0:	f043 0310 	orr.w	r3, r3, #16
 80050c4:	6453      	str	r3, [r2, #68]	; 0x44
 80050c6:	4b4a      	ldr	r3, [pc, #296]	; (80051f0 <HAL_UART_MspInit+0x15c>)
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	4b46      	ldr	r3, [pc, #280]	; (80051f0 <HAL_UART_MspInit+0x15c>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	4a45      	ldr	r2, [pc, #276]	; (80051f0 <HAL_UART_MspInit+0x15c>)
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	6313      	str	r3, [r2, #48]	; 0x30
 80050e2:	4b43      	ldr	r3, [pc, #268]	; (80051f0 <HAL_UART_MspInit+0x15c>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80050ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80050f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f4:	2302      	movs	r3, #2
 80050f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050fc:	2303      	movs	r3, #3
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005100:	2307      	movs	r3, #7
 8005102:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005104:	f107 031c 	add.w	r3, r7, #28
 8005108:	4619      	mov	r1, r3
 800510a:	483a      	ldr	r0, [pc, #232]	; (80051f4 <HAL_UART_MspInit+0x160>)
 800510c:	f000 fe68 	bl	8005de0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005110:	4b39      	ldr	r3, [pc, #228]	; (80051f8 <HAL_UART_MspInit+0x164>)
 8005112:	4a3a      	ldr	r2, [pc, #232]	; (80051fc <HAL_UART_MspInit+0x168>)
 8005114:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005116:	4b38      	ldr	r3, [pc, #224]	; (80051f8 <HAL_UART_MspInit+0x164>)
 8005118:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800511c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800511e:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <HAL_UART_MspInit+0x164>)
 8005120:	2200      	movs	r2, #0
 8005122:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005124:	4b34      	ldr	r3, [pc, #208]	; (80051f8 <HAL_UART_MspInit+0x164>)
 8005126:	2200      	movs	r2, #0
 8005128:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800512a:	4b33      	ldr	r3, [pc, #204]	; (80051f8 <HAL_UART_MspInit+0x164>)
 800512c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005130:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005132:	4b31      	ldr	r3, [pc, #196]	; (80051f8 <HAL_UART_MspInit+0x164>)
 8005134:	2200      	movs	r2, #0
 8005136:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005138:	4b2f      	ldr	r3, [pc, #188]	; (80051f8 <HAL_UART_MspInit+0x164>)
 800513a:	2200      	movs	r2, #0
 800513c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800513e:	4b2e      	ldr	r3, [pc, #184]	; (80051f8 <HAL_UART_MspInit+0x164>)
 8005140:	2200      	movs	r2, #0
 8005142:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005144:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <HAL_UART_MspInit+0x164>)
 8005146:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800514a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800514c:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <HAL_UART_MspInit+0x164>)
 800514e:	2200      	movs	r2, #0
 8005150:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005152:	4829      	ldr	r0, [pc, #164]	; (80051f8 <HAL_UART_MspInit+0x164>)
 8005154:	f000 fab4 	bl	80056c0 <HAL_DMA_Init>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800515e:	f7ff fec5 	bl	8004eec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a24      	ldr	r2, [pc, #144]	; (80051f8 <HAL_UART_MspInit+0x164>)
 8005166:	635a      	str	r2, [r3, #52]	; 0x34
 8005168:	4a23      	ldr	r2, [pc, #140]	; (80051f8 <HAL_UART_MspInit+0x164>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800516e:	e038      	b.n	80051e2 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a22      	ldr	r2, [pc, #136]	; (8005200 <HAL_UART_MspInit+0x16c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d133      	bne.n	80051e2 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800517a:	2300      	movs	r3, #0
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	4b1c      	ldr	r3, [pc, #112]	; (80051f0 <HAL_UART_MspInit+0x15c>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	4a1b      	ldr	r2, [pc, #108]	; (80051f0 <HAL_UART_MspInit+0x15c>)
 8005184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005188:	6413      	str	r3, [r2, #64]	; 0x40
 800518a:	4b19      	ldr	r3, [pc, #100]	; (80051f0 <HAL_UART_MspInit+0x15c>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <HAL_UART_MspInit+0x15c>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	4a14      	ldr	r2, [pc, #80]	; (80051f0 <HAL_UART_MspInit+0x15c>)
 80051a0:	f043 0301 	orr.w	r3, r3, #1
 80051a4:	6313      	str	r3, [r2, #48]	; 0x30
 80051a6:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <HAL_UART_MspInit+0x15c>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80051b2:	230c      	movs	r3, #12
 80051b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b6:	2302      	movs	r3, #2
 80051b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051be:	2303      	movs	r3, #3
 80051c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051c2:	2307      	movs	r3, #7
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051c6:	f107 031c 	add.w	r3, r7, #28
 80051ca:	4619      	mov	r1, r3
 80051cc:	4809      	ldr	r0, [pc, #36]	; (80051f4 <HAL_UART_MspInit+0x160>)
 80051ce:	f000 fe07 	bl	8005de0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80051d2:	2200      	movs	r2, #0
 80051d4:	2100      	movs	r1, #0
 80051d6:	2026      	movs	r0, #38	; 0x26
 80051d8:	f000 fa3b 	bl	8005652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80051dc:	2026      	movs	r0, #38	; 0x26
 80051de:	f000 fa54 	bl	800568a <HAL_NVIC_EnableIRQ>
}
 80051e2:	bf00      	nop
 80051e4:	3730      	adds	r7, #48	; 0x30
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40011000 	.word	0x40011000
 80051f0:	40023800 	.word	0x40023800
 80051f4:	40020000 	.word	0x40020000
 80051f8:	20000784 	.word	0x20000784
 80051fc:	40026440 	.word	0x40026440
 8005200:	40004400 	.word	0x40004400

08005204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005208:	bf00      	nop
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005212:	b480      	push	{r7}
 8005214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005216:	e7fe      	b.n	8005216 <HardFault_Handler+0x4>

08005218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800521c:	e7fe      	b.n	800521c <MemManage_Handler+0x4>

0800521e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800521e:	b480      	push	{r7}
 8005220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005222:	e7fe      	b.n	8005222 <BusFault_Handler+0x4>

08005224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005228:	e7fe      	b.n	8005228 <UsageFault_Handler+0x4>

0800522a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800522a:	b480      	push	{r7}
 800522c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800522e:	bf00      	nop
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800523c:	bf00      	nop
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005246:	b480      	push	{r7}
 8005248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800524a:	bf00      	nop
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005258:	f000 f8de 	bl	8005418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800525c:	bf00      	nop
 800525e:	bd80      	pop	{r7, pc}

08005260 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005264:	4802      	ldr	r0, [pc, #8]	; (8005270 <USART2_IRQHandler+0x10>)
 8005266:	f003 f8fb 	bl	8008460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800526a:	bf00      	nop
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20000824 	.word	0x20000824

08005274 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005278:	4802      	ldr	r0, [pc, #8]	; (8005284 <DMA2_Stream2_IRQHandler+0x10>)
 800527a:	f000 fb49 	bl	8005910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800527e:	bf00      	nop
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000784 	.word	0x20000784

08005288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <_sbrk+0x5c>)
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <_sbrk+0x60>)
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800529c:	4b13      	ldr	r3, [pc, #76]	; (80052ec <_sbrk+0x64>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052a4:	4b11      	ldr	r3, [pc, #68]	; (80052ec <_sbrk+0x64>)
 80052a6:	4a12      	ldr	r2, [pc, #72]	; (80052f0 <_sbrk+0x68>)
 80052a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052aa:	4b10      	ldr	r3, [pc, #64]	; (80052ec <_sbrk+0x64>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d207      	bcs.n	80052c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052b8:	f003 ff84 	bl	80091c4 <__errno>
 80052bc:	4602      	mov	r2, r0
 80052be:	230c      	movs	r3, #12
 80052c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	e009      	b.n	80052dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <_sbrk+0x64>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052ce:	4b07      	ldr	r3, [pc, #28]	; (80052ec <_sbrk+0x64>)
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4413      	add	r3, r2
 80052d6:	4a05      	ldr	r2, [pc, #20]	; (80052ec <_sbrk+0x64>)
 80052d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052da:	68fb      	ldr	r3, [r7, #12]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20020000 	.word	0x20020000
 80052e8:	00000400 	.word	0x00000400
 80052ec:	200001fc 	.word	0x200001fc
 80052f0:	20000870 	.word	0x20000870

080052f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052f8:	4b08      	ldr	r3, [pc, #32]	; (800531c <SystemInit+0x28>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	4a07      	ldr	r2, [pc, #28]	; (800531c <SystemInit+0x28>)
 8005300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005308:	4b04      	ldr	r3, [pc, #16]	; (800531c <SystemInit+0x28>)
 800530a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800530e:	609a      	str	r2, [r3, #8]
#endif
}
 8005310:	bf00      	nop
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	e000ed00 	.word	0xe000ed00

08005320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005358 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005324:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005326:	e003      	b.n	8005330 <LoopCopyDataInit>

08005328 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800532a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800532c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800532e:	3104      	adds	r1, #4

08005330 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005330:	480b      	ldr	r0, [pc, #44]	; (8005360 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005334:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005336:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005338:	d3f6      	bcc.n	8005328 <CopyDataInit>
  ldr  r2, =_sbss
 800533a:	4a0b      	ldr	r2, [pc, #44]	; (8005368 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800533c:	e002      	b.n	8005344 <LoopFillZerobss>

0800533e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800533e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005340:	f842 3b04 	str.w	r3, [r2], #4

08005344 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005344:	4b09      	ldr	r3, [pc, #36]	; (800536c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005346:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005348:	d3f9      	bcc.n	800533e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800534a:	f7ff ffd3 	bl	80052f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800534e:	f003 ff3f 	bl	80091d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005352:	f7ff fba1 	bl	8004a98 <main>
  bx  lr    
 8005356:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005358:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800535c:	0800cce0 	.word	0x0800cce0
  ldr  r0, =_sdata
 8005360:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005364:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8005368:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800536c:	2000086c 	.word	0x2000086c

08005370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005370:	e7fe      	b.n	8005370 <ADC_IRQHandler>
	...

08005374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <HAL_Init+0x40>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a0d      	ldr	r2, [pc, #52]	; (80053b4 <HAL_Init+0x40>)
 800537e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <HAL_Init+0x40>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a0a      	ldr	r2, [pc, #40]	; (80053b4 <HAL_Init+0x40>)
 800538a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800538e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005390:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <HAL_Init+0x40>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a07      	ldr	r2, [pc, #28]	; (80053b4 <HAL_Init+0x40>)
 8005396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800539c:	2003      	movs	r0, #3
 800539e:	f000 f94d 	bl	800563c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053a2:	2000      	movs	r0, #0
 80053a4:	f000 f808 	bl	80053b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053a8:	f7ff fda8 	bl	8004efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40023c00 	.word	0x40023c00

080053b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053c0:	4b12      	ldr	r3, [pc, #72]	; (800540c <HAL_InitTick+0x54>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4b12      	ldr	r3, [pc, #72]	; (8005410 <HAL_InitTick+0x58>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	4619      	mov	r1, r3
 80053ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80053d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 f965 	bl	80056a6 <HAL_SYSTICK_Config>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e00e      	b.n	8005404 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b0f      	cmp	r3, #15
 80053ea:	d80a      	bhi.n	8005402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053ec:	2200      	movs	r2, #0
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	f000 f92d 	bl	8005652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053f8:	4a06      	ldr	r2, [pc, #24]	; (8005414 <HAL_InitTick+0x5c>)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	e000      	b.n	8005404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20000000 	.word	0x20000000
 8005410:	20000008 	.word	0x20000008
 8005414:	20000004 	.word	0x20000004

08005418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <HAL_IncTick+0x20>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <HAL_IncTick+0x24>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4413      	add	r3, r2
 8005428:	4a04      	ldr	r2, [pc, #16]	; (800543c <HAL_IncTick+0x24>)
 800542a:	6013      	str	r3, [r2, #0]
}
 800542c:	bf00      	nop
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000008 	.word	0x20000008
 800543c:	20000864 	.word	0x20000864

08005440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  return uwTick;
 8005444:	4b03      	ldr	r3, [pc, #12]	; (8005454 <HAL_GetTick+0x14>)
 8005446:	681b      	ldr	r3, [r3, #0]
}
 8005448:	4618      	mov	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	20000864 	.word	0x20000864

08005458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005460:	f7ff ffee 	bl	8005440 <HAL_GetTick>
 8005464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005470:	d005      	beq.n	800547e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_Delay+0x40>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800547e:	bf00      	nop
 8005480:	f7ff ffde 	bl	8005440 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	429a      	cmp	r2, r3
 800548e:	d8f7      	bhi.n	8005480 <HAL_Delay+0x28>
  {
  }
}
 8005490:	bf00      	nop
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20000008 	.word	0x20000008

0800549c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054ac:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <__NVIC_SetPriorityGrouping+0x44>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054b8:	4013      	ands	r3, r2
 80054ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054ce:	4a04      	ldr	r2, [pc, #16]	; (80054e0 <__NVIC_SetPriorityGrouping+0x44>)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	60d3      	str	r3, [r2, #12]
}
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	e000ed00 	.word	0xe000ed00

080054e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054e8:	4b04      	ldr	r3, [pc, #16]	; (80054fc <__NVIC_GetPriorityGrouping+0x18>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	0a1b      	lsrs	r3, r3, #8
 80054ee:	f003 0307 	and.w	r3, r3, #7
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	e000ed00 	.word	0xe000ed00

08005500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800550a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800550e:	2b00      	cmp	r3, #0
 8005510:	db0b      	blt.n	800552a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	f003 021f 	and.w	r2, r3, #31
 8005518:	4907      	ldr	r1, [pc, #28]	; (8005538 <__NVIC_EnableIRQ+0x38>)
 800551a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	2001      	movs	r0, #1
 8005522:	fa00 f202 	lsl.w	r2, r0, r2
 8005526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	e000e100 	.word	0xe000e100

0800553c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	4603      	mov	r3, r0
 8005544:	6039      	str	r1, [r7, #0]
 8005546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554c:	2b00      	cmp	r3, #0
 800554e:	db0a      	blt.n	8005566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	b2da      	uxtb	r2, r3
 8005554:	490c      	ldr	r1, [pc, #48]	; (8005588 <__NVIC_SetPriority+0x4c>)
 8005556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555a:	0112      	lsls	r2, r2, #4
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	440b      	add	r3, r1
 8005560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005564:	e00a      	b.n	800557c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	b2da      	uxtb	r2, r3
 800556a:	4908      	ldr	r1, [pc, #32]	; (800558c <__NVIC_SetPriority+0x50>)
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	3b04      	subs	r3, #4
 8005574:	0112      	lsls	r2, r2, #4
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	440b      	add	r3, r1
 800557a:	761a      	strb	r2, [r3, #24]
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	e000e100 	.word	0xe000e100
 800558c:	e000ed00 	.word	0xe000ed00

08005590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005590:	b480      	push	{r7}
 8005592:	b089      	sub	sp, #36	; 0x24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f1c3 0307 	rsb	r3, r3, #7
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	bf28      	it	cs
 80055ae:	2304      	movcs	r3, #4
 80055b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	3304      	adds	r3, #4
 80055b6:	2b06      	cmp	r3, #6
 80055b8:	d902      	bls.n	80055c0 <NVIC_EncodePriority+0x30>
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	3b03      	subs	r3, #3
 80055be:	e000      	b.n	80055c2 <NVIC_EncodePriority+0x32>
 80055c0:	2300      	movs	r3, #0
 80055c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055c4:	f04f 32ff 	mov.w	r2, #4294967295
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	43da      	mvns	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	401a      	ands	r2, r3
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055d8:	f04f 31ff 	mov.w	r1, #4294967295
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	fa01 f303 	lsl.w	r3, r1, r3
 80055e2:	43d9      	mvns	r1, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055e8:	4313      	orrs	r3, r2
         );
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3724      	adds	r7, #36	; 0x24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3b01      	subs	r3, #1
 8005604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005608:	d301      	bcc.n	800560e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800560a:	2301      	movs	r3, #1
 800560c:	e00f      	b.n	800562e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800560e:	4a0a      	ldr	r2, [pc, #40]	; (8005638 <SysTick_Config+0x40>)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3b01      	subs	r3, #1
 8005614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005616:	210f      	movs	r1, #15
 8005618:	f04f 30ff 	mov.w	r0, #4294967295
 800561c:	f7ff ff8e 	bl	800553c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005620:	4b05      	ldr	r3, [pc, #20]	; (8005638 <SysTick_Config+0x40>)
 8005622:	2200      	movs	r2, #0
 8005624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005626:	4b04      	ldr	r3, [pc, #16]	; (8005638 <SysTick_Config+0x40>)
 8005628:	2207      	movs	r2, #7
 800562a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	e000e010 	.word	0xe000e010

0800563c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff ff29 	bl	800549c <__NVIC_SetPriorityGrouping>
}
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005652:	b580      	push	{r7, lr}
 8005654:	b086      	sub	sp, #24
 8005656:	af00      	add	r7, sp, #0
 8005658:	4603      	mov	r3, r0
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	607a      	str	r2, [r7, #4]
 800565e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005664:	f7ff ff3e 	bl	80054e4 <__NVIC_GetPriorityGrouping>
 8005668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	6978      	ldr	r0, [r7, #20]
 8005670:	f7ff ff8e 	bl	8005590 <NVIC_EncodePriority>
 8005674:	4602      	mov	r2, r0
 8005676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800567a:	4611      	mov	r1, r2
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff ff5d 	bl	800553c <__NVIC_SetPriority>
}
 8005682:	bf00      	nop
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	4603      	mov	r3, r0
 8005692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff ff31 	bl	8005500 <__NVIC_EnableIRQ>
}
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff ffa2 	bl	80055f8 <SysTick_Config>
 80056b4:	4603      	mov	r3, r0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80056cc:	f7ff feb8 	bl	8005440 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e099      	b.n	8005810 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0201 	bic.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056fc:	e00f      	b.n	800571e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056fe:	f7ff fe9f 	bl	8005440 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b05      	cmp	r3, #5
 800570a:	d908      	bls.n	800571e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2203      	movs	r2, #3
 8005716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e078      	b.n	8005810 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e8      	bne.n	80056fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	4b38      	ldr	r3, [pc, #224]	; (8005818 <HAL_DMA_Init+0x158>)
 8005738:	4013      	ands	r3, r2
 800573a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800574a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005756:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005762:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	2b04      	cmp	r3, #4
 8005776:	d107      	bne.n	8005788 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	4313      	orrs	r3, r2
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 0307 	bic.w	r3, r3, #7
 800579e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d117      	bne.n	80057e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00e      	beq.n	80057e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fa91 	bl	8005cec <DMA_CheckFifoParam>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2240      	movs	r2, #64	; 0x40
 80057d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80057de:	2301      	movs	r3, #1
 80057e0:	e016      	b.n	8005810 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fa48 	bl	8005c80 <DMA_CalcBaseAndBitshift>
 80057f0:	4603      	mov	r3, r0
 80057f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f8:	223f      	movs	r2, #63	; 0x3f
 80057fa:	409a      	lsls	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	f010803f 	.word	0xf010803f

0800581c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_DMA_Start_IT+0x26>
 800583e:	2302      	movs	r3, #2
 8005840:	e040      	b.n	80058c4 <HAL_DMA_Start_IT+0xa8>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b01      	cmp	r3, #1
 8005854:	d12f      	bne.n	80058b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 f9da 	bl	8005c24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005874:	223f      	movs	r2, #63	; 0x3f
 8005876:	409a      	lsls	r2, r3
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0216 	orr.w	r2, r2, #22
 800588a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005890:	2b00      	cmp	r3, #0
 8005892:	d007      	beq.n	80058a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0208 	orr.w	r2, r2, #8
 80058a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	e005      	b.n	80058c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80058be:	2302      	movs	r3, #2
 80058c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d004      	beq.n	80058ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2280      	movs	r2, #128	; 0x80
 80058e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e00c      	b.n	8005904 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2205      	movs	r2, #5
 80058ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0201 	bic.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800591c:	4b92      	ldr	r3, [pc, #584]	; (8005b68 <HAL_DMA_IRQHandler+0x258>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a92      	ldr	r2, [pc, #584]	; (8005b6c <HAL_DMA_IRQHandler+0x25c>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	0a9b      	lsrs	r3, r3, #10
 8005928:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593a:	2208      	movs	r2, #8
 800593c:	409a      	lsls	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4013      	ands	r3, r2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01a      	beq.n	800597c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	d013      	beq.n	800597c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0204 	bic.w	r2, r2, #4
 8005962:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005968:	2208      	movs	r2, #8
 800596a:	409a      	lsls	r2, r3
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005974:	f043 0201 	orr.w	r2, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005980:	2201      	movs	r2, #1
 8005982:	409a      	lsls	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4013      	ands	r3, r2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d012      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00b      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599e:	2201      	movs	r2, #1
 80059a0:	409a      	lsls	r2, r3
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	f043 0202 	orr.w	r2, r3, #2
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b6:	2204      	movs	r2, #4
 80059b8:	409a      	lsls	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d012      	beq.n	80059e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00b      	beq.n	80059e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d4:	2204      	movs	r2, #4
 80059d6:	409a      	lsls	r2, r3
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e0:	f043 0204 	orr.w	r2, r3, #4
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ec:	2210      	movs	r2, #16
 80059ee:	409a      	lsls	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d043      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d03c      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0a:	2210      	movs	r2, #16
 8005a0c:	409a      	lsls	r2, r3
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d018      	beq.n	8005a52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d108      	bne.n	8005a40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d024      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	4798      	blx	r3
 8005a3e:	e01f      	b.n	8005a80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01b      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	4798      	blx	r3
 8005a50:	e016      	b.n	8005a80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d107      	bne.n	8005a70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0208 	bic.w	r2, r2, #8
 8005a6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a84:	2220      	movs	r2, #32
 8005a86:	409a      	lsls	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 808e 	beq.w	8005bae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0310 	and.w	r3, r3, #16
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8086 	beq.w	8005bae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b05      	cmp	r3, #5
 8005ab8:	d136      	bne.n	8005b28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0216 	bic.w	r2, r2, #22
 8005ac8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ad8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d103      	bne.n	8005aea <HAL_DMA_IRQHandler+0x1da>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0208 	bic.w	r2, r2, #8
 8005af8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afe:	223f      	movs	r2, #63	; 0x3f
 8005b00:	409a      	lsls	r2, r3
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d07d      	beq.n	8005c1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
        }
        return;
 8005b26:	e078      	b.n	8005c1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01c      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d108      	bne.n	8005b56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d030      	beq.n	8005bae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	4798      	blx	r3
 8005b54:	e02b      	b.n	8005bae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d027      	beq.n	8005bae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	4798      	blx	r3
 8005b66:	e022      	b.n	8005bae <HAL_DMA_IRQHandler+0x29e>
 8005b68:	20000000 	.word	0x20000000
 8005b6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10f      	bne.n	8005b9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0210 	bic.w	r2, r2, #16
 8005b8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d032      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d022      	beq.n	8005c08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2205      	movs	r2, #5
 8005bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0201 	bic.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	60bb      	str	r3, [r7, #8]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d307      	bcc.n	8005bf6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f2      	bne.n	8005bda <HAL_DMA_IRQHandler+0x2ca>
 8005bf4:	e000      	b.n	8005bf8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005bf6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d005      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	4798      	blx	r3
 8005c18:	e000      	b.n	8005c1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8005c1a:	bf00      	nop
    }
  }
}
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop

08005c24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2b40      	cmp	r3, #64	; 0x40
 8005c50:	d108      	bne.n	8005c64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c62:	e007      	b.n	8005c74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	60da      	str	r2, [r3, #12]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	3b10      	subs	r3, #16
 8005c90:	4a14      	ldr	r2, [pc, #80]	; (8005ce4 <DMA_CalcBaseAndBitshift+0x64>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	091b      	lsrs	r3, r3, #4
 8005c98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c9a:	4a13      	ldr	r2, [pc, #76]	; (8005ce8 <DMA_CalcBaseAndBitshift+0x68>)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d909      	bls.n	8005cc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cb6:	f023 0303 	bic.w	r3, r3, #3
 8005cba:	1d1a      	adds	r2, r3, #4
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	659a      	str	r2, [r3, #88]	; 0x58
 8005cc0:	e007      	b.n	8005cd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cca:	f023 0303 	bic.w	r3, r3, #3
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	aaaaaaab 	.word	0xaaaaaaab
 8005ce8:	0800c854 	.word	0x0800c854

08005cec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d11f      	bne.n	8005d46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d855      	bhi.n	8005db8 <DMA_CheckFifoParam+0xcc>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <DMA_CheckFifoParam+0x28>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d25 	.word	0x08005d25
 8005d18:	08005d37 	.word	0x08005d37
 8005d1c:	08005d25 	.word	0x08005d25
 8005d20:	08005db9 	.word	0x08005db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d045      	beq.n	8005dbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d34:	e042      	b.n	8005dbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d3e:	d13f      	bne.n	8005dc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d44:	e03c      	b.n	8005dc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d4e:	d121      	bne.n	8005d94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d836      	bhi.n	8005dc4 <DMA_CheckFifoParam+0xd8>
 8005d56:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <DMA_CheckFifoParam+0x70>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d6d 	.word	0x08005d6d
 8005d60:	08005d73 	.word	0x08005d73
 8005d64:	08005d6d 	.word	0x08005d6d
 8005d68:	08005d85 	.word	0x08005d85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d70:	e02f      	b.n	8005dd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d024      	beq.n	8005dc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d82:	e021      	b.n	8005dc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d8c:	d11e      	bne.n	8005dcc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d92:	e01b      	b.n	8005dcc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d902      	bls.n	8005da0 <DMA_CheckFifoParam+0xb4>
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d003      	beq.n	8005da6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d9e:	e018      	b.n	8005dd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	73fb      	strb	r3, [r7, #15]
      break;
 8005da4:	e015      	b.n	8005dd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00e      	beq.n	8005dd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	73fb      	strb	r3, [r7, #15]
      break;
 8005db6:	e00b      	b.n	8005dd0 <DMA_CheckFifoParam+0xe4>
      break;
 8005db8:	bf00      	nop
 8005dba:	e00a      	b.n	8005dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005dbc:	bf00      	nop
 8005dbe:	e008      	b.n	8005dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005dc0:	bf00      	nop
 8005dc2:	e006      	b.n	8005dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005dc4:	bf00      	nop
 8005dc6:	e004      	b.n	8005dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005dc8:	bf00      	nop
 8005dca:	e002      	b.n	8005dd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8005dcc:	bf00      	nop
 8005dce:	e000      	b.n	8005dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005dd0:	bf00      	nop
    }
  } 
  
  return status; 
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b089      	sub	sp, #36	; 0x24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	e16b      	b.n	80060d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	f040 815a 	bne.w	80060ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d00b      	beq.n	8005e3a <HAL_GPIO_Init+0x5a>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d007      	beq.n	8005e3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e2e:	2b11      	cmp	r3, #17
 8005e30:	d003      	beq.n	8005e3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b12      	cmp	r3, #18
 8005e38:	d130      	bne.n	8005e9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	2203      	movs	r2, #3
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e70:	2201      	movs	r2, #1
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	091b      	lsrs	r3, r3, #4
 8005e86:	f003 0201 	and.w	r2, r3, #1
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	43db      	mvns	r3, r3
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d003      	beq.n	8005edc <HAL_GPIO_Init+0xfc>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b12      	cmp	r3, #18
 8005eda:	d123      	bne.n	8005f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	08da      	lsrs	r2, r3, #3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3208      	adds	r2, #8
 8005ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	220f      	movs	r2, #15
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	4013      	ands	r3, r2
 8005efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	08da      	lsrs	r2, r3, #3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3208      	adds	r2, #8
 8005f1e:	69b9      	ldr	r1, [r7, #24]
 8005f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	2203      	movs	r2, #3
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	43db      	mvns	r3, r3
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f003 0203 	and.w	r2, r3, #3
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 80b4 	beq.w	80060ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	4b5f      	ldr	r3, [pc, #380]	; (80060e8 <HAL_GPIO_Init+0x308>)
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	4a5e      	ldr	r2, [pc, #376]	; (80060e8 <HAL_GPIO_Init+0x308>)
 8005f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f74:	6453      	str	r3, [r2, #68]	; 0x44
 8005f76:	4b5c      	ldr	r3, [pc, #368]	; (80060e8 <HAL_GPIO_Init+0x308>)
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f82:	4a5a      	ldr	r2, [pc, #360]	; (80060ec <HAL_GPIO_Init+0x30c>)
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	089b      	lsrs	r3, r3, #2
 8005f88:	3302      	adds	r3, #2
 8005f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	220f      	movs	r2, #15
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	43db      	mvns	r3, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a51      	ldr	r2, [pc, #324]	; (80060f0 <HAL_GPIO_Init+0x310>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d02b      	beq.n	8006006 <HAL_GPIO_Init+0x226>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a50      	ldr	r2, [pc, #320]	; (80060f4 <HAL_GPIO_Init+0x314>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d025      	beq.n	8006002 <HAL_GPIO_Init+0x222>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a4f      	ldr	r2, [pc, #316]	; (80060f8 <HAL_GPIO_Init+0x318>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01f      	beq.n	8005ffe <HAL_GPIO_Init+0x21e>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a4e      	ldr	r2, [pc, #312]	; (80060fc <HAL_GPIO_Init+0x31c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d019      	beq.n	8005ffa <HAL_GPIO_Init+0x21a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a4d      	ldr	r2, [pc, #308]	; (8006100 <HAL_GPIO_Init+0x320>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <HAL_GPIO_Init+0x216>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a4c      	ldr	r2, [pc, #304]	; (8006104 <HAL_GPIO_Init+0x324>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00d      	beq.n	8005ff2 <HAL_GPIO_Init+0x212>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a4b      	ldr	r2, [pc, #300]	; (8006108 <HAL_GPIO_Init+0x328>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d007      	beq.n	8005fee <HAL_GPIO_Init+0x20e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a4a      	ldr	r2, [pc, #296]	; (800610c <HAL_GPIO_Init+0x32c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d101      	bne.n	8005fea <HAL_GPIO_Init+0x20a>
 8005fe6:	2307      	movs	r3, #7
 8005fe8:	e00e      	b.n	8006008 <HAL_GPIO_Init+0x228>
 8005fea:	2308      	movs	r3, #8
 8005fec:	e00c      	b.n	8006008 <HAL_GPIO_Init+0x228>
 8005fee:	2306      	movs	r3, #6
 8005ff0:	e00a      	b.n	8006008 <HAL_GPIO_Init+0x228>
 8005ff2:	2305      	movs	r3, #5
 8005ff4:	e008      	b.n	8006008 <HAL_GPIO_Init+0x228>
 8005ff6:	2304      	movs	r3, #4
 8005ff8:	e006      	b.n	8006008 <HAL_GPIO_Init+0x228>
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e004      	b.n	8006008 <HAL_GPIO_Init+0x228>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e002      	b.n	8006008 <HAL_GPIO_Init+0x228>
 8006002:	2301      	movs	r3, #1
 8006004:	e000      	b.n	8006008 <HAL_GPIO_Init+0x228>
 8006006:	2300      	movs	r3, #0
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	f002 0203 	and.w	r2, r2, #3
 800600e:	0092      	lsls	r2, r2, #2
 8006010:	4093      	lsls	r3, r2
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	4313      	orrs	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006018:	4934      	ldr	r1, [pc, #208]	; (80060ec <HAL_GPIO_Init+0x30c>)
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	3302      	adds	r3, #2
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006026:	4b3a      	ldr	r3, [pc, #232]	; (8006110 <HAL_GPIO_Init+0x330>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	43db      	mvns	r3, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4013      	ands	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	4313      	orrs	r3, r2
 8006048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800604a:	4a31      	ldr	r2, [pc, #196]	; (8006110 <HAL_GPIO_Init+0x330>)
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006050:	4b2f      	ldr	r3, [pc, #188]	; (8006110 <HAL_GPIO_Init+0x330>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	43db      	mvns	r3, r3
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	4013      	ands	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006074:	4a26      	ldr	r2, [pc, #152]	; (8006110 <HAL_GPIO_Init+0x330>)
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800607a:	4b25      	ldr	r3, [pc, #148]	; (8006110 <HAL_GPIO_Init+0x330>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	43db      	mvns	r3, r3
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4013      	ands	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4313      	orrs	r3, r2
 800609c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800609e:	4a1c      	ldr	r2, [pc, #112]	; (8006110 <HAL_GPIO_Init+0x330>)
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060a4:	4b1a      	ldr	r3, [pc, #104]	; (8006110 <HAL_GPIO_Init+0x330>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	43db      	mvns	r3, r3
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	4013      	ands	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060c8:	4a11      	ldr	r2, [pc, #68]	; (8006110 <HAL_GPIO_Init+0x330>)
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	3301      	adds	r3, #1
 80060d2:	61fb      	str	r3, [r7, #28]
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	2b0f      	cmp	r3, #15
 80060d8:	f67f ae90 	bls.w	8005dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060dc:	bf00      	nop
 80060de:	3724      	adds	r7, #36	; 0x24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40023800 	.word	0x40023800
 80060ec:	40013800 	.word	0x40013800
 80060f0:	40020000 	.word	0x40020000
 80060f4:	40020400 	.word	0x40020400
 80060f8:	40020800 	.word	0x40020800
 80060fc:	40020c00 	.word	0x40020c00
 8006100:	40021000 	.word	0x40021000
 8006104:	40021400 	.word	0x40021400
 8006108:	40021800 	.word	0x40021800
 800610c:	40021c00 	.word	0x40021c00
 8006110:	40013c00 	.word	0x40013c00

08006114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	887b      	ldrh	r3, [r7, #2]
 8006126:	4013      	ands	r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
 8006130:	e001      	b.n	8006136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	807b      	strh	r3, [r7, #2]
 8006150:	4613      	mov	r3, r2
 8006152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006154:	787b      	ldrb	r3, [r7, #1]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800615a:	887a      	ldrh	r2, [r7, #2]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006160:	e003      	b.n	800616a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006162:	887b      	ldrh	r3, [r7, #2]
 8006164:	041a      	lsls	r2, r3, #16
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	619a      	str	r2, [r3, #24]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
	...

08006178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e11f      	b.n	80063ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7fe fed4 	bl	8004f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2224      	movs	r2, #36	; 0x24
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061dc:	f001 fb90 	bl	8007900 <HAL_RCC_GetPCLK1Freq>
 80061e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	4a7b      	ldr	r2, [pc, #492]	; (80063d4 <HAL_I2C_Init+0x25c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d807      	bhi.n	80061fc <HAL_I2C_Init+0x84>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4a7a      	ldr	r2, [pc, #488]	; (80063d8 <HAL_I2C_Init+0x260>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	bf94      	ite	ls
 80061f4:	2301      	movls	r3, #1
 80061f6:	2300      	movhi	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	e006      	b.n	800620a <HAL_I2C_Init+0x92>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4a77      	ldr	r2, [pc, #476]	; (80063dc <HAL_I2C_Init+0x264>)
 8006200:	4293      	cmp	r3, r2
 8006202:	bf94      	ite	ls
 8006204:	2301      	movls	r3, #1
 8006206:	2300      	movhi	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e0db      	b.n	80063ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4a72      	ldr	r2, [pc, #456]	; (80063e0 <HAL_I2C_Init+0x268>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	0c9b      	lsrs	r3, r3, #18
 800621c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4a64      	ldr	r2, [pc, #400]	; (80063d4 <HAL_I2C_Init+0x25c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d802      	bhi.n	800624c <HAL_I2C_Init+0xd4>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	3301      	adds	r3, #1
 800624a:	e009      	b.n	8006260 <HAL_I2C_Init+0xe8>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	4a63      	ldr	r2, [pc, #396]	; (80063e4 <HAL_I2C_Init+0x26c>)
 8006258:	fba2 2303 	umull	r2, r3, r2, r3
 800625c:	099b      	lsrs	r3, r3, #6
 800625e:	3301      	adds	r3, #1
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	430b      	orrs	r3, r1
 8006266:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006272:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	4956      	ldr	r1, [pc, #344]	; (80063d4 <HAL_I2C_Init+0x25c>)
 800627c:	428b      	cmp	r3, r1
 800627e:	d80d      	bhi.n	800629c <HAL_I2C_Init+0x124>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	1e59      	subs	r1, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	fbb1 f3f3 	udiv	r3, r1, r3
 800628e:	3301      	adds	r3, #1
 8006290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006294:	2b04      	cmp	r3, #4
 8006296:	bf38      	it	cc
 8006298:	2304      	movcc	r3, #4
 800629a:	e04f      	b.n	800633c <HAL_I2C_Init+0x1c4>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d111      	bne.n	80062c8 <HAL_I2C_Init+0x150>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	1e58      	subs	r0, r3, #1
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6859      	ldr	r1, [r3, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	440b      	add	r3, r1
 80062b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062b6:	3301      	adds	r3, #1
 80062b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	e012      	b.n	80062ee <HAL_I2C_Init+0x176>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	1e58      	subs	r0, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6859      	ldr	r1, [r3, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	0099      	lsls	r1, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	fbb0 f3f3 	udiv	r3, r0, r3
 80062de:	3301      	adds	r3, #1
 80062e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	bf0c      	ite	eq
 80062e8:	2301      	moveq	r3, #1
 80062ea:	2300      	movne	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_I2C_Init+0x17e>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e022      	b.n	800633c <HAL_I2C_Init+0x1c4>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10e      	bne.n	800631c <HAL_I2C_Init+0x1a4>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1e58      	subs	r0, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6859      	ldr	r1, [r3, #4]
 8006306:	460b      	mov	r3, r1
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	440b      	add	r3, r1
 800630c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006310:	3301      	adds	r3, #1
 8006312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631a:	e00f      	b.n	800633c <HAL_I2C_Init+0x1c4>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	1e58      	subs	r0, r3, #1
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6859      	ldr	r1, [r3, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	0099      	lsls	r1, r3, #2
 800632c:	440b      	add	r3, r1
 800632e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006332:	3301      	adds	r3, #1
 8006334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	6809      	ldr	r1, [r1, #0]
 8006340:	4313      	orrs	r3, r2
 8006342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69da      	ldr	r2, [r3, #28]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800636a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6911      	ldr	r1, [r2, #16]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	68d2      	ldr	r2, [r2, #12]
 8006376:	4311      	orrs	r1, r2
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	430b      	orrs	r3, r1
 800637e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695a      	ldr	r2, [r3, #20]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	000186a0 	.word	0x000186a0
 80063d8:	001e847f 	.word	0x001e847f
 80063dc:	003d08ff 	.word	0x003d08ff
 80063e0:	431bde83 	.word	0x431bde83
 80063e4:	10624dd3 	.word	0x10624dd3

080063e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	461a      	mov	r2, r3
 80063f4:	460b      	mov	r3, r1
 80063f6:	817b      	strh	r3, [r7, #10]
 80063f8:	4613      	mov	r3, r2
 80063fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063fc:	f7ff f820 	bl	8005440 <HAL_GetTick>
 8006400:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b20      	cmp	r3, #32
 800640c:	f040 80e0 	bne.w	80065d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	2319      	movs	r3, #25
 8006416:	2201      	movs	r2, #1
 8006418:	4970      	ldr	r1, [pc, #448]	; (80065dc <HAL_I2C_Master_Transmit+0x1f4>)
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fc58 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006426:	2302      	movs	r3, #2
 8006428:	e0d3      	b.n	80065d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_I2C_Master_Transmit+0x50>
 8006434:	2302      	movs	r3, #2
 8006436:	e0cc      	b.n	80065d2 <HAL_I2C_Master_Transmit+0x1ea>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b01      	cmp	r3, #1
 800644c:	d007      	beq.n	800645e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0201 	orr.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800646c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2221      	movs	r2, #33	; 0x21
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2210      	movs	r2, #16
 800647a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	893a      	ldrh	r2, [r7, #8]
 800648e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4a50      	ldr	r2, [pc, #320]	; (80065e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800649e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80064a0:	8979      	ldrh	r1, [r7, #10]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	6a3a      	ldr	r2, [r7, #32]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 fac2 	bl	8006a30 <I2C_MasterRequestWrite>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e08d      	b.n	80065d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064b6:	2300      	movs	r3, #0
 80064b8:	613b      	str	r3, [r7, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80064cc:	e066      	b.n	800659c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	6a39      	ldr	r1, [r7, #32]
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fcd2 	bl	8006e7c <I2C_WaitOnTXEFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00d      	beq.n	80064fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d107      	bne.n	80064f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e06b      	b.n	80065d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	781a      	ldrb	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29b      	uxth	r3, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b04      	cmp	r3, #4
 8006536:	d11b      	bne.n	8006570 <HAL_I2C_Master_Transmit+0x188>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653c:	2b00      	cmp	r3, #0
 800653e:	d017      	beq.n	8006570 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	781a      	ldrb	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	3b01      	subs	r3, #1
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	6a39      	ldr	r1, [r7, #32]
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fcc2 	bl	8006efe <I2C_WaitOnBTFFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00d      	beq.n	800659c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	2b04      	cmp	r3, #4
 8006586:	d107      	bne.n	8006598 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006596:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e01a      	b.n	80065d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d194      	bne.n	80064ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	e000      	b.n	80065d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80065d0:	2302      	movs	r3, #2
  }
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	00100002 	.word	0x00100002
 80065e0:	ffff0000 	.word	0xffff0000

080065e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08c      	sub	sp, #48	; 0x30
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	607a      	str	r2, [r7, #4]
 80065ee:	461a      	mov	r2, r3
 80065f0:	460b      	mov	r3, r1
 80065f2:	817b      	strh	r3, [r7, #10]
 80065f4:	4613      	mov	r3, r2
 80065f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065f8:	f7fe ff22 	bl	8005440 <HAL_GetTick>
 80065fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b20      	cmp	r3, #32
 8006608:	f040 820b 	bne.w	8006a22 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	2319      	movs	r3, #25
 8006612:	2201      	movs	r2, #1
 8006614:	497c      	ldr	r1, [pc, #496]	; (8006808 <HAL_I2C_Master_Receive+0x224>)
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 fb5a 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006622:	2302      	movs	r3, #2
 8006624:	e1fe      	b.n	8006a24 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_I2C_Master_Receive+0x50>
 8006630:	2302      	movs	r3, #2
 8006632:	e1f7      	b.n	8006a24 <HAL_I2C_Master_Receive+0x440>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b01      	cmp	r3, #1
 8006648:	d007      	beq.n	800665a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f042 0201 	orr.w	r2, r2, #1
 8006658:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006668:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2222      	movs	r2, #34	; 0x22
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2210      	movs	r2, #16
 8006676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	893a      	ldrh	r2, [r7, #8]
 800668a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4a5c      	ldr	r2, [pc, #368]	; (800680c <HAL_I2C_Master_Receive+0x228>)
 800669a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800669c:	8979      	ldrh	r1, [r7, #10]
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 fa46 	bl	8006b34 <I2C_MasterRequestRead>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e1b8      	b.n	8006a24 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d113      	bne.n	80066e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ba:	2300      	movs	r3, #0
 80066bc:	623b      	str	r3, [r7, #32]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	623b      	str	r3, [r7, #32]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	623b      	str	r3, [r7, #32]
 80066ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	e18c      	b.n	80069fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d11b      	bne.n	8006722 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066fa:	2300      	movs	r3, #0
 80066fc:	61fb      	str	r3, [r7, #28]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	61fb      	str	r3, [r7, #28]
 800670e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	e16c      	b.n	80069fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006726:	2b02      	cmp	r3, #2
 8006728:	d11b      	bne.n	8006762 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006738:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006748:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800674a:	2300      	movs	r3, #0
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	e14c      	b.n	80069fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	617b      	str	r3, [r7, #20]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006788:	e138      	b.n	80069fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678e:	2b03      	cmp	r3, #3
 8006790:	f200 80f1 	bhi.w	8006976 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006798:	2b01      	cmp	r3, #1
 800679a:	d123      	bne.n	80067e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800679c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fbed 	bl	8006f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e139      	b.n	8006a24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691a      	ldr	r2, [r3, #16]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	b2d2      	uxtb	r2, r2
 80067bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e2:	e10b      	b.n	80069fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d14e      	bne.n	800688a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	2200      	movs	r2, #0
 80067f4:	4906      	ldr	r1, [pc, #24]	; (8006810 <HAL_I2C_Master_Receive+0x22c>)
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fa6a 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d008      	beq.n	8006814 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e10e      	b.n	8006a24 <HAL_I2C_Master_Receive+0x440>
 8006806:	bf00      	nop
 8006808:	00100002 	.word	0x00100002
 800680c:	ffff0000 	.word	0xffff0000
 8006810:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006822:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	691a      	ldr	r2, [r3, #16]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	1c5a      	adds	r2, r3, #1
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684c:	b29b      	uxth	r3, r3
 800684e:	3b01      	subs	r3, #1
 8006850:	b29a      	uxth	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006872:	3b01      	subs	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006888:	e0b8      	b.n	80069fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	2200      	movs	r2, #0
 8006892:	4966      	ldr	r1, [pc, #408]	; (8006a2c <HAL_I2C_Master_Receive+0x448>)
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fa1b 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e0bf      	b.n	8006a24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691a      	ldr	r2, [r3, #16]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	2200      	movs	r2, #0
 80068ee:	494f      	ldr	r1, [pc, #316]	; (8006a2c <HAL_I2C_Master_Receive+0x448>)
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 f9ed 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e091      	b.n	8006a24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006974:	e042      	b.n	80069fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006978:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 fb00 	bl	8006f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e04c      	b.n	8006a24 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d118      	bne.n	80069fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f47f aec2 	bne.w	800678a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	e000      	b.n	8006a24 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006a22:	2302      	movs	r3, #2
  }
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3728      	adds	r7, #40	; 0x28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	00010004 	.word	0x00010004

08006a30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	607a      	str	r2, [r7, #4]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d006      	beq.n	8006a5a <I2C_MasterRequestWrite+0x2a>
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d003      	beq.n	8006a5a <I2C_MasterRequestWrite+0x2a>
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a58:	d108      	bne.n	8006a6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	e00b      	b.n	8006a84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	2b12      	cmp	r3, #18
 8006a72:	d107      	bne.n	8006a84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 f91d 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00d      	beq.n	8006ab8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aaa:	d103      	bne.n	8006ab4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ab2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e035      	b.n	8006b24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ac0:	d108      	bne.n	8006ad4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ac2:	897b      	ldrh	r3, [r7, #10]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ad0:	611a      	str	r2, [r3, #16]
 8006ad2:	e01b      	b.n	8006b0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ad4:	897b      	ldrh	r3, [r7, #10]
 8006ad6:	11db      	asrs	r3, r3, #7
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f003 0306 	and.w	r3, r3, #6
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	f063 030f 	orn	r3, r3, #15
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	490e      	ldr	r1, [pc, #56]	; (8006b2c <I2C_MasterRequestWrite+0xfc>)
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f943 	bl	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e010      	b.n	8006b24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006b02:	897b      	ldrh	r3, [r7, #10]
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	4907      	ldr	r1, [pc, #28]	; (8006b30 <I2C_MasterRequestWrite+0x100>)
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f933 	bl	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	00010008 	.word	0x00010008
 8006b30:	00010002 	.word	0x00010002

08006b34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	607a      	str	r2, [r7, #4]
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	460b      	mov	r3, r1
 8006b42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d006      	beq.n	8006b6e <I2C_MasterRequestRead+0x3a>
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d003      	beq.n	8006b6e <I2C_MasterRequestRead+0x3a>
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b6c:	d108      	bne.n	8006b80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e00b      	b.n	8006b98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b84:	2b11      	cmp	r3, #17
 8006b86:	d107      	bne.n	8006b98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 f893 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00d      	beq.n	8006bcc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bbe:	d103      	bne.n	8006bc8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e079      	b.n	8006cc0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bd4:	d108      	bne.n	8006be8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006bd6:	897b      	ldrh	r3, [r7, #10]
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	f043 0301 	orr.w	r3, r3, #1
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	611a      	str	r2, [r3, #16]
 8006be6:	e05f      	b.n	8006ca8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006be8:	897b      	ldrh	r3, [r7, #10]
 8006bea:	11db      	asrs	r3, r3, #7
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	f003 0306 	and.w	r3, r3, #6
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	f063 030f 	orn	r3, r3, #15
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	4930      	ldr	r1, [pc, #192]	; (8006cc8 <I2C_MasterRequestRead+0x194>)
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 f8b9 	bl	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e054      	b.n	8006cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c16:	897b      	ldrh	r3, [r7, #10]
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	4929      	ldr	r1, [pc, #164]	; (8006ccc <I2C_MasterRequestRead+0x198>)
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 f8a9 	bl	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e044      	b.n	8006cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c36:	2300      	movs	r3, #0
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f831 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00d      	beq.n	8006c90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c82:	d103      	bne.n	8006c8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e017      	b.n	8006cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006c90:	897b      	ldrh	r3, [r7, #10]
 8006c92:	11db      	asrs	r3, r3, #7
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	f003 0306 	and.w	r3, r3, #6
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f063 030e 	orn	r3, r3, #14
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	4907      	ldr	r1, [pc, #28]	; (8006ccc <I2C_MasterRequestRead+0x198>)
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f000 f865 	bl	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	00010008 	.word	0x00010008
 8006ccc:	00010002 	.word	0x00010002

08006cd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ce0:	e025      	b.n	8006d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce8:	d021      	beq.n	8006d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cea:	f7fe fba9 	bl	8005440 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d302      	bcc.n	8006d00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d116      	bne.n	8006d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	f043 0220 	orr.w	r2, r3, #32
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e023      	b.n	8006d76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	0c1b      	lsrs	r3, r3, #16
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d10d      	bne.n	8006d54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	43da      	mvns	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4013      	ands	r3, r2
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bf0c      	ite	eq
 8006d4a:	2301      	moveq	r3, #1
 8006d4c:	2300      	movne	r3, #0
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	e00c      	b.n	8006d6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	43da      	mvns	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bf0c      	ite	eq
 8006d66:	2301      	moveq	r3, #1
 8006d68:	2300      	movne	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d0b6      	beq.n	8006ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
 8006d8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d8c:	e051      	b.n	8006e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d9c:	d123      	bne.n	8006de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006db6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f043 0204 	orr.w	r2, r3, #4
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e046      	b.n	8006e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d021      	beq.n	8006e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dee:	f7fe fb27 	bl	8005440 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d302      	bcc.n	8006e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d116      	bne.n	8006e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f043 0220 	orr.w	r2, r3, #32
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e020      	b.n	8006e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d10c      	bne.n	8006e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	43da      	mvns	r2, r3
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4013      	ands	r3, r2
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	bf14      	ite	ne
 8006e4e:	2301      	movne	r3, #1
 8006e50:	2300      	moveq	r3, #0
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	e00b      	b.n	8006e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	43da      	mvns	r2, r3
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	4013      	ands	r3, r2
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	bf14      	ite	ne
 8006e68:	2301      	movne	r3, #1
 8006e6a:	2300      	moveq	r3, #0
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d18d      	bne.n	8006d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e88:	e02d      	b.n	8006ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f8ce 	bl	800702c <I2C_IsAcknowledgeFailed>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e02d      	b.n	8006ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea0:	d021      	beq.n	8006ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea2:	f7fe facd 	bl	8005440 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d302      	bcc.n	8006eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d116      	bne.n	8006ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	f043 0220 	orr.w	r2, r3, #32
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e007      	b.n	8006ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef0:	2b80      	cmp	r3, #128	; 0x80
 8006ef2:	d1ca      	bne.n	8006e8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f0a:	e02d      	b.n	8006f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f88d 	bl	800702c <I2C_IsAcknowledgeFailed>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e02d      	b.n	8006f78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f22:	d021      	beq.n	8006f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f24:	f7fe fa8c 	bl	8005440 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d302      	bcc.n	8006f3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d116      	bne.n	8006f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	f043 0220 	orr.w	r2, r3, #32
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e007      	b.n	8006f78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	f003 0304 	and.w	r3, r3, #4
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d1ca      	bne.n	8006f0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f8c:	e042      	b.n	8007014 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	f003 0310 	and.w	r3, r3, #16
 8006f98:	2b10      	cmp	r3, #16
 8006f9a:	d119      	bne.n	8006fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f06f 0210 	mvn.w	r2, #16
 8006fa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e029      	b.n	8007024 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd0:	f7fe fa36 	bl	8005440 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d302      	bcc.n	8006fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d116      	bne.n	8007014 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	f043 0220 	orr.w	r2, r3, #32
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e007      	b.n	8007024 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d1b5      	bne.n	8006f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800703e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007042:	d11b      	bne.n	800707c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800704c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	f043 0204 	orr.w	r2, r3, #4
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e000      	b.n	800707e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
	...

0800708c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e25b      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d075      	beq.n	8007196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070aa:	4ba3      	ldr	r3, [pc, #652]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 030c 	and.w	r3, r3, #12
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d00c      	beq.n	80070d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070b6:	4ba0      	ldr	r3, [pc, #640]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d112      	bne.n	80070e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070c2:	4b9d      	ldr	r3, [pc, #628]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070ce:	d10b      	bne.n	80070e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d0:	4b99      	ldr	r3, [pc, #612]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d05b      	beq.n	8007194 <HAL_RCC_OscConfig+0x108>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d157      	bne.n	8007194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e236      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f0:	d106      	bne.n	8007100 <HAL_RCC_OscConfig+0x74>
 80070f2:	4b91      	ldr	r3, [pc, #580]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a90      	ldr	r2, [pc, #576]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80070f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	e01d      	b.n	800713c <HAL_RCC_OscConfig+0xb0>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007108:	d10c      	bne.n	8007124 <HAL_RCC_OscConfig+0x98>
 800710a:	4b8b      	ldr	r3, [pc, #556]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a8a      	ldr	r2, [pc, #552]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 8007110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	4b88      	ldr	r3, [pc, #544]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a87      	ldr	r2, [pc, #540]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 800711c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e00b      	b.n	800713c <HAL_RCC_OscConfig+0xb0>
 8007124:	4b84      	ldr	r3, [pc, #528]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a83      	ldr	r2, [pc, #524]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 800712a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	4b81      	ldr	r3, [pc, #516]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a80      	ldr	r2, [pc, #512]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 8007136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800713a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d013      	beq.n	800716c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007144:	f7fe f97c 	bl	8005440 <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800714c:	f7fe f978 	bl	8005440 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b64      	cmp	r3, #100	; 0x64
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e1fb      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800715e:	4b76      	ldr	r3, [pc, #472]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0f0      	beq.n	800714c <HAL_RCC_OscConfig+0xc0>
 800716a:	e014      	b.n	8007196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800716c:	f7fe f968 	bl	8005440 <HAL_GetTick>
 8007170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007172:	e008      	b.n	8007186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007174:	f7fe f964 	bl	8005440 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	2b64      	cmp	r3, #100	; 0x64
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e1e7      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007186:	4b6c      	ldr	r3, [pc, #432]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1f0      	bne.n	8007174 <HAL_RCC_OscConfig+0xe8>
 8007192:	e000      	b.n	8007196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d063      	beq.n	800726a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071a2:	4b65      	ldr	r3, [pc, #404]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f003 030c 	and.w	r3, r3, #12
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ae:	4b62      	ldr	r3, [pc, #392]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071b6:	2b08      	cmp	r3, #8
 80071b8:	d11c      	bne.n	80071f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ba:	4b5f      	ldr	r3, [pc, #380]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d116      	bne.n	80071f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071c6:	4b5c      	ldr	r3, [pc, #368]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <HAL_RCC_OscConfig+0x152>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d001      	beq.n	80071de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e1bb      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071de:	4b56      	ldr	r3, [pc, #344]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	4952      	ldr	r1, [pc, #328]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071f2:	e03a      	b.n	800726a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d020      	beq.n	800723e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071fc:	4b4f      	ldr	r3, [pc, #316]	; (800733c <HAL_RCC_OscConfig+0x2b0>)
 80071fe:	2201      	movs	r2, #1
 8007200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007202:	f7fe f91d 	bl	8005440 <HAL_GetTick>
 8007206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007208:	e008      	b.n	800721c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800720a:	f7fe f919 	bl	8005440 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	2b02      	cmp	r3, #2
 8007216:	d901      	bls.n	800721c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e19c      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800721c:	4b46      	ldr	r3, [pc, #280]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0f0      	beq.n	800720a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007228:	4b43      	ldr	r3, [pc, #268]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	4940      	ldr	r1, [pc, #256]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 8007238:	4313      	orrs	r3, r2
 800723a:	600b      	str	r3, [r1, #0]
 800723c:	e015      	b.n	800726a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800723e:	4b3f      	ldr	r3, [pc, #252]	; (800733c <HAL_RCC_OscConfig+0x2b0>)
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007244:	f7fe f8fc 	bl	8005440 <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800724c:	f7fe f8f8 	bl	8005440 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e17b      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800725e:	4b36      	ldr	r3, [pc, #216]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f0      	bne.n	800724c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d030      	beq.n	80072d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d016      	beq.n	80072ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800727e:	4b30      	ldr	r3, [pc, #192]	; (8007340 <HAL_RCC_OscConfig+0x2b4>)
 8007280:	2201      	movs	r2, #1
 8007282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007284:	f7fe f8dc 	bl	8005440 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800728c:	f7fe f8d8 	bl	8005440 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e15b      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800729e:	4b26      	ldr	r3, [pc, #152]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80072a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d0f0      	beq.n	800728c <HAL_RCC_OscConfig+0x200>
 80072aa:	e015      	b.n	80072d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072ac:	4b24      	ldr	r3, [pc, #144]	; (8007340 <HAL_RCC_OscConfig+0x2b4>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072b2:	f7fe f8c5 	bl	8005440 <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072b8:	e008      	b.n	80072cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072ba:	f7fe f8c1 	bl	8005440 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d901      	bls.n	80072cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e144      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072cc:	4b1a      	ldr	r3, [pc, #104]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80072ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1f0      	bne.n	80072ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 80a0 	beq.w	8007426 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072e6:	2300      	movs	r3, #0
 80072e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072ea:	4b13      	ldr	r3, [pc, #76]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10f      	bne.n	8007316 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]
 80072fa:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	4a0e      	ldr	r2, [pc, #56]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 8007300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007304:	6413      	str	r3, [r2, #64]	; 0x40
 8007306:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <HAL_RCC_OscConfig+0x2ac>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800730e:	60bb      	str	r3, [r7, #8]
 8007310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007312:	2301      	movs	r3, #1
 8007314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007316:	4b0b      	ldr	r3, [pc, #44]	; (8007344 <HAL_RCC_OscConfig+0x2b8>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731e:	2b00      	cmp	r3, #0
 8007320:	d121      	bne.n	8007366 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007322:	4b08      	ldr	r3, [pc, #32]	; (8007344 <HAL_RCC_OscConfig+0x2b8>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a07      	ldr	r2, [pc, #28]	; (8007344 <HAL_RCC_OscConfig+0x2b8>)
 8007328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800732c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800732e:	f7fe f887 	bl	8005440 <HAL_GetTick>
 8007332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007334:	e011      	b.n	800735a <HAL_RCC_OscConfig+0x2ce>
 8007336:	bf00      	nop
 8007338:	40023800 	.word	0x40023800
 800733c:	42470000 	.word	0x42470000
 8007340:	42470e80 	.word	0x42470e80
 8007344:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007348:	f7fe f87a 	bl	8005440 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	2b02      	cmp	r3, #2
 8007354:	d901      	bls.n	800735a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e0fd      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800735a:	4b81      	ldr	r3, [pc, #516]	; (8007560 <HAL_RCC_OscConfig+0x4d4>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0f0      	beq.n	8007348 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d106      	bne.n	800737c <HAL_RCC_OscConfig+0x2f0>
 800736e:	4b7d      	ldr	r3, [pc, #500]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 8007370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007372:	4a7c      	ldr	r2, [pc, #496]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 8007374:	f043 0301 	orr.w	r3, r3, #1
 8007378:	6713      	str	r3, [r2, #112]	; 0x70
 800737a:	e01c      	b.n	80073b6 <HAL_RCC_OscConfig+0x32a>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2b05      	cmp	r3, #5
 8007382:	d10c      	bne.n	800739e <HAL_RCC_OscConfig+0x312>
 8007384:	4b77      	ldr	r3, [pc, #476]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 8007386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007388:	4a76      	ldr	r2, [pc, #472]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 800738a:	f043 0304 	orr.w	r3, r3, #4
 800738e:	6713      	str	r3, [r2, #112]	; 0x70
 8007390:	4b74      	ldr	r3, [pc, #464]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 8007392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007394:	4a73      	ldr	r2, [pc, #460]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 8007396:	f043 0301 	orr.w	r3, r3, #1
 800739a:	6713      	str	r3, [r2, #112]	; 0x70
 800739c:	e00b      	b.n	80073b6 <HAL_RCC_OscConfig+0x32a>
 800739e:	4b71      	ldr	r3, [pc, #452]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 80073a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a2:	4a70      	ldr	r2, [pc, #448]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 80073a4:	f023 0301 	bic.w	r3, r3, #1
 80073a8:	6713      	str	r3, [r2, #112]	; 0x70
 80073aa:	4b6e      	ldr	r3, [pc, #440]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 80073ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ae:	4a6d      	ldr	r2, [pc, #436]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 80073b0:	f023 0304 	bic.w	r3, r3, #4
 80073b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d015      	beq.n	80073ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073be:	f7fe f83f 	bl	8005440 <HAL_GetTick>
 80073c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073c4:	e00a      	b.n	80073dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073c6:	f7fe f83b 	bl	8005440 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d901      	bls.n	80073dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e0bc      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073dc:	4b61      	ldr	r3, [pc, #388]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 80073de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0ee      	beq.n	80073c6 <HAL_RCC_OscConfig+0x33a>
 80073e8:	e014      	b.n	8007414 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073ea:	f7fe f829 	bl	8005440 <HAL_GetTick>
 80073ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073f0:	e00a      	b.n	8007408 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073f2:	f7fe f825 	bl	8005440 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007400:	4293      	cmp	r3, r2
 8007402:	d901      	bls.n	8007408 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e0a6      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007408:	4b56      	ldr	r3, [pc, #344]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 800740a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1ee      	bne.n	80073f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d105      	bne.n	8007426 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800741a:	4b52      	ldr	r3, [pc, #328]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	4a51      	ldr	r2, [pc, #324]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 8007420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007424:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 8092 	beq.w	8007554 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007430:	4b4c      	ldr	r3, [pc, #304]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f003 030c 	and.w	r3, r3, #12
 8007438:	2b08      	cmp	r3, #8
 800743a:	d05c      	beq.n	80074f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	2b02      	cmp	r3, #2
 8007442:	d141      	bne.n	80074c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007444:	4b48      	ldr	r3, [pc, #288]	; (8007568 <HAL_RCC_OscConfig+0x4dc>)
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800744a:	f7fd fff9 	bl	8005440 <HAL_GetTick>
 800744e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007450:	e008      	b.n	8007464 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007452:	f7fd fff5 	bl	8005440 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d901      	bls.n	8007464 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e078      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007464:	4b3f      	ldr	r3, [pc, #252]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1f0      	bne.n	8007452 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	69da      	ldr	r2, [r3, #28]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	431a      	orrs	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	019b      	lsls	r3, r3, #6
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	085b      	lsrs	r3, r3, #1
 8007488:	3b01      	subs	r3, #1
 800748a:	041b      	lsls	r3, r3, #16
 800748c:	431a      	orrs	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007492:	061b      	lsls	r3, r3, #24
 8007494:	4933      	ldr	r1, [pc, #204]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 8007496:	4313      	orrs	r3, r2
 8007498:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800749a:	4b33      	ldr	r3, [pc, #204]	; (8007568 <HAL_RCC_OscConfig+0x4dc>)
 800749c:	2201      	movs	r2, #1
 800749e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a0:	f7fd ffce 	bl	8005440 <HAL_GetTick>
 80074a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074a8:	f7fd ffca 	bl	8005440 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e04d      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ba:	4b2a      	ldr	r3, [pc, #168]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0f0      	beq.n	80074a8 <HAL_RCC_OscConfig+0x41c>
 80074c6:	e045      	b.n	8007554 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074c8:	4b27      	ldr	r3, [pc, #156]	; (8007568 <HAL_RCC_OscConfig+0x4dc>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ce:	f7fd ffb7 	bl	8005440 <HAL_GetTick>
 80074d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074d4:	e008      	b.n	80074e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074d6:	f7fd ffb3 	bl	8005440 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d901      	bls.n	80074e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e036      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074e8:	4b1e      	ldr	r3, [pc, #120]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1f0      	bne.n	80074d6 <HAL_RCC_OscConfig+0x44a>
 80074f4:	e02e      	b.n	8007554 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d101      	bne.n	8007502 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e029      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007502:	4b18      	ldr	r3, [pc, #96]	; (8007564 <HAL_RCC_OscConfig+0x4d8>)
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	429a      	cmp	r2, r3
 8007514:	d11c      	bne.n	8007550 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007520:	429a      	cmp	r2, r3
 8007522:	d115      	bne.n	8007550 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800752a:	4013      	ands	r3, r2
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007530:	4293      	cmp	r3, r2
 8007532:	d10d      	bne.n	8007550 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800753e:	429a      	cmp	r2, r3
 8007540:	d106      	bne.n	8007550 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800754c:	429a      	cmp	r2, r3
 800754e:	d001      	beq.n	8007554 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e000      	b.n	8007556 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	40007000 	.word	0x40007000
 8007564:	40023800 	.word	0x40023800
 8007568:	42470060 	.word	0x42470060

0800756c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e0cc      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007580:	4b68      	ldr	r3, [pc, #416]	; (8007724 <HAL_RCC_ClockConfig+0x1b8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 030f 	and.w	r3, r3, #15
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d90c      	bls.n	80075a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800758e:	4b65      	ldr	r3, [pc, #404]	; (8007724 <HAL_RCC_ClockConfig+0x1b8>)
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007596:	4b63      	ldr	r3, [pc, #396]	; (8007724 <HAL_RCC_ClockConfig+0x1b8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d001      	beq.n	80075a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e0b8      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d020      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075c0:	4b59      	ldr	r3, [pc, #356]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	4a58      	ldr	r2, [pc, #352]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80075c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075d8:	4b53      	ldr	r3, [pc, #332]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	4a52      	ldr	r2, [pc, #328]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80075de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075e4:	4b50      	ldr	r3, [pc, #320]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	494d      	ldr	r1, [pc, #308]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d044      	beq.n	800768c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d107      	bne.n	800761a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800760a:	4b47      	ldr	r3, [pc, #284]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d119      	bne.n	800764a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e07f      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d003      	beq.n	800762a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007626:	2b03      	cmp	r3, #3
 8007628:	d107      	bne.n	800763a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800762a:	4b3f      	ldr	r3, [pc, #252]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e06f      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800763a:	4b3b      	ldr	r3, [pc, #236]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e067      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800764a:	4b37      	ldr	r3, [pc, #220]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f023 0203 	bic.w	r2, r3, #3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	4934      	ldr	r1, [pc, #208]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 8007658:	4313      	orrs	r3, r2
 800765a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800765c:	f7fd fef0 	bl	8005440 <HAL_GetTick>
 8007660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007662:	e00a      	b.n	800767a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007664:	f7fd feec 	bl	8005440 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007672:	4293      	cmp	r3, r2
 8007674:	d901      	bls.n	800767a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e04f      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800767a:	4b2b      	ldr	r3, [pc, #172]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 020c 	and.w	r2, r3, #12
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	429a      	cmp	r2, r3
 800768a:	d1eb      	bne.n	8007664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800768c:	4b25      	ldr	r3, [pc, #148]	; (8007724 <HAL_RCC_ClockConfig+0x1b8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 030f 	and.w	r3, r3, #15
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d20c      	bcs.n	80076b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800769a:	4b22      	ldr	r3, [pc, #136]	; (8007724 <HAL_RCC_ClockConfig+0x1b8>)
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076a2:	4b20      	ldr	r3, [pc, #128]	; (8007724 <HAL_RCC_ClockConfig+0x1b8>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 030f 	and.w	r3, r3, #15
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d001      	beq.n	80076b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e032      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d008      	beq.n	80076d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076c0:	4b19      	ldr	r3, [pc, #100]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	4916      	ldr	r1, [pc, #88]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d009      	beq.n	80076f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076de:	4b12      	ldr	r3, [pc, #72]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	490e      	ldr	r1, [pc, #56]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076f2:	f000 f821 	bl	8007738 <HAL_RCC_GetSysClockFreq>
 80076f6:	4601      	mov	r1, r0
 80076f8:	4b0b      	ldr	r3, [pc, #44]	; (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	091b      	lsrs	r3, r3, #4
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	4a0a      	ldr	r2, [pc, #40]	; (800772c <HAL_RCC_ClockConfig+0x1c0>)
 8007704:	5cd3      	ldrb	r3, [r2, r3]
 8007706:	fa21 f303 	lsr.w	r3, r1, r3
 800770a:	4a09      	ldr	r2, [pc, #36]	; (8007730 <HAL_RCC_ClockConfig+0x1c4>)
 800770c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800770e:	4b09      	ldr	r3, [pc, #36]	; (8007734 <HAL_RCC_ClockConfig+0x1c8>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4618      	mov	r0, r3
 8007714:	f7fd fe50 	bl	80053b8 <HAL_InitTick>

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	40023c00 	.word	0x40023c00
 8007728:	40023800 	.word	0x40023800
 800772c:	0800c83c 	.word	0x0800c83c
 8007730:	20000000 	.word	0x20000000
 8007734:	20000004 	.word	0x20000004

08007738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	607b      	str	r3, [r7, #4]
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	2300      	movs	r3, #0
 8007748:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800774e:	4b63      	ldr	r3, [pc, #396]	; (80078dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 030c 	and.w	r3, r3, #12
 8007756:	2b04      	cmp	r3, #4
 8007758:	d007      	beq.n	800776a <HAL_RCC_GetSysClockFreq+0x32>
 800775a:	2b08      	cmp	r3, #8
 800775c:	d008      	beq.n	8007770 <HAL_RCC_GetSysClockFreq+0x38>
 800775e:	2b00      	cmp	r3, #0
 8007760:	f040 80b4 	bne.w	80078cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007764:	4b5e      	ldr	r3, [pc, #376]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007766:	60bb      	str	r3, [r7, #8]
       break;
 8007768:	e0b3      	b.n	80078d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800776a:	4b5e      	ldr	r3, [pc, #376]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800776c:	60bb      	str	r3, [r7, #8]
      break;
 800776e:	e0b0      	b.n	80078d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007770:	4b5a      	ldr	r3, [pc, #360]	; (80078dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007778:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800777a:	4b58      	ldr	r3, [pc, #352]	; (80078dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d04a      	beq.n	800781c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007786:	4b55      	ldr	r3, [pc, #340]	; (80078dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	099b      	lsrs	r3, r3, #6
 800778c:	f04f 0400 	mov.w	r4, #0
 8007790:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	ea03 0501 	and.w	r5, r3, r1
 800779c:	ea04 0602 	and.w	r6, r4, r2
 80077a0:	4629      	mov	r1, r5
 80077a2:	4632      	mov	r2, r6
 80077a4:	f04f 0300 	mov.w	r3, #0
 80077a8:	f04f 0400 	mov.w	r4, #0
 80077ac:	0154      	lsls	r4, r2, #5
 80077ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80077b2:	014b      	lsls	r3, r1, #5
 80077b4:	4619      	mov	r1, r3
 80077b6:	4622      	mov	r2, r4
 80077b8:	1b49      	subs	r1, r1, r5
 80077ba:	eb62 0206 	sbc.w	r2, r2, r6
 80077be:	f04f 0300 	mov.w	r3, #0
 80077c2:	f04f 0400 	mov.w	r4, #0
 80077c6:	0194      	lsls	r4, r2, #6
 80077c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80077cc:	018b      	lsls	r3, r1, #6
 80077ce:	1a5b      	subs	r3, r3, r1
 80077d0:	eb64 0402 	sbc.w	r4, r4, r2
 80077d4:	f04f 0100 	mov.w	r1, #0
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	00e2      	lsls	r2, r4, #3
 80077de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80077e2:	00d9      	lsls	r1, r3, #3
 80077e4:	460b      	mov	r3, r1
 80077e6:	4614      	mov	r4, r2
 80077e8:	195b      	adds	r3, r3, r5
 80077ea:	eb44 0406 	adc.w	r4, r4, r6
 80077ee:	f04f 0100 	mov.w	r1, #0
 80077f2:	f04f 0200 	mov.w	r2, #0
 80077f6:	0262      	lsls	r2, r4, #9
 80077f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80077fc:	0259      	lsls	r1, r3, #9
 80077fe:	460b      	mov	r3, r1
 8007800:	4614      	mov	r4, r2
 8007802:	4618      	mov	r0, r3
 8007804:	4621      	mov	r1, r4
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f04f 0400 	mov.w	r4, #0
 800780c:	461a      	mov	r2, r3
 800780e:	4623      	mov	r3, r4
 8007810:	f7f9 fa6a 	bl	8000ce8 <__aeabi_uldivmod>
 8007814:	4603      	mov	r3, r0
 8007816:	460c      	mov	r4, r1
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	e049      	b.n	80078b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800781c:	4b2f      	ldr	r3, [pc, #188]	; (80078dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	099b      	lsrs	r3, r3, #6
 8007822:	f04f 0400 	mov.w	r4, #0
 8007826:	f240 11ff 	movw	r1, #511	; 0x1ff
 800782a:	f04f 0200 	mov.w	r2, #0
 800782e:	ea03 0501 	and.w	r5, r3, r1
 8007832:	ea04 0602 	and.w	r6, r4, r2
 8007836:	4629      	mov	r1, r5
 8007838:	4632      	mov	r2, r6
 800783a:	f04f 0300 	mov.w	r3, #0
 800783e:	f04f 0400 	mov.w	r4, #0
 8007842:	0154      	lsls	r4, r2, #5
 8007844:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007848:	014b      	lsls	r3, r1, #5
 800784a:	4619      	mov	r1, r3
 800784c:	4622      	mov	r2, r4
 800784e:	1b49      	subs	r1, r1, r5
 8007850:	eb62 0206 	sbc.w	r2, r2, r6
 8007854:	f04f 0300 	mov.w	r3, #0
 8007858:	f04f 0400 	mov.w	r4, #0
 800785c:	0194      	lsls	r4, r2, #6
 800785e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007862:	018b      	lsls	r3, r1, #6
 8007864:	1a5b      	subs	r3, r3, r1
 8007866:	eb64 0402 	sbc.w	r4, r4, r2
 800786a:	f04f 0100 	mov.w	r1, #0
 800786e:	f04f 0200 	mov.w	r2, #0
 8007872:	00e2      	lsls	r2, r4, #3
 8007874:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007878:	00d9      	lsls	r1, r3, #3
 800787a:	460b      	mov	r3, r1
 800787c:	4614      	mov	r4, r2
 800787e:	195b      	adds	r3, r3, r5
 8007880:	eb44 0406 	adc.w	r4, r4, r6
 8007884:	f04f 0100 	mov.w	r1, #0
 8007888:	f04f 0200 	mov.w	r2, #0
 800788c:	02a2      	lsls	r2, r4, #10
 800788e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007892:	0299      	lsls	r1, r3, #10
 8007894:	460b      	mov	r3, r1
 8007896:	4614      	mov	r4, r2
 8007898:	4618      	mov	r0, r3
 800789a:	4621      	mov	r1, r4
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f04f 0400 	mov.w	r4, #0
 80078a2:	461a      	mov	r2, r3
 80078a4:	4623      	mov	r3, r4
 80078a6:	f7f9 fa1f 	bl	8000ce8 <__aeabi_uldivmod>
 80078aa:	4603      	mov	r3, r0
 80078ac:	460c      	mov	r4, r1
 80078ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078b0:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	0c1b      	lsrs	r3, r3, #16
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	3301      	adds	r3, #1
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c8:	60bb      	str	r3, [r7, #8]
      break;
 80078ca:	e002      	b.n	80078d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078cc:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80078ce:	60bb      	str	r3, [r7, #8]
      break;
 80078d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078d2:	68bb      	ldr	r3, [r7, #8]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078dc:	40023800 	.word	0x40023800
 80078e0:	00f42400 	.word	0x00f42400
 80078e4:	007a1200 	.word	0x007a1200

080078e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078e8:	b480      	push	{r7}
 80078ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078ec:	4b03      	ldr	r3, [pc, #12]	; (80078fc <HAL_RCC_GetHCLKFreq+0x14>)
 80078ee:	681b      	ldr	r3, [r3, #0]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	20000000 	.word	0x20000000

08007900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007904:	f7ff fff0 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 8007908:	4601      	mov	r1, r0
 800790a:	4b05      	ldr	r3, [pc, #20]	; (8007920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	0a9b      	lsrs	r3, r3, #10
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	4a03      	ldr	r2, [pc, #12]	; (8007924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007916:	5cd3      	ldrb	r3, [r2, r3]
 8007918:	fa21 f303 	lsr.w	r3, r1, r3
}
 800791c:	4618      	mov	r0, r3
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40023800 	.word	0x40023800
 8007924:	0800c84c 	.word	0x0800c84c

08007928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800792c:	f7ff ffdc 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 8007930:	4601      	mov	r1, r0
 8007932:	4b05      	ldr	r3, [pc, #20]	; (8007948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	0b5b      	lsrs	r3, r3, #13
 8007938:	f003 0307 	and.w	r3, r3, #7
 800793c:	4a03      	ldr	r2, [pc, #12]	; (800794c <HAL_RCC_GetPCLK2Freq+0x24>)
 800793e:	5cd3      	ldrb	r3, [r2, r3]
 8007940:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007944:	4618      	mov	r0, r3
 8007946:	bd80      	pop	{r7, pc}
 8007948:	40023800 	.word	0x40023800
 800794c:	0800c84c 	.word	0x0800c84c

08007950 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e01d      	b.n	800799e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d106      	bne.n	800797c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7fd fb30 	bl	8004fdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3304      	adds	r3, #4
 800798c:	4619      	mov	r1, r3
 800798e:	4610      	mov	r0, r2
 8007990:	f000 f90e 	bl	8007bb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2201      	movs	r2, #1
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fb48 	bl	8008050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a15      	ldr	r2, [pc, #84]	; (8007a1c <HAL_TIM_PWM_Start+0x74>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d004      	beq.n	80079d4 <HAL_TIM_PWM_Start+0x2c>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a14      	ldr	r2, [pc, #80]	; (8007a20 <HAL_TIM_PWM_Start+0x78>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d101      	bne.n	80079d8 <HAL_TIM_PWM_Start+0x30>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e000      	b.n	80079da <HAL_TIM_PWM_Start+0x32>
 80079d8:	2300      	movs	r3, #0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b06      	cmp	r3, #6
 80079fe:	d007      	beq.n	8007a10 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0201 	orr.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	40010000 	.word	0x40010000
 8007a20:	40010400 	.word	0x40010400

08007a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d101      	bne.n	8007a3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	e0b4      	b.n	8007ba8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b0c      	cmp	r3, #12
 8007a52:	f200 809f 	bhi.w	8007b94 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007a56:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007a91 	.word	0x08007a91
 8007a60:	08007b95 	.word	0x08007b95
 8007a64:	08007b95 	.word	0x08007b95
 8007a68:	08007b95 	.word	0x08007b95
 8007a6c:	08007ad1 	.word	0x08007ad1
 8007a70:	08007b95 	.word	0x08007b95
 8007a74:	08007b95 	.word	0x08007b95
 8007a78:	08007b95 	.word	0x08007b95
 8007a7c:	08007b13 	.word	0x08007b13
 8007a80:	08007b95 	.word	0x08007b95
 8007a84:	08007b95 	.word	0x08007b95
 8007a88:	08007b95 	.word	0x08007b95
 8007a8c:	08007b53 	.word	0x08007b53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68b9      	ldr	r1, [r7, #8]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 f92a 	bl	8007cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	699a      	ldr	r2, [r3, #24]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0208 	orr.w	r2, r2, #8
 8007aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	699a      	ldr	r2, [r3, #24]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0204 	bic.w	r2, r2, #4
 8007aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6999      	ldr	r1, [r3, #24]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	691a      	ldr	r2, [r3, #16]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	619a      	str	r2, [r3, #24]
      break;
 8007ace:	e062      	b.n	8007b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68b9      	ldr	r1, [r7, #8]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 f97a 	bl	8007dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	699a      	ldr	r2, [r3, #24]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	699a      	ldr	r2, [r3, #24]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6999      	ldr	r1, [r3, #24]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	021a      	lsls	r2, r3, #8
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	619a      	str	r2, [r3, #24]
      break;
 8007b10:	e041      	b.n	8007b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68b9      	ldr	r1, [r7, #8]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 f9cf 	bl	8007ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69da      	ldr	r2, [r3, #28]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f042 0208 	orr.w	r2, r2, #8
 8007b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69da      	ldr	r2, [r3, #28]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 0204 	bic.w	r2, r2, #4
 8007b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	69d9      	ldr	r1, [r3, #28]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	61da      	str	r2, [r3, #28]
      break;
 8007b50:	e021      	b.n	8007b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68b9      	ldr	r1, [r7, #8]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 fa23 	bl	8007fa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69da      	ldr	r2, [r3, #28]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69da      	ldr	r2, [r3, #28]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69d9      	ldr	r1, [r3, #28]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	021a      	lsls	r2, r3, #8
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	61da      	str	r2, [r3, #28]
      break;
 8007b92:	e000      	b.n	8007b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007b94:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a40      	ldr	r2, [pc, #256]	; (8007cc4 <TIM_Base_SetConfig+0x114>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d013      	beq.n	8007bf0 <TIM_Base_SetConfig+0x40>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bce:	d00f      	beq.n	8007bf0 <TIM_Base_SetConfig+0x40>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a3d      	ldr	r2, [pc, #244]	; (8007cc8 <TIM_Base_SetConfig+0x118>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d00b      	beq.n	8007bf0 <TIM_Base_SetConfig+0x40>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a3c      	ldr	r2, [pc, #240]	; (8007ccc <TIM_Base_SetConfig+0x11c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d007      	beq.n	8007bf0 <TIM_Base_SetConfig+0x40>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a3b      	ldr	r2, [pc, #236]	; (8007cd0 <TIM_Base_SetConfig+0x120>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d003      	beq.n	8007bf0 <TIM_Base_SetConfig+0x40>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a3a      	ldr	r2, [pc, #232]	; (8007cd4 <TIM_Base_SetConfig+0x124>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d108      	bne.n	8007c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a2f      	ldr	r2, [pc, #188]	; (8007cc4 <TIM_Base_SetConfig+0x114>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d02b      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c10:	d027      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a2c      	ldr	r2, [pc, #176]	; (8007cc8 <TIM_Base_SetConfig+0x118>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d023      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a2b      	ldr	r2, [pc, #172]	; (8007ccc <TIM_Base_SetConfig+0x11c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d01f      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a2a      	ldr	r2, [pc, #168]	; (8007cd0 <TIM_Base_SetConfig+0x120>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d01b      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a29      	ldr	r2, [pc, #164]	; (8007cd4 <TIM_Base_SetConfig+0x124>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d017      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a28      	ldr	r2, [pc, #160]	; (8007cd8 <TIM_Base_SetConfig+0x128>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d013      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a27      	ldr	r2, [pc, #156]	; (8007cdc <TIM_Base_SetConfig+0x12c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d00f      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a26      	ldr	r2, [pc, #152]	; (8007ce0 <TIM_Base_SetConfig+0x130>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d00b      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a25      	ldr	r2, [pc, #148]	; (8007ce4 <TIM_Base_SetConfig+0x134>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d007      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a24      	ldr	r2, [pc, #144]	; (8007ce8 <TIM_Base_SetConfig+0x138>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d003      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a23      	ldr	r2, [pc, #140]	; (8007cec <TIM_Base_SetConfig+0x13c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d108      	bne.n	8007c74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a0a      	ldr	r2, [pc, #40]	; (8007cc4 <TIM_Base_SetConfig+0x114>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d003      	beq.n	8007ca8 <TIM_Base_SetConfig+0xf8>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a0c      	ldr	r2, [pc, #48]	; (8007cd4 <TIM_Base_SetConfig+0x124>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d103      	bne.n	8007cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	691a      	ldr	r2, [r3, #16]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	615a      	str	r2, [r3, #20]
}
 8007cb6:	bf00      	nop
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	40010000 	.word	0x40010000
 8007cc8:	40000400 	.word	0x40000400
 8007ccc:	40000800 	.word	0x40000800
 8007cd0:	40000c00 	.word	0x40000c00
 8007cd4:	40010400 	.word	0x40010400
 8007cd8:	40014000 	.word	0x40014000
 8007cdc:	40014400 	.word	0x40014400
 8007ce0:	40014800 	.word	0x40014800
 8007ce4:	40001800 	.word	0x40001800
 8007ce8:	40001c00 	.word	0x40001c00
 8007cec:	40002000 	.word	0x40002000

08007cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f023 0201 	bic.w	r2, r3, #1
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0303 	bic.w	r3, r3, #3
 8007d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f023 0302 	bic.w	r3, r3, #2
 8007d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a20      	ldr	r2, [pc, #128]	; (8007dc8 <TIM_OC1_SetConfig+0xd8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d003      	beq.n	8007d54 <TIM_OC1_SetConfig+0x64>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a1f      	ldr	r2, [pc, #124]	; (8007dcc <TIM_OC1_SetConfig+0xdc>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d10c      	bne.n	8007d6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f023 0308 	bic.w	r3, r3, #8
 8007d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f023 0304 	bic.w	r3, r3, #4
 8007d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a15      	ldr	r2, [pc, #84]	; (8007dc8 <TIM_OC1_SetConfig+0xd8>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d003      	beq.n	8007d7e <TIM_OC1_SetConfig+0x8e>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a14      	ldr	r2, [pc, #80]	; (8007dcc <TIM_OC1_SetConfig+0xdc>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d111      	bne.n	8007da2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	621a      	str	r2, [r3, #32]
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40010400 	.word	0x40010400

08007dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	f023 0210 	bic.w	r2, r3, #16
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f023 0320 	bic.w	r3, r3, #32
 8007e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	011b      	lsls	r3, r3, #4
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a22      	ldr	r2, [pc, #136]	; (8007eb4 <TIM_OC2_SetConfig+0xe4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d003      	beq.n	8007e38 <TIM_OC2_SetConfig+0x68>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a21      	ldr	r2, [pc, #132]	; (8007eb8 <TIM_OC2_SetConfig+0xe8>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d10d      	bne.n	8007e54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	011b      	lsls	r3, r3, #4
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a17      	ldr	r2, [pc, #92]	; (8007eb4 <TIM_OC2_SetConfig+0xe4>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d003      	beq.n	8007e64 <TIM_OC2_SetConfig+0x94>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <TIM_OC2_SetConfig+0xe8>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d113      	bne.n	8007e8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	621a      	str	r2, [r3, #32]
}
 8007ea6:	bf00      	nop
 8007ea8:	371c      	adds	r7, #28
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	40010000 	.word	0x40010000
 8007eb8:	40010400 	.word	0x40010400

08007ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0303 	bic.w	r3, r3, #3
 8007ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	021b      	lsls	r3, r3, #8
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a21      	ldr	r2, [pc, #132]	; (8007f9c <TIM_OC3_SetConfig+0xe0>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d003      	beq.n	8007f22 <TIM_OC3_SetConfig+0x66>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a20      	ldr	r2, [pc, #128]	; (8007fa0 <TIM_OC3_SetConfig+0xe4>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d10d      	bne.n	8007f3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	021b      	lsls	r3, r3, #8
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a16      	ldr	r2, [pc, #88]	; (8007f9c <TIM_OC3_SetConfig+0xe0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d003      	beq.n	8007f4e <TIM_OC3_SetConfig+0x92>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a15      	ldr	r2, [pc, #84]	; (8007fa0 <TIM_OC3_SetConfig+0xe4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d113      	bne.n	8007f76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	011b      	lsls	r3, r3, #4
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	621a      	str	r2, [r3, #32]
}
 8007f90:	bf00      	nop
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	40010000 	.word	0x40010000
 8007fa0:	40010400 	.word	0x40010400

08007fa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	031b      	lsls	r3, r3, #12
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a12      	ldr	r2, [pc, #72]	; (8008048 <TIM_OC4_SetConfig+0xa4>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d003      	beq.n	800800c <TIM_OC4_SetConfig+0x68>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a11      	ldr	r2, [pc, #68]	; (800804c <TIM_OC4_SetConfig+0xa8>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d109      	bne.n	8008020 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	019b      	lsls	r3, r3, #6
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	4313      	orrs	r3, r2
 800801e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	621a      	str	r2, [r3, #32]
}
 800803a:	bf00      	nop
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	40010000 	.word	0x40010000
 800804c:	40010400 	.word	0x40010400

08008050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f003 031f 	and.w	r3, r3, #31
 8008062:	2201      	movs	r2, #1
 8008064:	fa02 f303 	lsl.w	r3, r2, r3
 8008068:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6a1a      	ldr	r2, [r3, #32]
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	43db      	mvns	r3, r3
 8008072:	401a      	ands	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a1a      	ldr	r2, [r3, #32]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f003 031f 	and.w	r3, r3, #31
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	fa01 f303 	lsl.w	r3, r1, r3
 8008088:	431a      	orrs	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	621a      	str	r2, [r3, #32]
}
 800808e:	bf00      	nop
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
	...

0800809c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e05a      	b.n	800816a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a21      	ldr	r2, [pc, #132]	; (8008178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d022      	beq.n	800813e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008100:	d01d      	beq.n	800813e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a1d      	ldr	r2, [pc, #116]	; (800817c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d018      	beq.n	800813e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a1b      	ldr	r2, [pc, #108]	; (8008180 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d013      	beq.n	800813e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a1a      	ldr	r2, [pc, #104]	; (8008184 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00e      	beq.n	800813e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a18      	ldr	r2, [pc, #96]	; (8008188 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d009      	beq.n	800813e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a17      	ldr	r2, [pc, #92]	; (800818c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d004      	beq.n	800813e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a15      	ldr	r2, [pc, #84]	; (8008190 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d10c      	bne.n	8008158 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	4313      	orrs	r3, r2
 800814e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	40010000 	.word	0x40010000
 800817c:	40000400 	.word	0x40000400
 8008180:	40000800 	.word	0x40000800
 8008184:	40000c00 	.word	0x40000c00
 8008188:	40010400 	.word	0x40010400
 800818c:	40014000 	.word	0x40014000
 8008190:	40001800 	.word	0x40001800

08008194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e03f      	b.n	8008226 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d106      	bne.n	80081c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7fc ff6a 	bl	8005094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2224      	movs	r2, #36	; 0x24
 80081c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fc77 	bl	8008acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	695a      	ldr	r2, [r3, #20]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68da      	ldr	r2, [r3, #12]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800820c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2220      	movs	r2, #32
 8008218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2220      	movs	r2, #32
 8008220:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b088      	sub	sp, #32
 8008232:	af02      	add	r7, sp, #8
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	603b      	str	r3, [r7, #0]
 800823a:	4613      	mov	r3, r2
 800823c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b20      	cmp	r3, #32
 800824c:	f040 8083 	bne.w	8008356 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <HAL_UART_Transmit+0x2e>
 8008256:	88fb      	ldrh	r3, [r7, #6]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e07b      	b.n	8008358 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_UART_Transmit+0x40>
 800826a:	2302      	movs	r3, #2
 800826c:	e074      	b.n	8008358 <HAL_UART_Transmit+0x12a>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2221      	movs	r2, #33	; 0x21
 8008280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008284:	f7fd f8dc 	bl	8005440 <HAL_GetTick>
 8008288:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	88fa      	ldrh	r2, [r7, #6]
 800828e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	88fa      	ldrh	r2, [r7, #6]
 8008294:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800829e:	e042      	b.n	8008326 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	3b01      	subs	r3, #1
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082b6:	d122      	bne.n	80082fe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2200      	movs	r2, #0
 80082c0:	2180      	movs	r1, #128	; 0x80
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 fa80 	bl	80087c8 <UART_WaitOnFlagUntilTimeout>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e042      	b.n	8008358 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082e4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d103      	bne.n	80082f6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	3302      	adds	r3, #2
 80082f2:	60bb      	str	r3, [r7, #8]
 80082f4:	e017      	b.n	8008326 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	3301      	adds	r3, #1
 80082fa:	60bb      	str	r3, [r7, #8]
 80082fc:	e013      	b.n	8008326 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2200      	movs	r2, #0
 8008306:	2180      	movs	r1, #128	; 0x80
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 fa5d 	bl	80087c8 <UART_WaitOnFlagUntilTimeout>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e01f      	b.n	8008358 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	60ba      	str	r2, [r7, #8]
 800831e:	781a      	ldrb	r2, [r3, #0]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800832a:	b29b      	uxth	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1b7      	bne.n	80082a0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2200      	movs	r2, #0
 8008338:	2140      	movs	r1, #64	; 0x40
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 fa44 	bl	80087c8 <UART_WaitOnFlagUntilTimeout>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e006      	b.n	8008358 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2220      	movs	r2, #32
 800834e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	e000      	b.n	8008358 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008356:	2302      	movs	r3, #2
  }
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b20      	cmp	r3, #32
 8008378:	d166      	bne.n	8008448 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d002      	beq.n	8008386 <HAL_UART_Receive_DMA+0x26>
 8008380:	88fb      	ldrh	r3, [r7, #6]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e05f      	b.n	800844a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008390:	2b01      	cmp	r3, #1
 8008392:	d101      	bne.n	8008398 <HAL_UART_Receive_DMA+0x38>
 8008394:	2302      	movs	r3, #2
 8008396:	e058      	b.n	800844a <HAL_UART_Receive_DMA+0xea>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	88fa      	ldrh	r2, [r7, #6]
 80083aa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2222      	movs	r2, #34	; 0x22
 80083b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083be:	4a25      	ldr	r2, [pc, #148]	; (8008454 <HAL_UART_Receive_DMA+0xf4>)
 80083c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c6:	4a24      	ldr	r2, [pc, #144]	; (8008458 <HAL_UART_Receive_DMA+0xf8>)
 80083c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ce:	4a23      	ldr	r2, [pc, #140]	; (800845c <HAL_UART_Receive_DMA+0xfc>)
 80083d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d6:	2200      	movs	r2, #0
 80083d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80083da:	f107 0308 	add.w	r3, r7, #8
 80083de:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3304      	adds	r3, #4
 80083ea:	4619      	mov	r1, r3
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	88fb      	ldrh	r3, [r7, #6]
 80083f2:	f7fd fa13 	bl	800581c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80083f6:	2300      	movs	r3, #0
 80083f8:	613b      	str	r3, [r7, #16]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	613b      	str	r3, [r7, #16]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	613b      	str	r3, [r7, #16]
 800840a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008422:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	695a      	ldr	r2, [r3, #20]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0201 	orr.w	r2, r2, #1
 8008432:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	695a      	ldr	r2, [r3, #20]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008442:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	e000      	b.n	800844a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008448:	2302      	movs	r3, #2
  }
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	080086b1 	.word	0x080086b1
 8008458:	08008719 	.word	0x08008719
 800845c:	08008735 	.word	0x08008735

08008460 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b088      	sub	sp, #32
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008480:	2300      	movs	r3, #0
 8008482:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008484:	2300      	movs	r3, #0
 8008486:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	f003 030f 	and.w	r3, r3, #15
 800848e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10d      	bne.n	80084b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b00      	cmp	r3, #0
 800849e:	d008      	beq.n	80084b2 <HAL_UART_IRQHandler+0x52>
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	f003 0320 	and.w	r3, r3, #32
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa8c 	bl	80089c8 <UART_Receive_IT>
      return;
 80084b0:	e0d1      	b.n	8008656 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 80b0 	beq.w	800861a <HAL_UART_IRQHandler+0x1ba>
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d105      	bne.n	80084d0 <HAL_UART_IRQHandler+0x70>
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 80a5 	beq.w	800861a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00a      	beq.n	80084f0 <HAL_UART_IRQHandler+0x90>
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d005      	beq.n	80084f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e8:	f043 0201 	orr.w	r2, r3, #1
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <HAL_UART_IRQHandler+0xb0>
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008508:	f043 0202 	orr.w	r2, r3, #2
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	f003 0302 	and.w	r3, r3, #2
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <HAL_UART_IRQHandler+0xd0>
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d005      	beq.n	8008530 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008528:	f043 0204 	orr.w	r2, r3, #4
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00f      	beq.n	800855a <HAL_UART_IRQHandler+0xfa>
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	f003 0320 	and.w	r3, r3, #32
 8008540:	2b00      	cmp	r3, #0
 8008542:	d104      	bne.n	800854e <HAL_UART_IRQHandler+0xee>
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008552:	f043 0208 	orr.w	r2, r3, #8
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d078      	beq.n	8008654 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d007      	beq.n	800857c <HAL_UART_IRQHandler+0x11c>
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	f003 0320 	and.w	r3, r3, #32
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fa26 	bl	80089c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008586:	2b40      	cmp	r3, #64	; 0x40
 8008588:	bf0c      	ite	eq
 800858a:	2301      	moveq	r3, #1
 800858c:	2300      	movne	r3, #0
 800858e:	b2db      	uxtb	r3, r3
 8008590:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008596:	f003 0308 	and.w	r3, r3, #8
 800859a:	2b00      	cmp	r3, #0
 800859c:	d102      	bne.n	80085a4 <HAL_UART_IRQHandler+0x144>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d031      	beq.n	8008608 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f96f 	bl	8008888 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b4:	2b40      	cmp	r3, #64	; 0x40
 80085b6:	d123      	bne.n	8008600 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	695a      	ldr	r2, [r3, #20]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085c6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d013      	beq.n	80085f8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d4:	4a21      	ldr	r2, [pc, #132]	; (800865c <HAL_UART_IRQHandler+0x1fc>)
 80085d6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fd f975 	bl	80058cc <HAL_DMA_Abort_IT>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d016      	beq.n	8008616 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80085f2:	4610      	mov	r0, r2
 80085f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f6:	e00e      	b.n	8008616 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f84f 	bl	800869c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085fe:	e00a      	b.n	8008616 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f84b 	bl	800869c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008606:	e006      	b.n	8008616 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f847 	bl	800869c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008614:	e01e      	b.n	8008654 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008616:	bf00      	nop
    return;
 8008618:	e01c      	b.n	8008654 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008620:	2b00      	cmp	r3, #0
 8008622:	d008      	beq.n	8008636 <HAL_UART_IRQHandler+0x1d6>
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f95c 	bl	80088ec <UART_Transmit_IT>
    return;
 8008634:	e00f      	b.n	8008656 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00a      	beq.n	8008656 <HAL_UART_IRQHandler+0x1f6>
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008646:	2b00      	cmp	r3, #0
 8008648:	d005      	beq.n	8008656 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f9a4 	bl	8008998 <UART_EndTransmit_IT>
    return;
 8008650:	bf00      	nop
 8008652:	e000      	b.n	8008656 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008654:	bf00      	nop
  }
}
 8008656:	3720      	adds	r7, #32
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	080088c5 	.word	0x080088c5

08008660 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086bc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d11e      	bne.n	800870a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68da      	ldr	r2, [r3, #12]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086e0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	695a      	ldr	r2, [r3, #20]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0201 	bic.w	r2, r2, #1
 80086f0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	695a      	ldr	r2, [r3, #20]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008700:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2220      	movs	r2, #32
 8008706:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f7ff ffb2 	bl	8008674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008710:	bf00      	nop
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff ffae 	bl	8008688 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800873c:	2300      	movs	r3, #0
 800873e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008750:	2b80      	cmp	r3, #128	; 0x80
 8008752:	bf0c      	ite	eq
 8008754:	2301      	moveq	r3, #1
 8008756:	2300      	movne	r3, #0
 8008758:	b2db      	uxtb	r3, r3
 800875a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b21      	cmp	r3, #33	; 0x21
 8008766:	d108      	bne.n	800877a <UART_DMAError+0x46>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d005      	beq.n	800877a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2200      	movs	r2, #0
 8008772:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008774:	68b8      	ldr	r0, [r7, #8]
 8008776:	f000 f871 	bl	800885c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008784:	2b40      	cmp	r3, #64	; 0x40
 8008786:	bf0c      	ite	eq
 8008788:	2301      	moveq	r3, #1
 800878a:	2300      	movne	r3, #0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b22      	cmp	r3, #34	; 0x22
 800879a:	d108      	bne.n	80087ae <UART_DMAError+0x7a>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d005      	beq.n	80087ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80087a8:	68b8      	ldr	r0, [r7, #8]
 80087aa:	f000 f86d 	bl	8008888 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b2:	f043 0210 	orr.w	r2, r3, #16
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087ba:	68b8      	ldr	r0, [r7, #8]
 80087bc:	f7ff ff6e 	bl	800869c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087c0:	bf00      	nop
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	4613      	mov	r3, r2
 80087d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087d8:	e02c      	b.n	8008834 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e0:	d028      	beq.n	8008834 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d007      	beq.n	80087f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80087e8:	f7fc fe2a 	bl	8005440 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d21d      	bcs.n	8008834 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008806:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	695a      	ldr	r2, [r3, #20]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 0201 	bic.w	r2, r2, #1
 8008816:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2220      	movs	r2, #32
 800881c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2220      	movs	r2, #32
 8008824:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e00f      	b.n	8008854 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	4013      	ands	r3, r2
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	429a      	cmp	r2, r3
 8008842:	bf0c      	ite	eq
 8008844:	2301      	moveq	r3, #1
 8008846:	2300      	movne	r3, #0
 8008848:	b2db      	uxtb	r3, r3
 800884a:	461a      	mov	r2, r3
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	429a      	cmp	r2, r3
 8008850:	d0c3      	beq.n	80087da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68da      	ldr	r2, [r3, #12]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008872:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2220      	movs	r2, #32
 8008878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800889e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	695a      	ldr	r2, [r3, #20]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0201 	bic.w	r2, r2, #1
 80088ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f7ff fedc 	bl	800869c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088e4:	bf00      	nop
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b21      	cmp	r3, #33	; 0x21
 80088fe:	d144      	bne.n	800898a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008908:	d11a      	bne.n	8008940 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	461a      	mov	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800891e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d105      	bne.n	8008934 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	1c9a      	adds	r2, r3, #2
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	621a      	str	r2, [r3, #32]
 8008932:	e00e      	b.n	8008952 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	621a      	str	r2, [r3, #32]
 800893e:	e008      	b.n	8008952 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	1c59      	adds	r1, r3, #1
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	6211      	str	r1, [r2, #32]
 800894a:	781a      	ldrb	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008956:	b29b      	uxth	r3, r3
 8008958:	3b01      	subs	r3, #1
 800895a:	b29b      	uxth	r3, r3
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	4619      	mov	r1, r3
 8008960:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10f      	bne.n	8008986 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68da      	ldr	r2, [r3, #12]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008974:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008984:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	e000      	b.n	800898c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800898a:	2302      	movs	r3, #2
  }
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68da      	ldr	r2, [r3, #12]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2220      	movs	r2, #32
 80089b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff fe51 	bl	8008660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b22      	cmp	r3, #34	; 0x22
 80089da:	d171      	bne.n	8008ac0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e4:	d123      	bne.n	8008a2e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10e      	bne.n	8008a12 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0a:	1c9a      	adds	r2, r3, #2
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	629a      	str	r2, [r3, #40]	; 0x28
 8008a10:	e029      	b.n	8008a66 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8008a2c:	e01b      	b.n	8008a66 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10a      	bne.n	8008a4c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6858      	ldr	r0, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a40:	1c59      	adds	r1, r3, #1
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	6291      	str	r1, [r2, #40]	; 0x28
 8008a46:	b2c2      	uxtb	r2, r0
 8008a48:	701a      	strb	r2, [r3, #0]
 8008a4a:	e00c      	b.n	8008a66 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a58:	1c58      	adds	r0, r3, #1
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	6288      	str	r0, [r1, #40]	; 0x28
 8008a5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008a62:	b2d2      	uxtb	r2, r2
 8008a64:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	4619      	mov	r1, r3
 8008a74:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d120      	bne.n	8008abc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68da      	ldr	r2, [r3, #12]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f022 0220 	bic.w	r2, r2, #32
 8008a88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68da      	ldr	r2, [r3, #12]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	695a      	ldr	r2, [r3, #20]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0201 	bic.w	r2, r2, #1
 8008aa8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff fdde 	bl	8008674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	e002      	b.n	8008ac2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	e000      	b.n	8008ac2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008ac0:	2302      	movs	r3, #2
  }
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad0:	b085      	sub	sp, #20
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	431a      	orrs	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008b0e:	f023 030c 	bic.w	r3, r3, #12
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	6812      	ldr	r2, [r2, #0]
 8008b16:	68f9      	ldr	r1, [r7, #12]
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699a      	ldr	r2, [r3, #24]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b3a:	f040 818b 	bne.w	8008e54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4ac1      	ldr	r2, [pc, #772]	; (8008e48 <UART_SetConfig+0x37c>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d005      	beq.n	8008b54 <UART_SetConfig+0x88>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4abf      	ldr	r2, [pc, #764]	; (8008e4c <UART_SetConfig+0x380>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	f040 80bd 	bne.w	8008cce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b54:	f7fe fee8 	bl	8007928 <HAL_RCC_GetPCLK2Freq>
 8008b58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	461d      	mov	r5, r3
 8008b5e:	f04f 0600 	mov.w	r6, #0
 8008b62:	46a8      	mov	r8, r5
 8008b64:	46b1      	mov	r9, r6
 8008b66:	eb18 0308 	adds.w	r3, r8, r8
 8008b6a:	eb49 0409 	adc.w	r4, r9, r9
 8008b6e:	4698      	mov	r8, r3
 8008b70:	46a1      	mov	r9, r4
 8008b72:	eb18 0805 	adds.w	r8, r8, r5
 8008b76:	eb49 0906 	adc.w	r9, r9, r6
 8008b7a:	f04f 0100 	mov.w	r1, #0
 8008b7e:	f04f 0200 	mov.w	r2, #0
 8008b82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b8e:	4688      	mov	r8, r1
 8008b90:	4691      	mov	r9, r2
 8008b92:	eb18 0005 	adds.w	r0, r8, r5
 8008b96:	eb49 0106 	adc.w	r1, r9, r6
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	461d      	mov	r5, r3
 8008ba0:	f04f 0600 	mov.w	r6, #0
 8008ba4:	196b      	adds	r3, r5, r5
 8008ba6:	eb46 0406 	adc.w	r4, r6, r6
 8008baa:	461a      	mov	r2, r3
 8008bac:	4623      	mov	r3, r4
 8008bae:	f7f8 f89b 	bl	8000ce8 <__aeabi_uldivmod>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	4ba5      	ldr	r3, [pc, #660]	; (8008e50 <UART_SetConfig+0x384>)
 8008bba:	fba3 2302 	umull	r2, r3, r3, r2
 8008bbe:	095b      	lsrs	r3, r3, #5
 8008bc0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	461d      	mov	r5, r3
 8008bc8:	f04f 0600 	mov.w	r6, #0
 8008bcc:	46a9      	mov	r9, r5
 8008bce:	46b2      	mov	sl, r6
 8008bd0:	eb19 0309 	adds.w	r3, r9, r9
 8008bd4:	eb4a 040a 	adc.w	r4, sl, sl
 8008bd8:	4699      	mov	r9, r3
 8008bda:	46a2      	mov	sl, r4
 8008bdc:	eb19 0905 	adds.w	r9, r9, r5
 8008be0:	eb4a 0a06 	adc.w	sl, sl, r6
 8008be4:	f04f 0100 	mov.w	r1, #0
 8008be8:	f04f 0200 	mov.w	r2, #0
 8008bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bf0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008bf4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008bf8:	4689      	mov	r9, r1
 8008bfa:	4692      	mov	sl, r2
 8008bfc:	eb19 0005 	adds.w	r0, r9, r5
 8008c00:	eb4a 0106 	adc.w	r1, sl, r6
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	461d      	mov	r5, r3
 8008c0a:	f04f 0600 	mov.w	r6, #0
 8008c0e:	196b      	adds	r3, r5, r5
 8008c10:	eb46 0406 	adc.w	r4, r6, r6
 8008c14:	461a      	mov	r2, r3
 8008c16:	4623      	mov	r3, r4
 8008c18:	f7f8 f866 	bl	8000ce8 <__aeabi_uldivmod>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	461a      	mov	r2, r3
 8008c22:	4b8b      	ldr	r3, [pc, #556]	; (8008e50 <UART_SetConfig+0x384>)
 8008c24:	fba3 1302 	umull	r1, r3, r3, r2
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	2164      	movs	r1, #100	; 0x64
 8008c2c:	fb01 f303 	mul.w	r3, r1, r3
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	3332      	adds	r3, #50	; 0x32
 8008c36:	4a86      	ldr	r2, [pc, #536]	; (8008e50 <UART_SetConfig+0x384>)
 8008c38:	fba2 2303 	umull	r2, r3, r2, r3
 8008c3c:	095b      	lsrs	r3, r3, #5
 8008c3e:	005b      	lsls	r3, r3, #1
 8008c40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c44:	4498      	add	r8, r3
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	461d      	mov	r5, r3
 8008c4a:	f04f 0600 	mov.w	r6, #0
 8008c4e:	46a9      	mov	r9, r5
 8008c50:	46b2      	mov	sl, r6
 8008c52:	eb19 0309 	adds.w	r3, r9, r9
 8008c56:	eb4a 040a 	adc.w	r4, sl, sl
 8008c5a:	4699      	mov	r9, r3
 8008c5c:	46a2      	mov	sl, r4
 8008c5e:	eb19 0905 	adds.w	r9, r9, r5
 8008c62:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c66:	f04f 0100 	mov.w	r1, #0
 8008c6a:	f04f 0200 	mov.w	r2, #0
 8008c6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c7a:	4689      	mov	r9, r1
 8008c7c:	4692      	mov	sl, r2
 8008c7e:	eb19 0005 	adds.w	r0, r9, r5
 8008c82:	eb4a 0106 	adc.w	r1, sl, r6
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	461d      	mov	r5, r3
 8008c8c:	f04f 0600 	mov.w	r6, #0
 8008c90:	196b      	adds	r3, r5, r5
 8008c92:	eb46 0406 	adc.w	r4, r6, r6
 8008c96:	461a      	mov	r2, r3
 8008c98:	4623      	mov	r3, r4
 8008c9a:	f7f8 f825 	bl	8000ce8 <__aeabi_uldivmod>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	4b6a      	ldr	r3, [pc, #424]	; (8008e50 <UART_SetConfig+0x384>)
 8008ca6:	fba3 1302 	umull	r1, r3, r3, r2
 8008caa:	095b      	lsrs	r3, r3, #5
 8008cac:	2164      	movs	r1, #100	; 0x64
 8008cae:	fb01 f303 	mul.w	r3, r1, r3
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	3332      	adds	r3, #50	; 0x32
 8008cb8:	4a65      	ldr	r2, [pc, #404]	; (8008e50 <UART_SetConfig+0x384>)
 8008cba:	fba2 2303 	umull	r2, r3, r2, r3
 8008cbe:	095b      	lsrs	r3, r3, #5
 8008cc0:	f003 0207 	and.w	r2, r3, #7
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4442      	add	r2, r8
 8008cca:	609a      	str	r2, [r3, #8]
 8008ccc:	e26f      	b.n	80091ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cce:	f7fe fe17 	bl	8007900 <HAL_RCC_GetPCLK1Freq>
 8008cd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	461d      	mov	r5, r3
 8008cd8:	f04f 0600 	mov.w	r6, #0
 8008cdc:	46a8      	mov	r8, r5
 8008cde:	46b1      	mov	r9, r6
 8008ce0:	eb18 0308 	adds.w	r3, r8, r8
 8008ce4:	eb49 0409 	adc.w	r4, r9, r9
 8008ce8:	4698      	mov	r8, r3
 8008cea:	46a1      	mov	r9, r4
 8008cec:	eb18 0805 	adds.w	r8, r8, r5
 8008cf0:	eb49 0906 	adc.w	r9, r9, r6
 8008cf4:	f04f 0100 	mov.w	r1, #0
 8008cf8:	f04f 0200 	mov.w	r2, #0
 8008cfc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008d00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008d04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008d08:	4688      	mov	r8, r1
 8008d0a:	4691      	mov	r9, r2
 8008d0c:	eb18 0005 	adds.w	r0, r8, r5
 8008d10:	eb49 0106 	adc.w	r1, r9, r6
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	461d      	mov	r5, r3
 8008d1a:	f04f 0600 	mov.w	r6, #0
 8008d1e:	196b      	adds	r3, r5, r5
 8008d20:	eb46 0406 	adc.w	r4, r6, r6
 8008d24:	461a      	mov	r2, r3
 8008d26:	4623      	mov	r3, r4
 8008d28:	f7f7 ffde 	bl	8000ce8 <__aeabi_uldivmod>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	460c      	mov	r4, r1
 8008d30:	461a      	mov	r2, r3
 8008d32:	4b47      	ldr	r3, [pc, #284]	; (8008e50 <UART_SetConfig+0x384>)
 8008d34:	fba3 2302 	umull	r2, r3, r3, r2
 8008d38:	095b      	lsrs	r3, r3, #5
 8008d3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	461d      	mov	r5, r3
 8008d42:	f04f 0600 	mov.w	r6, #0
 8008d46:	46a9      	mov	r9, r5
 8008d48:	46b2      	mov	sl, r6
 8008d4a:	eb19 0309 	adds.w	r3, r9, r9
 8008d4e:	eb4a 040a 	adc.w	r4, sl, sl
 8008d52:	4699      	mov	r9, r3
 8008d54:	46a2      	mov	sl, r4
 8008d56:	eb19 0905 	adds.w	r9, r9, r5
 8008d5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8008d5e:	f04f 0100 	mov.w	r1, #0
 8008d62:	f04f 0200 	mov.w	r2, #0
 8008d66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d72:	4689      	mov	r9, r1
 8008d74:	4692      	mov	sl, r2
 8008d76:	eb19 0005 	adds.w	r0, r9, r5
 8008d7a:	eb4a 0106 	adc.w	r1, sl, r6
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	461d      	mov	r5, r3
 8008d84:	f04f 0600 	mov.w	r6, #0
 8008d88:	196b      	adds	r3, r5, r5
 8008d8a:	eb46 0406 	adc.w	r4, r6, r6
 8008d8e:	461a      	mov	r2, r3
 8008d90:	4623      	mov	r3, r4
 8008d92:	f7f7 ffa9 	bl	8000ce8 <__aeabi_uldivmod>
 8008d96:	4603      	mov	r3, r0
 8008d98:	460c      	mov	r4, r1
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	4b2c      	ldr	r3, [pc, #176]	; (8008e50 <UART_SetConfig+0x384>)
 8008d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8008da2:	095b      	lsrs	r3, r3, #5
 8008da4:	2164      	movs	r1, #100	; 0x64
 8008da6:	fb01 f303 	mul.w	r3, r1, r3
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	3332      	adds	r3, #50	; 0x32
 8008db0:	4a27      	ldr	r2, [pc, #156]	; (8008e50 <UART_SetConfig+0x384>)
 8008db2:	fba2 2303 	umull	r2, r3, r2, r3
 8008db6:	095b      	lsrs	r3, r3, #5
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dbe:	4498      	add	r8, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	461d      	mov	r5, r3
 8008dc4:	f04f 0600 	mov.w	r6, #0
 8008dc8:	46a9      	mov	r9, r5
 8008dca:	46b2      	mov	sl, r6
 8008dcc:	eb19 0309 	adds.w	r3, r9, r9
 8008dd0:	eb4a 040a 	adc.w	r4, sl, sl
 8008dd4:	4699      	mov	r9, r3
 8008dd6:	46a2      	mov	sl, r4
 8008dd8:	eb19 0905 	adds.w	r9, r9, r5
 8008ddc:	eb4a 0a06 	adc.w	sl, sl, r6
 8008de0:	f04f 0100 	mov.w	r1, #0
 8008de4:	f04f 0200 	mov.w	r2, #0
 8008de8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008df0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008df4:	4689      	mov	r9, r1
 8008df6:	4692      	mov	sl, r2
 8008df8:	eb19 0005 	adds.w	r0, r9, r5
 8008dfc:	eb4a 0106 	adc.w	r1, sl, r6
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	461d      	mov	r5, r3
 8008e06:	f04f 0600 	mov.w	r6, #0
 8008e0a:	196b      	adds	r3, r5, r5
 8008e0c:	eb46 0406 	adc.w	r4, r6, r6
 8008e10:	461a      	mov	r2, r3
 8008e12:	4623      	mov	r3, r4
 8008e14:	f7f7 ff68 	bl	8000ce8 <__aeabi_uldivmod>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	4b0c      	ldr	r3, [pc, #48]	; (8008e50 <UART_SetConfig+0x384>)
 8008e20:	fba3 1302 	umull	r1, r3, r3, r2
 8008e24:	095b      	lsrs	r3, r3, #5
 8008e26:	2164      	movs	r1, #100	; 0x64
 8008e28:	fb01 f303 	mul.w	r3, r1, r3
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	3332      	adds	r3, #50	; 0x32
 8008e32:	4a07      	ldr	r2, [pc, #28]	; (8008e50 <UART_SetConfig+0x384>)
 8008e34:	fba2 2303 	umull	r2, r3, r2, r3
 8008e38:	095b      	lsrs	r3, r3, #5
 8008e3a:	f003 0207 	and.w	r2, r3, #7
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4442      	add	r2, r8
 8008e44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008e46:	e1b2      	b.n	80091ae <UART_SetConfig+0x6e2>
 8008e48:	40011000 	.word	0x40011000
 8008e4c:	40011400 	.word	0x40011400
 8008e50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4ad7      	ldr	r2, [pc, #860]	; (80091b8 <UART_SetConfig+0x6ec>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d005      	beq.n	8008e6a <UART_SetConfig+0x39e>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4ad6      	ldr	r2, [pc, #856]	; (80091bc <UART_SetConfig+0x6f0>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	f040 80d1 	bne.w	800900c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e6a:	f7fe fd5d 	bl	8007928 <HAL_RCC_GetPCLK2Freq>
 8008e6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	469a      	mov	sl, r3
 8008e74:	f04f 0b00 	mov.w	fp, #0
 8008e78:	46d0      	mov	r8, sl
 8008e7a:	46d9      	mov	r9, fp
 8008e7c:	eb18 0308 	adds.w	r3, r8, r8
 8008e80:	eb49 0409 	adc.w	r4, r9, r9
 8008e84:	4698      	mov	r8, r3
 8008e86:	46a1      	mov	r9, r4
 8008e88:	eb18 080a 	adds.w	r8, r8, sl
 8008e8c:	eb49 090b 	adc.w	r9, r9, fp
 8008e90:	f04f 0100 	mov.w	r1, #0
 8008e94:	f04f 0200 	mov.w	r2, #0
 8008e98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008e9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ea0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008ea4:	4688      	mov	r8, r1
 8008ea6:	4691      	mov	r9, r2
 8008ea8:	eb1a 0508 	adds.w	r5, sl, r8
 8008eac:	eb4b 0609 	adc.w	r6, fp, r9
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	f04f 0200 	mov.w	r2, #0
 8008eba:	f04f 0300 	mov.w	r3, #0
 8008ebe:	f04f 0400 	mov.w	r4, #0
 8008ec2:	0094      	lsls	r4, r2, #2
 8008ec4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ec8:	008b      	lsls	r3, r1, #2
 8008eca:	461a      	mov	r2, r3
 8008ecc:	4623      	mov	r3, r4
 8008ece:	4628      	mov	r0, r5
 8008ed0:	4631      	mov	r1, r6
 8008ed2:	f7f7 ff09 	bl	8000ce8 <__aeabi_uldivmod>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	460c      	mov	r4, r1
 8008eda:	461a      	mov	r2, r3
 8008edc:	4bb8      	ldr	r3, [pc, #736]	; (80091c0 <UART_SetConfig+0x6f4>)
 8008ede:	fba3 2302 	umull	r2, r3, r3, r2
 8008ee2:	095b      	lsrs	r3, r3, #5
 8008ee4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	469b      	mov	fp, r3
 8008eec:	f04f 0c00 	mov.w	ip, #0
 8008ef0:	46d9      	mov	r9, fp
 8008ef2:	46e2      	mov	sl, ip
 8008ef4:	eb19 0309 	adds.w	r3, r9, r9
 8008ef8:	eb4a 040a 	adc.w	r4, sl, sl
 8008efc:	4699      	mov	r9, r3
 8008efe:	46a2      	mov	sl, r4
 8008f00:	eb19 090b 	adds.w	r9, r9, fp
 8008f04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f08:	f04f 0100 	mov.w	r1, #0
 8008f0c:	f04f 0200 	mov.w	r2, #0
 8008f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f1c:	4689      	mov	r9, r1
 8008f1e:	4692      	mov	sl, r2
 8008f20:	eb1b 0509 	adds.w	r5, fp, r9
 8008f24:	eb4c 060a 	adc.w	r6, ip, sl
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	f04f 0200 	mov.w	r2, #0
 8008f32:	f04f 0300 	mov.w	r3, #0
 8008f36:	f04f 0400 	mov.w	r4, #0
 8008f3a:	0094      	lsls	r4, r2, #2
 8008f3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f40:	008b      	lsls	r3, r1, #2
 8008f42:	461a      	mov	r2, r3
 8008f44:	4623      	mov	r3, r4
 8008f46:	4628      	mov	r0, r5
 8008f48:	4631      	mov	r1, r6
 8008f4a:	f7f7 fecd 	bl	8000ce8 <__aeabi_uldivmod>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	460c      	mov	r4, r1
 8008f52:	461a      	mov	r2, r3
 8008f54:	4b9a      	ldr	r3, [pc, #616]	; (80091c0 <UART_SetConfig+0x6f4>)
 8008f56:	fba3 1302 	umull	r1, r3, r3, r2
 8008f5a:	095b      	lsrs	r3, r3, #5
 8008f5c:	2164      	movs	r1, #100	; 0x64
 8008f5e:	fb01 f303 	mul.w	r3, r1, r3
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	011b      	lsls	r3, r3, #4
 8008f66:	3332      	adds	r3, #50	; 0x32
 8008f68:	4a95      	ldr	r2, [pc, #596]	; (80091c0 <UART_SetConfig+0x6f4>)
 8008f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6e:	095b      	lsrs	r3, r3, #5
 8008f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f74:	4498      	add	r8, r3
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	469b      	mov	fp, r3
 8008f7a:	f04f 0c00 	mov.w	ip, #0
 8008f7e:	46d9      	mov	r9, fp
 8008f80:	46e2      	mov	sl, ip
 8008f82:	eb19 0309 	adds.w	r3, r9, r9
 8008f86:	eb4a 040a 	adc.w	r4, sl, sl
 8008f8a:	4699      	mov	r9, r3
 8008f8c:	46a2      	mov	sl, r4
 8008f8e:	eb19 090b 	adds.w	r9, r9, fp
 8008f92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f96:	f04f 0100 	mov.w	r1, #0
 8008f9a:	f04f 0200 	mov.w	r2, #0
 8008f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008fa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008faa:	4689      	mov	r9, r1
 8008fac:	4692      	mov	sl, r2
 8008fae:	eb1b 0509 	adds.w	r5, fp, r9
 8008fb2:	eb4c 060a 	adc.w	r6, ip, sl
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	f04f 0200 	mov.w	r2, #0
 8008fc0:	f04f 0300 	mov.w	r3, #0
 8008fc4:	f04f 0400 	mov.w	r4, #0
 8008fc8:	0094      	lsls	r4, r2, #2
 8008fca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008fce:	008b      	lsls	r3, r1, #2
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	4623      	mov	r3, r4
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	f7f7 fe86 	bl	8000ce8 <__aeabi_uldivmod>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	460c      	mov	r4, r1
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	4b77      	ldr	r3, [pc, #476]	; (80091c0 <UART_SetConfig+0x6f4>)
 8008fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8008fe8:	095b      	lsrs	r3, r3, #5
 8008fea:	2164      	movs	r1, #100	; 0x64
 8008fec:	fb01 f303 	mul.w	r3, r1, r3
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	011b      	lsls	r3, r3, #4
 8008ff4:	3332      	adds	r3, #50	; 0x32
 8008ff6:	4a72      	ldr	r2, [pc, #456]	; (80091c0 <UART_SetConfig+0x6f4>)
 8008ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffc:	095b      	lsrs	r3, r3, #5
 8008ffe:	f003 020f 	and.w	r2, r3, #15
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4442      	add	r2, r8
 8009008:	609a      	str	r2, [r3, #8]
 800900a:	e0d0      	b.n	80091ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800900c:	f7fe fc78 	bl	8007900 <HAL_RCC_GetPCLK1Freq>
 8009010:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	469a      	mov	sl, r3
 8009016:	f04f 0b00 	mov.w	fp, #0
 800901a:	46d0      	mov	r8, sl
 800901c:	46d9      	mov	r9, fp
 800901e:	eb18 0308 	adds.w	r3, r8, r8
 8009022:	eb49 0409 	adc.w	r4, r9, r9
 8009026:	4698      	mov	r8, r3
 8009028:	46a1      	mov	r9, r4
 800902a:	eb18 080a 	adds.w	r8, r8, sl
 800902e:	eb49 090b 	adc.w	r9, r9, fp
 8009032:	f04f 0100 	mov.w	r1, #0
 8009036:	f04f 0200 	mov.w	r2, #0
 800903a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800903e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009042:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009046:	4688      	mov	r8, r1
 8009048:	4691      	mov	r9, r2
 800904a:	eb1a 0508 	adds.w	r5, sl, r8
 800904e:	eb4b 0609 	adc.w	r6, fp, r9
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	4619      	mov	r1, r3
 8009058:	f04f 0200 	mov.w	r2, #0
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	f04f 0400 	mov.w	r4, #0
 8009064:	0094      	lsls	r4, r2, #2
 8009066:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800906a:	008b      	lsls	r3, r1, #2
 800906c:	461a      	mov	r2, r3
 800906e:	4623      	mov	r3, r4
 8009070:	4628      	mov	r0, r5
 8009072:	4631      	mov	r1, r6
 8009074:	f7f7 fe38 	bl	8000ce8 <__aeabi_uldivmod>
 8009078:	4603      	mov	r3, r0
 800907a:	460c      	mov	r4, r1
 800907c:	461a      	mov	r2, r3
 800907e:	4b50      	ldr	r3, [pc, #320]	; (80091c0 <UART_SetConfig+0x6f4>)
 8009080:	fba3 2302 	umull	r2, r3, r3, r2
 8009084:	095b      	lsrs	r3, r3, #5
 8009086:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	469b      	mov	fp, r3
 800908e:	f04f 0c00 	mov.w	ip, #0
 8009092:	46d9      	mov	r9, fp
 8009094:	46e2      	mov	sl, ip
 8009096:	eb19 0309 	adds.w	r3, r9, r9
 800909a:	eb4a 040a 	adc.w	r4, sl, sl
 800909e:	4699      	mov	r9, r3
 80090a0:	46a2      	mov	sl, r4
 80090a2:	eb19 090b 	adds.w	r9, r9, fp
 80090a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80090aa:	f04f 0100 	mov.w	r1, #0
 80090ae:	f04f 0200 	mov.w	r2, #0
 80090b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090be:	4689      	mov	r9, r1
 80090c0:	4692      	mov	sl, r2
 80090c2:	eb1b 0509 	adds.w	r5, fp, r9
 80090c6:	eb4c 060a 	adc.w	r6, ip, sl
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	4619      	mov	r1, r3
 80090d0:	f04f 0200 	mov.w	r2, #0
 80090d4:	f04f 0300 	mov.w	r3, #0
 80090d8:	f04f 0400 	mov.w	r4, #0
 80090dc:	0094      	lsls	r4, r2, #2
 80090de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80090e2:	008b      	lsls	r3, r1, #2
 80090e4:	461a      	mov	r2, r3
 80090e6:	4623      	mov	r3, r4
 80090e8:	4628      	mov	r0, r5
 80090ea:	4631      	mov	r1, r6
 80090ec:	f7f7 fdfc 	bl	8000ce8 <__aeabi_uldivmod>
 80090f0:	4603      	mov	r3, r0
 80090f2:	460c      	mov	r4, r1
 80090f4:	461a      	mov	r2, r3
 80090f6:	4b32      	ldr	r3, [pc, #200]	; (80091c0 <UART_SetConfig+0x6f4>)
 80090f8:	fba3 1302 	umull	r1, r3, r3, r2
 80090fc:	095b      	lsrs	r3, r3, #5
 80090fe:	2164      	movs	r1, #100	; 0x64
 8009100:	fb01 f303 	mul.w	r3, r1, r3
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	3332      	adds	r3, #50	; 0x32
 800910a:	4a2d      	ldr	r2, [pc, #180]	; (80091c0 <UART_SetConfig+0x6f4>)
 800910c:	fba2 2303 	umull	r2, r3, r2, r3
 8009110:	095b      	lsrs	r3, r3, #5
 8009112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009116:	4498      	add	r8, r3
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	469b      	mov	fp, r3
 800911c:	f04f 0c00 	mov.w	ip, #0
 8009120:	46d9      	mov	r9, fp
 8009122:	46e2      	mov	sl, ip
 8009124:	eb19 0309 	adds.w	r3, r9, r9
 8009128:	eb4a 040a 	adc.w	r4, sl, sl
 800912c:	4699      	mov	r9, r3
 800912e:	46a2      	mov	sl, r4
 8009130:	eb19 090b 	adds.w	r9, r9, fp
 8009134:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009138:	f04f 0100 	mov.w	r1, #0
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009144:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009148:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800914c:	4689      	mov	r9, r1
 800914e:	4692      	mov	sl, r2
 8009150:	eb1b 0509 	adds.w	r5, fp, r9
 8009154:	eb4c 060a 	adc.w	r6, ip, sl
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	4619      	mov	r1, r3
 800915e:	f04f 0200 	mov.w	r2, #0
 8009162:	f04f 0300 	mov.w	r3, #0
 8009166:	f04f 0400 	mov.w	r4, #0
 800916a:	0094      	lsls	r4, r2, #2
 800916c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009170:	008b      	lsls	r3, r1, #2
 8009172:	461a      	mov	r2, r3
 8009174:	4623      	mov	r3, r4
 8009176:	4628      	mov	r0, r5
 8009178:	4631      	mov	r1, r6
 800917a:	f7f7 fdb5 	bl	8000ce8 <__aeabi_uldivmod>
 800917e:	4603      	mov	r3, r0
 8009180:	460c      	mov	r4, r1
 8009182:	461a      	mov	r2, r3
 8009184:	4b0e      	ldr	r3, [pc, #56]	; (80091c0 <UART_SetConfig+0x6f4>)
 8009186:	fba3 1302 	umull	r1, r3, r3, r2
 800918a:	095b      	lsrs	r3, r3, #5
 800918c:	2164      	movs	r1, #100	; 0x64
 800918e:	fb01 f303 	mul.w	r3, r1, r3
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	011b      	lsls	r3, r3, #4
 8009196:	3332      	adds	r3, #50	; 0x32
 8009198:	4a09      	ldr	r2, [pc, #36]	; (80091c0 <UART_SetConfig+0x6f4>)
 800919a:	fba2 2303 	umull	r2, r3, r2, r3
 800919e:	095b      	lsrs	r3, r3, #5
 80091a0:	f003 020f 	and.w	r2, r3, #15
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4442      	add	r2, r8
 80091aa:	609a      	str	r2, [r3, #8]
}
 80091ac:	e7ff      	b.n	80091ae <UART_SetConfig+0x6e2>
 80091ae:	bf00      	nop
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b8:	40011000 	.word	0x40011000
 80091bc:	40011400 	.word	0x40011400
 80091c0:	51eb851f 	.word	0x51eb851f

080091c4 <__errno>:
 80091c4:	4b01      	ldr	r3, [pc, #4]	; (80091cc <__errno+0x8>)
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	2000000c 	.word	0x2000000c

080091d0 <__libc_init_array>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	4e0d      	ldr	r6, [pc, #52]	; (8009208 <__libc_init_array+0x38>)
 80091d4:	4c0d      	ldr	r4, [pc, #52]	; (800920c <__libc_init_array+0x3c>)
 80091d6:	1ba4      	subs	r4, r4, r6
 80091d8:	10a4      	asrs	r4, r4, #2
 80091da:	2500      	movs	r5, #0
 80091dc:	42a5      	cmp	r5, r4
 80091de:	d109      	bne.n	80091f4 <__libc_init_array+0x24>
 80091e0:	4e0b      	ldr	r6, [pc, #44]	; (8009210 <__libc_init_array+0x40>)
 80091e2:	4c0c      	ldr	r4, [pc, #48]	; (8009214 <__libc_init_array+0x44>)
 80091e4:	f003 fb0e 	bl	800c804 <_init>
 80091e8:	1ba4      	subs	r4, r4, r6
 80091ea:	10a4      	asrs	r4, r4, #2
 80091ec:	2500      	movs	r5, #0
 80091ee:	42a5      	cmp	r5, r4
 80091f0:	d105      	bne.n	80091fe <__libc_init_array+0x2e>
 80091f2:	bd70      	pop	{r4, r5, r6, pc}
 80091f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091f8:	4798      	blx	r3
 80091fa:	3501      	adds	r5, #1
 80091fc:	e7ee      	b.n	80091dc <__libc_init_array+0xc>
 80091fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009202:	4798      	blx	r3
 8009204:	3501      	adds	r5, #1
 8009206:	e7f2      	b.n	80091ee <__libc_init_array+0x1e>
 8009208:	0800ccd8 	.word	0x0800ccd8
 800920c:	0800ccd8 	.word	0x0800ccd8
 8009210:	0800ccd8 	.word	0x0800ccd8
 8009214:	0800ccdc 	.word	0x0800ccdc

08009218 <memcpy>:
 8009218:	b510      	push	{r4, lr}
 800921a:	1e43      	subs	r3, r0, #1
 800921c:	440a      	add	r2, r1
 800921e:	4291      	cmp	r1, r2
 8009220:	d100      	bne.n	8009224 <memcpy+0xc>
 8009222:	bd10      	pop	{r4, pc}
 8009224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009228:	f803 4f01 	strb.w	r4, [r3, #1]!
 800922c:	e7f7      	b.n	800921e <memcpy+0x6>

0800922e <memset>:
 800922e:	4402      	add	r2, r0
 8009230:	4603      	mov	r3, r0
 8009232:	4293      	cmp	r3, r2
 8009234:	d100      	bne.n	8009238 <memset+0xa>
 8009236:	4770      	bx	lr
 8009238:	f803 1b01 	strb.w	r1, [r3], #1
 800923c:	e7f9      	b.n	8009232 <memset+0x4>

0800923e <__cvt>:
 800923e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009242:	ec55 4b10 	vmov	r4, r5, d0
 8009246:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009248:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800924c:	2d00      	cmp	r5, #0
 800924e:	460e      	mov	r6, r1
 8009250:	4691      	mov	r9, r2
 8009252:	4619      	mov	r1, r3
 8009254:	bfb8      	it	lt
 8009256:	4622      	movlt	r2, r4
 8009258:	462b      	mov	r3, r5
 800925a:	f027 0720 	bic.w	r7, r7, #32
 800925e:	bfbb      	ittet	lt
 8009260:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009264:	461d      	movlt	r5, r3
 8009266:	2300      	movge	r3, #0
 8009268:	232d      	movlt	r3, #45	; 0x2d
 800926a:	bfb8      	it	lt
 800926c:	4614      	movlt	r4, r2
 800926e:	2f46      	cmp	r7, #70	; 0x46
 8009270:	700b      	strb	r3, [r1, #0]
 8009272:	d004      	beq.n	800927e <__cvt+0x40>
 8009274:	2f45      	cmp	r7, #69	; 0x45
 8009276:	d100      	bne.n	800927a <__cvt+0x3c>
 8009278:	3601      	adds	r6, #1
 800927a:	2102      	movs	r1, #2
 800927c:	e000      	b.n	8009280 <__cvt+0x42>
 800927e:	2103      	movs	r1, #3
 8009280:	ab03      	add	r3, sp, #12
 8009282:	9301      	str	r3, [sp, #4]
 8009284:	ab02      	add	r3, sp, #8
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	4632      	mov	r2, r6
 800928a:	4653      	mov	r3, sl
 800928c:	ec45 4b10 	vmov	d0, r4, r5
 8009290:	f000 fcf2 	bl	8009c78 <_dtoa_r>
 8009294:	2f47      	cmp	r7, #71	; 0x47
 8009296:	4680      	mov	r8, r0
 8009298:	d102      	bne.n	80092a0 <__cvt+0x62>
 800929a:	f019 0f01 	tst.w	r9, #1
 800929e:	d026      	beq.n	80092ee <__cvt+0xb0>
 80092a0:	2f46      	cmp	r7, #70	; 0x46
 80092a2:	eb08 0906 	add.w	r9, r8, r6
 80092a6:	d111      	bne.n	80092cc <__cvt+0x8e>
 80092a8:	f898 3000 	ldrb.w	r3, [r8]
 80092ac:	2b30      	cmp	r3, #48	; 0x30
 80092ae:	d10a      	bne.n	80092c6 <__cvt+0x88>
 80092b0:	2200      	movs	r2, #0
 80092b2:	2300      	movs	r3, #0
 80092b4:	4620      	mov	r0, r4
 80092b6:	4629      	mov	r1, r5
 80092b8:	f7f7 fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 80092bc:	b918      	cbnz	r0, 80092c6 <__cvt+0x88>
 80092be:	f1c6 0601 	rsb	r6, r6, #1
 80092c2:	f8ca 6000 	str.w	r6, [sl]
 80092c6:	f8da 3000 	ldr.w	r3, [sl]
 80092ca:	4499      	add	r9, r3
 80092cc:	2200      	movs	r2, #0
 80092ce:	2300      	movs	r3, #0
 80092d0:	4620      	mov	r0, r4
 80092d2:	4629      	mov	r1, r5
 80092d4:	f7f7 fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80092d8:	b938      	cbnz	r0, 80092ea <__cvt+0xac>
 80092da:	2230      	movs	r2, #48	; 0x30
 80092dc:	9b03      	ldr	r3, [sp, #12]
 80092de:	454b      	cmp	r3, r9
 80092e0:	d205      	bcs.n	80092ee <__cvt+0xb0>
 80092e2:	1c59      	adds	r1, r3, #1
 80092e4:	9103      	str	r1, [sp, #12]
 80092e6:	701a      	strb	r2, [r3, #0]
 80092e8:	e7f8      	b.n	80092dc <__cvt+0x9e>
 80092ea:	f8cd 900c 	str.w	r9, [sp, #12]
 80092ee:	9b03      	ldr	r3, [sp, #12]
 80092f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092f2:	eba3 0308 	sub.w	r3, r3, r8
 80092f6:	4640      	mov	r0, r8
 80092f8:	6013      	str	r3, [r2, #0]
 80092fa:	b004      	add	sp, #16
 80092fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009300 <__exponent>:
 8009300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009302:	2900      	cmp	r1, #0
 8009304:	4604      	mov	r4, r0
 8009306:	bfba      	itte	lt
 8009308:	4249      	neglt	r1, r1
 800930a:	232d      	movlt	r3, #45	; 0x2d
 800930c:	232b      	movge	r3, #43	; 0x2b
 800930e:	2909      	cmp	r1, #9
 8009310:	f804 2b02 	strb.w	r2, [r4], #2
 8009314:	7043      	strb	r3, [r0, #1]
 8009316:	dd20      	ble.n	800935a <__exponent+0x5a>
 8009318:	f10d 0307 	add.w	r3, sp, #7
 800931c:	461f      	mov	r7, r3
 800931e:	260a      	movs	r6, #10
 8009320:	fb91 f5f6 	sdiv	r5, r1, r6
 8009324:	fb06 1115 	mls	r1, r6, r5, r1
 8009328:	3130      	adds	r1, #48	; 0x30
 800932a:	2d09      	cmp	r5, #9
 800932c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009330:	f103 32ff 	add.w	r2, r3, #4294967295
 8009334:	4629      	mov	r1, r5
 8009336:	dc09      	bgt.n	800934c <__exponent+0x4c>
 8009338:	3130      	adds	r1, #48	; 0x30
 800933a:	3b02      	subs	r3, #2
 800933c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009340:	42bb      	cmp	r3, r7
 8009342:	4622      	mov	r2, r4
 8009344:	d304      	bcc.n	8009350 <__exponent+0x50>
 8009346:	1a10      	subs	r0, r2, r0
 8009348:	b003      	add	sp, #12
 800934a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800934c:	4613      	mov	r3, r2
 800934e:	e7e7      	b.n	8009320 <__exponent+0x20>
 8009350:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009354:	f804 2b01 	strb.w	r2, [r4], #1
 8009358:	e7f2      	b.n	8009340 <__exponent+0x40>
 800935a:	2330      	movs	r3, #48	; 0x30
 800935c:	4419      	add	r1, r3
 800935e:	7083      	strb	r3, [r0, #2]
 8009360:	1d02      	adds	r2, r0, #4
 8009362:	70c1      	strb	r1, [r0, #3]
 8009364:	e7ef      	b.n	8009346 <__exponent+0x46>
	...

08009368 <_printf_float>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	b08d      	sub	sp, #52	; 0x34
 800936e:	460c      	mov	r4, r1
 8009370:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009374:	4616      	mov	r6, r2
 8009376:	461f      	mov	r7, r3
 8009378:	4605      	mov	r5, r0
 800937a:	f001 fa35 	bl	800a7e8 <_localeconv_r>
 800937e:	6803      	ldr	r3, [r0, #0]
 8009380:	9304      	str	r3, [sp, #16]
 8009382:	4618      	mov	r0, r3
 8009384:	f7f6 ff24 	bl	80001d0 <strlen>
 8009388:	2300      	movs	r3, #0
 800938a:	930a      	str	r3, [sp, #40]	; 0x28
 800938c:	f8d8 3000 	ldr.w	r3, [r8]
 8009390:	9005      	str	r0, [sp, #20]
 8009392:	3307      	adds	r3, #7
 8009394:	f023 0307 	bic.w	r3, r3, #7
 8009398:	f103 0208 	add.w	r2, r3, #8
 800939c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80093a0:	f8d4 b000 	ldr.w	fp, [r4]
 80093a4:	f8c8 2000 	str.w	r2, [r8]
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093b0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093b8:	9307      	str	r3, [sp, #28]
 80093ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80093be:	f04f 32ff 	mov.w	r2, #4294967295
 80093c2:	4ba7      	ldr	r3, [pc, #668]	; (8009660 <_printf_float+0x2f8>)
 80093c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093c8:	f7f7 fbb0 	bl	8000b2c <__aeabi_dcmpun>
 80093cc:	bb70      	cbnz	r0, 800942c <_printf_float+0xc4>
 80093ce:	f04f 32ff 	mov.w	r2, #4294967295
 80093d2:	4ba3      	ldr	r3, [pc, #652]	; (8009660 <_printf_float+0x2f8>)
 80093d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093d8:	f7f7 fb8a 	bl	8000af0 <__aeabi_dcmple>
 80093dc:	bb30      	cbnz	r0, 800942c <_printf_float+0xc4>
 80093de:	2200      	movs	r2, #0
 80093e0:	2300      	movs	r3, #0
 80093e2:	4640      	mov	r0, r8
 80093e4:	4649      	mov	r1, r9
 80093e6:	f7f7 fb79 	bl	8000adc <__aeabi_dcmplt>
 80093ea:	b110      	cbz	r0, 80093f2 <_printf_float+0x8a>
 80093ec:	232d      	movs	r3, #45	; 0x2d
 80093ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093f2:	4a9c      	ldr	r2, [pc, #624]	; (8009664 <_printf_float+0x2fc>)
 80093f4:	4b9c      	ldr	r3, [pc, #624]	; (8009668 <_printf_float+0x300>)
 80093f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80093fa:	bf8c      	ite	hi
 80093fc:	4690      	movhi	r8, r2
 80093fe:	4698      	movls	r8, r3
 8009400:	2303      	movs	r3, #3
 8009402:	f02b 0204 	bic.w	r2, fp, #4
 8009406:	6123      	str	r3, [r4, #16]
 8009408:	6022      	str	r2, [r4, #0]
 800940a:	f04f 0900 	mov.w	r9, #0
 800940e:	9700      	str	r7, [sp, #0]
 8009410:	4633      	mov	r3, r6
 8009412:	aa0b      	add	r2, sp, #44	; 0x2c
 8009414:	4621      	mov	r1, r4
 8009416:	4628      	mov	r0, r5
 8009418:	f000 f9e6 	bl	80097e8 <_printf_common>
 800941c:	3001      	adds	r0, #1
 800941e:	f040 808d 	bne.w	800953c <_printf_float+0x1d4>
 8009422:	f04f 30ff 	mov.w	r0, #4294967295
 8009426:	b00d      	add	sp, #52	; 0x34
 8009428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942c:	4642      	mov	r2, r8
 800942e:	464b      	mov	r3, r9
 8009430:	4640      	mov	r0, r8
 8009432:	4649      	mov	r1, r9
 8009434:	f7f7 fb7a 	bl	8000b2c <__aeabi_dcmpun>
 8009438:	b110      	cbz	r0, 8009440 <_printf_float+0xd8>
 800943a:	4a8c      	ldr	r2, [pc, #560]	; (800966c <_printf_float+0x304>)
 800943c:	4b8c      	ldr	r3, [pc, #560]	; (8009670 <_printf_float+0x308>)
 800943e:	e7da      	b.n	80093f6 <_printf_float+0x8e>
 8009440:	6861      	ldr	r1, [r4, #4]
 8009442:	1c4b      	adds	r3, r1, #1
 8009444:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009448:	a80a      	add	r0, sp, #40	; 0x28
 800944a:	d13e      	bne.n	80094ca <_printf_float+0x162>
 800944c:	2306      	movs	r3, #6
 800944e:	6063      	str	r3, [r4, #4]
 8009450:	2300      	movs	r3, #0
 8009452:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009456:	ab09      	add	r3, sp, #36	; 0x24
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	ec49 8b10 	vmov	d0, r8, r9
 800945e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009462:	6022      	str	r2, [r4, #0]
 8009464:	f8cd a004 	str.w	sl, [sp, #4]
 8009468:	6861      	ldr	r1, [r4, #4]
 800946a:	4628      	mov	r0, r5
 800946c:	f7ff fee7 	bl	800923e <__cvt>
 8009470:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009474:	2b47      	cmp	r3, #71	; 0x47
 8009476:	4680      	mov	r8, r0
 8009478:	d109      	bne.n	800948e <_printf_float+0x126>
 800947a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947c:	1cd8      	adds	r0, r3, #3
 800947e:	db02      	blt.n	8009486 <_printf_float+0x11e>
 8009480:	6862      	ldr	r2, [r4, #4]
 8009482:	4293      	cmp	r3, r2
 8009484:	dd47      	ble.n	8009516 <_printf_float+0x1ae>
 8009486:	f1aa 0a02 	sub.w	sl, sl, #2
 800948a:	fa5f fa8a 	uxtb.w	sl, sl
 800948e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009492:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009494:	d824      	bhi.n	80094e0 <_printf_float+0x178>
 8009496:	3901      	subs	r1, #1
 8009498:	4652      	mov	r2, sl
 800949a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800949e:	9109      	str	r1, [sp, #36]	; 0x24
 80094a0:	f7ff ff2e 	bl	8009300 <__exponent>
 80094a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094a6:	1813      	adds	r3, r2, r0
 80094a8:	2a01      	cmp	r2, #1
 80094aa:	4681      	mov	r9, r0
 80094ac:	6123      	str	r3, [r4, #16]
 80094ae:	dc02      	bgt.n	80094b6 <_printf_float+0x14e>
 80094b0:	6822      	ldr	r2, [r4, #0]
 80094b2:	07d1      	lsls	r1, r2, #31
 80094b4:	d501      	bpl.n	80094ba <_printf_float+0x152>
 80094b6:	3301      	adds	r3, #1
 80094b8:	6123      	str	r3, [r4, #16]
 80094ba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0a5      	beq.n	800940e <_printf_float+0xa6>
 80094c2:	232d      	movs	r3, #45	; 0x2d
 80094c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c8:	e7a1      	b.n	800940e <_printf_float+0xa6>
 80094ca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80094ce:	f000 8177 	beq.w	80097c0 <_printf_float+0x458>
 80094d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80094d6:	d1bb      	bne.n	8009450 <_printf_float+0xe8>
 80094d8:	2900      	cmp	r1, #0
 80094da:	d1b9      	bne.n	8009450 <_printf_float+0xe8>
 80094dc:	2301      	movs	r3, #1
 80094de:	e7b6      	b.n	800944e <_printf_float+0xe6>
 80094e0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80094e4:	d119      	bne.n	800951a <_printf_float+0x1b2>
 80094e6:	2900      	cmp	r1, #0
 80094e8:	6863      	ldr	r3, [r4, #4]
 80094ea:	dd0c      	ble.n	8009506 <_printf_float+0x19e>
 80094ec:	6121      	str	r1, [r4, #16]
 80094ee:	b913      	cbnz	r3, 80094f6 <_printf_float+0x18e>
 80094f0:	6822      	ldr	r2, [r4, #0]
 80094f2:	07d2      	lsls	r2, r2, #31
 80094f4:	d502      	bpl.n	80094fc <_printf_float+0x194>
 80094f6:	3301      	adds	r3, #1
 80094f8:	440b      	add	r3, r1
 80094fa:	6123      	str	r3, [r4, #16]
 80094fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8009500:	f04f 0900 	mov.w	r9, #0
 8009504:	e7d9      	b.n	80094ba <_printf_float+0x152>
 8009506:	b913      	cbnz	r3, 800950e <_printf_float+0x1a6>
 8009508:	6822      	ldr	r2, [r4, #0]
 800950a:	07d0      	lsls	r0, r2, #31
 800950c:	d501      	bpl.n	8009512 <_printf_float+0x1aa>
 800950e:	3302      	adds	r3, #2
 8009510:	e7f3      	b.n	80094fa <_printf_float+0x192>
 8009512:	2301      	movs	r3, #1
 8009514:	e7f1      	b.n	80094fa <_printf_float+0x192>
 8009516:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800951a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800951e:	4293      	cmp	r3, r2
 8009520:	db05      	blt.n	800952e <_printf_float+0x1c6>
 8009522:	6822      	ldr	r2, [r4, #0]
 8009524:	6123      	str	r3, [r4, #16]
 8009526:	07d1      	lsls	r1, r2, #31
 8009528:	d5e8      	bpl.n	80094fc <_printf_float+0x194>
 800952a:	3301      	adds	r3, #1
 800952c:	e7e5      	b.n	80094fa <_printf_float+0x192>
 800952e:	2b00      	cmp	r3, #0
 8009530:	bfd4      	ite	le
 8009532:	f1c3 0302 	rsble	r3, r3, #2
 8009536:	2301      	movgt	r3, #1
 8009538:	4413      	add	r3, r2
 800953a:	e7de      	b.n	80094fa <_printf_float+0x192>
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	055a      	lsls	r2, r3, #21
 8009540:	d407      	bmi.n	8009552 <_printf_float+0x1ea>
 8009542:	6923      	ldr	r3, [r4, #16]
 8009544:	4642      	mov	r2, r8
 8009546:	4631      	mov	r1, r6
 8009548:	4628      	mov	r0, r5
 800954a:	47b8      	blx	r7
 800954c:	3001      	adds	r0, #1
 800954e:	d12b      	bne.n	80095a8 <_printf_float+0x240>
 8009550:	e767      	b.n	8009422 <_printf_float+0xba>
 8009552:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009556:	f240 80dc 	bls.w	8009712 <_printf_float+0x3aa>
 800955a:	2200      	movs	r2, #0
 800955c:	2300      	movs	r3, #0
 800955e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009562:	f7f7 fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009566:	2800      	cmp	r0, #0
 8009568:	d033      	beq.n	80095d2 <_printf_float+0x26a>
 800956a:	2301      	movs	r3, #1
 800956c:	4a41      	ldr	r2, [pc, #260]	; (8009674 <_printf_float+0x30c>)
 800956e:	4631      	mov	r1, r6
 8009570:	4628      	mov	r0, r5
 8009572:	47b8      	blx	r7
 8009574:	3001      	adds	r0, #1
 8009576:	f43f af54 	beq.w	8009422 <_printf_float+0xba>
 800957a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800957e:	429a      	cmp	r2, r3
 8009580:	db02      	blt.n	8009588 <_printf_float+0x220>
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	07d8      	lsls	r0, r3, #31
 8009586:	d50f      	bpl.n	80095a8 <_printf_float+0x240>
 8009588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800958c:	4631      	mov	r1, r6
 800958e:	4628      	mov	r0, r5
 8009590:	47b8      	blx	r7
 8009592:	3001      	adds	r0, #1
 8009594:	f43f af45 	beq.w	8009422 <_printf_float+0xba>
 8009598:	f04f 0800 	mov.w	r8, #0
 800959c:	f104 091a 	add.w	r9, r4, #26
 80095a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a2:	3b01      	subs	r3, #1
 80095a4:	4543      	cmp	r3, r8
 80095a6:	dc09      	bgt.n	80095bc <_printf_float+0x254>
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	079b      	lsls	r3, r3, #30
 80095ac:	f100 8103 	bmi.w	80097b6 <_printf_float+0x44e>
 80095b0:	68e0      	ldr	r0, [r4, #12]
 80095b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095b4:	4298      	cmp	r0, r3
 80095b6:	bfb8      	it	lt
 80095b8:	4618      	movlt	r0, r3
 80095ba:	e734      	b.n	8009426 <_printf_float+0xbe>
 80095bc:	2301      	movs	r3, #1
 80095be:	464a      	mov	r2, r9
 80095c0:	4631      	mov	r1, r6
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b8      	blx	r7
 80095c6:	3001      	adds	r0, #1
 80095c8:	f43f af2b 	beq.w	8009422 <_printf_float+0xba>
 80095cc:	f108 0801 	add.w	r8, r8, #1
 80095d0:	e7e6      	b.n	80095a0 <_printf_float+0x238>
 80095d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dc2b      	bgt.n	8009630 <_printf_float+0x2c8>
 80095d8:	2301      	movs	r3, #1
 80095da:	4a26      	ldr	r2, [pc, #152]	; (8009674 <_printf_float+0x30c>)
 80095dc:	4631      	mov	r1, r6
 80095de:	4628      	mov	r0, r5
 80095e0:	47b8      	blx	r7
 80095e2:	3001      	adds	r0, #1
 80095e4:	f43f af1d 	beq.w	8009422 <_printf_float+0xba>
 80095e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ea:	b923      	cbnz	r3, 80095f6 <_printf_float+0x28e>
 80095ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ee:	b913      	cbnz	r3, 80095f6 <_printf_float+0x28e>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	07d9      	lsls	r1, r3, #31
 80095f4:	d5d8      	bpl.n	80095a8 <_printf_float+0x240>
 80095f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095fa:	4631      	mov	r1, r6
 80095fc:	4628      	mov	r0, r5
 80095fe:	47b8      	blx	r7
 8009600:	3001      	adds	r0, #1
 8009602:	f43f af0e 	beq.w	8009422 <_printf_float+0xba>
 8009606:	f04f 0900 	mov.w	r9, #0
 800960a:	f104 0a1a 	add.w	sl, r4, #26
 800960e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009610:	425b      	negs	r3, r3
 8009612:	454b      	cmp	r3, r9
 8009614:	dc01      	bgt.n	800961a <_printf_float+0x2b2>
 8009616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009618:	e794      	b.n	8009544 <_printf_float+0x1dc>
 800961a:	2301      	movs	r3, #1
 800961c:	4652      	mov	r2, sl
 800961e:	4631      	mov	r1, r6
 8009620:	4628      	mov	r0, r5
 8009622:	47b8      	blx	r7
 8009624:	3001      	adds	r0, #1
 8009626:	f43f aefc 	beq.w	8009422 <_printf_float+0xba>
 800962a:	f109 0901 	add.w	r9, r9, #1
 800962e:	e7ee      	b.n	800960e <_printf_float+0x2a6>
 8009630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009634:	429a      	cmp	r2, r3
 8009636:	bfa8      	it	ge
 8009638:	461a      	movge	r2, r3
 800963a:	2a00      	cmp	r2, #0
 800963c:	4691      	mov	r9, r2
 800963e:	dd07      	ble.n	8009650 <_printf_float+0x2e8>
 8009640:	4613      	mov	r3, r2
 8009642:	4631      	mov	r1, r6
 8009644:	4642      	mov	r2, r8
 8009646:	4628      	mov	r0, r5
 8009648:	47b8      	blx	r7
 800964a:	3001      	adds	r0, #1
 800964c:	f43f aee9 	beq.w	8009422 <_printf_float+0xba>
 8009650:	f104 031a 	add.w	r3, r4, #26
 8009654:	f04f 0b00 	mov.w	fp, #0
 8009658:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800965c:	9306      	str	r3, [sp, #24]
 800965e:	e015      	b.n	800968c <_printf_float+0x324>
 8009660:	7fefffff 	.word	0x7fefffff
 8009664:	0800c860 	.word	0x0800c860
 8009668:	0800c85c 	.word	0x0800c85c
 800966c:	0800c868 	.word	0x0800c868
 8009670:	0800c864 	.word	0x0800c864
 8009674:	0800c86c 	.word	0x0800c86c
 8009678:	2301      	movs	r3, #1
 800967a:	9a06      	ldr	r2, [sp, #24]
 800967c:	4631      	mov	r1, r6
 800967e:	4628      	mov	r0, r5
 8009680:	47b8      	blx	r7
 8009682:	3001      	adds	r0, #1
 8009684:	f43f aecd 	beq.w	8009422 <_printf_float+0xba>
 8009688:	f10b 0b01 	add.w	fp, fp, #1
 800968c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009690:	ebaa 0309 	sub.w	r3, sl, r9
 8009694:	455b      	cmp	r3, fp
 8009696:	dcef      	bgt.n	8009678 <_printf_float+0x310>
 8009698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800969c:	429a      	cmp	r2, r3
 800969e:	44d0      	add	r8, sl
 80096a0:	db15      	blt.n	80096ce <_printf_float+0x366>
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	07da      	lsls	r2, r3, #31
 80096a6:	d412      	bmi.n	80096ce <_printf_float+0x366>
 80096a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096ac:	eba3 020a 	sub.w	r2, r3, sl
 80096b0:	eba3 0a01 	sub.w	sl, r3, r1
 80096b4:	4592      	cmp	sl, r2
 80096b6:	bfa8      	it	ge
 80096b8:	4692      	movge	sl, r2
 80096ba:	f1ba 0f00 	cmp.w	sl, #0
 80096be:	dc0e      	bgt.n	80096de <_printf_float+0x376>
 80096c0:	f04f 0800 	mov.w	r8, #0
 80096c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096c8:	f104 091a 	add.w	r9, r4, #26
 80096cc:	e019      	b.n	8009702 <_printf_float+0x39a>
 80096ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096d2:	4631      	mov	r1, r6
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b8      	blx	r7
 80096d8:	3001      	adds	r0, #1
 80096da:	d1e5      	bne.n	80096a8 <_printf_float+0x340>
 80096dc:	e6a1      	b.n	8009422 <_printf_float+0xba>
 80096de:	4653      	mov	r3, sl
 80096e0:	4642      	mov	r2, r8
 80096e2:	4631      	mov	r1, r6
 80096e4:	4628      	mov	r0, r5
 80096e6:	47b8      	blx	r7
 80096e8:	3001      	adds	r0, #1
 80096ea:	d1e9      	bne.n	80096c0 <_printf_float+0x358>
 80096ec:	e699      	b.n	8009422 <_printf_float+0xba>
 80096ee:	2301      	movs	r3, #1
 80096f0:	464a      	mov	r2, r9
 80096f2:	4631      	mov	r1, r6
 80096f4:	4628      	mov	r0, r5
 80096f6:	47b8      	blx	r7
 80096f8:	3001      	adds	r0, #1
 80096fa:	f43f ae92 	beq.w	8009422 <_printf_float+0xba>
 80096fe:	f108 0801 	add.w	r8, r8, #1
 8009702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009706:	1a9b      	subs	r3, r3, r2
 8009708:	eba3 030a 	sub.w	r3, r3, sl
 800970c:	4543      	cmp	r3, r8
 800970e:	dcee      	bgt.n	80096ee <_printf_float+0x386>
 8009710:	e74a      	b.n	80095a8 <_printf_float+0x240>
 8009712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009714:	2a01      	cmp	r2, #1
 8009716:	dc01      	bgt.n	800971c <_printf_float+0x3b4>
 8009718:	07db      	lsls	r3, r3, #31
 800971a:	d53a      	bpl.n	8009792 <_printf_float+0x42a>
 800971c:	2301      	movs	r3, #1
 800971e:	4642      	mov	r2, r8
 8009720:	4631      	mov	r1, r6
 8009722:	4628      	mov	r0, r5
 8009724:	47b8      	blx	r7
 8009726:	3001      	adds	r0, #1
 8009728:	f43f ae7b 	beq.w	8009422 <_printf_float+0xba>
 800972c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009730:	4631      	mov	r1, r6
 8009732:	4628      	mov	r0, r5
 8009734:	47b8      	blx	r7
 8009736:	3001      	adds	r0, #1
 8009738:	f108 0801 	add.w	r8, r8, #1
 800973c:	f43f ae71 	beq.w	8009422 <_printf_float+0xba>
 8009740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009742:	2200      	movs	r2, #0
 8009744:	f103 3aff 	add.w	sl, r3, #4294967295
 8009748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800974c:	2300      	movs	r3, #0
 800974e:	f7f7 f9bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009752:	b9c8      	cbnz	r0, 8009788 <_printf_float+0x420>
 8009754:	4653      	mov	r3, sl
 8009756:	4642      	mov	r2, r8
 8009758:	4631      	mov	r1, r6
 800975a:	4628      	mov	r0, r5
 800975c:	47b8      	blx	r7
 800975e:	3001      	adds	r0, #1
 8009760:	d10e      	bne.n	8009780 <_printf_float+0x418>
 8009762:	e65e      	b.n	8009422 <_printf_float+0xba>
 8009764:	2301      	movs	r3, #1
 8009766:	4652      	mov	r2, sl
 8009768:	4631      	mov	r1, r6
 800976a:	4628      	mov	r0, r5
 800976c:	47b8      	blx	r7
 800976e:	3001      	adds	r0, #1
 8009770:	f43f ae57 	beq.w	8009422 <_printf_float+0xba>
 8009774:	f108 0801 	add.w	r8, r8, #1
 8009778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800977a:	3b01      	subs	r3, #1
 800977c:	4543      	cmp	r3, r8
 800977e:	dcf1      	bgt.n	8009764 <_printf_float+0x3fc>
 8009780:	464b      	mov	r3, r9
 8009782:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009786:	e6de      	b.n	8009546 <_printf_float+0x1de>
 8009788:	f04f 0800 	mov.w	r8, #0
 800978c:	f104 0a1a 	add.w	sl, r4, #26
 8009790:	e7f2      	b.n	8009778 <_printf_float+0x410>
 8009792:	2301      	movs	r3, #1
 8009794:	e7df      	b.n	8009756 <_printf_float+0x3ee>
 8009796:	2301      	movs	r3, #1
 8009798:	464a      	mov	r2, r9
 800979a:	4631      	mov	r1, r6
 800979c:	4628      	mov	r0, r5
 800979e:	47b8      	blx	r7
 80097a0:	3001      	adds	r0, #1
 80097a2:	f43f ae3e 	beq.w	8009422 <_printf_float+0xba>
 80097a6:	f108 0801 	add.w	r8, r8, #1
 80097aa:	68e3      	ldr	r3, [r4, #12]
 80097ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097ae:	1a9b      	subs	r3, r3, r2
 80097b0:	4543      	cmp	r3, r8
 80097b2:	dcf0      	bgt.n	8009796 <_printf_float+0x42e>
 80097b4:	e6fc      	b.n	80095b0 <_printf_float+0x248>
 80097b6:	f04f 0800 	mov.w	r8, #0
 80097ba:	f104 0919 	add.w	r9, r4, #25
 80097be:	e7f4      	b.n	80097aa <_printf_float+0x442>
 80097c0:	2900      	cmp	r1, #0
 80097c2:	f43f ae8b 	beq.w	80094dc <_printf_float+0x174>
 80097c6:	2300      	movs	r3, #0
 80097c8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80097cc:	ab09      	add	r3, sp, #36	; 0x24
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	ec49 8b10 	vmov	d0, r8, r9
 80097d4:	6022      	str	r2, [r4, #0]
 80097d6:	f8cd a004 	str.w	sl, [sp, #4]
 80097da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097de:	4628      	mov	r0, r5
 80097e0:	f7ff fd2d 	bl	800923e <__cvt>
 80097e4:	4680      	mov	r8, r0
 80097e6:	e648      	b.n	800947a <_printf_float+0x112>

080097e8 <_printf_common>:
 80097e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ec:	4691      	mov	r9, r2
 80097ee:	461f      	mov	r7, r3
 80097f0:	688a      	ldr	r2, [r1, #8]
 80097f2:	690b      	ldr	r3, [r1, #16]
 80097f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097f8:	4293      	cmp	r3, r2
 80097fa:	bfb8      	it	lt
 80097fc:	4613      	movlt	r3, r2
 80097fe:	f8c9 3000 	str.w	r3, [r9]
 8009802:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009806:	4606      	mov	r6, r0
 8009808:	460c      	mov	r4, r1
 800980a:	b112      	cbz	r2, 8009812 <_printf_common+0x2a>
 800980c:	3301      	adds	r3, #1
 800980e:	f8c9 3000 	str.w	r3, [r9]
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	0699      	lsls	r1, r3, #26
 8009816:	bf42      	ittt	mi
 8009818:	f8d9 3000 	ldrmi.w	r3, [r9]
 800981c:	3302      	addmi	r3, #2
 800981e:	f8c9 3000 	strmi.w	r3, [r9]
 8009822:	6825      	ldr	r5, [r4, #0]
 8009824:	f015 0506 	ands.w	r5, r5, #6
 8009828:	d107      	bne.n	800983a <_printf_common+0x52>
 800982a:	f104 0a19 	add.w	sl, r4, #25
 800982e:	68e3      	ldr	r3, [r4, #12]
 8009830:	f8d9 2000 	ldr.w	r2, [r9]
 8009834:	1a9b      	subs	r3, r3, r2
 8009836:	42ab      	cmp	r3, r5
 8009838:	dc28      	bgt.n	800988c <_printf_common+0xa4>
 800983a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800983e:	6822      	ldr	r2, [r4, #0]
 8009840:	3300      	adds	r3, #0
 8009842:	bf18      	it	ne
 8009844:	2301      	movne	r3, #1
 8009846:	0692      	lsls	r2, r2, #26
 8009848:	d42d      	bmi.n	80098a6 <_printf_common+0xbe>
 800984a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800984e:	4639      	mov	r1, r7
 8009850:	4630      	mov	r0, r6
 8009852:	47c0      	blx	r8
 8009854:	3001      	adds	r0, #1
 8009856:	d020      	beq.n	800989a <_printf_common+0xb2>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	68e5      	ldr	r5, [r4, #12]
 800985c:	f8d9 2000 	ldr.w	r2, [r9]
 8009860:	f003 0306 	and.w	r3, r3, #6
 8009864:	2b04      	cmp	r3, #4
 8009866:	bf08      	it	eq
 8009868:	1aad      	subeq	r5, r5, r2
 800986a:	68a3      	ldr	r3, [r4, #8]
 800986c:	6922      	ldr	r2, [r4, #16]
 800986e:	bf0c      	ite	eq
 8009870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009874:	2500      	movne	r5, #0
 8009876:	4293      	cmp	r3, r2
 8009878:	bfc4      	itt	gt
 800987a:	1a9b      	subgt	r3, r3, r2
 800987c:	18ed      	addgt	r5, r5, r3
 800987e:	f04f 0900 	mov.w	r9, #0
 8009882:	341a      	adds	r4, #26
 8009884:	454d      	cmp	r5, r9
 8009886:	d11a      	bne.n	80098be <_printf_common+0xd6>
 8009888:	2000      	movs	r0, #0
 800988a:	e008      	b.n	800989e <_printf_common+0xb6>
 800988c:	2301      	movs	r3, #1
 800988e:	4652      	mov	r2, sl
 8009890:	4639      	mov	r1, r7
 8009892:	4630      	mov	r0, r6
 8009894:	47c0      	blx	r8
 8009896:	3001      	adds	r0, #1
 8009898:	d103      	bne.n	80098a2 <_printf_common+0xba>
 800989a:	f04f 30ff 	mov.w	r0, #4294967295
 800989e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a2:	3501      	adds	r5, #1
 80098a4:	e7c3      	b.n	800982e <_printf_common+0x46>
 80098a6:	18e1      	adds	r1, r4, r3
 80098a8:	1c5a      	adds	r2, r3, #1
 80098aa:	2030      	movs	r0, #48	; 0x30
 80098ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098b0:	4422      	add	r2, r4
 80098b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098ba:	3302      	adds	r3, #2
 80098bc:	e7c5      	b.n	800984a <_printf_common+0x62>
 80098be:	2301      	movs	r3, #1
 80098c0:	4622      	mov	r2, r4
 80098c2:	4639      	mov	r1, r7
 80098c4:	4630      	mov	r0, r6
 80098c6:	47c0      	blx	r8
 80098c8:	3001      	adds	r0, #1
 80098ca:	d0e6      	beq.n	800989a <_printf_common+0xb2>
 80098cc:	f109 0901 	add.w	r9, r9, #1
 80098d0:	e7d8      	b.n	8009884 <_printf_common+0x9c>
	...

080098d4 <_printf_i>:
 80098d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80098dc:	460c      	mov	r4, r1
 80098de:	7e09      	ldrb	r1, [r1, #24]
 80098e0:	b085      	sub	sp, #20
 80098e2:	296e      	cmp	r1, #110	; 0x6e
 80098e4:	4617      	mov	r7, r2
 80098e6:	4606      	mov	r6, r0
 80098e8:	4698      	mov	r8, r3
 80098ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098ec:	f000 80b3 	beq.w	8009a56 <_printf_i+0x182>
 80098f0:	d822      	bhi.n	8009938 <_printf_i+0x64>
 80098f2:	2963      	cmp	r1, #99	; 0x63
 80098f4:	d036      	beq.n	8009964 <_printf_i+0x90>
 80098f6:	d80a      	bhi.n	800990e <_printf_i+0x3a>
 80098f8:	2900      	cmp	r1, #0
 80098fa:	f000 80b9 	beq.w	8009a70 <_printf_i+0x19c>
 80098fe:	2958      	cmp	r1, #88	; 0x58
 8009900:	f000 8083 	beq.w	8009a0a <_printf_i+0x136>
 8009904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009908:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800990c:	e032      	b.n	8009974 <_printf_i+0xa0>
 800990e:	2964      	cmp	r1, #100	; 0x64
 8009910:	d001      	beq.n	8009916 <_printf_i+0x42>
 8009912:	2969      	cmp	r1, #105	; 0x69
 8009914:	d1f6      	bne.n	8009904 <_printf_i+0x30>
 8009916:	6820      	ldr	r0, [r4, #0]
 8009918:	6813      	ldr	r3, [r2, #0]
 800991a:	0605      	lsls	r5, r0, #24
 800991c:	f103 0104 	add.w	r1, r3, #4
 8009920:	d52a      	bpl.n	8009978 <_printf_i+0xa4>
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6011      	str	r1, [r2, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	da03      	bge.n	8009932 <_printf_i+0x5e>
 800992a:	222d      	movs	r2, #45	; 0x2d
 800992c:	425b      	negs	r3, r3
 800992e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009932:	486f      	ldr	r0, [pc, #444]	; (8009af0 <_printf_i+0x21c>)
 8009934:	220a      	movs	r2, #10
 8009936:	e039      	b.n	80099ac <_printf_i+0xd8>
 8009938:	2973      	cmp	r1, #115	; 0x73
 800993a:	f000 809d 	beq.w	8009a78 <_printf_i+0x1a4>
 800993e:	d808      	bhi.n	8009952 <_printf_i+0x7e>
 8009940:	296f      	cmp	r1, #111	; 0x6f
 8009942:	d020      	beq.n	8009986 <_printf_i+0xb2>
 8009944:	2970      	cmp	r1, #112	; 0x70
 8009946:	d1dd      	bne.n	8009904 <_printf_i+0x30>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	f043 0320 	orr.w	r3, r3, #32
 800994e:	6023      	str	r3, [r4, #0]
 8009950:	e003      	b.n	800995a <_printf_i+0x86>
 8009952:	2975      	cmp	r1, #117	; 0x75
 8009954:	d017      	beq.n	8009986 <_printf_i+0xb2>
 8009956:	2978      	cmp	r1, #120	; 0x78
 8009958:	d1d4      	bne.n	8009904 <_printf_i+0x30>
 800995a:	2378      	movs	r3, #120	; 0x78
 800995c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009960:	4864      	ldr	r0, [pc, #400]	; (8009af4 <_printf_i+0x220>)
 8009962:	e055      	b.n	8009a10 <_printf_i+0x13c>
 8009964:	6813      	ldr	r3, [r2, #0]
 8009966:	1d19      	adds	r1, r3, #4
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6011      	str	r1, [r2, #0]
 800996c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009974:	2301      	movs	r3, #1
 8009976:	e08c      	b.n	8009a92 <_printf_i+0x1be>
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6011      	str	r1, [r2, #0]
 800997c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009980:	bf18      	it	ne
 8009982:	b21b      	sxthne	r3, r3
 8009984:	e7cf      	b.n	8009926 <_printf_i+0x52>
 8009986:	6813      	ldr	r3, [r2, #0]
 8009988:	6825      	ldr	r5, [r4, #0]
 800998a:	1d18      	adds	r0, r3, #4
 800998c:	6010      	str	r0, [r2, #0]
 800998e:	0628      	lsls	r0, r5, #24
 8009990:	d501      	bpl.n	8009996 <_printf_i+0xc2>
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	e002      	b.n	800999c <_printf_i+0xc8>
 8009996:	0668      	lsls	r0, r5, #25
 8009998:	d5fb      	bpl.n	8009992 <_printf_i+0xbe>
 800999a:	881b      	ldrh	r3, [r3, #0]
 800999c:	4854      	ldr	r0, [pc, #336]	; (8009af0 <_printf_i+0x21c>)
 800999e:	296f      	cmp	r1, #111	; 0x6f
 80099a0:	bf14      	ite	ne
 80099a2:	220a      	movne	r2, #10
 80099a4:	2208      	moveq	r2, #8
 80099a6:	2100      	movs	r1, #0
 80099a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099ac:	6865      	ldr	r5, [r4, #4]
 80099ae:	60a5      	str	r5, [r4, #8]
 80099b0:	2d00      	cmp	r5, #0
 80099b2:	f2c0 8095 	blt.w	8009ae0 <_printf_i+0x20c>
 80099b6:	6821      	ldr	r1, [r4, #0]
 80099b8:	f021 0104 	bic.w	r1, r1, #4
 80099bc:	6021      	str	r1, [r4, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d13d      	bne.n	8009a3e <_printf_i+0x16a>
 80099c2:	2d00      	cmp	r5, #0
 80099c4:	f040 808e 	bne.w	8009ae4 <_printf_i+0x210>
 80099c8:	4665      	mov	r5, ip
 80099ca:	2a08      	cmp	r2, #8
 80099cc:	d10b      	bne.n	80099e6 <_printf_i+0x112>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	07db      	lsls	r3, r3, #31
 80099d2:	d508      	bpl.n	80099e6 <_printf_i+0x112>
 80099d4:	6923      	ldr	r3, [r4, #16]
 80099d6:	6862      	ldr	r2, [r4, #4]
 80099d8:	429a      	cmp	r2, r3
 80099da:	bfde      	ittt	le
 80099dc:	2330      	movle	r3, #48	; 0x30
 80099de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099e6:	ebac 0305 	sub.w	r3, ip, r5
 80099ea:	6123      	str	r3, [r4, #16]
 80099ec:	f8cd 8000 	str.w	r8, [sp]
 80099f0:	463b      	mov	r3, r7
 80099f2:	aa03      	add	r2, sp, #12
 80099f4:	4621      	mov	r1, r4
 80099f6:	4630      	mov	r0, r6
 80099f8:	f7ff fef6 	bl	80097e8 <_printf_common>
 80099fc:	3001      	adds	r0, #1
 80099fe:	d14d      	bne.n	8009a9c <_printf_i+0x1c8>
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295
 8009a04:	b005      	add	sp, #20
 8009a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a0a:	4839      	ldr	r0, [pc, #228]	; (8009af0 <_printf_i+0x21c>)
 8009a0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009a10:	6813      	ldr	r3, [r2, #0]
 8009a12:	6821      	ldr	r1, [r4, #0]
 8009a14:	1d1d      	adds	r5, r3, #4
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6015      	str	r5, [r2, #0]
 8009a1a:	060a      	lsls	r2, r1, #24
 8009a1c:	d50b      	bpl.n	8009a36 <_printf_i+0x162>
 8009a1e:	07ca      	lsls	r2, r1, #31
 8009a20:	bf44      	itt	mi
 8009a22:	f041 0120 	orrmi.w	r1, r1, #32
 8009a26:	6021      	strmi	r1, [r4, #0]
 8009a28:	b91b      	cbnz	r3, 8009a32 <_printf_i+0x15e>
 8009a2a:	6822      	ldr	r2, [r4, #0]
 8009a2c:	f022 0220 	bic.w	r2, r2, #32
 8009a30:	6022      	str	r2, [r4, #0]
 8009a32:	2210      	movs	r2, #16
 8009a34:	e7b7      	b.n	80099a6 <_printf_i+0xd2>
 8009a36:	064d      	lsls	r5, r1, #25
 8009a38:	bf48      	it	mi
 8009a3a:	b29b      	uxthmi	r3, r3
 8009a3c:	e7ef      	b.n	8009a1e <_printf_i+0x14a>
 8009a3e:	4665      	mov	r5, ip
 8009a40:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a44:	fb02 3311 	mls	r3, r2, r1, r3
 8009a48:	5cc3      	ldrb	r3, [r0, r3]
 8009a4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009a4e:	460b      	mov	r3, r1
 8009a50:	2900      	cmp	r1, #0
 8009a52:	d1f5      	bne.n	8009a40 <_printf_i+0x16c>
 8009a54:	e7b9      	b.n	80099ca <_printf_i+0xf6>
 8009a56:	6813      	ldr	r3, [r2, #0]
 8009a58:	6825      	ldr	r5, [r4, #0]
 8009a5a:	6961      	ldr	r1, [r4, #20]
 8009a5c:	1d18      	adds	r0, r3, #4
 8009a5e:	6010      	str	r0, [r2, #0]
 8009a60:	0628      	lsls	r0, r5, #24
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	d501      	bpl.n	8009a6a <_printf_i+0x196>
 8009a66:	6019      	str	r1, [r3, #0]
 8009a68:	e002      	b.n	8009a70 <_printf_i+0x19c>
 8009a6a:	066a      	lsls	r2, r5, #25
 8009a6c:	d5fb      	bpl.n	8009a66 <_printf_i+0x192>
 8009a6e:	8019      	strh	r1, [r3, #0]
 8009a70:	2300      	movs	r3, #0
 8009a72:	6123      	str	r3, [r4, #16]
 8009a74:	4665      	mov	r5, ip
 8009a76:	e7b9      	b.n	80099ec <_printf_i+0x118>
 8009a78:	6813      	ldr	r3, [r2, #0]
 8009a7a:	1d19      	adds	r1, r3, #4
 8009a7c:	6011      	str	r1, [r2, #0]
 8009a7e:	681d      	ldr	r5, [r3, #0]
 8009a80:	6862      	ldr	r2, [r4, #4]
 8009a82:	2100      	movs	r1, #0
 8009a84:	4628      	mov	r0, r5
 8009a86:	f7f6 fbab 	bl	80001e0 <memchr>
 8009a8a:	b108      	cbz	r0, 8009a90 <_printf_i+0x1bc>
 8009a8c:	1b40      	subs	r0, r0, r5
 8009a8e:	6060      	str	r0, [r4, #4]
 8009a90:	6863      	ldr	r3, [r4, #4]
 8009a92:	6123      	str	r3, [r4, #16]
 8009a94:	2300      	movs	r3, #0
 8009a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a9a:	e7a7      	b.n	80099ec <_printf_i+0x118>
 8009a9c:	6923      	ldr	r3, [r4, #16]
 8009a9e:	462a      	mov	r2, r5
 8009aa0:	4639      	mov	r1, r7
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	47c0      	blx	r8
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	d0aa      	beq.n	8009a00 <_printf_i+0x12c>
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	079b      	lsls	r3, r3, #30
 8009aae:	d413      	bmi.n	8009ad8 <_printf_i+0x204>
 8009ab0:	68e0      	ldr	r0, [r4, #12]
 8009ab2:	9b03      	ldr	r3, [sp, #12]
 8009ab4:	4298      	cmp	r0, r3
 8009ab6:	bfb8      	it	lt
 8009ab8:	4618      	movlt	r0, r3
 8009aba:	e7a3      	b.n	8009a04 <_printf_i+0x130>
 8009abc:	2301      	movs	r3, #1
 8009abe:	464a      	mov	r2, r9
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	47c0      	blx	r8
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	d09a      	beq.n	8009a00 <_printf_i+0x12c>
 8009aca:	3501      	adds	r5, #1
 8009acc:	68e3      	ldr	r3, [r4, #12]
 8009ace:	9a03      	ldr	r2, [sp, #12]
 8009ad0:	1a9b      	subs	r3, r3, r2
 8009ad2:	42ab      	cmp	r3, r5
 8009ad4:	dcf2      	bgt.n	8009abc <_printf_i+0x1e8>
 8009ad6:	e7eb      	b.n	8009ab0 <_printf_i+0x1dc>
 8009ad8:	2500      	movs	r5, #0
 8009ada:	f104 0919 	add.w	r9, r4, #25
 8009ade:	e7f5      	b.n	8009acc <_printf_i+0x1f8>
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1ac      	bne.n	8009a3e <_printf_i+0x16a>
 8009ae4:	7803      	ldrb	r3, [r0, #0]
 8009ae6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009aea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aee:	e76c      	b.n	80099ca <_printf_i+0xf6>
 8009af0:	0800c86e 	.word	0x0800c86e
 8009af4:	0800c87f 	.word	0x0800c87f

08009af8 <siprintf>:
 8009af8:	b40e      	push	{r1, r2, r3}
 8009afa:	b500      	push	{lr}
 8009afc:	b09c      	sub	sp, #112	; 0x70
 8009afe:	ab1d      	add	r3, sp, #116	; 0x74
 8009b00:	9002      	str	r0, [sp, #8]
 8009b02:	9006      	str	r0, [sp, #24]
 8009b04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b08:	4809      	ldr	r0, [pc, #36]	; (8009b30 <siprintf+0x38>)
 8009b0a:	9107      	str	r1, [sp, #28]
 8009b0c:	9104      	str	r1, [sp, #16]
 8009b0e:	4909      	ldr	r1, [pc, #36]	; (8009b34 <siprintf+0x3c>)
 8009b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b14:	9105      	str	r1, [sp, #20]
 8009b16:	6800      	ldr	r0, [r0, #0]
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	a902      	add	r1, sp, #8
 8009b1c:	f001 fa66 	bl	800afec <_svfiprintf_r>
 8009b20:	9b02      	ldr	r3, [sp, #8]
 8009b22:	2200      	movs	r2, #0
 8009b24:	701a      	strb	r2, [r3, #0]
 8009b26:	b01c      	add	sp, #112	; 0x70
 8009b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b2c:	b003      	add	sp, #12
 8009b2e:	4770      	bx	lr
 8009b30:	2000000c 	.word	0x2000000c
 8009b34:	ffff0208 	.word	0xffff0208

08009b38 <strncat>:
 8009b38:	b530      	push	{r4, r5, lr}
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	781c      	ldrb	r4, [r3, #0]
 8009b3e:	1c5d      	adds	r5, r3, #1
 8009b40:	b944      	cbnz	r4, 8009b54 <strncat+0x1c>
 8009b42:	f112 32ff 	adds.w	r2, r2, #4294967295
 8009b46:	d304      	bcc.n	8009b52 <strncat+0x1a>
 8009b48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b4c:	f803 4b01 	strb.w	r4, [r3], #1
 8009b50:	b914      	cbnz	r4, 8009b58 <strncat+0x20>
 8009b52:	bd30      	pop	{r4, r5, pc}
 8009b54:	462b      	mov	r3, r5
 8009b56:	e7f1      	b.n	8009b3c <strncat+0x4>
 8009b58:	2a00      	cmp	r2, #0
 8009b5a:	d1f2      	bne.n	8009b42 <strncat+0xa>
 8009b5c:	701a      	strb	r2, [r3, #0]
 8009b5e:	e7f0      	b.n	8009b42 <strncat+0xa>

08009b60 <quorem>:
 8009b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	6903      	ldr	r3, [r0, #16]
 8009b66:	690c      	ldr	r4, [r1, #16]
 8009b68:	42a3      	cmp	r3, r4
 8009b6a:	4680      	mov	r8, r0
 8009b6c:	f2c0 8082 	blt.w	8009c74 <quorem+0x114>
 8009b70:	3c01      	subs	r4, #1
 8009b72:	f101 0714 	add.w	r7, r1, #20
 8009b76:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009b7a:	f100 0614 	add.w	r6, r0, #20
 8009b7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009b82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009b86:	eb06 030c 	add.w	r3, r6, ip
 8009b8a:	3501      	adds	r5, #1
 8009b8c:	eb07 090c 	add.w	r9, r7, ip
 8009b90:	9301      	str	r3, [sp, #4]
 8009b92:	fbb0 f5f5 	udiv	r5, r0, r5
 8009b96:	b395      	cbz	r5, 8009bfe <quorem+0x9e>
 8009b98:	f04f 0a00 	mov.w	sl, #0
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	46b6      	mov	lr, r6
 8009ba0:	46d3      	mov	fp, sl
 8009ba2:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ba6:	b293      	uxth	r3, r2
 8009ba8:	fb05 a303 	mla	r3, r5, r3, sl
 8009bac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	ebab 0303 	sub.w	r3, fp, r3
 8009bb6:	0c12      	lsrs	r2, r2, #16
 8009bb8:	f8de b000 	ldr.w	fp, [lr]
 8009bbc:	fb05 a202 	mla	r2, r5, r2, sl
 8009bc0:	fa13 f38b 	uxtah	r3, r3, fp
 8009bc4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009bc8:	fa1f fb82 	uxth.w	fp, r2
 8009bcc:	f8de 2000 	ldr.w	r2, [lr]
 8009bd0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009bd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bde:	4581      	cmp	r9, r0
 8009be0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009be4:	f84e 3b04 	str.w	r3, [lr], #4
 8009be8:	d2db      	bcs.n	8009ba2 <quorem+0x42>
 8009bea:	f856 300c 	ldr.w	r3, [r6, ip]
 8009bee:	b933      	cbnz	r3, 8009bfe <quorem+0x9e>
 8009bf0:	9b01      	ldr	r3, [sp, #4]
 8009bf2:	3b04      	subs	r3, #4
 8009bf4:	429e      	cmp	r6, r3
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	d330      	bcc.n	8009c5c <quorem+0xfc>
 8009bfa:	f8c8 4010 	str.w	r4, [r8, #16]
 8009bfe:	4640      	mov	r0, r8
 8009c00:	f001 f81e 	bl	800ac40 <__mcmp>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	db25      	blt.n	8009c54 <quorem+0xf4>
 8009c08:	3501      	adds	r5, #1
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f04f 0c00 	mov.w	ip, #0
 8009c10:	f857 2b04 	ldr.w	r2, [r7], #4
 8009c14:	f8d0 e000 	ldr.w	lr, [r0]
 8009c18:	b293      	uxth	r3, r2
 8009c1a:	ebac 0303 	sub.w	r3, ip, r3
 8009c1e:	0c12      	lsrs	r2, r2, #16
 8009c20:	fa13 f38e 	uxtah	r3, r3, lr
 8009c24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c32:	45b9      	cmp	r9, r7
 8009c34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c38:	f840 3b04 	str.w	r3, [r0], #4
 8009c3c:	d2e8      	bcs.n	8009c10 <quorem+0xb0>
 8009c3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009c42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009c46:	b92a      	cbnz	r2, 8009c54 <quorem+0xf4>
 8009c48:	3b04      	subs	r3, #4
 8009c4a:	429e      	cmp	r6, r3
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	d30b      	bcc.n	8009c68 <quorem+0x108>
 8009c50:	f8c8 4010 	str.w	r4, [r8, #16]
 8009c54:	4628      	mov	r0, r5
 8009c56:	b003      	add	sp, #12
 8009c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5c:	6812      	ldr	r2, [r2, #0]
 8009c5e:	3b04      	subs	r3, #4
 8009c60:	2a00      	cmp	r2, #0
 8009c62:	d1ca      	bne.n	8009bfa <quorem+0x9a>
 8009c64:	3c01      	subs	r4, #1
 8009c66:	e7c5      	b.n	8009bf4 <quorem+0x94>
 8009c68:	6812      	ldr	r2, [r2, #0]
 8009c6a:	3b04      	subs	r3, #4
 8009c6c:	2a00      	cmp	r2, #0
 8009c6e:	d1ef      	bne.n	8009c50 <quorem+0xf0>
 8009c70:	3c01      	subs	r4, #1
 8009c72:	e7ea      	b.n	8009c4a <quorem+0xea>
 8009c74:	2000      	movs	r0, #0
 8009c76:	e7ee      	b.n	8009c56 <quorem+0xf6>

08009c78 <_dtoa_r>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	ec57 6b10 	vmov	r6, r7, d0
 8009c80:	b097      	sub	sp, #92	; 0x5c
 8009c82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c84:	9106      	str	r1, [sp, #24]
 8009c86:	4604      	mov	r4, r0
 8009c88:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c8a:	9312      	str	r3, [sp, #72]	; 0x48
 8009c8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c90:	e9cd 6700 	strd	r6, r7, [sp]
 8009c94:	b93d      	cbnz	r5, 8009ca6 <_dtoa_r+0x2e>
 8009c96:	2010      	movs	r0, #16
 8009c98:	f000 fdb4 	bl	800a804 <malloc>
 8009c9c:	6260      	str	r0, [r4, #36]	; 0x24
 8009c9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ca2:	6005      	str	r5, [r0, #0]
 8009ca4:	60c5      	str	r5, [r0, #12]
 8009ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ca8:	6819      	ldr	r1, [r3, #0]
 8009caa:	b151      	cbz	r1, 8009cc2 <_dtoa_r+0x4a>
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	604a      	str	r2, [r1, #4]
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	4093      	lsls	r3, r2
 8009cb4:	608b      	str	r3, [r1, #8]
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f000 fde0 	bl	800a87c <_Bfree>
 8009cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	1e3b      	subs	r3, r7, #0
 8009cc4:	bfbb      	ittet	lt
 8009cc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009cca:	9301      	strlt	r3, [sp, #4]
 8009ccc:	2300      	movge	r3, #0
 8009cce:	2201      	movlt	r2, #1
 8009cd0:	bfac      	ite	ge
 8009cd2:	f8c8 3000 	strge.w	r3, [r8]
 8009cd6:	f8c8 2000 	strlt.w	r2, [r8]
 8009cda:	4baf      	ldr	r3, [pc, #700]	; (8009f98 <_dtoa_r+0x320>)
 8009cdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009ce0:	ea33 0308 	bics.w	r3, r3, r8
 8009ce4:	d114      	bne.n	8009d10 <_dtoa_r+0x98>
 8009ce6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ce8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	9b00      	ldr	r3, [sp, #0]
 8009cf0:	b923      	cbnz	r3, 8009cfc <_dtoa_r+0x84>
 8009cf2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	f000 8542 	beq.w	800a780 <_dtoa_r+0xb08>
 8009cfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cfe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009fac <_dtoa_r+0x334>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 8544 	beq.w	800a790 <_dtoa_r+0xb18>
 8009d08:	f10b 0303 	add.w	r3, fp, #3
 8009d0c:	f000 bd3e 	b.w	800a78c <_dtoa_r+0xb14>
 8009d10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009d14:	2200      	movs	r2, #0
 8009d16:	2300      	movs	r3, #0
 8009d18:	4630      	mov	r0, r6
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	f7f6 fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d20:	4681      	mov	r9, r0
 8009d22:	b168      	cbz	r0, 8009d40 <_dtoa_r+0xc8>
 8009d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d26:	2301      	movs	r3, #1
 8009d28:	6013      	str	r3, [r2, #0]
 8009d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 8524 	beq.w	800a77a <_dtoa_r+0xb02>
 8009d32:	4b9a      	ldr	r3, [pc, #616]	; (8009f9c <_dtoa_r+0x324>)
 8009d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d36:	f103 3bff 	add.w	fp, r3, #4294967295
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	f000 bd28 	b.w	800a790 <_dtoa_r+0xb18>
 8009d40:	aa14      	add	r2, sp, #80	; 0x50
 8009d42:	a915      	add	r1, sp, #84	; 0x54
 8009d44:	ec47 6b10 	vmov	d0, r6, r7
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 fff0 	bl	800ad2e <__d2b>
 8009d4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009d52:	9004      	str	r0, [sp, #16]
 8009d54:	2d00      	cmp	r5, #0
 8009d56:	d07c      	beq.n	8009e52 <_dtoa_r+0x1da>
 8009d58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009d60:	46b2      	mov	sl, r6
 8009d62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009d66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009d6e:	2200      	movs	r2, #0
 8009d70:	4b8b      	ldr	r3, [pc, #556]	; (8009fa0 <_dtoa_r+0x328>)
 8009d72:	4650      	mov	r0, sl
 8009d74:	4659      	mov	r1, fp
 8009d76:	f7f6 fa87 	bl	8000288 <__aeabi_dsub>
 8009d7a:	a381      	add	r3, pc, #516	; (adr r3, 8009f80 <_dtoa_r+0x308>)
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f7f6 fc3a 	bl	80005f8 <__aeabi_dmul>
 8009d84:	a380      	add	r3, pc, #512	; (adr r3, 8009f88 <_dtoa_r+0x310>)
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	f7f6 fa7f 	bl	800028c <__adddf3>
 8009d8e:	4606      	mov	r6, r0
 8009d90:	4628      	mov	r0, r5
 8009d92:	460f      	mov	r7, r1
 8009d94:	f7f6 fbc6 	bl	8000524 <__aeabi_i2d>
 8009d98:	a37d      	add	r3, pc, #500	; (adr r3, 8009f90 <_dtoa_r+0x318>)
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	f7f6 fc2b 	bl	80005f8 <__aeabi_dmul>
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	4630      	mov	r0, r6
 8009da8:	4639      	mov	r1, r7
 8009daa:	f7f6 fa6f 	bl	800028c <__adddf3>
 8009dae:	4606      	mov	r6, r0
 8009db0:	460f      	mov	r7, r1
 8009db2:	f7f6 fed1 	bl	8000b58 <__aeabi_d2iz>
 8009db6:	2200      	movs	r2, #0
 8009db8:	4682      	mov	sl, r0
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	f7f6 fe8c 	bl	8000adc <__aeabi_dcmplt>
 8009dc4:	b148      	cbz	r0, 8009dda <_dtoa_r+0x162>
 8009dc6:	4650      	mov	r0, sl
 8009dc8:	f7f6 fbac 	bl	8000524 <__aeabi_i2d>
 8009dcc:	4632      	mov	r2, r6
 8009dce:	463b      	mov	r3, r7
 8009dd0:	f7f6 fe7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dd4:	b908      	cbnz	r0, 8009dda <_dtoa_r+0x162>
 8009dd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dda:	f1ba 0f16 	cmp.w	sl, #22
 8009dde:	d859      	bhi.n	8009e94 <_dtoa_r+0x21c>
 8009de0:	4970      	ldr	r1, [pc, #448]	; (8009fa4 <_dtoa_r+0x32c>)
 8009de2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009de6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dee:	f7f6 fe93 	bl	8000b18 <__aeabi_dcmpgt>
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d050      	beq.n	8009e98 <_dtoa_r+0x220>
 8009df6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e00:	1b5d      	subs	r5, r3, r5
 8009e02:	f1b5 0801 	subs.w	r8, r5, #1
 8009e06:	bf49      	itett	mi
 8009e08:	f1c5 0301 	rsbmi	r3, r5, #1
 8009e0c:	2300      	movpl	r3, #0
 8009e0e:	9305      	strmi	r3, [sp, #20]
 8009e10:	f04f 0800 	movmi.w	r8, #0
 8009e14:	bf58      	it	pl
 8009e16:	9305      	strpl	r3, [sp, #20]
 8009e18:	f1ba 0f00 	cmp.w	sl, #0
 8009e1c:	db3e      	blt.n	8009e9c <_dtoa_r+0x224>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	44d0      	add	r8, sl
 8009e22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009e26:	9307      	str	r3, [sp, #28]
 8009e28:	9b06      	ldr	r3, [sp, #24]
 8009e2a:	2b09      	cmp	r3, #9
 8009e2c:	f200 8090 	bhi.w	8009f50 <_dtoa_r+0x2d8>
 8009e30:	2b05      	cmp	r3, #5
 8009e32:	bfc4      	itt	gt
 8009e34:	3b04      	subgt	r3, #4
 8009e36:	9306      	strgt	r3, [sp, #24]
 8009e38:	9b06      	ldr	r3, [sp, #24]
 8009e3a:	f1a3 0302 	sub.w	r3, r3, #2
 8009e3e:	bfcc      	ite	gt
 8009e40:	2500      	movgt	r5, #0
 8009e42:	2501      	movle	r5, #1
 8009e44:	2b03      	cmp	r3, #3
 8009e46:	f200 808f 	bhi.w	8009f68 <_dtoa_r+0x2f0>
 8009e4a:	e8df f003 	tbb	[pc, r3]
 8009e4e:	7f7d      	.short	0x7f7d
 8009e50:	7131      	.short	0x7131
 8009e52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009e56:	441d      	add	r5, r3
 8009e58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009e5c:	2820      	cmp	r0, #32
 8009e5e:	dd13      	ble.n	8009e88 <_dtoa_r+0x210>
 8009e60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009e64:	9b00      	ldr	r3, [sp, #0]
 8009e66:	fa08 f800 	lsl.w	r8, r8, r0
 8009e6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009e6e:	fa23 f000 	lsr.w	r0, r3, r0
 8009e72:	ea48 0000 	orr.w	r0, r8, r0
 8009e76:	f7f6 fb45 	bl	8000504 <__aeabi_ui2d>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	4682      	mov	sl, r0
 8009e7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009e82:	3d01      	subs	r5, #1
 8009e84:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e86:	e772      	b.n	8009d6e <_dtoa_r+0xf6>
 8009e88:	9b00      	ldr	r3, [sp, #0]
 8009e8a:	f1c0 0020 	rsb	r0, r0, #32
 8009e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8009e92:	e7f0      	b.n	8009e76 <_dtoa_r+0x1fe>
 8009e94:	2301      	movs	r3, #1
 8009e96:	e7b1      	b.n	8009dfc <_dtoa_r+0x184>
 8009e98:	900f      	str	r0, [sp, #60]	; 0x3c
 8009e9a:	e7b0      	b.n	8009dfe <_dtoa_r+0x186>
 8009e9c:	9b05      	ldr	r3, [sp, #20]
 8009e9e:	eba3 030a 	sub.w	r3, r3, sl
 8009ea2:	9305      	str	r3, [sp, #20]
 8009ea4:	f1ca 0300 	rsb	r3, sl, #0
 8009ea8:	9307      	str	r3, [sp, #28]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	930e      	str	r3, [sp, #56]	; 0x38
 8009eae:	e7bb      	b.n	8009e28 <_dtoa_r+0x1b0>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8009eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	dd59      	ble.n	8009f6e <_dtoa_r+0x2f6>
 8009eba:	9302      	str	r3, [sp, #8]
 8009ebc:	4699      	mov	r9, r3
 8009ebe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	6072      	str	r2, [r6, #4]
 8009ec4:	2204      	movs	r2, #4
 8009ec6:	f102 0014 	add.w	r0, r2, #20
 8009eca:	4298      	cmp	r0, r3
 8009ecc:	6871      	ldr	r1, [r6, #4]
 8009ece:	d953      	bls.n	8009f78 <_dtoa_r+0x300>
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f000 fc9f 	bl	800a814 <_Balloc>
 8009ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ed8:	6030      	str	r0, [r6, #0]
 8009eda:	f1b9 0f0e 	cmp.w	r9, #14
 8009ede:	f8d3 b000 	ldr.w	fp, [r3]
 8009ee2:	f200 80e6 	bhi.w	800a0b2 <_dtoa_r+0x43a>
 8009ee6:	2d00      	cmp	r5, #0
 8009ee8:	f000 80e3 	beq.w	800a0b2 <_dtoa_r+0x43a>
 8009eec:	ed9d 7b00 	vldr	d7, [sp]
 8009ef0:	f1ba 0f00 	cmp.w	sl, #0
 8009ef4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009ef8:	dd74      	ble.n	8009fe4 <_dtoa_r+0x36c>
 8009efa:	4a2a      	ldr	r2, [pc, #168]	; (8009fa4 <_dtoa_r+0x32c>)
 8009efc:	f00a 030f 	and.w	r3, sl, #15
 8009f00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f04:	ed93 7b00 	vldr	d7, [r3]
 8009f08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009f0c:	06f0      	lsls	r0, r6, #27
 8009f0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009f12:	d565      	bpl.n	8009fe0 <_dtoa_r+0x368>
 8009f14:	4b24      	ldr	r3, [pc, #144]	; (8009fa8 <_dtoa_r+0x330>)
 8009f16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f1e:	f7f6 fc95 	bl	800084c <__aeabi_ddiv>
 8009f22:	e9cd 0100 	strd	r0, r1, [sp]
 8009f26:	f006 060f 	and.w	r6, r6, #15
 8009f2a:	2503      	movs	r5, #3
 8009f2c:	4f1e      	ldr	r7, [pc, #120]	; (8009fa8 <_dtoa_r+0x330>)
 8009f2e:	e04c      	b.n	8009fca <_dtoa_r+0x352>
 8009f30:	2301      	movs	r3, #1
 8009f32:	930a      	str	r3, [sp, #40]	; 0x28
 8009f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f36:	4453      	add	r3, sl
 8009f38:	f103 0901 	add.w	r9, r3, #1
 8009f3c:	9302      	str	r3, [sp, #8]
 8009f3e:	464b      	mov	r3, r9
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	bfb8      	it	lt
 8009f44:	2301      	movlt	r3, #1
 8009f46:	e7ba      	b.n	8009ebe <_dtoa_r+0x246>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	e7b2      	b.n	8009eb2 <_dtoa_r+0x23a>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	e7f0      	b.n	8009f32 <_dtoa_r+0x2ba>
 8009f50:	2501      	movs	r5, #1
 8009f52:	2300      	movs	r3, #0
 8009f54:	9306      	str	r3, [sp, #24]
 8009f56:	950a      	str	r5, [sp, #40]	; 0x28
 8009f58:	f04f 33ff 	mov.w	r3, #4294967295
 8009f5c:	9302      	str	r3, [sp, #8]
 8009f5e:	4699      	mov	r9, r3
 8009f60:	2200      	movs	r2, #0
 8009f62:	2312      	movs	r3, #18
 8009f64:	920b      	str	r2, [sp, #44]	; 0x2c
 8009f66:	e7aa      	b.n	8009ebe <_dtoa_r+0x246>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f6c:	e7f4      	b.n	8009f58 <_dtoa_r+0x2e0>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	9302      	str	r3, [sp, #8]
 8009f72:	4699      	mov	r9, r3
 8009f74:	461a      	mov	r2, r3
 8009f76:	e7f5      	b.n	8009f64 <_dtoa_r+0x2ec>
 8009f78:	3101      	adds	r1, #1
 8009f7a:	6071      	str	r1, [r6, #4]
 8009f7c:	0052      	lsls	r2, r2, #1
 8009f7e:	e7a2      	b.n	8009ec6 <_dtoa_r+0x24e>
 8009f80:	636f4361 	.word	0x636f4361
 8009f84:	3fd287a7 	.word	0x3fd287a7
 8009f88:	8b60c8b3 	.word	0x8b60c8b3
 8009f8c:	3fc68a28 	.word	0x3fc68a28
 8009f90:	509f79fb 	.word	0x509f79fb
 8009f94:	3fd34413 	.word	0x3fd34413
 8009f98:	7ff00000 	.word	0x7ff00000
 8009f9c:	0800c86d 	.word	0x0800c86d
 8009fa0:	3ff80000 	.word	0x3ff80000
 8009fa4:	0800c8c8 	.word	0x0800c8c8
 8009fa8:	0800c8a0 	.word	0x0800c8a0
 8009fac:	0800c899 	.word	0x0800c899
 8009fb0:	07f1      	lsls	r1, r6, #31
 8009fb2:	d508      	bpl.n	8009fc6 <_dtoa_r+0x34e>
 8009fb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fbc:	f7f6 fb1c 	bl	80005f8 <__aeabi_dmul>
 8009fc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009fc4:	3501      	adds	r5, #1
 8009fc6:	1076      	asrs	r6, r6, #1
 8009fc8:	3708      	adds	r7, #8
 8009fca:	2e00      	cmp	r6, #0
 8009fcc:	d1f0      	bne.n	8009fb0 <_dtoa_r+0x338>
 8009fce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fd6:	f7f6 fc39 	bl	800084c <__aeabi_ddiv>
 8009fda:	e9cd 0100 	strd	r0, r1, [sp]
 8009fde:	e01a      	b.n	800a016 <_dtoa_r+0x39e>
 8009fe0:	2502      	movs	r5, #2
 8009fe2:	e7a3      	b.n	8009f2c <_dtoa_r+0x2b4>
 8009fe4:	f000 80a0 	beq.w	800a128 <_dtoa_r+0x4b0>
 8009fe8:	f1ca 0600 	rsb	r6, sl, #0
 8009fec:	4b9f      	ldr	r3, [pc, #636]	; (800a26c <_dtoa_r+0x5f4>)
 8009fee:	4fa0      	ldr	r7, [pc, #640]	; (800a270 <_dtoa_r+0x5f8>)
 8009ff0:	f006 020f 	and.w	r2, r6, #15
 8009ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a000:	f7f6 fafa 	bl	80005f8 <__aeabi_dmul>
 800a004:	e9cd 0100 	strd	r0, r1, [sp]
 800a008:	1136      	asrs	r6, r6, #4
 800a00a:	2300      	movs	r3, #0
 800a00c:	2502      	movs	r5, #2
 800a00e:	2e00      	cmp	r6, #0
 800a010:	d17f      	bne.n	800a112 <_dtoa_r+0x49a>
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1e1      	bne.n	8009fda <_dtoa_r+0x362>
 800a016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 8087 	beq.w	800a12c <_dtoa_r+0x4b4>
 800a01e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a022:	2200      	movs	r2, #0
 800a024:	4b93      	ldr	r3, [pc, #588]	; (800a274 <_dtoa_r+0x5fc>)
 800a026:	4630      	mov	r0, r6
 800a028:	4639      	mov	r1, r7
 800a02a:	f7f6 fd57 	bl	8000adc <__aeabi_dcmplt>
 800a02e:	2800      	cmp	r0, #0
 800a030:	d07c      	beq.n	800a12c <_dtoa_r+0x4b4>
 800a032:	f1b9 0f00 	cmp.w	r9, #0
 800a036:	d079      	beq.n	800a12c <_dtoa_r+0x4b4>
 800a038:	9b02      	ldr	r3, [sp, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	dd35      	ble.n	800a0aa <_dtoa_r+0x432>
 800a03e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a042:	9308      	str	r3, [sp, #32]
 800a044:	4639      	mov	r1, r7
 800a046:	2200      	movs	r2, #0
 800a048:	4b8b      	ldr	r3, [pc, #556]	; (800a278 <_dtoa_r+0x600>)
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7f6 fad4 	bl	80005f8 <__aeabi_dmul>
 800a050:	e9cd 0100 	strd	r0, r1, [sp]
 800a054:	9f02      	ldr	r7, [sp, #8]
 800a056:	3501      	adds	r5, #1
 800a058:	4628      	mov	r0, r5
 800a05a:	f7f6 fa63 	bl	8000524 <__aeabi_i2d>
 800a05e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a062:	f7f6 fac9 	bl	80005f8 <__aeabi_dmul>
 800a066:	2200      	movs	r2, #0
 800a068:	4b84      	ldr	r3, [pc, #528]	; (800a27c <_dtoa_r+0x604>)
 800a06a:	f7f6 f90f 	bl	800028c <__adddf3>
 800a06e:	4605      	mov	r5, r0
 800a070:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a074:	2f00      	cmp	r7, #0
 800a076:	d15d      	bne.n	800a134 <_dtoa_r+0x4bc>
 800a078:	2200      	movs	r2, #0
 800a07a:	4b81      	ldr	r3, [pc, #516]	; (800a280 <_dtoa_r+0x608>)
 800a07c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a080:	f7f6 f902 	bl	8000288 <__aeabi_dsub>
 800a084:	462a      	mov	r2, r5
 800a086:	4633      	mov	r3, r6
 800a088:	e9cd 0100 	strd	r0, r1, [sp]
 800a08c:	f7f6 fd44 	bl	8000b18 <__aeabi_dcmpgt>
 800a090:	2800      	cmp	r0, #0
 800a092:	f040 8288 	bne.w	800a5a6 <_dtoa_r+0x92e>
 800a096:	462a      	mov	r2, r5
 800a098:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a09c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0a0:	f7f6 fd1c 	bl	8000adc <__aeabi_dcmplt>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	f040 827c 	bne.w	800a5a2 <_dtoa_r+0x92a>
 800a0aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0ae:	e9cd 2300 	strd	r2, r3, [sp]
 800a0b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f2c0 8150 	blt.w	800a35a <_dtoa_r+0x6e2>
 800a0ba:	f1ba 0f0e 	cmp.w	sl, #14
 800a0be:	f300 814c 	bgt.w	800a35a <_dtoa_r+0x6e2>
 800a0c2:	4b6a      	ldr	r3, [pc, #424]	; (800a26c <_dtoa_r+0x5f4>)
 800a0c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0c8:	ed93 7b00 	vldr	d7, [r3]
 800a0cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0d4:	f280 80d8 	bge.w	800a288 <_dtoa_r+0x610>
 800a0d8:	f1b9 0f00 	cmp.w	r9, #0
 800a0dc:	f300 80d4 	bgt.w	800a288 <_dtoa_r+0x610>
 800a0e0:	f040 825e 	bne.w	800a5a0 <_dtoa_r+0x928>
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	4b66      	ldr	r3, [pc, #408]	; (800a280 <_dtoa_r+0x608>)
 800a0e8:	ec51 0b17 	vmov	r0, r1, d7
 800a0ec:	f7f6 fa84 	bl	80005f8 <__aeabi_dmul>
 800a0f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0f4:	f7f6 fd06 	bl	8000b04 <__aeabi_dcmpge>
 800a0f8:	464f      	mov	r7, r9
 800a0fa:	464e      	mov	r6, r9
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	f040 8234 	bne.w	800a56a <_dtoa_r+0x8f2>
 800a102:	2331      	movs	r3, #49	; 0x31
 800a104:	f10b 0501 	add.w	r5, fp, #1
 800a108:	f88b 3000 	strb.w	r3, [fp]
 800a10c:	f10a 0a01 	add.w	sl, sl, #1
 800a110:	e22f      	b.n	800a572 <_dtoa_r+0x8fa>
 800a112:	07f2      	lsls	r2, r6, #31
 800a114:	d505      	bpl.n	800a122 <_dtoa_r+0x4aa>
 800a116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a11a:	f7f6 fa6d 	bl	80005f8 <__aeabi_dmul>
 800a11e:	3501      	adds	r5, #1
 800a120:	2301      	movs	r3, #1
 800a122:	1076      	asrs	r6, r6, #1
 800a124:	3708      	adds	r7, #8
 800a126:	e772      	b.n	800a00e <_dtoa_r+0x396>
 800a128:	2502      	movs	r5, #2
 800a12a:	e774      	b.n	800a016 <_dtoa_r+0x39e>
 800a12c:	f8cd a020 	str.w	sl, [sp, #32]
 800a130:	464f      	mov	r7, r9
 800a132:	e791      	b.n	800a058 <_dtoa_r+0x3e0>
 800a134:	4b4d      	ldr	r3, [pc, #308]	; (800a26c <_dtoa_r+0x5f4>)
 800a136:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a13a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a140:	2b00      	cmp	r3, #0
 800a142:	d047      	beq.n	800a1d4 <_dtoa_r+0x55c>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	2000      	movs	r0, #0
 800a14a:	494e      	ldr	r1, [pc, #312]	; (800a284 <_dtoa_r+0x60c>)
 800a14c:	f7f6 fb7e 	bl	800084c <__aeabi_ddiv>
 800a150:	462a      	mov	r2, r5
 800a152:	4633      	mov	r3, r6
 800a154:	f7f6 f898 	bl	8000288 <__aeabi_dsub>
 800a158:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a15c:	465d      	mov	r5, fp
 800a15e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a162:	f7f6 fcf9 	bl	8000b58 <__aeabi_d2iz>
 800a166:	4606      	mov	r6, r0
 800a168:	f7f6 f9dc 	bl	8000524 <__aeabi_i2d>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a174:	f7f6 f888 	bl	8000288 <__aeabi_dsub>
 800a178:	3630      	adds	r6, #48	; 0x30
 800a17a:	f805 6b01 	strb.w	r6, [r5], #1
 800a17e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a182:	e9cd 0100 	strd	r0, r1, [sp]
 800a186:	f7f6 fca9 	bl	8000adc <__aeabi_dcmplt>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d163      	bne.n	800a256 <_dtoa_r+0x5de>
 800a18e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a192:	2000      	movs	r0, #0
 800a194:	4937      	ldr	r1, [pc, #220]	; (800a274 <_dtoa_r+0x5fc>)
 800a196:	f7f6 f877 	bl	8000288 <__aeabi_dsub>
 800a19a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a19e:	f7f6 fc9d 	bl	8000adc <__aeabi_dcmplt>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	f040 80b7 	bne.w	800a316 <_dtoa_r+0x69e>
 800a1a8:	eba5 030b 	sub.w	r3, r5, fp
 800a1ac:	429f      	cmp	r7, r3
 800a1ae:	f77f af7c 	ble.w	800a0aa <_dtoa_r+0x432>
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	4b30      	ldr	r3, [pc, #192]	; (800a278 <_dtoa_r+0x600>)
 800a1b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1ba:	f7f6 fa1d 	bl	80005f8 <__aeabi_dmul>
 800a1be:	2200      	movs	r2, #0
 800a1c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a1c4:	4b2c      	ldr	r3, [pc, #176]	; (800a278 <_dtoa_r+0x600>)
 800a1c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ca:	f7f6 fa15 	bl	80005f8 <__aeabi_dmul>
 800a1ce:	e9cd 0100 	strd	r0, r1, [sp]
 800a1d2:	e7c4      	b.n	800a15e <_dtoa_r+0x4e6>
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4633      	mov	r3, r6
 800a1d8:	f7f6 fa0e 	bl	80005f8 <__aeabi_dmul>
 800a1dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a1e0:	eb0b 0507 	add.w	r5, fp, r7
 800a1e4:	465e      	mov	r6, fp
 800a1e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ea:	f7f6 fcb5 	bl	8000b58 <__aeabi_d2iz>
 800a1ee:	4607      	mov	r7, r0
 800a1f0:	f7f6 f998 	bl	8000524 <__aeabi_i2d>
 800a1f4:	3730      	adds	r7, #48	; 0x30
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1fe:	f7f6 f843 	bl	8000288 <__aeabi_dsub>
 800a202:	f806 7b01 	strb.w	r7, [r6], #1
 800a206:	42ae      	cmp	r6, r5
 800a208:	e9cd 0100 	strd	r0, r1, [sp]
 800a20c:	f04f 0200 	mov.w	r2, #0
 800a210:	d126      	bne.n	800a260 <_dtoa_r+0x5e8>
 800a212:	4b1c      	ldr	r3, [pc, #112]	; (800a284 <_dtoa_r+0x60c>)
 800a214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a218:	f7f6 f838 	bl	800028c <__adddf3>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a224:	f7f6 fc78 	bl	8000b18 <__aeabi_dcmpgt>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d174      	bne.n	800a316 <_dtoa_r+0x69e>
 800a22c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a230:	2000      	movs	r0, #0
 800a232:	4914      	ldr	r1, [pc, #80]	; (800a284 <_dtoa_r+0x60c>)
 800a234:	f7f6 f828 	bl	8000288 <__aeabi_dsub>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a240:	f7f6 fc4c 	bl	8000adc <__aeabi_dcmplt>
 800a244:	2800      	cmp	r0, #0
 800a246:	f43f af30 	beq.w	800a0aa <_dtoa_r+0x432>
 800a24a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a24e:	2b30      	cmp	r3, #48	; 0x30
 800a250:	f105 32ff 	add.w	r2, r5, #4294967295
 800a254:	d002      	beq.n	800a25c <_dtoa_r+0x5e4>
 800a256:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a25a:	e04a      	b.n	800a2f2 <_dtoa_r+0x67a>
 800a25c:	4615      	mov	r5, r2
 800a25e:	e7f4      	b.n	800a24a <_dtoa_r+0x5d2>
 800a260:	4b05      	ldr	r3, [pc, #20]	; (800a278 <_dtoa_r+0x600>)
 800a262:	f7f6 f9c9 	bl	80005f8 <__aeabi_dmul>
 800a266:	e9cd 0100 	strd	r0, r1, [sp]
 800a26a:	e7bc      	b.n	800a1e6 <_dtoa_r+0x56e>
 800a26c:	0800c8c8 	.word	0x0800c8c8
 800a270:	0800c8a0 	.word	0x0800c8a0
 800a274:	3ff00000 	.word	0x3ff00000
 800a278:	40240000 	.word	0x40240000
 800a27c:	401c0000 	.word	0x401c0000
 800a280:	40140000 	.word	0x40140000
 800a284:	3fe00000 	.word	0x3fe00000
 800a288:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a28c:	465d      	mov	r5, fp
 800a28e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a292:	4630      	mov	r0, r6
 800a294:	4639      	mov	r1, r7
 800a296:	f7f6 fad9 	bl	800084c <__aeabi_ddiv>
 800a29a:	f7f6 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800a29e:	4680      	mov	r8, r0
 800a2a0:	f7f6 f940 	bl	8000524 <__aeabi_i2d>
 800a2a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2a8:	f7f6 f9a6 	bl	80005f8 <__aeabi_dmul>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	4639      	mov	r1, r7
 800a2b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a2b8:	f7f5 ffe6 	bl	8000288 <__aeabi_dsub>
 800a2bc:	f805 6b01 	strb.w	r6, [r5], #1
 800a2c0:	eba5 060b 	sub.w	r6, r5, fp
 800a2c4:	45b1      	cmp	r9, r6
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	d139      	bne.n	800a340 <_dtoa_r+0x6c8>
 800a2cc:	f7f5 ffde 	bl	800028c <__adddf3>
 800a2d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	460f      	mov	r7, r1
 800a2d8:	f7f6 fc1e 	bl	8000b18 <__aeabi_dcmpgt>
 800a2dc:	b9c8      	cbnz	r0, 800a312 <_dtoa_r+0x69a>
 800a2de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	4639      	mov	r1, r7
 800a2e6:	f7f6 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2ea:	b110      	cbz	r0, 800a2f2 <_dtoa_r+0x67a>
 800a2ec:	f018 0f01 	tst.w	r8, #1
 800a2f0:	d10f      	bne.n	800a312 <_dtoa_r+0x69a>
 800a2f2:	9904      	ldr	r1, [sp, #16]
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f000 fac1 	bl	800a87c <_Bfree>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2fe:	702b      	strb	r3, [r5, #0]
 800a300:	f10a 0301 	add.w	r3, sl, #1
 800a304:	6013      	str	r3, [r2, #0]
 800a306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 8241 	beq.w	800a790 <_dtoa_r+0xb18>
 800a30e:	601d      	str	r5, [r3, #0]
 800a310:	e23e      	b.n	800a790 <_dtoa_r+0xb18>
 800a312:	f8cd a020 	str.w	sl, [sp, #32]
 800a316:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a31a:	2a39      	cmp	r2, #57	; 0x39
 800a31c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a320:	d108      	bne.n	800a334 <_dtoa_r+0x6bc>
 800a322:	459b      	cmp	fp, r3
 800a324:	d10a      	bne.n	800a33c <_dtoa_r+0x6c4>
 800a326:	9b08      	ldr	r3, [sp, #32]
 800a328:	3301      	adds	r3, #1
 800a32a:	9308      	str	r3, [sp, #32]
 800a32c:	2330      	movs	r3, #48	; 0x30
 800a32e:	f88b 3000 	strb.w	r3, [fp]
 800a332:	465b      	mov	r3, fp
 800a334:	781a      	ldrb	r2, [r3, #0]
 800a336:	3201      	adds	r2, #1
 800a338:	701a      	strb	r2, [r3, #0]
 800a33a:	e78c      	b.n	800a256 <_dtoa_r+0x5de>
 800a33c:	461d      	mov	r5, r3
 800a33e:	e7ea      	b.n	800a316 <_dtoa_r+0x69e>
 800a340:	2200      	movs	r2, #0
 800a342:	4b9b      	ldr	r3, [pc, #620]	; (800a5b0 <_dtoa_r+0x938>)
 800a344:	f7f6 f958 	bl	80005f8 <__aeabi_dmul>
 800a348:	2200      	movs	r2, #0
 800a34a:	2300      	movs	r3, #0
 800a34c:	4606      	mov	r6, r0
 800a34e:	460f      	mov	r7, r1
 800a350:	f7f6 fbba 	bl	8000ac8 <__aeabi_dcmpeq>
 800a354:	2800      	cmp	r0, #0
 800a356:	d09a      	beq.n	800a28e <_dtoa_r+0x616>
 800a358:	e7cb      	b.n	800a2f2 <_dtoa_r+0x67a>
 800a35a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a35c:	2a00      	cmp	r2, #0
 800a35e:	f000 808b 	beq.w	800a478 <_dtoa_r+0x800>
 800a362:	9a06      	ldr	r2, [sp, #24]
 800a364:	2a01      	cmp	r2, #1
 800a366:	dc6e      	bgt.n	800a446 <_dtoa_r+0x7ce>
 800a368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a36a:	2a00      	cmp	r2, #0
 800a36c:	d067      	beq.n	800a43e <_dtoa_r+0x7c6>
 800a36e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a372:	9f07      	ldr	r7, [sp, #28]
 800a374:	9d05      	ldr	r5, [sp, #20]
 800a376:	9a05      	ldr	r2, [sp, #20]
 800a378:	2101      	movs	r1, #1
 800a37a:	441a      	add	r2, r3
 800a37c:	4620      	mov	r0, r4
 800a37e:	9205      	str	r2, [sp, #20]
 800a380:	4498      	add	r8, r3
 800a382:	f000 fb1b 	bl	800a9bc <__i2b>
 800a386:	4606      	mov	r6, r0
 800a388:	2d00      	cmp	r5, #0
 800a38a:	dd0c      	ble.n	800a3a6 <_dtoa_r+0x72e>
 800a38c:	f1b8 0f00 	cmp.w	r8, #0
 800a390:	dd09      	ble.n	800a3a6 <_dtoa_r+0x72e>
 800a392:	4545      	cmp	r5, r8
 800a394:	9a05      	ldr	r2, [sp, #20]
 800a396:	462b      	mov	r3, r5
 800a398:	bfa8      	it	ge
 800a39a:	4643      	movge	r3, r8
 800a39c:	1ad2      	subs	r2, r2, r3
 800a39e:	9205      	str	r2, [sp, #20]
 800a3a0:	1aed      	subs	r5, r5, r3
 800a3a2:	eba8 0803 	sub.w	r8, r8, r3
 800a3a6:	9b07      	ldr	r3, [sp, #28]
 800a3a8:	b1eb      	cbz	r3, 800a3e6 <_dtoa_r+0x76e>
 800a3aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d067      	beq.n	800a480 <_dtoa_r+0x808>
 800a3b0:	b18f      	cbz	r7, 800a3d6 <_dtoa_r+0x75e>
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	463a      	mov	r2, r7
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	f000 fba0 	bl	800aafc <__pow5mult>
 800a3bc:	9a04      	ldr	r2, [sp, #16]
 800a3be:	4601      	mov	r1, r0
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f000 fb03 	bl	800a9ce <__multiply>
 800a3c8:	9904      	ldr	r1, [sp, #16]
 800a3ca:	9008      	str	r0, [sp, #32]
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f000 fa55 	bl	800a87c <_Bfree>
 800a3d2:	9b08      	ldr	r3, [sp, #32]
 800a3d4:	9304      	str	r3, [sp, #16]
 800a3d6:	9b07      	ldr	r3, [sp, #28]
 800a3d8:	1bda      	subs	r2, r3, r7
 800a3da:	d004      	beq.n	800a3e6 <_dtoa_r+0x76e>
 800a3dc:	9904      	ldr	r1, [sp, #16]
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f000 fb8c 	bl	800aafc <__pow5mult>
 800a3e4:	9004      	str	r0, [sp, #16]
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f000 fae7 	bl	800a9bc <__i2b>
 800a3ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3f0:	4607      	mov	r7, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f000 81d0 	beq.w	800a798 <_dtoa_r+0xb20>
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	4601      	mov	r1, r0
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f000 fb7d 	bl	800aafc <__pow5mult>
 800a402:	9b06      	ldr	r3, [sp, #24]
 800a404:	2b01      	cmp	r3, #1
 800a406:	4607      	mov	r7, r0
 800a408:	dc40      	bgt.n	800a48c <_dtoa_r+0x814>
 800a40a:	9b00      	ldr	r3, [sp, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d139      	bne.n	800a484 <_dtoa_r+0x80c>
 800a410:	9b01      	ldr	r3, [sp, #4]
 800a412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a416:	2b00      	cmp	r3, #0
 800a418:	d136      	bne.n	800a488 <_dtoa_r+0x810>
 800a41a:	9b01      	ldr	r3, [sp, #4]
 800a41c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a420:	0d1b      	lsrs	r3, r3, #20
 800a422:	051b      	lsls	r3, r3, #20
 800a424:	b12b      	cbz	r3, 800a432 <_dtoa_r+0x7ba>
 800a426:	9b05      	ldr	r3, [sp, #20]
 800a428:	3301      	adds	r3, #1
 800a42a:	9305      	str	r3, [sp, #20]
 800a42c:	f108 0801 	add.w	r8, r8, #1
 800a430:	2301      	movs	r3, #1
 800a432:	9307      	str	r3, [sp, #28]
 800a434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a436:	2b00      	cmp	r3, #0
 800a438:	d12a      	bne.n	800a490 <_dtoa_r+0x818>
 800a43a:	2001      	movs	r0, #1
 800a43c:	e030      	b.n	800a4a0 <_dtoa_r+0x828>
 800a43e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a440:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a444:	e795      	b.n	800a372 <_dtoa_r+0x6fa>
 800a446:	9b07      	ldr	r3, [sp, #28]
 800a448:	f109 37ff 	add.w	r7, r9, #4294967295
 800a44c:	42bb      	cmp	r3, r7
 800a44e:	bfbf      	itttt	lt
 800a450:	9b07      	ldrlt	r3, [sp, #28]
 800a452:	9707      	strlt	r7, [sp, #28]
 800a454:	1afa      	sublt	r2, r7, r3
 800a456:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a458:	bfbb      	ittet	lt
 800a45a:	189b      	addlt	r3, r3, r2
 800a45c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a45e:	1bdf      	subge	r7, r3, r7
 800a460:	2700      	movlt	r7, #0
 800a462:	f1b9 0f00 	cmp.w	r9, #0
 800a466:	bfb5      	itete	lt
 800a468:	9b05      	ldrlt	r3, [sp, #20]
 800a46a:	9d05      	ldrge	r5, [sp, #20]
 800a46c:	eba3 0509 	sublt.w	r5, r3, r9
 800a470:	464b      	movge	r3, r9
 800a472:	bfb8      	it	lt
 800a474:	2300      	movlt	r3, #0
 800a476:	e77e      	b.n	800a376 <_dtoa_r+0x6fe>
 800a478:	9f07      	ldr	r7, [sp, #28]
 800a47a:	9d05      	ldr	r5, [sp, #20]
 800a47c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a47e:	e783      	b.n	800a388 <_dtoa_r+0x710>
 800a480:	9a07      	ldr	r2, [sp, #28]
 800a482:	e7ab      	b.n	800a3dc <_dtoa_r+0x764>
 800a484:	2300      	movs	r3, #0
 800a486:	e7d4      	b.n	800a432 <_dtoa_r+0x7ba>
 800a488:	9b00      	ldr	r3, [sp, #0]
 800a48a:	e7d2      	b.n	800a432 <_dtoa_r+0x7ba>
 800a48c:	2300      	movs	r3, #0
 800a48e:	9307      	str	r3, [sp, #28]
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a496:	6918      	ldr	r0, [r3, #16]
 800a498:	f000 fa42 	bl	800a920 <__hi0bits>
 800a49c:	f1c0 0020 	rsb	r0, r0, #32
 800a4a0:	4440      	add	r0, r8
 800a4a2:	f010 001f 	ands.w	r0, r0, #31
 800a4a6:	d047      	beq.n	800a538 <_dtoa_r+0x8c0>
 800a4a8:	f1c0 0320 	rsb	r3, r0, #32
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	dd3b      	ble.n	800a528 <_dtoa_r+0x8b0>
 800a4b0:	9b05      	ldr	r3, [sp, #20]
 800a4b2:	f1c0 001c 	rsb	r0, r0, #28
 800a4b6:	4403      	add	r3, r0
 800a4b8:	9305      	str	r3, [sp, #20]
 800a4ba:	4405      	add	r5, r0
 800a4bc:	4480      	add	r8, r0
 800a4be:	9b05      	ldr	r3, [sp, #20]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	dd05      	ble.n	800a4d0 <_dtoa_r+0x858>
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	9904      	ldr	r1, [sp, #16]
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f000 fb65 	bl	800ab98 <__lshift>
 800a4ce:	9004      	str	r0, [sp, #16]
 800a4d0:	f1b8 0f00 	cmp.w	r8, #0
 800a4d4:	dd05      	ble.n	800a4e2 <_dtoa_r+0x86a>
 800a4d6:	4639      	mov	r1, r7
 800a4d8:	4642      	mov	r2, r8
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f000 fb5c 	bl	800ab98 <__lshift>
 800a4e0:	4607      	mov	r7, r0
 800a4e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4e4:	b353      	cbz	r3, 800a53c <_dtoa_r+0x8c4>
 800a4e6:	4639      	mov	r1, r7
 800a4e8:	9804      	ldr	r0, [sp, #16]
 800a4ea:	f000 fba9 	bl	800ac40 <__mcmp>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	da24      	bge.n	800a53c <_dtoa_r+0x8c4>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	220a      	movs	r2, #10
 800a4f6:	9904      	ldr	r1, [sp, #16]
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f000 f9d6 	bl	800a8aa <__multadd>
 800a4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a500:	9004      	str	r0, [sp, #16]
 800a502:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a506:	2b00      	cmp	r3, #0
 800a508:	f000 814d 	beq.w	800a7a6 <_dtoa_r+0xb2e>
 800a50c:	2300      	movs	r3, #0
 800a50e:	4631      	mov	r1, r6
 800a510:	220a      	movs	r2, #10
 800a512:	4620      	mov	r0, r4
 800a514:	f000 f9c9 	bl	800a8aa <__multadd>
 800a518:	9b02      	ldr	r3, [sp, #8]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	4606      	mov	r6, r0
 800a51e:	dc4f      	bgt.n	800a5c0 <_dtoa_r+0x948>
 800a520:	9b06      	ldr	r3, [sp, #24]
 800a522:	2b02      	cmp	r3, #2
 800a524:	dd4c      	ble.n	800a5c0 <_dtoa_r+0x948>
 800a526:	e011      	b.n	800a54c <_dtoa_r+0x8d4>
 800a528:	d0c9      	beq.n	800a4be <_dtoa_r+0x846>
 800a52a:	9a05      	ldr	r2, [sp, #20]
 800a52c:	331c      	adds	r3, #28
 800a52e:	441a      	add	r2, r3
 800a530:	9205      	str	r2, [sp, #20]
 800a532:	441d      	add	r5, r3
 800a534:	4498      	add	r8, r3
 800a536:	e7c2      	b.n	800a4be <_dtoa_r+0x846>
 800a538:	4603      	mov	r3, r0
 800a53a:	e7f6      	b.n	800a52a <_dtoa_r+0x8b2>
 800a53c:	f1b9 0f00 	cmp.w	r9, #0
 800a540:	dc38      	bgt.n	800a5b4 <_dtoa_r+0x93c>
 800a542:	9b06      	ldr	r3, [sp, #24]
 800a544:	2b02      	cmp	r3, #2
 800a546:	dd35      	ble.n	800a5b4 <_dtoa_r+0x93c>
 800a548:	f8cd 9008 	str.w	r9, [sp, #8]
 800a54c:	9b02      	ldr	r3, [sp, #8]
 800a54e:	b963      	cbnz	r3, 800a56a <_dtoa_r+0x8f2>
 800a550:	4639      	mov	r1, r7
 800a552:	2205      	movs	r2, #5
 800a554:	4620      	mov	r0, r4
 800a556:	f000 f9a8 	bl	800a8aa <__multadd>
 800a55a:	4601      	mov	r1, r0
 800a55c:	4607      	mov	r7, r0
 800a55e:	9804      	ldr	r0, [sp, #16]
 800a560:	f000 fb6e 	bl	800ac40 <__mcmp>
 800a564:	2800      	cmp	r0, #0
 800a566:	f73f adcc 	bgt.w	800a102 <_dtoa_r+0x48a>
 800a56a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a56c:	465d      	mov	r5, fp
 800a56e:	ea6f 0a03 	mvn.w	sl, r3
 800a572:	f04f 0900 	mov.w	r9, #0
 800a576:	4639      	mov	r1, r7
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 f97f 	bl	800a87c <_Bfree>
 800a57e:	2e00      	cmp	r6, #0
 800a580:	f43f aeb7 	beq.w	800a2f2 <_dtoa_r+0x67a>
 800a584:	f1b9 0f00 	cmp.w	r9, #0
 800a588:	d005      	beq.n	800a596 <_dtoa_r+0x91e>
 800a58a:	45b1      	cmp	r9, r6
 800a58c:	d003      	beq.n	800a596 <_dtoa_r+0x91e>
 800a58e:	4649      	mov	r1, r9
 800a590:	4620      	mov	r0, r4
 800a592:	f000 f973 	bl	800a87c <_Bfree>
 800a596:	4631      	mov	r1, r6
 800a598:	4620      	mov	r0, r4
 800a59a:	f000 f96f 	bl	800a87c <_Bfree>
 800a59e:	e6a8      	b.n	800a2f2 <_dtoa_r+0x67a>
 800a5a0:	2700      	movs	r7, #0
 800a5a2:	463e      	mov	r6, r7
 800a5a4:	e7e1      	b.n	800a56a <_dtoa_r+0x8f2>
 800a5a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a5aa:	463e      	mov	r6, r7
 800a5ac:	e5a9      	b.n	800a102 <_dtoa_r+0x48a>
 800a5ae:	bf00      	nop
 800a5b0:	40240000 	.word	0x40240000
 800a5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 80fa 	beq.w	800a7b4 <_dtoa_r+0xb3c>
 800a5c0:	2d00      	cmp	r5, #0
 800a5c2:	dd05      	ble.n	800a5d0 <_dtoa_r+0x958>
 800a5c4:	4631      	mov	r1, r6
 800a5c6:	462a      	mov	r2, r5
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f000 fae5 	bl	800ab98 <__lshift>
 800a5ce:	4606      	mov	r6, r0
 800a5d0:	9b07      	ldr	r3, [sp, #28]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d04c      	beq.n	800a670 <_dtoa_r+0x9f8>
 800a5d6:	6871      	ldr	r1, [r6, #4]
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 f91b 	bl	800a814 <_Balloc>
 800a5de:	6932      	ldr	r2, [r6, #16]
 800a5e0:	3202      	adds	r2, #2
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	0092      	lsls	r2, r2, #2
 800a5e6:	f106 010c 	add.w	r1, r6, #12
 800a5ea:	300c      	adds	r0, #12
 800a5ec:	f7fe fe14 	bl	8009218 <memcpy>
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f000 facf 	bl	800ab98 <__lshift>
 800a5fa:	9b00      	ldr	r3, [sp, #0]
 800a5fc:	f8cd b014 	str.w	fp, [sp, #20]
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	46b1      	mov	r9, r6
 800a606:	9307      	str	r3, [sp, #28]
 800a608:	4606      	mov	r6, r0
 800a60a:	4639      	mov	r1, r7
 800a60c:	9804      	ldr	r0, [sp, #16]
 800a60e:	f7ff faa7 	bl	8009b60 <quorem>
 800a612:	4649      	mov	r1, r9
 800a614:	4605      	mov	r5, r0
 800a616:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a61a:	9804      	ldr	r0, [sp, #16]
 800a61c:	f000 fb10 	bl	800ac40 <__mcmp>
 800a620:	4632      	mov	r2, r6
 800a622:	9000      	str	r0, [sp, #0]
 800a624:	4639      	mov	r1, r7
 800a626:	4620      	mov	r0, r4
 800a628:	f000 fb24 	bl	800ac74 <__mdiff>
 800a62c:	68c3      	ldr	r3, [r0, #12]
 800a62e:	4602      	mov	r2, r0
 800a630:	bb03      	cbnz	r3, 800a674 <_dtoa_r+0x9fc>
 800a632:	4601      	mov	r1, r0
 800a634:	9008      	str	r0, [sp, #32]
 800a636:	9804      	ldr	r0, [sp, #16]
 800a638:	f000 fb02 	bl	800ac40 <__mcmp>
 800a63c:	9a08      	ldr	r2, [sp, #32]
 800a63e:	4603      	mov	r3, r0
 800a640:	4611      	mov	r1, r2
 800a642:	4620      	mov	r0, r4
 800a644:	9308      	str	r3, [sp, #32]
 800a646:	f000 f919 	bl	800a87c <_Bfree>
 800a64a:	9b08      	ldr	r3, [sp, #32]
 800a64c:	b9a3      	cbnz	r3, 800a678 <_dtoa_r+0xa00>
 800a64e:	9a06      	ldr	r2, [sp, #24]
 800a650:	b992      	cbnz	r2, 800a678 <_dtoa_r+0xa00>
 800a652:	9a07      	ldr	r2, [sp, #28]
 800a654:	b982      	cbnz	r2, 800a678 <_dtoa_r+0xa00>
 800a656:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a65a:	d029      	beq.n	800a6b0 <_dtoa_r+0xa38>
 800a65c:	9b00      	ldr	r3, [sp, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	dd01      	ble.n	800a666 <_dtoa_r+0x9ee>
 800a662:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a666:	9b05      	ldr	r3, [sp, #20]
 800a668:	1c5d      	adds	r5, r3, #1
 800a66a:	f883 8000 	strb.w	r8, [r3]
 800a66e:	e782      	b.n	800a576 <_dtoa_r+0x8fe>
 800a670:	4630      	mov	r0, r6
 800a672:	e7c2      	b.n	800a5fa <_dtoa_r+0x982>
 800a674:	2301      	movs	r3, #1
 800a676:	e7e3      	b.n	800a640 <_dtoa_r+0x9c8>
 800a678:	9a00      	ldr	r2, [sp, #0]
 800a67a:	2a00      	cmp	r2, #0
 800a67c:	db04      	blt.n	800a688 <_dtoa_r+0xa10>
 800a67e:	d125      	bne.n	800a6cc <_dtoa_r+0xa54>
 800a680:	9a06      	ldr	r2, [sp, #24]
 800a682:	bb1a      	cbnz	r2, 800a6cc <_dtoa_r+0xa54>
 800a684:	9a07      	ldr	r2, [sp, #28]
 800a686:	bb0a      	cbnz	r2, 800a6cc <_dtoa_r+0xa54>
 800a688:	2b00      	cmp	r3, #0
 800a68a:	ddec      	ble.n	800a666 <_dtoa_r+0x9ee>
 800a68c:	2201      	movs	r2, #1
 800a68e:	9904      	ldr	r1, [sp, #16]
 800a690:	4620      	mov	r0, r4
 800a692:	f000 fa81 	bl	800ab98 <__lshift>
 800a696:	4639      	mov	r1, r7
 800a698:	9004      	str	r0, [sp, #16]
 800a69a:	f000 fad1 	bl	800ac40 <__mcmp>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	dc03      	bgt.n	800a6aa <_dtoa_r+0xa32>
 800a6a2:	d1e0      	bne.n	800a666 <_dtoa_r+0x9ee>
 800a6a4:	f018 0f01 	tst.w	r8, #1
 800a6a8:	d0dd      	beq.n	800a666 <_dtoa_r+0x9ee>
 800a6aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a6ae:	d1d8      	bne.n	800a662 <_dtoa_r+0x9ea>
 800a6b0:	9b05      	ldr	r3, [sp, #20]
 800a6b2:	9a05      	ldr	r2, [sp, #20]
 800a6b4:	1c5d      	adds	r5, r3, #1
 800a6b6:	2339      	movs	r3, #57	; 0x39
 800a6b8:	7013      	strb	r3, [r2, #0]
 800a6ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6be:	2b39      	cmp	r3, #57	; 0x39
 800a6c0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a6c4:	d04f      	beq.n	800a766 <_dtoa_r+0xaee>
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	7013      	strb	r3, [r2, #0]
 800a6ca:	e754      	b.n	800a576 <_dtoa_r+0x8fe>
 800a6cc:	9a05      	ldr	r2, [sp, #20]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f102 0501 	add.w	r5, r2, #1
 800a6d4:	dd06      	ble.n	800a6e4 <_dtoa_r+0xa6c>
 800a6d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a6da:	d0e9      	beq.n	800a6b0 <_dtoa_r+0xa38>
 800a6dc:	f108 0801 	add.w	r8, r8, #1
 800a6e0:	9b05      	ldr	r3, [sp, #20]
 800a6e2:	e7c2      	b.n	800a66a <_dtoa_r+0x9f2>
 800a6e4:	9a02      	ldr	r2, [sp, #8]
 800a6e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a6ea:	eba5 030b 	sub.w	r3, r5, fp
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d021      	beq.n	800a736 <_dtoa_r+0xabe>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	220a      	movs	r2, #10
 800a6f6:	9904      	ldr	r1, [sp, #16]
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 f8d6 	bl	800a8aa <__multadd>
 800a6fe:	45b1      	cmp	r9, r6
 800a700:	9004      	str	r0, [sp, #16]
 800a702:	f04f 0300 	mov.w	r3, #0
 800a706:	f04f 020a 	mov.w	r2, #10
 800a70a:	4649      	mov	r1, r9
 800a70c:	4620      	mov	r0, r4
 800a70e:	d105      	bne.n	800a71c <_dtoa_r+0xaa4>
 800a710:	f000 f8cb 	bl	800a8aa <__multadd>
 800a714:	4681      	mov	r9, r0
 800a716:	4606      	mov	r6, r0
 800a718:	9505      	str	r5, [sp, #20]
 800a71a:	e776      	b.n	800a60a <_dtoa_r+0x992>
 800a71c:	f000 f8c5 	bl	800a8aa <__multadd>
 800a720:	4631      	mov	r1, r6
 800a722:	4681      	mov	r9, r0
 800a724:	2300      	movs	r3, #0
 800a726:	220a      	movs	r2, #10
 800a728:	4620      	mov	r0, r4
 800a72a:	f000 f8be 	bl	800a8aa <__multadd>
 800a72e:	4606      	mov	r6, r0
 800a730:	e7f2      	b.n	800a718 <_dtoa_r+0xaa0>
 800a732:	f04f 0900 	mov.w	r9, #0
 800a736:	2201      	movs	r2, #1
 800a738:	9904      	ldr	r1, [sp, #16]
 800a73a:	4620      	mov	r0, r4
 800a73c:	f000 fa2c 	bl	800ab98 <__lshift>
 800a740:	4639      	mov	r1, r7
 800a742:	9004      	str	r0, [sp, #16]
 800a744:	f000 fa7c 	bl	800ac40 <__mcmp>
 800a748:	2800      	cmp	r0, #0
 800a74a:	dcb6      	bgt.n	800a6ba <_dtoa_r+0xa42>
 800a74c:	d102      	bne.n	800a754 <_dtoa_r+0xadc>
 800a74e:	f018 0f01 	tst.w	r8, #1
 800a752:	d1b2      	bne.n	800a6ba <_dtoa_r+0xa42>
 800a754:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a758:	2b30      	cmp	r3, #48	; 0x30
 800a75a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a75e:	f47f af0a 	bne.w	800a576 <_dtoa_r+0x8fe>
 800a762:	4615      	mov	r5, r2
 800a764:	e7f6      	b.n	800a754 <_dtoa_r+0xadc>
 800a766:	4593      	cmp	fp, r2
 800a768:	d105      	bne.n	800a776 <_dtoa_r+0xafe>
 800a76a:	2331      	movs	r3, #49	; 0x31
 800a76c:	f10a 0a01 	add.w	sl, sl, #1
 800a770:	f88b 3000 	strb.w	r3, [fp]
 800a774:	e6ff      	b.n	800a576 <_dtoa_r+0x8fe>
 800a776:	4615      	mov	r5, r2
 800a778:	e79f      	b.n	800a6ba <_dtoa_r+0xa42>
 800a77a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a7e0 <_dtoa_r+0xb68>
 800a77e:	e007      	b.n	800a790 <_dtoa_r+0xb18>
 800a780:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a782:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a7e4 <_dtoa_r+0xb6c>
 800a786:	b11b      	cbz	r3, 800a790 <_dtoa_r+0xb18>
 800a788:	f10b 0308 	add.w	r3, fp, #8
 800a78c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	4658      	mov	r0, fp
 800a792:	b017      	add	sp, #92	; 0x5c
 800a794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a798:	9b06      	ldr	r3, [sp, #24]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	f77f ae35 	ble.w	800a40a <_dtoa_r+0x792>
 800a7a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7a2:	9307      	str	r3, [sp, #28]
 800a7a4:	e649      	b.n	800a43a <_dtoa_r+0x7c2>
 800a7a6:	9b02      	ldr	r3, [sp, #8]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	dc03      	bgt.n	800a7b4 <_dtoa_r+0xb3c>
 800a7ac:	9b06      	ldr	r3, [sp, #24]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	f73f aecc 	bgt.w	800a54c <_dtoa_r+0x8d4>
 800a7b4:	465d      	mov	r5, fp
 800a7b6:	4639      	mov	r1, r7
 800a7b8:	9804      	ldr	r0, [sp, #16]
 800a7ba:	f7ff f9d1 	bl	8009b60 <quorem>
 800a7be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a7c2:	f805 8b01 	strb.w	r8, [r5], #1
 800a7c6:	9a02      	ldr	r2, [sp, #8]
 800a7c8:	eba5 030b 	sub.w	r3, r5, fp
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	ddb0      	ble.n	800a732 <_dtoa_r+0xaba>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	220a      	movs	r2, #10
 800a7d4:	9904      	ldr	r1, [sp, #16]
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f000 f867 	bl	800a8aa <__multadd>
 800a7dc:	9004      	str	r0, [sp, #16]
 800a7de:	e7ea      	b.n	800a7b6 <_dtoa_r+0xb3e>
 800a7e0:	0800c86c 	.word	0x0800c86c
 800a7e4:	0800c890 	.word	0x0800c890

0800a7e8 <_localeconv_r>:
 800a7e8:	4b04      	ldr	r3, [pc, #16]	; (800a7fc <_localeconv_r+0x14>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6a18      	ldr	r0, [r3, #32]
 800a7ee:	4b04      	ldr	r3, [pc, #16]	; (800a800 <_localeconv_r+0x18>)
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	bf08      	it	eq
 800a7f4:	4618      	moveq	r0, r3
 800a7f6:	30f0      	adds	r0, #240	; 0xf0
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	2000000c 	.word	0x2000000c
 800a800:	20000070 	.word	0x20000070

0800a804 <malloc>:
 800a804:	4b02      	ldr	r3, [pc, #8]	; (800a810 <malloc+0xc>)
 800a806:	4601      	mov	r1, r0
 800a808:	6818      	ldr	r0, [r3, #0]
 800a80a:	f000 bb3b 	b.w	800ae84 <_malloc_r>
 800a80e:	bf00      	nop
 800a810:	2000000c 	.word	0x2000000c

0800a814 <_Balloc>:
 800a814:	b570      	push	{r4, r5, r6, lr}
 800a816:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a818:	4604      	mov	r4, r0
 800a81a:	460e      	mov	r6, r1
 800a81c:	b93d      	cbnz	r5, 800a82e <_Balloc+0x1a>
 800a81e:	2010      	movs	r0, #16
 800a820:	f7ff fff0 	bl	800a804 <malloc>
 800a824:	6260      	str	r0, [r4, #36]	; 0x24
 800a826:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a82a:	6005      	str	r5, [r0, #0]
 800a82c:	60c5      	str	r5, [r0, #12]
 800a82e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a830:	68eb      	ldr	r3, [r5, #12]
 800a832:	b183      	cbz	r3, 800a856 <_Balloc+0x42>
 800a834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a83c:	b9b8      	cbnz	r0, 800a86e <_Balloc+0x5a>
 800a83e:	2101      	movs	r1, #1
 800a840:	fa01 f506 	lsl.w	r5, r1, r6
 800a844:	1d6a      	adds	r2, r5, #5
 800a846:	0092      	lsls	r2, r2, #2
 800a848:	4620      	mov	r0, r4
 800a84a:	f000 fabf 	bl	800adcc <_calloc_r>
 800a84e:	b160      	cbz	r0, 800a86a <_Balloc+0x56>
 800a850:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a854:	e00e      	b.n	800a874 <_Balloc+0x60>
 800a856:	2221      	movs	r2, #33	; 0x21
 800a858:	2104      	movs	r1, #4
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 fab6 	bl	800adcc <_calloc_r>
 800a860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a862:	60e8      	str	r0, [r5, #12]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e4      	bne.n	800a834 <_Balloc+0x20>
 800a86a:	2000      	movs	r0, #0
 800a86c:	bd70      	pop	{r4, r5, r6, pc}
 800a86e:	6802      	ldr	r2, [r0, #0]
 800a870:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a874:	2300      	movs	r3, #0
 800a876:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a87a:	e7f7      	b.n	800a86c <_Balloc+0x58>

0800a87c <_Bfree>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a880:	4606      	mov	r6, r0
 800a882:	460d      	mov	r5, r1
 800a884:	b93c      	cbnz	r4, 800a896 <_Bfree+0x1a>
 800a886:	2010      	movs	r0, #16
 800a888:	f7ff ffbc 	bl	800a804 <malloc>
 800a88c:	6270      	str	r0, [r6, #36]	; 0x24
 800a88e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a892:	6004      	str	r4, [r0, #0]
 800a894:	60c4      	str	r4, [r0, #12]
 800a896:	b13d      	cbz	r5, 800a8a8 <_Bfree+0x2c>
 800a898:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a89a:	686a      	ldr	r2, [r5, #4]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8a2:	6029      	str	r1, [r5, #0]
 800a8a4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a8a8:	bd70      	pop	{r4, r5, r6, pc}

0800a8aa <__multadd>:
 800a8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ae:	690d      	ldr	r5, [r1, #16]
 800a8b0:	461f      	mov	r7, r3
 800a8b2:	4606      	mov	r6, r0
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	f101 0c14 	add.w	ip, r1, #20
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f8dc 0000 	ldr.w	r0, [ip]
 800a8c0:	b281      	uxth	r1, r0
 800a8c2:	fb02 7101 	mla	r1, r2, r1, r7
 800a8c6:	0c0f      	lsrs	r7, r1, #16
 800a8c8:	0c00      	lsrs	r0, r0, #16
 800a8ca:	fb02 7000 	mla	r0, r2, r0, r7
 800a8ce:	b289      	uxth	r1, r1
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a8d6:	429d      	cmp	r5, r3
 800a8d8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a8dc:	f84c 1b04 	str.w	r1, [ip], #4
 800a8e0:	dcec      	bgt.n	800a8bc <__multadd+0x12>
 800a8e2:	b1d7      	cbz	r7, 800a91a <__multadd+0x70>
 800a8e4:	68a3      	ldr	r3, [r4, #8]
 800a8e6:	42ab      	cmp	r3, r5
 800a8e8:	dc12      	bgt.n	800a910 <__multadd+0x66>
 800a8ea:	6861      	ldr	r1, [r4, #4]
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	3101      	adds	r1, #1
 800a8f0:	f7ff ff90 	bl	800a814 <_Balloc>
 800a8f4:	6922      	ldr	r2, [r4, #16]
 800a8f6:	3202      	adds	r2, #2
 800a8f8:	f104 010c 	add.w	r1, r4, #12
 800a8fc:	4680      	mov	r8, r0
 800a8fe:	0092      	lsls	r2, r2, #2
 800a900:	300c      	adds	r0, #12
 800a902:	f7fe fc89 	bl	8009218 <memcpy>
 800a906:	4621      	mov	r1, r4
 800a908:	4630      	mov	r0, r6
 800a90a:	f7ff ffb7 	bl	800a87c <_Bfree>
 800a90e:	4644      	mov	r4, r8
 800a910:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a914:	3501      	adds	r5, #1
 800a916:	615f      	str	r7, [r3, #20]
 800a918:	6125      	str	r5, [r4, #16]
 800a91a:	4620      	mov	r0, r4
 800a91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a920 <__hi0bits>:
 800a920:	0c02      	lsrs	r2, r0, #16
 800a922:	0412      	lsls	r2, r2, #16
 800a924:	4603      	mov	r3, r0
 800a926:	b9b2      	cbnz	r2, 800a956 <__hi0bits+0x36>
 800a928:	0403      	lsls	r3, r0, #16
 800a92a:	2010      	movs	r0, #16
 800a92c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a930:	bf04      	itt	eq
 800a932:	021b      	lsleq	r3, r3, #8
 800a934:	3008      	addeq	r0, #8
 800a936:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a93a:	bf04      	itt	eq
 800a93c:	011b      	lsleq	r3, r3, #4
 800a93e:	3004      	addeq	r0, #4
 800a940:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a944:	bf04      	itt	eq
 800a946:	009b      	lsleq	r3, r3, #2
 800a948:	3002      	addeq	r0, #2
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	db06      	blt.n	800a95c <__hi0bits+0x3c>
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	d503      	bpl.n	800a95a <__hi0bits+0x3a>
 800a952:	3001      	adds	r0, #1
 800a954:	4770      	bx	lr
 800a956:	2000      	movs	r0, #0
 800a958:	e7e8      	b.n	800a92c <__hi0bits+0xc>
 800a95a:	2020      	movs	r0, #32
 800a95c:	4770      	bx	lr

0800a95e <__lo0bits>:
 800a95e:	6803      	ldr	r3, [r0, #0]
 800a960:	f013 0207 	ands.w	r2, r3, #7
 800a964:	4601      	mov	r1, r0
 800a966:	d00b      	beq.n	800a980 <__lo0bits+0x22>
 800a968:	07da      	lsls	r2, r3, #31
 800a96a:	d423      	bmi.n	800a9b4 <__lo0bits+0x56>
 800a96c:	0798      	lsls	r0, r3, #30
 800a96e:	bf49      	itett	mi
 800a970:	085b      	lsrmi	r3, r3, #1
 800a972:	089b      	lsrpl	r3, r3, #2
 800a974:	2001      	movmi	r0, #1
 800a976:	600b      	strmi	r3, [r1, #0]
 800a978:	bf5c      	itt	pl
 800a97a:	600b      	strpl	r3, [r1, #0]
 800a97c:	2002      	movpl	r0, #2
 800a97e:	4770      	bx	lr
 800a980:	b298      	uxth	r0, r3
 800a982:	b9a8      	cbnz	r0, 800a9b0 <__lo0bits+0x52>
 800a984:	0c1b      	lsrs	r3, r3, #16
 800a986:	2010      	movs	r0, #16
 800a988:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a98c:	bf04      	itt	eq
 800a98e:	0a1b      	lsreq	r3, r3, #8
 800a990:	3008      	addeq	r0, #8
 800a992:	071a      	lsls	r2, r3, #28
 800a994:	bf04      	itt	eq
 800a996:	091b      	lsreq	r3, r3, #4
 800a998:	3004      	addeq	r0, #4
 800a99a:	079a      	lsls	r2, r3, #30
 800a99c:	bf04      	itt	eq
 800a99e:	089b      	lsreq	r3, r3, #2
 800a9a0:	3002      	addeq	r0, #2
 800a9a2:	07da      	lsls	r2, r3, #31
 800a9a4:	d402      	bmi.n	800a9ac <__lo0bits+0x4e>
 800a9a6:	085b      	lsrs	r3, r3, #1
 800a9a8:	d006      	beq.n	800a9b8 <__lo0bits+0x5a>
 800a9aa:	3001      	adds	r0, #1
 800a9ac:	600b      	str	r3, [r1, #0]
 800a9ae:	4770      	bx	lr
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	e7e9      	b.n	800a988 <__lo0bits+0x2a>
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	4770      	bx	lr
 800a9b8:	2020      	movs	r0, #32
 800a9ba:	4770      	bx	lr

0800a9bc <__i2b>:
 800a9bc:	b510      	push	{r4, lr}
 800a9be:	460c      	mov	r4, r1
 800a9c0:	2101      	movs	r1, #1
 800a9c2:	f7ff ff27 	bl	800a814 <_Balloc>
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	6144      	str	r4, [r0, #20]
 800a9ca:	6102      	str	r2, [r0, #16]
 800a9cc:	bd10      	pop	{r4, pc}

0800a9ce <__multiply>:
 800a9ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d2:	4614      	mov	r4, r2
 800a9d4:	690a      	ldr	r2, [r1, #16]
 800a9d6:	6923      	ldr	r3, [r4, #16]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	bfb8      	it	lt
 800a9dc:	460b      	movlt	r3, r1
 800a9de:	4688      	mov	r8, r1
 800a9e0:	bfbc      	itt	lt
 800a9e2:	46a0      	movlt	r8, r4
 800a9e4:	461c      	movlt	r4, r3
 800a9e6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a9ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9f6:	eb07 0609 	add.w	r6, r7, r9
 800a9fa:	42b3      	cmp	r3, r6
 800a9fc:	bfb8      	it	lt
 800a9fe:	3101      	addlt	r1, #1
 800aa00:	f7ff ff08 	bl	800a814 <_Balloc>
 800aa04:	f100 0514 	add.w	r5, r0, #20
 800aa08:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800aa0c:	462b      	mov	r3, r5
 800aa0e:	2200      	movs	r2, #0
 800aa10:	4573      	cmp	r3, lr
 800aa12:	d316      	bcc.n	800aa42 <__multiply+0x74>
 800aa14:	f104 0214 	add.w	r2, r4, #20
 800aa18:	f108 0114 	add.w	r1, r8, #20
 800aa1c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800aa20:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	9b00      	ldr	r3, [sp, #0]
 800aa28:	9201      	str	r2, [sp, #4]
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d80c      	bhi.n	800aa48 <__multiply+0x7a>
 800aa2e:	2e00      	cmp	r6, #0
 800aa30:	dd03      	ble.n	800aa3a <__multiply+0x6c>
 800aa32:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d05d      	beq.n	800aaf6 <__multiply+0x128>
 800aa3a:	6106      	str	r6, [r0, #16]
 800aa3c:	b003      	add	sp, #12
 800aa3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa42:	f843 2b04 	str.w	r2, [r3], #4
 800aa46:	e7e3      	b.n	800aa10 <__multiply+0x42>
 800aa48:	f8b2 b000 	ldrh.w	fp, [r2]
 800aa4c:	f1bb 0f00 	cmp.w	fp, #0
 800aa50:	d023      	beq.n	800aa9a <__multiply+0xcc>
 800aa52:	4689      	mov	r9, r1
 800aa54:	46ac      	mov	ip, r5
 800aa56:	f04f 0800 	mov.w	r8, #0
 800aa5a:	f859 4b04 	ldr.w	r4, [r9], #4
 800aa5e:	f8dc a000 	ldr.w	sl, [ip]
 800aa62:	b2a3      	uxth	r3, r4
 800aa64:	fa1f fa8a 	uxth.w	sl, sl
 800aa68:	fb0b a303 	mla	r3, fp, r3, sl
 800aa6c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa70:	f8dc 4000 	ldr.w	r4, [ip]
 800aa74:	4443      	add	r3, r8
 800aa76:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa7a:	fb0b 840a 	mla	r4, fp, sl, r8
 800aa7e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800aa82:	46e2      	mov	sl, ip
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa8a:	454f      	cmp	r7, r9
 800aa8c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa90:	f84a 3b04 	str.w	r3, [sl], #4
 800aa94:	d82b      	bhi.n	800aaee <__multiply+0x120>
 800aa96:	f8cc 8004 	str.w	r8, [ip, #4]
 800aa9a:	9b01      	ldr	r3, [sp, #4]
 800aa9c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800aaa0:	3204      	adds	r2, #4
 800aaa2:	f1ba 0f00 	cmp.w	sl, #0
 800aaa6:	d020      	beq.n	800aaea <__multiply+0x11c>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	4689      	mov	r9, r1
 800aaac:	46a8      	mov	r8, r5
 800aaae:	f04f 0b00 	mov.w	fp, #0
 800aab2:	f8b9 c000 	ldrh.w	ip, [r9]
 800aab6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800aaba:	fb0a 440c 	mla	r4, sl, ip, r4
 800aabe:	445c      	add	r4, fp
 800aac0:	46c4      	mov	ip, r8
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aac8:	f84c 3b04 	str.w	r3, [ip], #4
 800aacc:	f859 3b04 	ldr.w	r3, [r9], #4
 800aad0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800aad4:	0c1b      	lsrs	r3, r3, #16
 800aad6:	fb0a b303 	mla	r3, sl, r3, fp
 800aada:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aade:	454f      	cmp	r7, r9
 800aae0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aae4:	d805      	bhi.n	800aaf2 <__multiply+0x124>
 800aae6:	f8c8 3004 	str.w	r3, [r8, #4]
 800aaea:	3504      	adds	r5, #4
 800aaec:	e79b      	b.n	800aa26 <__multiply+0x58>
 800aaee:	46d4      	mov	ip, sl
 800aaf0:	e7b3      	b.n	800aa5a <__multiply+0x8c>
 800aaf2:	46e0      	mov	r8, ip
 800aaf4:	e7dd      	b.n	800aab2 <__multiply+0xe4>
 800aaf6:	3e01      	subs	r6, #1
 800aaf8:	e799      	b.n	800aa2e <__multiply+0x60>
	...

0800aafc <__pow5mult>:
 800aafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab00:	4615      	mov	r5, r2
 800ab02:	f012 0203 	ands.w	r2, r2, #3
 800ab06:	4606      	mov	r6, r0
 800ab08:	460f      	mov	r7, r1
 800ab0a:	d007      	beq.n	800ab1c <__pow5mult+0x20>
 800ab0c:	3a01      	subs	r2, #1
 800ab0e:	4c21      	ldr	r4, [pc, #132]	; (800ab94 <__pow5mult+0x98>)
 800ab10:	2300      	movs	r3, #0
 800ab12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab16:	f7ff fec8 	bl	800a8aa <__multadd>
 800ab1a:	4607      	mov	r7, r0
 800ab1c:	10ad      	asrs	r5, r5, #2
 800ab1e:	d035      	beq.n	800ab8c <__pow5mult+0x90>
 800ab20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab22:	b93c      	cbnz	r4, 800ab34 <__pow5mult+0x38>
 800ab24:	2010      	movs	r0, #16
 800ab26:	f7ff fe6d 	bl	800a804 <malloc>
 800ab2a:	6270      	str	r0, [r6, #36]	; 0x24
 800ab2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab30:	6004      	str	r4, [r0, #0]
 800ab32:	60c4      	str	r4, [r0, #12]
 800ab34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab3c:	b94c      	cbnz	r4, 800ab52 <__pow5mult+0x56>
 800ab3e:	f240 2171 	movw	r1, #625	; 0x271
 800ab42:	4630      	mov	r0, r6
 800ab44:	f7ff ff3a 	bl	800a9bc <__i2b>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab4e:	4604      	mov	r4, r0
 800ab50:	6003      	str	r3, [r0, #0]
 800ab52:	f04f 0800 	mov.w	r8, #0
 800ab56:	07eb      	lsls	r3, r5, #31
 800ab58:	d50a      	bpl.n	800ab70 <__pow5mult+0x74>
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	4622      	mov	r2, r4
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f7ff ff35 	bl	800a9ce <__multiply>
 800ab64:	4639      	mov	r1, r7
 800ab66:	4681      	mov	r9, r0
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f7ff fe87 	bl	800a87c <_Bfree>
 800ab6e:	464f      	mov	r7, r9
 800ab70:	106d      	asrs	r5, r5, #1
 800ab72:	d00b      	beq.n	800ab8c <__pow5mult+0x90>
 800ab74:	6820      	ldr	r0, [r4, #0]
 800ab76:	b938      	cbnz	r0, 800ab88 <__pow5mult+0x8c>
 800ab78:	4622      	mov	r2, r4
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f7ff ff26 	bl	800a9ce <__multiply>
 800ab82:	6020      	str	r0, [r4, #0]
 800ab84:	f8c0 8000 	str.w	r8, [r0]
 800ab88:	4604      	mov	r4, r0
 800ab8a:	e7e4      	b.n	800ab56 <__pow5mult+0x5a>
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab92:	bf00      	nop
 800ab94:	0800c990 	.word	0x0800c990

0800ab98 <__lshift>:
 800ab98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aba2:	6923      	ldr	r3, [r4, #16]
 800aba4:	6849      	ldr	r1, [r1, #4]
 800aba6:	eb0a 0903 	add.w	r9, sl, r3
 800abaa:	68a3      	ldr	r3, [r4, #8]
 800abac:	4607      	mov	r7, r0
 800abae:	4616      	mov	r6, r2
 800abb0:	f109 0501 	add.w	r5, r9, #1
 800abb4:	42ab      	cmp	r3, r5
 800abb6:	db32      	blt.n	800ac1e <__lshift+0x86>
 800abb8:	4638      	mov	r0, r7
 800abba:	f7ff fe2b 	bl	800a814 <_Balloc>
 800abbe:	2300      	movs	r3, #0
 800abc0:	4680      	mov	r8, r0
 800abc2:	f100 0114 	add.w	r1, r0, #20
 800abc6:	461a      	mov	r2, r3
 800abc8:	4553      	cmp	r3, sl
 800abca:	db2b      	blt.n	800ac24 <__lshift+0x8c>
 800abcc:	6920      	ldr	r0, [r4, #16]
 800abce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abd2:	f104 0314 	add.w	r3, r4, #20
 800abd6:	f016 021f 	ands.w	r2, r6, #31
 800abda:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abde:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abe2:	d025      	beq.n	800ac30 <__lshift+0x98>
 800abe4:	f1c2 0e20 	rsb	lr, r2, #32
 800abe8:	2000      	movs	r0, #0
 800abea:	681e      	ldr	r6, [r3, #0]
 800abec:	468a      	mov	sl, r1
 800abee:	4096      	lsls	r6, r2
 800abf0:	4330      	orrs	r0, r6
 800abf2:	f84a 0b04 	str.w	r0, [sl], #4
 800abf6:	f853 0b04 	ldr.w	r0, [r3], #4
 800abfa:	459c      	cmp	ip, r3
 800abfc:	fa20 f00e 	lsr.w	r0, r0, lr
 800ac00:	d814      	bhi.n	800ac2c <__lshift+0x94>
 800ac02:	6048      	str	r0, [r1, #4]
 800ac04:	b108      	cbz	r0, 800ac0a <__lshift+0x72>
 800ac06:	f109 0502 	add.w	r5, r9, #2
 800ac0a:	3d01      	subs	r5, #1
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	f8c8 5010 	str.w	r5, [r8, #16]
 800ac12:	4621      	mov	r1, r4
 800ac14:	f7ff fe32 	bl	800a87c <_Bfree>
 800ac18:	4640      	mov	r0, r8
 800ac1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1e:	3101      	adds	r1, #1
 800ac20:	005b      	lsls	r3, r3, #1
 800ac22:	e7c7      	b.n	800abb4 <__lshift+0x1c>
 800ac24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	e7cd      	b.n	800abc8 <__lshift+0x30>
 800ac2c:	4651      	mov	r1, sl
 800ac2e:	e7dc      	b.n	800abea <__lshift+0x52>
 800ac30:	3904      	subs	r1, #4
 800ac32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac36:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac3a:	459c      	cmp	ip, r3
 800ac3c:	d8f9      	bhi.n	800ac32 <__lshift+0x9a>
 800ac3e:	e7e4      	b.n	800ac0a <__lshift+0x72>

0800ac40 <__mcmp>:
 800ac40:	6903      	ldr	r3, [r0, #16]
 800ac42:	690a      	ldr	r2, [r1, #16]
 800ac44:	1a9b      	subs	r3, r3, r2
 800ac46:	b530      	push	{r4, r5, lr}
 800ac48:	d10c      	bne.n	800ac64 <__mcmp+0x24>
 800ac4a:	0092      	lsls	r2, r2, #2
 800ac4c:	3014      	adds	r0, #20
 800ac4e:	3114      	adds	r1, #20
 800ac50:	1884      	adds	r4, r0, r2
 800ac52:	4411      	add	r1, r2
 800ac54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac5c:	4295      	cmp	r5, r2
 800ac5e:	d003      	beq.n	800ac68 <__mcmp+0x28>
 800ac60:	d305      	bcc.n	800ac6e <__mcmp+0x2e>
 800ac62:	2301      	movs	r3, #1
 800ac64:	4618      	mov	r0, r3
 800ac66:	bd30      	pop	{r4, r5, pc}
 800ac68:	42a0      	cmp	r0, r4
 800ac6a:	d3f3      	bcc.n	800ac54 <__mcmp+0x14>
 800ac6c:	e7fa      	b.n	800ac64 <__mcmp+0x24>
 800ac6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac72:	e7f7      	b.n	800ac64 <__mcmp+0x24>

0800ac74 <__mdiff>:
 800ac74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac78:	460d      	mov	r5, r1
 800ac7a:	4607      	mov	r7, r0
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	4628      	mov	r0, r5
 800ac80:	4614      	mov	r4, r2
 800ac82:	f7ff ffdd 	bl	800ac40 <__mcmp>
 800ac86:	1e06      	subs	r6, r0, #0
 800ac88:	d108      	bne.n	800ac9c <__mdiff+0x28>
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	4638      	mov	r0, r7
 800ac8e:	f7ff fdc1 	bl	800a814 <_Balloc>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ac98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9c:	bfa4      	itt	ge
 800ac9e:	4623      	movge	r3, r4
 800aca0:	462c      	movge	r4, r5
 800aca2:	4638      	mov	r0, r7
 800aca4:	6861      	ldr	r1, [r4, #4]
 800aca6:	bfa6      	itte	ge
 800aca8:	461d      	movge	r5, r3
 800acaa:	2600      	movge	r6, #0
 800acac:	2601      	movlt	r6, #1
 800acae:	f7ff fdb1 	bl	800a814 <_Balloc>
 800acb2:	692b      	ldr	r3, [r5, #16]
 800acb4:	60c6      	str	r6, [r0, #12]
 800acb6:	6926      	ldr	r6, [r4, #16]
 800acb8:	f105 0914 	add.w	r9, r5, #20
 800acbc:	f104 0214 	add.w	r2, r4, #20
 800acc0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800acc4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800acc8:	f100 0514 	add.w	r5, r0, #20
 800accc:	f04f 0e00 	mov.w	lr, #0
 800acd0:	f852 ab04 	ldr.w	sl, [r2], #4
 800acd4:	f859 4b04 	ldr.w	r4, [r9], #4
 800acd8:	fa1e f18a 	uxtah	r1, lr, sl
 800acdc:	b2a3      	uxth	r3, r4
 800acde:	1ac9      	subs	r1, r1, r3
 800ace0:	0c23      	lsrs	r3, r4, #16
 800ace2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ace6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800acea:	b289      	uxth	r1, r1
 800acec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800acf0:	45c8      	cmp	r8, r9
 800acf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800acf6:	4694      	mov	ip, r2
 800acf8:	f845 3b04 	str.w	r3, [r5], #4
 800acfc:	d8e8      	bhi.n	800acd0 <__mdiff+0x5c>
 800acfe:	45bc      	cmp	ip, r7
 800ad00:	d304      	bcc.n	800ad0c <__mdiff+0x98>
 800ad02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ad06:	b183      	cbz	r3, 800ad2a <__mdiff+0xb6>
 800ad08:	6106      	str	r6, [r0, #16]
 800ad0a:	e7c5      	b.n	800ac98 <__mdiff+0x24>
 800ad0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ad10:	fa1e f381 	uxtah	r3, lr, r1
 800ad14:	141a      	asrs	r2, r3, #16
 800ad16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad20:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ad24:	f845 3b04 	str.w	r3, [r5], #4
 800ad28:	e7e9      	b.n	800acfe <__mdiff+0x8a>
 800ad2a:	3e01      	subs	r6, #1
 800ad2c:	e7e9      	b.n	800ad02 <__mdiff+0x8e>

0800ad2e <__d2b>:
 800ad2e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad32:	460e      	mov	r6, r1
 800ad34:	2101      	movs	r1, #1
 800ad36:	ec59 8b10 	vmov	r8, r9, d0
 800ad3a:	4615      	mov	r5, r2
 800ad3c:	f7ff fd6a 	bl	800a814 <_Balloc>
 800ad40:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ad44:	4607      	mov	r7, r0
 800ad46:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad4a:	bb34      	cbnz	r4, 800ad9a <__d2b+0x6c>
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	f1b8 0300 	subs.w	r3, r8, #0
 800ad52:	d027      	beq.n	800ada4 <__d2b+0x76>
 800ad54:	a802      	add	r0, sp, #8
 800ad56:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ad5a:	f7ff fe00 	bl	800a95e <__lo0bits>
 800ad5e:	9900      	ldr	r1, [sp, #0]
 800ad60:	b1f0      	cbz	r0, 800ada0 <__d2b+0x72>
 800ad62:	9a01      	ldr	r2, [sp, #4]
 800ad64:	f1c0 0320 	rsb	r3, r0, #32
 800ad68:	fa02 f303 	lsl.w	r3, r2, r3
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	40c2      	lsrs	r2, r0
 800ad70:	617b      	str	r3, [r7, #20]
 800ad72:	9201      	str	r2, [sp, #4]
 800ad74:	9b01      	ldr	r3, [sp, #4]
 800ad76:	61bb      	str	r3, [r7, #24]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bf14      	ite	ne
 800ad7c:	2102      	movne	r1, #2
 800ad7e:	2101      	moveq	r1, #1
 800ad80:	6139      	str	r1, [r7, #16]
 800ad82:	b1c4      	cbz	r4, 800adb6 <__d2b+0x88>
 800ad84:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ad88:	4404      	add	r4, r0
 800ad8a:	6034      	str	r4, [r6, #0]
 800ad8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad90:	6028      	str	r0, [r5, #0]
 800ad92:	4638      	mov	r0, r7
 800ad94:	b003      	add	sp, #12
 800ad96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad9e:	e7d5      	b.n	800ad4c <__d2b+0x1e>
 800ada0:	6179      	str	r1, [r7, #20]
 800ada2:	e7e7      	b.n	800ad74 <__d2b+0x46>
 800ada4:	a801      	add	r0, sp, #4
 800ada6:	f7ff fdda 	bl	800a95e <__lo0bits>
 800adaa:	9b01      	ldr	r3, [sp, #4]
 800adac:	617b      	str	r3, [r7, #20]
 800adae:	2101      	movs	r1, #1
 800adb0:	6139      	str	r1, [r7, #16]
 800adb2:	3020      	adds	r0, #32
 800adb4:	e7e5      	b.n	800ad82 <__d2b+0x54>
 800adb6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800adba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800adbe:	6030      	str	r0, [r6, #0]
 800adc0:	6918      	ldr	r0, [r3, #16]
 800adc2:	f7ff fdad 	bl	800a920 <__hi0bits>
 800adc6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800adca:	e7e1      	b.n	800ad90 <__d2b+0x62>

0800adcc <_calloc_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	fb02 f401 	mul.w	r4, r2, r1
 800add2:	4621      	mov	r1, r4
 800add4:	f000 f856 	bl	800ae84 <_malloc_r>
 800add8:	4605      	mov	r5, r0
 800adda:	b118      	cbz	r0, 800ade4 <_calloc_r+0x18>
 800addc:	4622      	mov	r2, r4
 800adde:	2100      	movs	r1, #0
 800ade0:	f7fe fa25 	bl	800922e <memset>
 800ade4:	4628      	mov	r0, r5
 800ade6:	bd38      	pop	{r3, r4, r5, pc}

0800ade8 <_free_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4605      	mov	r5, r0
 800adec:	2900      	cmp	r1, #0
 800adee:	d045      	beq.n	800ae7c <_free_r+0x94>
 800adf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adf4:	1f0c      	subs	r4, r1, #4
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	bfb8      	it	lt
 800adfa:	18e4      	addlt	r4, r4, r3
 800adfc:	f000 fa29 	bl	800b252 <__malloc_lock>
 800ae00:	4a1f      	ldr	r2, [pc, #124]	; (800ae80 <_free_r+0x98>)
 800ae02:	6813      	ldr	r3, [r2, #0]
 800ae04:	4610      	mov	r0, r2
 800ae06:	b933      	cbnz	r3, 800ae16 <_free_r+0x2e>
 800ae08:	6063      	str	r3, [r4, #4]
 800ae0a:	6014      	str	r4, [r2, #0]
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae12:	f000 ba1f 	b.w	800b254 <__malloc_unlock>
 800ae16:	42a3      	cmp	r3, r4
 800ae18:	d90c      	bls.n	800ae34 <_free_r+0x4c>
 800ae1a:	6821      	ldr	r1, [r4, #0]
 800ae1c:	1862      	adds	r2, r4, r1
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	bf04      	itt	eq
 800ae22:	681a      	ldreq	r2, [r3, #0]
 800ae24:	685b      	ldreq	r3, [r3, #4]
 800ae26:	6063      	str	r3, [r4, #4]
 800ae28:	bf04      	itt	eq
 800ae2a:	1852      	addeq	r2, r2, r1
 800ae2c:	6022      	streq	r2, [r4, #0]
 800ae2e:	6004      	str	r4, [r0, #0]
 800ae30:	e7ec      	b.n	800ae0c <_free_r+0x24>
 800ae32:	4613      	mov	r3, r2
 800ae34:	685a      	ldr	r2, [r3, #4]
 800ae36:	b10a      	cbz	r2, 800ae3c <_free_r+0x54>
 800ae38:	42a2      	cmp	r2, r4
 800ae3a:	d9fa      	bls.n	800ae32 <_free_r+0x4a>
 800ae3c:	6819      	ldr	r1, [r3, #0]
 800ae3e:	1858      	adds	r0, r3, r1
 800ae40:	42a0      	cmp	r0, r4
 800ae42:	d10b      	bne.n	800ae5c <_free_r+0x74>
 800ae44:	6820      	ldr	r0, [r4, #0]
 800ae46:	4401      	add	r1, r0
 800ae48:	1858      	adds	r0, r3, r1
 800ae4a:	4282      	cmp	r2, r0
 800ae4c:	6019      	str	r1, [r3, #0]
 800ae4e:	d1dd      	bne.n	800ae0c <_free_r+0x24>
 800ae50:	6810      	ldr	r0, [r2, #0]
 800ae52:	6852      	ldr	r2, [r2, #4]
 800ae54:	605a      	str	r2, [r3, #4]
 800ae56:	4401      	add	r1, r0
 800ae58:	6019      	str	r1, [r3, #0]
 800ae5a:	e7d7      	b.n	800ae0c <_free_r+0x24>
 800ae5c:	d902      	bls.n	800ae64 <_free_r+0x7c>
 800ae5e:	230c      	movs	r3, #12
 800ae60:	602b      	str	r3, [r5, #0]
 800ae62:	e7d3      	b.n	800ae0c <_free_r+0x24>
 800ae64:	6820      	ldr	r0, [r4, #0]
 800ae66:	1821      	adds	r1, r4, r0
 800ae68:	428a      	cmp	r2, r1
 800ae6a:	bf04      	itt	eq
 800ae6c:	6811      	ldreq	r1, [r2, #0]
 800ae6e:	6852      	ldreq	r2, [r2, #4]
 800ae70:	6062      	str	r2, [r4, #4]
 800ae72:	bf04      	itt	eq
 800ae74:	1809      	addeq	r1, r1, r0
 800ae76:	6021      	streq	r1, [r4, #0]
 800ae78:	605c      	str	r4, [r3, #4]
 800ae7a:	e7c7      	b.n	800ae0c <_free_r+0x24>
 800ae7c:	bd38      	pop	{r3, r4, r5, pc}
 800ae7e:	bf00      	nop
 800ae80:	20000200 	.word	0x20000200

0800ae84 <_malloc_r>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	1ccd      	adds	r5, r1, #3
 800ae88:	f025 0503 	bic.w	r5, r5, #3
 800ae8c:	3508      	adds	r5, #8
 800ae8e:	2d0c      	cmp	r5, #12
 800ae90:	bf38      	it	cc
 800ae92:	250c      	movcc	r5, #12
 800ae94:	2d00      	cmp	r5, #0
 800ae96:	4606      	mov	r6, r0
 800ae98:	db01      	blt.n	800ae9e <_malloc_r+0x1a>
 800ae9a:	42a9      	cmp	r1, r5
 800ae9c:	d903      	bls.n	800aea6 <_malloc_r+0x22>
 800ae9e:	230c      	movs	r3, #12
 800aea0:	6033      	str	r3, [r6, #0]
 800aea2:	2000      	movs	r0, #0
 800aea4:	bd70      	pop	{r4, r5, r6, pc}
 800aea6:	f000 f9d4 	bl	800b252 <__malloc_lock>
 800aeaa:	4a21      	ldr	r2, [pc, #132]	; (800af30 <_malloc_r+0xac>)
 800aeac:	6814      	ldr	r4, [r2, #0]
 800aeae:	4621      	mov	r1, r4
 800aeb0:	b991      	cbnz	r1, 800aed8 <_malloc_r+0x54>
 800aeb2:	4c20      	ldr	r4, [pc, #128]	; (800af34 <_malloc_r+0xb0>)
 800aeb4:	6823      	ldr	r3, [r4, #0]
 800aeb6:	b91b      	cbnz	r3, 800aec0 <_malloc_r+0x3c>
 800aeb8:	4630      	mov	r0, r6
 800aeba:	f000 f98f 	bl	800b1dc <_sbrk_r>
 800aebe:	6020      	str	r0, [r4, #0]
 800aec0:	4629      	mov	r1, r5
 800aec2:	4630      	mov	r0, r6
 800aec4:	f000 f98a 	bl	800b1dc <_sbrk_r>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d124      	bne.n	800af16 <_malloc_r+0x92>
 800aecc:	230c      	movs	r3, #12
 800aece:	6033      	str	r3, [r6, #0]
 800aed0:	4630      	mov	r0, r6
 800aed2:	f000 f9bf 	bl	800b254 <__malloc_unlock>
 800aed6:	e7e4      	b.n	800aea2 <_malloc_r+0x1e>
 800aed8:	680b      	ldr	r3, [r1, #0]
 800aeda:	1b5b      	subs	r3, r3, r5
 800aedc:	d418      	bmi.n	800af10 <_malloc_r+0x8c>
 800aede:	2b0b      	cmp	r3, #11
 800aee0:	d90f      	bls.n	800af02 <_malloc_r+0x7e>
 800aee2:	600b      	str	r3, [r1, #0]
 800aee4:	50cd      	str	r5, [r1, r3]
 800aee6:	18cc      	adds	r4, r1, r3
 800aee8:	4630      	mov	r0, r6
 800aeea:	f000 f9b3 	bl	800b254 <__malloc_unlock>
 800aeee:	f104 000b 	add.w	r0, r4, #11
 800aef2:	1d23      	adds	r3, r4, #4
 800aef4:	f020 0007 	bic.w	r0, r0, #7
 800aef8:	1ac3      	subs	r3, r0, r3
 800aefa:	d0d3      	beq.n	800aea4 <_malloc_r+0x20>
 800aefc:	425a      	negs	r2, r3
 800aefe:	50e2      	str	r2, [r4, r3]
 800af00:	e7d0      	b.n	800aea4 <_malloc_r+0x20>
 800af02:	428c      	cmp	r4, r1
 800af04:	684b      	ldr	r3, [r1, #4]
 800af06:	bf16      	itet	ne
 800af08:	6063      	strne	r3, [r4, #4]
 800af0a:	6013      	streq	r3, [r2, #0]
 800af0c:	460c      	movne	r4, r1
 800af0e:	e7eb      	b.n	800aee8 <_malloc_r+0x64>
 800af10:	460c      	mov	r4, r1
 800af12:	6849      	ldr	r1, [r1, #4]
 800af14:	e7cc      	b.n	800aeb0 <_malloc_r+0x2c>
 800af16:	1cc4      	adds	r4, r0, #3
 800af18:	f024 0403 	bic.w	r4, r4, #3
 800af1c:	42a0      	cmp	r0, r4
 800af1e:	d005      	beq.n	800af2c <_malloc_r+0xa8>
 800af20:	1a21      	subs	r1, r4, r0
 800af22:	4630      	mov	r0, r6
 800af24:	f000 f95a 	bl	800b1dc <_sbrk_r>
 800af28:	3001      	adds	r0, #1
 800af2a:	d0cf      	beq.n	800aecc <_malloc_r+0x48>
 800af2c:	6025      	str	r5, [r4, #0]
 800af2e:	e7db      	b.n	800aee8 <_malloc_r+0x64>
 800af30:	20000200 	.word	0x20000200
 800af34:	20000204 	.word	0x20000204

0800af38 <__ssputs_r>:
 800af38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af3c:	688e      	ldr	r6, [r1, #8]
 800af3e:	429e      	cmp	r6, r3
 800af40:	4682      	mov	sl, r0
 800af42:	460c      	mov	r4, r1
 800af44:	4690      	mov	r8, r2
 800af46:	4699      	mov	r9, r3
 800af48:	d837      	bhi.n	800afba <__ssputs_r+0x82>
 800af4a:	898a      	ldrh	r2, [r1, #12]
 800af4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af50:	d031      	beq.n	800afb6 <__ssputs_r+0x7e>
 800af52:	6825      	ldr	r5, [r4, #0]
 800af54:	6909      	ldr	r1, [r1, #16]
 800af56:	1a6f      	subs	r7, r5, r1
 800af58:	6965      	ldr	r5, [r4, #20]
 800af5a:	2302      	movs	r3, #2
 800af5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af60:	fb95 f5f3 	sdiv	r5, r5, r3
 800af64:	f109 0301 	add.w	r3, r9, #1
 800af68:	443b      	add	r3, r7
 800af6a:	429d      	cmp	r5, r3
 800af6c:	bf38      	it	cc
 800af6e:	461d      	movcc	r5, r3
 800af70:	0553      	lsls	r3, r2, #21
 800af72:	d530      	bpl.n	800afd6 <__ssputs_r+0x9e>
 800af74:	4629      	mov	r1, r5
 800af76:	f7ff ff85 	bl	800ae84 <_malloc_r>
 800af7a:	4606      	mov	r6, r0
 800af7c:	b950      	cbnz	r0, 800af94 <__ssputs_r+0x5c>
 800af7e:	230c      	movs	r3, #12
 800af80:	f8ca 3000 	str.w	r3, [sl]
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af8a:	81a3      	strh	r3, [r4, #12]
 800af8c:	f04f 30ff 	mov.w	r0, #4294967295
 800af90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af94:	463a      	mov	r2, r7
 800af96:	6921      	ldr	r1, [r4, #16]
 800af98:	f7fe f93e 	bl	8009218 <memcpy>
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afa6:	81a3      	strh	r3, [r4, #12]
 800afa8:	6126      	str	r6, [r4, #16]
 800afaa:	6165      	str	r5, [r4, #20]
 800afac:	443e      	add	r6, r7
 800afae:	1bed      	subs	r5, r5, r7
 800afb0:	6026      	str	r6, [r4, #0]
 800afb2:	60a5      	str	r5, [r4, #8]
 800afb4:	464e      	mov	r6, r9
 800afb6:	454e      	cmp	r6, r9
 800afb8:	d900      	bls.n	800afbc <__ssputs_r+0x84>
 800afba:	464e      	mov	r6, r9
 800afbc:	4632      	mov	r2, r6
 800afbe:	4641      	mov	r1, r8
 800afc0:	6820      	ldr	r0, [r4, #0]
 800afc2:	f000 f92d 	bl	800b220 <memmove>
 800afc6:	68a3      	ldr	r3, [r4, #8]
 800afc8:	1b9b      	subs	r3, r3, r6
 800afca:	60a3      	str	r3, [r4, #8]
 800afcc:	6823      	ldr	r3, [r4, #0]
 800afce:	441e      	add	r6, r3
 800afd0:	6026      	str	r6, [r4, #0]
 800afd2:	2000      	movs	r0, #0
 800afd4:	e7dc      	b.n	800af90 <__ssputs_r+0x58>
 800afd6:	462a      	mov	r2, r5
 800afd8:	f000 f93d 	bl	800b256 <_realloc_r>
 800afdc:	4606      	mov	r6, r0
 800afde:	2800      	cmp	r0, #0
 800afe0:	d1e2      	bne.n	800afa8 <__ssputs_r+0x70>
 800afe2:	6921      	ldr	r1, [r4, #16]
 800afe4:	4650      	mov	r0, sl
 800afe6:	f7ff feff 	bl	800ade8 <_free_r>
 800afea:	e7c8      	b.n	800af7e <__ssputs_r+0x46>

0800afec <_svfiprintf_r>:
 800afec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff0:	461d      	mov	r5, r3
 800aff2:	898b      	ldrh	r3, [r1, #12]
 800aff4:	061f      	lsls	r7, r3, #24
 800aff6:	b09d      	sub	sp, #116	; 0x74
 800aff8:	4680      	mov	r8, r0
 800affa:	460c      	mov	r4, r1
 800affc:	4616      	mov	r6, r2
 800affe:	d50f      	bpl.n	800b020 <_svfiprintf_r+0x34>
 800b000:	690b      	ldr	r3, [r1, #16]
 800b002:	b96b      	cbnz	r3, 800b020 <_svfiprintf_r+0x34>
 800b004:	2140      	movs	r1, #64	; 0x40
 800b006:	f7ff ff3d 	bl	800ae84 <_malloc_r>
 800b00a:	6020      	str	r0, [r4, #0]
 800b00c:	6120      	str	r0, [r4, #16]
 800b00e:	b928      	cbnz	r0, 800b01c <_svfiprintf_r+0x30>
 800b010:	230c      	movs	r3, #12
 800b012:	f8c8 3000 	str.w	r3, [r8]
 800b016:	f04f 30ff 	mov.w	r0, #4294967295
 800b01a:	e0c8      	b.n	800b1ae <_svfiprintf_r+0x1c2>
 800b01c:	2340      	movs	r3, #64	; 0x40
 800b01e:	6163      	str	r3, [r4, #20]
 800b020:	2300      	movs	r3, #0
 800b022:	9309      	str	r3, [sp, #36]	; 0x24
 800b024:	2320      	movs	r3, #32
 800b026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b02a:	2330      	movs	r3, #48	; 0x30
 800b02c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b030:	9503      	str	r5, [sp, #12]
 800b032:	f04f 0b01 	mov.w	fp, #1
 800b036:	4637      	mov	r7, r6
 800b038:	463d      	mov	r5, r7
 800b03a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b03e:	b10b      	cbz	r3, 800b044 <_svfiprintf_r+0x58>
 800b040:	2b25      	cmp	r3, #37	; 0x25
 800b042:	d13e      	bne.n	800b0c2 <_svfiprintf_r+0xd6>
 800b044:	ebb7 0a06 	subs.w	sl, r7, r6
 800b048:	d00b      	beq.n	800b062 <_svfiprintf_r+0x76>
 800b04a:	4653      	mov	r3, sl
 800b04c:	4632      	mov	r2, r6
 800b04e:	4621      	mov	r1, r4
 800b050:	4640      	mov	r0, r8
 800b052:	f7ff ff71 	bl	800af38 <__ssputs_r>
 800b056:	3001      	adds	r0, #1
 800b058:	f000 80a4 	beq.w	800b1a4 <_svfiprintf_r+0x1b8>
 800b05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b05e:	4453      	add	r3, sl
 800b060:	9309      	str	r3, [sp, #36]	; 0x24
 800b062:	783b      	ldrb	r3, [r7, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 809d 	beq.w	800b1a4 <_svfiprintf_r+0x1b8>
 800b06a:	2300      	movs	r3, #0
 800b06c:	f04f 32ff 	mov.w	r2, #4294967295
 800b070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b074:	9304      	str	r3, [sp, #16]
 800b076:	9307      	str	r3, [sp, #28]
 800b078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b07c:	931a      	str	r3, [sp, #104]	; 0x68
 800b07e:	462f      	mov	r7, r5
 800b080:	2205      	movs	r2, #5
 800b082:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b086:	4850      	ldr	r0, [pc, #320]	; (800b1c8 <_svfiprintf_r+0x1dc>)
 800b088:	f7f5 f8aa 	bl	80001e0 <memchr>
 800b08c:	9b04      	ldr	r3, [sp, #16]
 800b08e:	b9d0      	cbnz	r0, 800b0c6 <_svfiprintf_r+0xda>
 800b090:	06d9      	lsls	r1, r3, #27
 800b092:	bf44      	itt	mi
 800b094:	2220      	movmi	r2, #32
 800b096:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b09a:	071a      	lsls	r2, r3, #28
 800b09c:	bf44      	itt	mi
 800b09e:	222b      	movmi	r2, #43	; 0x2b
 800b0a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b0a4:	782a      	ldrb	r2, [r5, #0]
 800b0a6:	2a2a      	cmp	r2, #42	; 0x2a
 800b0a8:	d015      	beq.n	800b0d6 <_svfiprintf_r+0xea>
 800b0aa:	9a07      	ldr	r2, [sp, #28]
 800b0ac:	462f      	mov	r7, r5
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	250a      	movs	r5, #10
 800b0b2:	4639      	mov	r1, r7
 800b0b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0b8:	3b30      	subs	r3, #48	; 0x30
 800b0ba:	2b09      	cmp	r3, #9
 800b0bc:	d94d      	bls.n	800b15a <_svfiprintf_r+0x16e>
 800b0be:	b1b8      	cbz	r0, 800b0f0 <_svfiprintf_r+0x104>
 800b0c0:	e00f      	b.n	800b0e2 <_svfiprintf_r+0xf6>
 800b0c2:	462f      	mov	r7, r5
 800b0c4:	e7b8      	b.n	800b038 <_svfiprintf_r+0x4c>
 800b0c6:	4a40      	ldr	r2, [pc, #256]	; (800b1c8 <_svfiprintf_r+0x1dc>)
 800b0c8:	1a80      	subs	r0, r0, r2
 800b0ca:	fa0b f000 	lsl.w	r0, fp, r0
 800b0ce:	4318      	orrs	r0, r3
 800b0d0:	9004      	str	r0, [sp, #16]
 800b0d2:	463d      	mov	r5, r7
 800b0d4:	e7d3      	b.n	800b07e <_svfiprintf_r+0x92>
 800b0d6:	9a03      	ldr	r2, [sp, #12]
 800b0d8:	1d11      	adds	r1, r2, #4
 800b0da:	6812      	ldr	r2, [r2, #0]
 800b0dc:	9103      	str	r1, [sp, #12]
 800b0de:	2a00      	cmp	r2, #0
 800b0e0:	db01      	blt.n	800b0e6 <_svfiprintf_r+0xfa>
 800b0e2:	9207      	str	r2, [sp, #28]
 800b0e4:	e004      	b.n	800b0f0 <_svfiprintf_r+0x104>
 800b0e6:	4252      	negs	r2, r2
 800b0e8:	f043 0302 	orr.w	r3, r3, #2
 800b0ec:	9207      	str	r2, [sp, #28]
 800b0ee:	9304      	str	r3, [sp, #16]
 800b0f0:	783b      	ldrb	r3, [r7, #0]
 800b0f2:	2b2e      	cmp	r3, #46	; 0x2e
 800b0f4:	d10c      	bne.n	800b110 <_svfiprintf_r+0x124>
 800b0f6:	787b      	ldrb	r3, [r7, #1]
 800b0f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b0fa:	d133      	bne.n	800b164 <_svfiprintf_r+0x178>
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	1d1a      	adds	r2, r3, #4
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	9203      	str	r2, [sp, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	bfb8      	it	lt
 800b108:	f04f 33ff 	movlt.w	r3, #4294967295
 800b10c:	3702      	adds	r7, #2
 800b10e:	9305      	str	r3, [sp, #20]
 800b110:	4d2e      	ldr	r5, [pc, #184]	; (800b1cc <_svfiprintf_r+0x1e0>)
 800b112:	7839      	ldrb	r1, [r7, #0]
 800b114:	2203      	movs	r2, #3
 800b116:	4628      	mov	r0, r5
 800b118:	f7f5 f862 	bl	80001e0 <memchr>
 800b11c:	b138      	cbz	r0, 800b12e <_svfiprintf_r+0x142>
 800b11e:	2340      	movs	r3, #64	; 0x40
 800b120:	1b40      	subs	r0, r0, r5
 800b122:	fa03 f000 	lsl.w	r0, r3, r0
 800b126:	9b04      	ldr	r3, [sp, #16]
 800b128:	4303      	orrs	r3, r0
 800b12a:	3701      	adds	r7, #1
 800b12c:	9304      	str	r3, [sp, #16]
 800b12e:	7839      	ldrb	r1, [r7, #0]
 800b130:	4827      	ldr	r0, [pc, #156]	; (800b1d0 <_svfiprintf_r+0x1e4>)
 800b132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b136:	2206      	movs	r2, #6
 800b138:	1c7e      	adds	r6, r7, #1
 800b13a:	f7f5 f851 	bl	80001e0 <memchr>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d038      	beq.n	800b1b4 <_svfiprintf_r+0x1c8>
 800b142:	4b24      	ldr	r3, [pc, #144]	; (800b1d4 <_svfiprintf_r+0x1e8>)
 800b144:	bb13      	cbnz	r3, 800b18c <_svfiprintf_r+0x1a0>
 800b146:	9b03      	ldr	r3, [sp, #12]
 800b148:	3307      	adds	r3, #7
 800b14a:	f023 0307 	bic.w	r3, r3, #7
 800b14e:	3308      	adds	r3, #8
 800b150:	9303      	str	r3, [sp, #12]
 800b152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b154:	444b      	add	r3, r9
 800b156:	9309      	str	r3, [sp, #36]	; 0x24
 800b158:	e76d      	b.n	800b036 <_svfiprintf_r+0x4a>
 800b15a:	fb05 3202 	mla	r2, r5, r2, r3
 800b15e:	2001      	movs	r0, #1
 800b160:	460f      	mov	r7, r1
 800b162:	e7a6      	b.n	800b0b2 <_svfiprintf_r+0xc6>
 800b164:	2300      	movs	r3, #0
 800b166:	3701      	adds	r7, #1
 800b168:	9305      	str	r3, [sp, #20]
 800b16a:	4619      	mov	r1, r3
 800b16c:	250a      	movs	r5, #10
 800b16e:	4638      	mov	r0, r7
 800b170:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b174:	3a30      	subs	r2, #48	; 0x30
 800b176:	2a09      	cmp	r2, #9
 800b178:	d903      	bls.n	800b182 <_svfiprintf_r+0x196>
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d0c8      	beq.n	800b110 <_svfiprintf_r+0x124>
 800b17e:	9105      	str	r1, [sp, #20]
 800b180:	e7c6      	b.n	800b110 <_svfiprintf_r+0x124>
 800b182:	fb05 2101 	mla	r1, r5, r1, r2
 800b186:	2301      	movs	r3, #1
 800b188:	4607      	mov	r7, r0
 800b18a:	e7f0      	b.n	800b16e <_svfiprintf_r+0x182>
 800b18c:	ab03      	add	r3, sp, #12
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	4622      	mov	r2, r4
 800b192:	4b11      	ldr	r3, [pc, #68]	; (800b1d8 <_svfiprintf_r+0x1ec>)
 800b194:	a904      	add	r1, sp, #16
 800b196:	4640      	mov	r0, r8
 800b198:	f7fe f8e6 	bl	8009368 <_printf_float>
 800b19c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b1a0:	4681      	mov	r9, r0
 800b1a2:	d1d6      	bne.n	800b152 <_svfiprintf_r+0x166>
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	065b      	lsls	r3, r3, #25
 800b1a8:	f53f af35 	bmi.w	800b016 <_svfiprintf_r+0x2a>
 800b1ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1ae:	b01d      	add	sp, #116	; 0x74
 800b1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b4:	ab03      	add	r3, sp, #12
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	4b07      	ldr	r3, [pc, #28]	; (800b1d8 <_svfiprintf_r+0x1ec>)
 800b1bc:	a904      	add	r1, sp, #16
 800b1be:	4640      	mov	r0, r8
 800b1c0:	f7fe fb88 	bl	80098d4 <_printf_i>
 800b1c4:	e7ea      	b.n	800b19c <_svfiprintf_r+0x1b0>
 800b1c6:	bf00      	nop
 800b1c8:	0800c99c 	.word	0x0800c99c
 800b1cc:	0800c9a2 	.word	0x0800c9a2
 800b1d0:	0800c9a6 	.word	0x0800c9a6
 800b1d4:	08009369 	.word	0x08009369
 800b1d8:	0800af39 	.word	0x0800af39

0800b1dc <_sbrk_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	4c06      	ldr	r4, [pc, #24]	; (800b1f8 <_sbrk_r+0x1c>)
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	4605      	mov	r5, r0
 800b1e4:	4608      	mov	r0, r1
 800b1e6:	6023      	str	r3, [r4, #0]
 800b1e8:	f7fa f84e 	bl	8005288 <_sbrk>
 800b1ec:	1c43      	adds	r3, r0, #1
 800b1ee:	d102      	bne.n	800b1f6 <_sbrk_r+0x1a>
 800b1f0:	6823      	ldr	r3, [r4, #0]
 800b1f2:	b103      	cbz	r3, 800b1f6 <_sbrk_r+0x1a>
 800b1f4:	602b      	str	r3, [r5, #0]
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}
 800b1f8:	20000868 	.word	0x20000868

0800b1fc <__ascii_mbtowc>:
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	b901      	cbnz	r1, 800b202 <__ascii_mbtowc+0x6>
 800b200:	a901      	add	r1, sp, #4
 800b202:	b142      	cbz	r2, 800b216 <__ascii_mbtowc+0x1a>
 800b204:	b14b      	cbz	r3, 800b21a <__ascii_mbtowc+0x1e>
 800b206:	7813      	ldrb	r3, [r2, #0]
 800b208:	600b      	str	r3, [r1, #0]
 800b20a:	7812      	ldrb	r2, [r2, #0]
 800b20c:	1c10      	adds	r0, r2, #0
 800b20e:	bf18      	it	ne
 800b210:	2001      	movne	r0, #1
 800b212:	b002      	add	sp, #8
 800b214:	4770      	bx	lr
 800b216:	4610      	mov	r0, r2
 800b218:	e7fb      	b.n	800b212 <__ascii_mbtowc+0x16>
 800b21a:	f06f 0001 	mvn.w	r0, #1
 800b21e:	e7f8      	b.n	800b212 <__ascii_mbtowc+0x16>

0800b220 <memmove>:
 800b220:	4288      	cmp	r0, r1
 800b222:	b510      	push	{r4, lr}
 800b224:	eb01 0302 	add.w	r3, r1, r2
 800b228:	d807      	bhi.n	800b23a <memmove+0x1a>
 800b22a:	1e42      	subs	r2, r0, #1
 800b22c:	4299      	cmp	r1, r3
 800b22e:	d00a      	beq.n	800b246 <memmove+0x26>
 800b230:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b234:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b238:	e7f8      	b.n	800b22c <memmove+0xc>
 800b23a:	4283      	cmp	r3, r0
 800b23c:	d9f5      	bls.n	800b22a <memmove+0xa>
 800b23e:	1881      	adds	r1, r0, r2
 800b240:	1ad2      	subs	r2, r2, r3
 800b242:	42d3      	cmn	r3, r2
 800b244:	d100      	bne.n	800b248 <memmove+0x28>
 800b246:	bd10      	pop	{r4, pc}
 800b248:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b24c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b250:	e7f7      	b.n	800b242 <memmove+0x22>

0800b252 <__malloc_lock>:
 800b252:	4770      	bx	lr

0800b254 <__malloc_unlock>:
 800b254:	4770      	bx	lr

0800b256 <_realloc_r>:
 800b256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b258:	4607      	mov	r7, r0
 800b25a:	4614      	mov	r4, r2
 800b25c:	460e      	mov	r6, r1
 800b25e:	b921      	cbnz	r1, 800b26a <_realloc_r+0x14>
 800b260:	4611      	mov	r1, r2
 800b262:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b266:	f7ff be0d 	b.w	800ae84 <_malloc_r>
 800b26a:	b922      	cbnz	r2, 800b276 <_realloc_r+0x20>
 800b26c:	f7ff fdbc 	bl	800ade8 <_free_r>
 800b270:	4625      	mov	r5, r4
 800b272:	4628      	mov	r0, r5
 800b274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b276:	f000 f821 	bl	800b2bc <_malloc_usable_size_r>
 800b27a:	42a0      	cmp	r0, r4
 800b27c:	d20f      	bcs.n	800b29e <_realloc_r+0x48>
 800b27e:	4621      	mov	r1, r4
 800b280:	4638      	mov	r0, r7
 800b282:	f7ff fdff 	bl	800ae84 <_malloc_r>
 800b286:	4605      	mov	r5, r0
 800b288:	2800      	cmp	r0, #0
 800b28a:	d0f2      	beq.n	800b272 <_realloc_r+0x1c>
 800b28c:	4631      	mov	r1, r6
 800b28e:	4622      	mov	r2, r4
 800b290:	f7fd ffc2 	bl	8009218 <memcpy>
 800b294:	4631      	mov	r1, r6
 800b296:	4638      	mov	r0, r7
 800b298:	f7ff fda6 	bl	800ade8 <_free_r>
 800b29c:	e7e9      	b.n	800b272 <_realloc_r+0x1c>
 800b29e:	4635      	mov	r5, r6
 800b2a0:	e7e7      	b.n	800b272 <_realloc_r+0x1c>

0800b2a2 <__ascii_wctomb>:
 800b2a2:	b149      	cbz	r1, 800b2b8 <__ascii_wctomb+0x16>
 800b2a4:	2aff      	cmp	r2, #255	; 0xff
 800b2a6:	bf85      	ittet	hi
 800b2a8:	238a      	movhi	r3, #138	; 0x8a
 800b2aa:	6003      	strhi	r3, [r0, #0]
 800b2ac:	700a      	strbls	r2, [r1, #0]
 800b2ae:	f04f 30ff 	movhi.w	r0, #4294967295
 800b2b2:	bf98      	it	ls
 800b2b4:	2001      	movls	r0, #1
 800b2b6:	4770      	bx	lr
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	4770      	bx	lr

0800b2bc <_malloc_usable_size_r>:
 800b2bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2c0:	1f18      	subs	r0, r3, #4
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	bfbc      	itt	lt
 800b2c6:	580b      	ldrlt	r3, [r1, r0]
 800b2c8:	18c0      	addlt	r0, r0, r3
 800b2ca:	4770      	bx	lr
 800b2cc:	0000      	movs	r0, r0
	...

0800b2d0 <sin>:
 800b2d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2d2:	ec51 0b10 	vmov	r0, r1, d0
 800b2d6:	4a20      	ldr	r2, [pc, #128]	; (800b358 <sin+0x88>)
 800b2d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	dc07      	bgt.n	800b2f0 <sin+0x20>
 800b2e0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800b350 <sin+0x80>
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	f000 ff1b 	bl	800c120 <__kernel_sin>
 800b2ea:	ec51 0b10 	vmov	r0, r1, d0
 800b2ee:	e007      	b.n	800b300 <sin+0x30>
 800b2f0:	4a1a      	ldr	r2, [pc, #104]	; (800b35c <sin+0x8c>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	dd09      	ble.n	800b30a <sin+0x3a>
 800b2f6:	ee10 2a10 	vmov	r2, s0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	f7f4 ffc4 	bl	8000288 <__aeabi_dsub>
 800b300:	ec41 0b10 	vmov	d0, r0, r1
 800b304:	b005      	add	sp, #20
 800b306:	f85d fb04 	ldr.w	pc, [sp], #4
 800b30a:	4668      	mov	r0, sp
 800b30c:	f000 f90c 	bl	800b528 <__ieee754_rem_pio2>
 800b310:	f000 0003 	and.w	r0, r0, #3
 800b314:	2801      	cmp	r0, #1
 800b316:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b31a:	ed9d 0b00 	vldr	d0, [sp]
 800b31e:	d004      	beq.n	800b32a <sin+0x5a>
 800b320:	2802      	cmp	r0, #2
 800b322:	d005      	beq.n	800b330 <sin+0x60>
 800b324:	b970      	cbnz	r0, 800b344 <sin+0x74>
 800b326:	2001      	movs	r0, #1
 800b328:	e7dd      	b.n	800b2e6 <sin+0x16>
 800b32a:	f000 faf1 	bl	800b910 <__kernel_cos>
 800b32e:	e7dc      	b.n	800b2ea <sin+0x1a>
 800b330:	2001      	movs	r0, #1
 800b332:	f000 fef5 	bl	800c120 <__kernel_sin>
 800b336:	ec53 2b10 	vmov	r2, r3, d0
 800b33a:	ee10 0a10 	vmov	r0, s0
 800b33e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b342:	e7dd      	b.n	800b300 <sin+0x30>
 800b344:	f000 fae4 	bl	800b910 <__kernel_cos>
 800b348:	e7f5      	b.n	800b336 <sin+0x66>
 800b34a:	bf00      	nop
 800b34c:	f3af 8000 	nop.w
	...
 800b358:	3fe921fb 	.word	0x3fe921fb
 800b35c:	7fefffff 	.word	0x7fefffff

0800b360 <atan2>:
 800b360:	f000 b802 	b.w	800b368 <__ieee754_atan2>
 800b364:	0000      	movs	r0, r0
	...

0800b368 <__ieee754_atan2>:
 800b368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b36c:	ec57 6b11 	vmov	r6, r7, d1
 800b370:	4273      	negs	r3, r6
 800b372:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b376:	4333      	orrs	r3, r6
 800b378:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800b520 <__ieee754_atan2+0x1b8>
 800b37c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b380:	4573      	cmp	r3, lr
 800b382:	ec51 0b10 	vmov	r0, r1, d0
 800b386:	ee11 8a10 	vmov	r8, s2
 800b38a:	d80a      	bhi.n	800b3a2 <__ieee754_atan2+0x3a>
 800b38c:	4244      	negs	r4, r0
 800b38e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b392:	4304      	orrs	r4, r0
 800b394:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b398:	4574      	cmp	r4, lr
 800b39a:	468c      	mov	ip, r1
 800b39c:	ee10 9a10 	vmov	r9, s0
 800b3a0:	d907      	bls.n	800b3b2 <__ieee754_atan2+0x4a>
 800b3a2:	4632      	mov	r2, r6
 800b3a4:	463b      	mov	r3, r7
 800b3a6:	f7f4 ff71 	bl	800028c <__adddf3>
 800b3aa:	ec41 0b10 	vmov	d0, r0, r1
 800b3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3b2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b3b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b3ba:	4334      	orrs	r4, r6
 800b3bc:	d103      	bne.n	800b3c6 <__ieee754_atan2+0x5e>
 800b3be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c2:	f000 bf69 	b.w	800c298 <atan>
 800b3c6:	17bc      	asrs	r4, r7, #30
 800b3c8:	f004 0402 	and.w	r4, r4, #2
 800b3cc:	ea53 0909 	orrs.w	r9, r3, r9
 800b3d0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b3d4:	d107      	bne.n	800b3e6 <__ieee754_atan2+0x7e>
 800b3d6:	2c02      	cmp	r4, #2
 800b3d8:	d073      	beq.n	800b4c2 <__ieee754_atan2+0x15a>
 800b3da:	2c03      	cmp	r4, #3
 800b3dc:	d1e5      	bne.n	800b3aa <__ieee754_atan2+0x42>
 800b3de:	a13e      	add	r1, pc, #248	; (adr r1, 800b4d8 <__ieee754_atan2+0x170>)
 800b3e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3e4:	e7e1      	b.n	800b3aa <__ieee754_atan2+0x42>
 800b3e6:	ea52 0808 	orrs.w	r8, r2, r8
 800b3ea:	d106      	bne.n	800b3fa <__ieee754_atan2+0x92>
 800b3ec:	f1bc 0f00 	cmp.w	ip, #0
 800b3f0:	da6b      	bge.n	800b4ca <__ieee754_atan2+0x162>
 800b3f2:	a13b      	add	r1, pc, #236	; (adr r1, 800b4e0 <__ieee754_atan2+0x178>)
 800b3f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3f8:	e7d7      	b.n	800b3aa <__ieee754_atan2+0x42>
 800b3fa:	4572      	cmp	r2, lr
 800b3fc:	d120      	bne.n	800b440 <__ieee754_atan2+0xd8>
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d111      	bne.n	800b426 <__ieee754_atan2+0xbe>
 800b402:	2c02      	cmp	r4, #2
 800b404:	d007      	beq.n	800b416 <__ieee754_atan2+0xae>
 800b406:	2c03      	cmp	r4, #3
 800b408:	d009      	beq.n	800b41e <__ieee754_atan2+0xb6>
 800b40a:	2c01      	cmp	r4, #1
 800b40c:	d155      	bne.n	800b4ba <__ieee754_atan2+0x152>
 800b40e:	a136      	add	r1, pc, #216	; (adr r1, 800b4e8 <__ieee754_atan2+0x180>)
 800b410:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b414:	e7c9      	b.n	800b3aa <__ieee754_atan2+0x42>
 800b416:	a136      	add	r1, pc, #216	; (adr r1, 800b4f0 <__ieee754_atan2+0x188>)
 800b418:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b41c:	e7c5      	b.n	800b3aa <__ieee754_atan2+0x42>
 800b41e:	a136      	add	r1, pc, #216	; (adr r1, 800b4f8 <__ieee754_atan2+0x190>)
 800b420:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b424:	e7c1      	b.n	800b3aa <__ieee754_atan2+0x42>
 800b426:	2c02      	cmp	r4, #2
 800b428:	d04b      	beq.n	800b4c2 <__ieee754_atan2+0x15a>
 800b42a:	2c03      	cmp	r4, #3
 800b42c:	d0d7      	beq.n	800b3de <__ieee754_atan2+0x76>
 800b42e:	2c01      	cmp	r4, #1
 800b430:	f04f 0000 	mov.w	r0, #0
 800b434:	d102      	bne.n	800b43c <__ieee754_atan2+0xd4>
 800b436:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b43a:	e7b6      	b.n	800b3aa <__ieee754_atan2+0x42>
 800b43c:	2100      	movs	r1, #0
 800b43e:	e7b4      	b.n	800b3aa <__ieee754_atan2+0x42>
 800b440:	4573      	cmp	r3, lr
 800b442:	d0d3      	beq.n	800b3ec <__ieee754_atan2+0x84>
 800b444:	1a9b      	subs	r3, r3, r2
 800b446:	151b      	asrs	r3, r3, #20
 800b448:	2b3c      	cmp	r3, #60	; 0x3c
 800b44a:	dc1e      	bgt.n	800b48a <__ieee754_atan2+0x122>
 800b44c:	2f00      	cmp	r7, #0
 800b44e:	da01      	bge.n	800b454 <__ieee754_atan2+0xec>
 800b450:	333c      	adds	r3, #60	; 0x3c
 800b452:	db1e      	blt.n	800b492 <__ieee754_atan2+0x12a>
 800b454:	4632      	mov	r2, r6
 800b456:	463b      	mov	r3, r7
 800b458:	f7f5 f9f8 	bl	800084c <__aeabi_ddiv>
 800b45c:	ec41 0b10 	vmov	d0, r0, r1
 800b460:	f001 f8ba 	bl	800c5d8 <fabs>
 800b464:	f000 ff18 	bl	800c298 <atan>
 800b468:	ec51 0b10 	vmov	r0, r1, d0
 800b46c:	2c01      	cmp	r4, #1
 800b46e:	d013      	beq.n	800b498 <__ieee754_atan2+0x130>
 800b470:	2c02      	cmp	r4, #2
 800b472:	d015      	beq.n	800b4a0 <__ieee754_atan2+0x138>
 800b474:	2c00      	cmp	r4, #0
 800b476:	d098      	beq.n	800b3aa <__ieee754_atan2+0x42>
 800b478:	a321      	add	r3, pc, #132	; (adr r3, 800b500 <__ieee754_atan2+0x198>)
 800b47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47e:	f7f4 ff03 	bl	8000288 <__aeabi_dsub>
 800b482:	a321      	add	r3, pc, #132	; (adr r3, 800b508 <__ieee754_atan2+0x1a0>)
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	e014      	b.n	800b4b4 <__ieee754_atan2+0x14c>
 800b48a:	a121      	add	r1, pc, #132	; (adr r1, 800b510 <__ieee754_atan2+0x1a8>)
 800b48c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b490:	e7ec      	b.n	800b46c <__ieee754_atan2+0x104>
 800b492:	2000      	movs	r0, #0
 800b494:	2100      	movs	r1, #0
 800b496:	e7e9      	b.n	800b46c <__ieee754_atan2+0x104>
 800b498:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b49c:	4619      	mov	r1, r3
 800b49e:	e784      	b.n	800b3aa <__ieee754_atan2+0x42>
 800b4a0:	a317      	add	r3, pc, #92	; (adr r3, 800b500 <__ieee754_atan2+0x198>)
 800b4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a6:	f7f4 feef 	bl	8000288 <__aeabi_dsub>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	a116      	add	r1, pc, #88	; (adr r1, 800b508 <__ieee754_atan2+0x1a0>)
 800b4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4b4:	f7f4 fee8 	bl	8000288 <__aeabi_dsub>
 800b4b8:	e777      	b.n	800b3aa <__ieee754_atan2+0x42>
 800b4ba:	a117      	add	r1, pc, #92	; (adr r1, 800b518 <__ieee754_atan2+0x1b0>)
 800b4bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4c0:	e773      	b.n	800b3aa <__ieee754_atan2+0x42>
 800b4c2:	a111      	add	r1, pc, #68	; (adr r1, 800b508 <__ieee754_atan2+0x1a0>)
 800b4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4c8:	e76f      	b.n	800b3aa <__ieee754_atan2+0x42>
 800b4ca:	a111      	add	r1, pc, #68	; (adr r1, 800b510 <__ieee754_atan2+0x1a8>)
 800b4cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4d0:	e76b      	b.n	800b3aa <__ieee754_atan2+0x42>
 800b4d2:	bf00      	nop
 800b4d4:	f3af 8000 	nop.w
 800b4d8:	54442d18 	.word	0x54442d18
 800b4dc:	c00921fb 	.word	0xc00921fb
 800b4e0:	54442d18 	.word	0x54442d18
 800b4e4:	bff921fb 	.word	0xbff921fb
 800b4e8:	54442d18 	.word	0x54442d18
 800b4ec:	bfe921fb 	.word	0xbfe921fb
 800b4f0:	7f3321d2 	.word	0x7f3321d2
 800b4f4:	4002d97c 	.word	0x4002d97c
 800b4f8:	7f3321d2 	.word	0x7f3321d2
 800b4fc:	c002d97c 	.word	0xc002d97c
 800b500:	33145c07 	.word	0x33145c07
 800b504:	3ca1a626 	.word	0x3ca1a626
 800b508:	54442d18 	.word	0x54442d18
 800b50c:	400921fb 	.word	0x400921fb
 800b510:	54442d18 	.word	0x54442d18
 800b514:	3ff921fb 	.word	0x3ff921fb
 800b518:	54442d18 	.word	0x54442d18
 800b51c:	3fe921fb 	.word	0x3fe921fb
 800b520:	7ff00000 	.word	0x7ff00000
 800b524:	00000000 	.word	0x00000000

0800b528 <__ieee754_rem_pio2>:
 800b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52c:	ec57 6b10 	vmov	r6, r7, d0
 800b530:	4bc3      	ldr	r3, [pc, #780]	; (800b840 <__ieee754_rem_pio2+0x318>)
 800b532:	b08d      	sub	sp, #52	; 0x34
 800b534:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b538:	4598      	cmp	r8, r3
 800b53a:	4604      	mov	r4, r0
 800b53c:	9704      	str	r7, [sp, #16]
 800b53e:	dc07      	bgt.n	800b550 <__ieee754_rem_pio2+0x28>
 800b540:	2200      	movs	r2, #0
 800b542:	2300      	movs	r3, #0
 800b544:	ed84 0b00 	vstr	d0, [r4]
 800b548:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b54c:	2500      	movs	r5, #0
 800b54e:	e027      	b.n	800b5a0 <__ieee754_rem_pio2+0x78>
 800b550:	4bbc      	ldr	r3, [pc, #752]	; (800b844 <__ieee754_rem_pio2+0x31c>)
 800b552:	4598      	cmp	r8, r3
 800b554:	dc75      	bgt.n	800b642 <__ieee754_rem_pio2+0x11a>
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	4dbb      	ldr	r5, [pc, #748]	; (800b848 <__ieee754_rem_pio2+0x320>)
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	ee10 0a10 	vmov	r0, s0
 800b560:	a3a9      	add	r3, pc, #676	; (adr r3, 800b808 <__ieee754_rem_pio2+0x2e0>)
 800b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b566:	4639      	mov	r1, r7
 800b568:	dd36      	ble.n	800b5d8 <__ieee754_rem_pio2+0xb0>
 800b56a:	f7f4 fe8d 	bl	8000288 <__aeabi_dsub>
 800b56e:	45a8      	cmp	r8, r5
 800b570:	4606      	mov	r6, r0
 800b572:	460f      	mov	r7, r1
 800b574:	d018      	beq.n	800b5a8 <__ieee754_rem_pio2+0x80>
 800b576:	a3a6      	add	r3, pc, #664	; (adr r3, 800b810 <__ieee754_rem_pio2+0x2e8>)
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	f7f4 fe84 	bl	8000288 <__aeabi_dsub>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	e9c4 2300 	strd	r2, r3, [r4]
 800b588:	4630      	mov	r0, r6
 800b58a:	4639      	mov	r1, r7
 800b58c:	f7f4 fe7c 	bl	8000288 <__aeabi_dsub>
 800b590:	a39f      	add	r3, pc, #636	; (adr r3, 800b810 <__ieee754_rem_pio2+0x2e8>)
 800b592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b596:	f7f4 fe77 	bl	8000288 <__aeabi_dsub>
 800b59a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b59e:	2501      	movs	r5, #1
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	b00d      	add	sp, #52	; 0x34
 800b5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a8:	a39b      	add	r3, pc, #620	; (adr r3, 800b818 <__ieee754_rem_pio2+0x2f0>)
 800b5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ae:	f7f4 fe6b 	bl	8000288 <__aeabi_dsub>
 800b5b2:	a39b      	add	r3, pc, #620	; (adr r3, 800b820 <__ieee754_rem_pio2+0x2f8>)
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	4606      	mov	r6, r0
 800b5ba:	460f      	mov	r7, r1
 800b5bc:	f7f4 fe64 	bl	8000288 <__aeabi_dsub>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	e9c4 2300 	strd	r2, r3, [r4]
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	4639      	mov	r1, r7
 800b5cc:	f7f4 fe5c 	bl	8000288 <__aeabi_dsub>
 800b5d0:	a393      	add	r3, pc, #588	; (adr r3, 800b820 <__ieee754_rem_pio2+0x2f8>)
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	e7de      	b.n	800b596 <__ieee754_rem_pio2+0x6e>
 800b5d8:	f7f4 fe58 	bl	800028c <__adddf3>
 800b5dc:	45a8      	cmp	r8, r5
 800b5de:	4606      	mov	r6, r0
 800b5e0:	460f      	mov	r7, r1
 800b5e2:	d016      	beq.n	800b612 <__ieee754_rem_pio2+0xea>
 800b5e4:	a38a      	add	r3, pc, #552	; (adr r3, 800b810 <__ieee754_rem_pio2+0x2e8>)
 800b5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ea:	f7f4 fe4f 	bl	800028c <__adddf3>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	e9c4 2300 	strd	r2, r3, [r4]
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	4639      	mov	r1, r7
 800b5fa:	f7f4 fe45 	bl	8000288 <__aeabi_dsub>
 800b5fe:	a384      	add	r3, pc, #528	; (adr r3, 800b810 <__ieee754_rem_pio2+0x2e8>)
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	f7f4 fe42 	bl	800028c <__adddf3>
 800b608:	f04f 35ff 	mov.w	r5, #4294967295
 800b60c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b610:	e7c6      	b.n	800b5a0 <__ieee754_rem_pio2+0x78>
 800b612:	a381      	add	r3, pc, #516	; (adr r3, 800b818 <__ieee754_rem_pio2+0x2f0>)
 800b614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b618:	f7f4 fe38 	bl	800028c <__adddf3>
 800b61c:	a380      	add	r3, pc, #512	; (adr r3, 800b820 <__ieee754_rem_pio2+0x2f8>)
 800b61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b622:	4606      	mov	r6, r0
 800b624:	460f      	mov	r7, r1
 800b626:	f7f4 fe31 	bl	800028c <__adddf3>
 800b62a:	4602      	mov	r2, r0
 800b62c:	460b      	mov	r3, r1
 800b62e:	e9c4 2300 	strd	r2, r3, [r4]
 800b632:	4630      	mov	r0, r6
 800b634:	4639      	mov	r1, r7
 800b636:	f7f4 fe27 	bl	8000288 <__aeabi_dsub>
 800b63a:	a379      	add	r3, pc, #484	; (adr r3, 800b820 <__ieee754_rem_pio2+0x2f8>)
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	e7e0      	b.n	800b604 <__ieee754_rem_pio2+0xdc>
 800b642:	4b82      	ldr	r3, [pc, #520]	; (800b84c <__ieee754_rem_pio2+0x324>)
 800b644:	4598      	cmp	r8, r3
 800b646:	f300 80d0 	bgt.w	800b7ea <__ieee754_rem_pio2+0x2c2>
 800b64a:	f000 ffc5 	bl	800c5d8 <fabs>
 800b64e:	ec57 6b10 	vmov	r6, r7, d0
 800b652:	ee10 0a10 	vmov	r0, s0
 800b656:	a374      	add	r3, pc, #464	; (adr r3, 800b828 <__ieee754_rem_pio2+0x300>)
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	4639      	mov	r1, r7
 800b65e:	f7f4 ffcb 	bl	80005f8 <__aeabi_dmul>
 800b662:	2200      	movs	r2, #0
 800b664:	4b7a      	ldr	r3, [pc, #488]	; (800b850 <__ieee754_rem_pio2+0x328>)
 800b666:	f7f4 fe11 	bl	800028c <__adddf3>
 800b66a:	f7f5 fa75 	bl	8000b58 <__aeabi_d2iz>
 800b66e:	4605      	mov	r5, r0
 800b670:	f7f4 ff58 	bl	8000524 <__aeabi_i2d>
 800b674:	a364      	add	r3, pc, #400	; (adr r3, 800b808 <__ieee754_rem_pio2+0x2e0>)
 800b676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b67e:	f7f4 ffbb 	bl	80005f8 <__aeabi_dmul>
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	4630      	mov	r0, r6
 800b688:	4639      	mov	r1, r7
 800b68a:	f7f4 fdfd 	bl	8000288 <__aeabi_dsub>
 800b68e:	a360      	add	r3, pc, #384	; (adr r3, 800b810 <__ieee754_rem_pio2+0x2e8>)
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	4682      	mov	sl, r0
 800b696:	468b      	mov	fp, r1
 800b698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b69c:	f7f4 ffac 	bl	80005f8 <__aeabi_dmul>
 800b6a0:	2d1f      	cmp	r5, #31
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	460f      	mov	r7, r1
 800b6a6:	dc0c      	bgt.n	800b6c2 <__ieee754_rem_pio2+0x19a>
 800b6a8:	1e6a      	subs	r2, r5, #1
 800b6aa:	4b6a      	ldr	r3, [pc, #424]	; (800b854 <__ieee754_rem_pio2+0x32c>)
 800b6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b0:	4543      	cmp	r3, r8
 800b6b2:	d006      	beq.n	800b6c2 <__ieee754_rem_pio2+0x19a>
 800b6b4:	4632      	mov	r2, r6
 800b6b6:	463b      	mov	r3, r7
 800b6b8:	4650      	mov	r0, sl
 800b6ba:	4659      	mov	r1, fp
 800b6bc:	f7f4 fde4 	bl	8000288 <__aeabi_dsub>
 800b6c0:	e00e      	b.n	800b6e0 <__ieee754_rem_pio2+0x1b8>
 800b6c2:	4632      	mov	r2, r6
 800b6c4:	463b      	mov	r3, r7
 800b6c6:	4650      	mov	r0, sl
 800b6c8:	4659      	mov	r1, fp
 800b6ca:	f7f4 fddd 	bl	8000288 <__aeabi_dsub>
 800b6ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b6d2:	9305      	str	r3, [sp, #20]
 800b6d4:	9a05      	ldr	r2, [sp, #20]
 800b6d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	2b10      	cmp	r3, #16
 800b6de:	dc02      	bgt.n	800b6e6 <__ieee754_rem_pio2+0x1be>
 800b6e0:	e9c4 0100 	strd	r0, r1, [r4]
 800b6e4:	e039      	b.n	800b75a <__ieee754_rem_pio2+0x232>
 800b6e6:	a34c      	add	r3, pc, #304	; (adr r3, 800b818 <__ieee754_rem_pio2+0x2f0>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6f0:	f7f4 ff82 	bl	80005f8 <__aeabi_dmul>
 800b6f4:	4606      	mov	r6, r0
 800b6f6:	460f      	mov	r7, r1
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4650      	mov	r0, sl
 800b6fe:	4659      	mov	r1, fp
 800b700:	f7f4 fdc2 	bl	8000288 <__aeabi_dsub>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4680      	mov	r8, r0
 800b70a:	4689      	mov	r9, r1
 800b70c:	4650      	mov	r0, sl
 800b70e:	4659      	mov	r1, fp
 800b710:	f7f4 fdba 	bl	8000288 <__aeabi_dsub>
 800b714:	4632      	mov	r2, r6
 800b716:	463b      	mov	r3, r7
 800b718:	f7f4 fdb6 	bl	8000288 <__aeabi_dsub>
 800b71c:	a340      	add	r3, pc, #256	; (adr r3, 800b820 <__ieee754_rem_pio2+0x2f8>)
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	4606      	mov	r6, r0
 800b724:	460f      	mov	r7, r1
 800b726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b72a:	f7f4 ff65 	bl	80005f8 <__aeabi_dmul>
 800b72e:	4632      	mov	r2, r6
 800b730:	463b      	mov	r3, r7
 800b732:	f7f4 fda9 	bl	8000288 <__aeabi_dsub>
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	4606      	mov	r6, r0
 800b73c:	460f      	mov	r7, r1
 800b73e:	4640      	mov	r0, r8
 800b740:	4649      	mov	r1, r9
 800b742:	f7f4 fda1 	bl	8000288 <__aeabi_dsub>
 800b746:	9a05      	ldr	r2, [sp, #20]
 800b748:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	2b31      	cmp	r3, #49	; 0x31
 800b750:	dc20      	bgt.n	800b794 <__ieee754_rem_pio2+0x26c>
 800b752:	e9c4 0100 	strd	r0, r1, [r4]
 800b756:	46c2      	mov	sl, r8
 800b758:	46cb      	mov	fp, r9
 800b75a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b75e:	4650      	mov	r0, sl
 800b760:	4642      	mov	r2, r8
 800b762:	464b      	mov	r3, r9
 800b764:	4659      	mov	r1, fp
 800b766:	f7f4 fd8f 	bl	8000288 <__aeabi_dsub>
 800b76a:	463b      	mov	r3, r7
 800b76c:	4632      	mov	r2, r6
 800b76e:	f7f4 fd8b 	bl	8000288 <__aeabi_dsub>
 800b772:	9b04      	ldr	r3, [sp, #16]
 800b774:	2b00      	cmp	r3, #0
 800b776:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b77a:	f6bf af11 	bge.w	800b5a0 <__ieee754_rem_pio2+0x78>
 800b77e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b782:	6063      	str	r3, [r4, #4]
 800b784:	f8c4 8000 	str.w	r8, [r4]
 800b788:	60a0      	str	r0, [r4, #8]
 800b78a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b78e:	60e3      	str	r3, [r4, #12]
 800b790:	426d      	negs	r5, r5
 800b792:	e705      	b.n	800b5a0 <__ieee754_rem_pio2+0x78>
 800b794:	a326      	add	r3, pc, #152	; (adr r3, 800b830 <__ieee754_rem_pio2+0x308>)
 800b796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b79e:	f7f4 ff2b 	bl	80005f8 <__aeabi_dmul>
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	460f      	mov	r7, r1
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	4640      	mov	r0, r8
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	f7f4 fd6b 	bl	8000288 <__aeabi_dsub>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	4682      	mov	sl, r0
 800b7b8:	468b      	mov	fp, r1
 800b7ba:	4640      	mov	r0, r8
 800b7bc:	4649      	mov	r1, r9
 800b7be:	f7f4 fd63 	bl	8000288 <__aeabi_dsub>
 800b7c2:	4632      	mov	r2, r6
 800b7c4:	463b      	mov	r3, r7
 800b7c6:	f7f4 fd5f 	bl	8000288 <__aeabi_dsub>
 800b7ca:	a31b      	add	r3, pc, #108	; (adr r3, 800b838 <__ieee754_rem_pio2+0x310>)
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	460f      	mov	r7, r1
 800b7d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7d8:	f7f4 ff0e 	bl	80005f8 <__aeabi_dmul>
 800b7dc:	4632      	mov	r2, r6
 800b7de:	463b      	mov	r3, r7
 800b7e0:	f7f4 fd52 	bl	8000288 <__aeabi_dsub>
 800b7e4:	4606      	mov	r6, r0
 800b7e6:	460f      	mov	r7, r1
 800b7e8:	e764      	b.n	800b6b4 <__ieee754_rem_pio2+0x18c>
 800b7ea:	4b1b      	ldr	r3, [pc, #108]	; (800b858 <__ieee754_rem_pio2+0x330>)
 800b7ec:	4598      	cmp	r8, r3
 800b7ee:	dd35      	ble.n	800b85c <__ieee754_rem_pio2+0x334>
 800b7f0:	ee10 2a10 	vmov	r2, s0
 800b7f4:	463b      	mov	r3, r7
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	4639      	mov	r1, r7
 800b7fa:	f7f4 fd45 	bl	8000288 <__aeabi_dsub>
 800b7fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b802:	e9c4 0100 	strd	r0, r1, [r4]
 800b806:	e6a1      	b.n	800b54c <__ieee754_rem_pio2+0x24>
 800b808:	54400000 	.word	0x54400000
 800b80c:	3ff921fb 	.word	0x3ff921fb
 800b810:	1a626331 	.word	0x1a626331
 800b814:	3dd0b461 	.word	0x3dd0b461
 800b818:	1a600000 	.word	0x1a600000
 800b81c:	3dd0b461 	.word	0x3dd0b461
 800b820:	2e037073 	.word	0x2e037073
 800b824:	3ba3198a 	.word	0x3ba3198a
 800b828:	6dc9c883 	.word	0x6dc9c883
 800b82c:	3fe45f30 	.word	0x3fe45f30
 800b830:	2e000000 	.word	0x2e000000
 800b834:	3ba3198a 	.word	0x3ba3198a
 800b838:	252049c1 	.word	0x252049c1
 800b83c:	397b839a 	.word	0x397b839a
 800b840:	3fe921fb 	.word	0x3fe921fb
 800b844:	4002d97b 	.word	0x4002d97b
 800b848:	3ff921fb 	.word	0x3ff921fb
 800b84c:	413921fb 	.word	0x413921fb
 800b850:	3fe00000 	.word	0x3fe00000
 800b854:	0800cab8 	.word	0x0800cab8
 800b858:	7fefffff 	.word	0x7fefffff
 800b85c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b860:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b864:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b868:	4630      	mov	r0, r6
 800b86a:	460f      	mov	r7, r1
 800b86c:	f7f5 f974 	bl	8000b58 <__aeabi_d2iz>
 800b870:	f7f4 fe58 	bl	8000524 <__aeabi_i2d>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	4630      	mov	r0, r6
 800b87a:	4639      	mov	r1, r7
 800b87c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b880:	f7f4 fd02 	bl	8000288 <__aeabi_dsub>
 800b884:	2200      	movs	r2, #0
 800b886:	4b1f      	ldr	r3, [pc, #124]	; (800b904 <__ieee754_rem_pio2+0x3dc>)
 800b888:	f7f4 feb6 	bl	80005f8 <__aeabi_dmul>
 800b88c:	460f      	mov	r7, r1
 800b88e:	4606      	mov	r6, r0
 800b890:	f7f5 f962 	bl	8000b58 <__aeabi_d2iz>
 800b894:	f7f4 fe46 	bl	8000524 <__aeabi_i2d>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	4630      	mov	r0, r6
 800b89e:	4639      	mov	r1, r7
 800b8a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b8a4:	f7f4 fcf0 	bl	8000288 <__aeabi_dsub>
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	4b16      	ldr	r3, [pc, #88]	; (800b904 <__ieee754_rem_pio2+0x3dc>)
 800b8ac:	f7f4 fea4 	bl	80005f8 <__aeabi_dmul>
 800b8b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b8b4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b8b8:	f04f 0803 	mov.w	r8, #3
 800b8bc:	2600      	movs	r6, #0
 800b8be:	2700      	movs	r7, #0
 800b8c0:	4632      	mov	r2, r6
 800b8c2:	463b      	mov	r3, r7
 800b8c4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b8c8:	f108 3aff 	add.w	sl, r8, #4294967295
 800b8cc:	f7f5 f8fc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8d0:	b9b0      	cbnz	r0, 800b900 <__ieee754_rem_pio2+0x3d8>
 800b8d2:	4b0d      	ldr	r3, [pc, #52]	; (800b908 <__ieee754_rem_pio2+0x3e0>)
 800b8d4:	9301      	str	r3, [sp, #4]
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	462a      	mov	r2, r5
 800b8dc:	4643      	mov	r3, r8
 800b8de:	4621      	mov	r1, r4
 800b8e0:	a806      	add	r0, sp, #24
 800b8e2:	f000 f8dd 	bl	800baa0 <__kernel_rem_pio2>
 800b8e6:	9b04      	ldr	r3, [sp, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	f6bf ae58 	bge.w	800b5a0 <__ieee754_rem_pio2+0x78>
 800b8f0:	6863      	ldr	r3, [r4, #4]
 800b8f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b8f6:	6063      	str	r3, [r4, #4]
 800b8f8:	68e3      	ldr	r3, [r4, #12]
 800b8fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b8fe:	e746      	b.n	800b78e <__ieee754_rem_pio2+0x266>
 800b900:	46d0      	mov	r8, sl
 800b902:	e7dd      	b.n	800b8c0 <__ieee754_rem_pio2+0x398>
 800b904:	41700000 	.word	0x41700000
 800b908:	0800cb38 	.word	0x0800cb38
 800b90c:	00000000 	.word	0x00000000

0800b910 <__kernel_cos>:
 800b910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	ec59 8b10 	vmov	r8, r9, d0
 800b918:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800b91c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b920:	ed2d 8b02 	vpush	{d8}
 800b924:	eeb0 8a41 	vmov.f32	s16, s2
 800b928:	eef0 8a61 	vmov.f32	s17, s3
 800b92c:	da07      	bge.n	800b93e <__kernel_cos+0x2e>
 800b92e:	ee10 0a10 	vmov	r0, s0
 800b932:	4649      	mov	r1, r9
 800b934:	f7f5 f910 	bl	8000b58 <__aeabi_d2iz>
 800b938:	2800      	cmp	r0, #0
 800b93a:	f000 8089 	beq.w	800ba50 <__kernel_cos+0x140>
 800b93e:	4642      	mov	r2, r8
 800b940:	464b      	mov	r3, r9
 800b942:	4640      	mov	r0, r8
 800b944:	4649      	mov	r1, r9
 800b946:	f7f4 fe57 	bl	80005f8 <__aeabi_dmul>
 800b94a:	2200      	movs	r2, #0
 800b94c:	4b4e      	ldr	r3, [pc, #312]	; (800ba88 <__kernel_cos+0x178>)
 800b94e:	4604      	mov	r4, r0
 800b950:	460d      	mov	r5, r1
 800b952:	f7f4 fe51 	bl	80005f8 <__aeabi_dmul>
 800b956:	a340      	add	r3, pc, #256	; (adr r3, 800ba58 <__kernel_cos+0x148>)
 800b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95c:	4682      	mov	sl, r0
 800b95e:	468b      	mov	fp, r1
 800b960:	4620      	mov	r0, r4
 800b962:	4629      	mov	r1, r5
 800b964:	f7f4 fe48 	bl	80005f8 <__aeabi_dmul>
 800b968:	a33d      	add	r3, pc, #244	; (adr r3, 800ba60 <__kernel_cos+0x150>)
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	f7f4 fc8d 	bl	800028c <__adddf3>
 800b972:	4622      	mov	r2, r4
 800b974:	462b      	mov	r3, r5
 800b976:	f7f4 fe3f 	bl	80005f8 <__aeabi_dmul>
 800b97a:	a33b      	add	r3, pc, #236	; (adr r3, 800ba68 <__kernel_cos+0x158>)
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	f7f4 fc82 	bl	8000288 <__aeabi_dsub>
 800b984:	4622      	mov	r2, r4
 800b986:	462b      	mov	r3, r5
 800b988:	f7f4 fe36 	bl	80005f8 <__aeabi_dmul>
 800b98c:	a338      	add	r3, pc, #224	; (adr r3, 800ba70 <__kernel_cos+0x160>)
 800b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b992:	f7f4 fc7b 	bl	800028c <__adddf3>
 800b996:	4622      	mov	r2, r4
 800b998:	462b      	mov	r3, r5
 800b99a:	f7f4 fe2d 	bl	80005f8 <__aeabi_dmul>
 800b99e:	a336      	add	r3, pc, #216	; (adr r3, 800ba78 <__kernel_cos+0x168>)
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	f7f4 fc70 	bl	8000288 <__aeabi_dsub>
 800b9a8:	4622      	mov	r2, r4
 800b9aa:	462b      	mov	r3, r5
 800b9ac:	f7f4 fe24 	bl	80005f8 <__aeabi_dmul>
 800b9b0:	a333      	add	r3, pc, #204	; (adr r3, 800ba80 <__kernel_cos+0x170>)
 800b9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b6:	f7f4 fc69 	bl	800028c <__adddf3>
 800b9ba:	4622      	mov	r2, r4
 800b9bc:	462b      	mov	r3, r5
 800b9be:	f7f4 fe1b 	bl	80005f8 <__aeabi_dmul>
 800b9c2:	4622      	mov	r2, r4
 800b9c4:	462b      	mov	r3, r5
 800b9c6:	f7f4 fe17 	bl	80005f8 <__aeabi_dmul>
 800b9ca:	ec53 2b18 	vmov	r2, r3, d8
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	460d      	mov	r5, r1
 800b9d2:	4640      	mov	r0, r8
 800b9d4:	4649      	mov	r1, r9
 800b9d6:	f7f4 fe0f 	bl	80005f8 <__aeabi_dmul>
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4602      	mov	r2, r0
 800b9de:	4629      	mov	r1, r5
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	f7f4 fc51 	bl	8000288 <__aeabi_dsub>
 800b9e6:	4b29      	ldr	r3, [pc, #164]	; (800ba8c <__kernel_cos+0x17c>)
 800b9e8:	429e      	cmp	r6, r3
 800b9ea:	4680      	mov	r8, r0
 800b9ec:	4689      	mov	r9, r1
 800b9ee:	dc11      	bgt.n	800ba14 <__kernel_cos+0x104>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4650      	mov	r0, sl
 800b9f6:	4659      	mov	r1, fp
 800b9f8:	f7f4 fc46 	bl	8000288 <__aeabi_dsub>
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	4924      	ldr	r1, [pc, #144]	; (800ba90 <__kernel_cos+0x180>)
 800ba00:	4602      	mov	r2, r0
 800ba02:	2000      	movs	r0, #0
 800ba04:	f7f4 fc40 	bl	8000288 <__aeabi_dsub>
 800ba08:	ecbd 8b02 	vpop	{d8}
 800ba0c:	ec41 0b10 	vmov	d0, r0, r1
 800ba10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba14:	4b1f      	ldr	r3, [pc, #124]	; (800ba94 <__kernel_cos+0x184>)
 800ba16:	491e      	ldr	r1, [pc, #120]	; (800ba90 <__kernel_cos+0x180>)
 800ba18:	429e      	cmp	r6, r3
 800ba1a:	bfcc      	ite	gt
 800ba1c:	4d1e      	ldrgt	r5, [pc, #120]	; (800ba98 <__kernel_cos+0x188>)
 800ba1e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ba22:	2400      	movs	r4, #0
 800ba24:	4622      	mov	r2, r4
 800ba26:	462b      	mov	r3, r5
 800ba28:	2000      	movs	r0, #0
 800ba2a:	f7f4 fc2d 	bl	8000288 <__aeabi_dsub>
 800ba2e:	4622      	mov	r2, r4
 800ba30:	4606      	mov	r6, r0
 800ba32:	460f      	mov	r7, r1
 800ba34:	462b      	mov	r3, r5
 800ba36:	4650      	mov	r0, sl
 800ba38:	4659      	mov	r1, fp
 800ba3a:	f7f4 fc25 	bl	8000288 <__aeabi_dsub>
 800ba3e:	4642      	mov	r2, r8
 800ba40:	464b      	mov	r3, r9
 800ba42:	f7f4 fc21 	bl	8000288 <__aeabi_dsub>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	4639      	mov	r1, r7
 800ba4e:	e7d9      	b.n	800ba04 <__kernel_cos+0xf4>
 800ba50:	2000      	movs	r0, #0
 800ba52:	490f      	ldr	r1, [pc, #60]	; (800ba90 <__kernel_cos+0x180>)
 800ba54:	e7d8      	b.n	800ba08 <__kernel_cos+0xf8>
 800ba56:	bf00      	nop
 800ba58:	be8838d4 	.word	0xbe8838d4
 800ba5c:	bda8fae9 	.word	0xbda8fae9
 800ba60:	bdb4b1c4 	.word	0xbdb4b1c4
 800ba64:	3e21ee9e 	.word	0x3e21ee9e
 800ba68:	809c52ad 	.word	0x809c52ad
 800ba6c:	3e927e4f 	.word	0x3e927e4f
 800ba70:	19cb1590 	.word	0x19cb1590
 800ba74:	3efa01a0 	.word	0x3efa01a0
 800ba78:	16c15177 	.word	0x16c15177
 800ba7c:	3f56c16c 	.word	0x3f56c16c
 800ba80:	5555554c 	.word	0x5555554c
 800ba84:	3fa55555 	.word	0x3fa55555
 800ba88:	3fe00000 	.word	0x3fe00000
 800ba8c:	3fd33332 	.word	0x3fd33332
 800ba90:	3ff00000 	.word	0x3ff00000
 800ba94:	3fe90000 	.word	0x3fe90000
 800ba98:	3fd20000 	.word	0x3fd20000
 800ba9c:	00000000 	.word	0x00000000

0800baa0 <__kernel_rem_pio2>:
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	ed2d 8b02 	vpush	{d8}
 800baa8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800baac:	1ed4      	subs	r4, r2, #3
 800baae:	9308      	str	r3, [sp, #32]
 800bab0:	9101      	str	r1, [sp, #4]
 800bab2:	4bc5      	ldr	r3, [pc, #788]	; (800bdc8 <__kernel_rem_pio2+0x328>)
 800bab4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800bab6:	9009      	str	r0, [sp, #36]	; 0x24
 800bab8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800babc:	9304      	str	r3, [sp, #16]
 800babe:	9b08      	ldr	r3, [sp, #32]
 800bac0:	3b01      	subs	r3, #1
 800bac2:	9307      	str	r3, [sp, #28]
 800bac4:	2318      	movs	r3, #24
 800bac6:	fb94 f4f3 	sdiv	r4, r4, r3
 800baca:	f06f 0317 	mvn.w	r3, #23
 800bace:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800bad2:	fb04 3303 	mla	r3, r4, r3, r3
 800bad6:	eb03 0a02 	add.w	sl, r3, r2
 800bada:	9b04      	ldr	r3, [sp, #16]
 800badc:	9a07      	ldr	r2, [sp, #28]
 800bade:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800bdb8 <__kernel_rem_pio2+0x318>
 800bae2:	eb03 0802 	add.w	r8, r3, r2
 800bae6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bae8:	1aa7      	subs	r7, r4, r2
 800baea:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800baee:	ae22      	add	r6, sp, #136	; 0x88
 800baf0:	2500      	movs	r5, #0
 800baf2:	4545      	cmp	r5, r8
 800baf4:	dd13      	ble.n	800bb1e <__kernel_rem_pio2+0x7e>
 800baf6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800bdb8 <__kernel_rem_pio2+0x318>
 800bafa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800bafe:	2600      	movs	r6, #0
 800bb00:	9b04      	ldr	r3, [sp, #16]
 800bb02:	429e      	cmp	r6, r3
 800bb04:	dc32      	bgt.n	800bb6c <__kernel_rem_pio2+0xcc>
 800bb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb08:	9302      	str	r3, [sp, #8]
 800bb0a:	9b08      	ldr	r3, [sp, #32]
 800bb0c:	199d      	adds	r5, r3, r6
 800bb0e:	ab22      	add	r3, sp, #136	; 0x88
 800bb10:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bb14:	9306      	str	r3, [sp, #24]
 800bb16:	ec59 8b18 	vmov	r8, r9, d8
 800bb1a:	2700      	movs	r7, #0
 800bb1c:	e01f      	b.n	800bb5e <__kernel_rem_pio2+0xbe>
 800bb1e:	42ef      	cmn	r7, r5
 800bb20:	d407      	bmi.n	800bb32 <__kernel_rem_pio2+0x92>
 800bb22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bb26:	f7f4 fcfd 	bl	8000524 <__aeabi_i2d>
 800bb2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bb2e:	3501      	adds	r5, #1
 800bb30:	e7df      	b.n	800baf2 <__kernel_rem_pio2+0x52>
 800bb32:	ec51 0b18 	vmov	r0, r1, d8
 800bb36:	e7f8      	b.n	800bb2a <__kernel_rem_pio2+0x8a>
 800bb38:	9906      	ldr	r1, [sp, #24]
 800bb3a:	9d02      	ldr	r5, [sp, #8]
 800bb3c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800bb40:	9106      	str	r1, [sp, #24]
 800bb42:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800bb46:	9502      	str	r5, [sp, #8]
 800bb48:	f7f4 fd56 	bl	80005f8 <__aeabi_dmul>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4640      	mov	r0, r8
 800bb52:	4649      	mov	r1, r9
 800bb54:	f7f4 fb9a 	bl	800028c <__adddf3>
 800bb58:	3701      	adds	r7, #1
 800bb5a:	4680      	mov	r8, r0
 800bb5c:	4689      	mov	r9, r1
 800bb5e:	9b07      	ldr	r3, [sp, #28]
 800bb60:	429f      	cmp	r7, r3
 800bb62:	dde9      	ble.n	800bb38 <__kernel_rem_pio2+0x98>
 800bb64:	e8eb 8902 	strd	r8, r9, [fp], #8
 800bb68:	3601      	adds	r6, #1
 800bb6a:	e7c9      	b.n	800bb00 <__kernel_rem_pio2+0x60>
 800bb6c:	9b04      	ldr	r3, [sp, #16]
 800bb6e:	aa0e      	add	r2, sp, #56	; 0x38
 800bb70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb74:	930c      	str	r3, [sp, #48]	; 0x30
 800bb76:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bb78:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bb7c:	9c04      	ldr	r4, [sp, #16]
 800bb7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb80:	ab9a      	add	r3, sp, #616	; 0x268
 800bb82:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800bb86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb8e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800bb92:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800bb96:	ab9a      	add	r3, sp, #616	; 0x268
 800bb98:	445b      	add	r3, fp
 800bb9a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800bb9e:	2500      	movs	r5, #0
 800bba0:	1b63      	subs	r3, r4, r5
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	dc78      	bgt.n	800bc98 <__kernel_rem_pio2+0x1f8>
 800bba6:	4650      	mov	r0, sl
 800bba8:	ec49 8b10 	vmov	d0, r8, r9
 800bbac:	f000 fda4 	bl	800c6f8 <scalbn>
 800bbb0:	ec57 6b10 	vmov	r6, r7, d0
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bbba:	ee10 0a10 	vmov	r0, s0
 800bbbe:	4639      	mov	r1, r7
 800bbc0:	f7f4 fd1a 	bl	80005f8 <__aeabi_dmul>
 800bbc4:	ec41 0b10 	vmov	d0, r0, r1
 800bbc8:	f000 fd12 	bl	800c5f0 <floor>
 800bbcc:	2200      	movs	r2, #0
 800bbce:	ec51 0b10 	vmov	r0, r1, d0
 800bbd2:	4b7e      	ldr	r3, [pc, #504]	; (800bdcc <__kernel_rem_pio2+0x32c>)
 800bbd4:	f7f4 fd10 	bl	80005f8 <__aeabi_dmul>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4630      	mov	r0, r6
 800bbde:	4639      	mov	r1, r7
 800bbe0:	f7f4 fb52 	bl	8000288 <__aeabi_dsub>
 800bbe4:	460f      	mov	r7, r1
 800bbe6:	4606      	mov	r6, r0
 800bbe8:	f7f4 ffb6 	bl	8000b58 <__aeabi_d2iz>
 800bbec:	9006      	str	r0, [sp, #24]
 800bbee:	f7f4 fc99 	bl	8000524 <__aeabi_i2d>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	4639      	mov	r1, r7
 800bbfa:	f7f4 fb45 	bl	8000288 <__aeabi_dsub>
 800bbfe:	f1ba 0f00 	cmp.w	sl, #0
 800bc02:	4606      	mov	r6, r0
 800bc04:	460f      	mov	r7, r1
 800bc06:	dd6c      	ble.n	800bce2 <__kernel_rem_pio2+0x242>
 800bc08:	1e62      	subs	r2, r4, #1
 800bc0a:	ab0e      	add	r3, sp, #56	; 0x38
 800bc0c:	f1ca 0118 	rsb	r1, sl, #24
 800bc10:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bc14:	9d06      	ldr	r5, [sp, #24]
 800bc16:	fa40 f301 	asr.w	r3, r0, r1
 800bc1a:	441d      	add	r5, r3
 800bc1c:	408b      	lsls	r3, r1
 800bc1e:	1ac0      	subs	r0, r0, r3
 800bc20:	ab0e      	add	r3, sp, #56	; 0x38
 800bc22:	9506      	str	r5, [sp, #24]
 800bc24:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bc28:	f1ca 0317 	rsb	r3, sl, #23
 800bc2c:	fa40 f303 	asr.w	r3, r0, r3
 800bc30:	9302      	str	r3, [sp, #8]
 800bc32:	9b02      	ldr	r3, [sp, #8]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	dd62      	ble.n	800bcfe <__kernel_rem_pio2+0x25e>
 800bc38:	9b06      	ldr	r3, [sp, #24]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	9306      	str	r3, [sp, #24]
 800bc40:	4615      	mov	r5, r2
 800bc42:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bc46:	4294      	cmp	r4, r2
 800bc48:	f300 8095 	bgt.w	800bd76 <__kernel_rem_pio2+0x2d6>
 800bc4c:	f1ba 0f00 	cmp.w	sl, #0
 800bc50:	dd07      	ble.n	800bc62 <__kernel_rem_pio2+0x1c2>
 800bc52:	f1ba 0f01 	cmp.w	sl, #1
 800bc56:	f000 80a2 	beq.w	800bd9e <__kernel_rem_pio2+0x2fe>
 800bc5a:	f1ba 0f02 	cmp.w	sl, #2
 800bc5e:	f000 80c1 	beq.w	800bde4 <__kernel_rem_pio2+0x344>
 800bc62:	9b02      	ldr	r3, [sp, #8]
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d14a      	bne.n	800bcfe <__kernel_rem_pio2+0x25e>
 800bc68:	4632      	mov	r2, r6
 800bc6a:	463b      	mov	r3, r7
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	4958      	ldr	r1, [pc, #352]	; (800bdd0 <__kernel_rem_pio2+0x330>)
 800bc70:	f7f4 fb0a 	bl	8000288 <__aeabi_dsub>
 800bc74:	4606      	mov	r6, r0
 800bc76:	460f      	mov	r7, r1
 800bc78:	2d00      	cmp	r5, #0
 800bc7a:	d040      	beq.n	800bcfe <__kernel_rem_pio2+0x25e>
 800bc7c:	4650      	mov	r0, sl
 800bc7e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800bdc0 <__kernel_rem_pio2+0x320>
 800bc82:	f000 fd39 	bl	800c6f8 <scalbn>
 800bc86:	4630      	mov	r0, r6
 800bc88:	4639      	mov	r1, r7
 800bc8a:	ec53 2b10 	vmov	r2, r3, d0
 800bc8e:	f7f4 fafb 	bl	8000288 <__aeabi_dsub>
 800bc92:	4606      	mov	r6, r0
 800bc94:	460f      	mov	r7, r1
 800bc96:	e032      	b.n	800bcfe <__kernel_rem_pio2+0x25e>
 800bc98:	2200      	movs	r2, #0
 800bc9a:	4b4e      	ldr	r3, [pc, #312]	; (800bdd4 <__kernel_rem_pio2+0x334>)
 800bc9c:	4640      	mov	r0, r8
 800bc9e:	4649      	mov	r1, r9
 800bca0:	f7f4 fcaa 	bl	80005f8 <__aeabi_dmul>
 800bca4:	f7f4 ff58 	bl	8000b58 <__aeabi_d2iz>
 800bca8:	f7f4 fc3c 	bl	8000524 <__aeabi_i2d>
 800bcac:	2200      	movs	r2, #0
 800bcae:	4b4a      	ldr	r3, [pc, #296]	; (800bdd8 <__kernel_rem_pio2+0x338>)
 800bcb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcb4:	f7f4 fca0 	bl	80005f8 <__aeabi_dmul>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	460b      	mov	r3, r1
 800bcbc:	4640      	mov	r0, r8
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	f7f4 fae2 	bl	8000288 <__aeabi_dsub>
 800bcc4:	f7f4 ff48 	bl	8000b58 <__aeabi_d2iz>
 800bcc8:	ab0e      	add	r3, sp, #56	; 0x38
 800bcca:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800bcce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800bcd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcd6:	f7f4 fad9 	bl	800028c <__adddf3>
 800bcda:	3501      	adds	r5, #1
 800bcdc:	4680      	mov	r8, r0
 800bcde:	4689      	mov	r9, r1
 800bce0:	e75e      	b.n	800bba0 <__kernel_rem_pio2+0x100>
 800bce2:	d105      	bne.n	800bcf0 <__kernel_rem_pio2+0x250>
 800bce4:	1e63      	subs	r3, r4, #1
 800bce6:	aa0e      	add	r2, sp, #56	; 0x38
 800bce8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bcec:	15c3      	asrs	r3, r0, #23
 800bcee:	e79f      	b.n	800bc30 <__kernel_rem_pio2+0x190>
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	4b3a      	ldr	r3, [pc, #232]	; (800bddc <__kernel_rem_pio2+0x33c>)
 800bcf4:	f7f4 ff06 	bl	8000b04 <__aeabi_dcmpge>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d139      	bne.n	800bd70 <__kernel_rem_pio2+0x2d0>
 800bcfc:	9002      	str	r0, [sp, #8]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	2300      	movs	r3, #0
 800bd02:	4630      	mov	r0, r6
 800bd04:	4639      	mov	r1, r7
 800bd06:	f7f4 fedf 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	f000 80c7 	beq.w	800be9e <__kernel_rem_pio2+0x3fe>
 800bd10:	1e65      	subs	r5, r4, #1
 800bd12:	462b      	mov	r3, r5
 800bd14:	2200      	movs	r2, #0
 800bd16:	9904      	ldr	r1, [sp, #16]
 800bd18:	428b      	cmp	r3, r1
 800bd1a:	da6a      	bge.n	800bdf2 <__kernel_rem_pio2+0x352>
 800bd1c:	2a00      	cmp	r2, #0
 800bd1e:	f000 8088 	beq.w	800be32 <__kernel_rem_pio2+0x392>
 800bd22:	ab0e      	add	r3, sp, #56	; 0x38
 800bd24:	f1aa 0a18 	sub.w	sl, sl, #24
 800bd28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	f000 80b4 	beq.w	800be9a <__kernel_rem_pio2+0x3fa>
 800bd32:	4650      	mov	r0, sl
 800bd34:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800bdc0 <__kernel_rem_pio2+0x320>
 800bd38:	f000 fcde 	bl	800c6f8 <scalbn>
 800bd3c:	00ec      	lsls	r4, r5, #3
 800bd3e:	ab72      	add	r3, sp, #456	; 0x1c8
 800bd40:	191e      	adds	r6, r3, r4
 800bd42:	ec59 8b10 	vmov	r8, r9, d0
 800bd46:	f106 0a08 	add.w	sl, r6, #8
 800bd4a:	462f      	mov	r7, r5
 800bd4c:	2f00      	cmp	r7, #0
 800bd4e:	f280 80df 	bge.w	800bf10 <__kernel_rem_pio2+0x470>
 800bd52:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800bdb8 <__kernel_rem_pio2+0x318>
 800bd56:	f04f 0a00 	mov.w	sl, #0
 800bd5a:	eba5 030a 	sub.w	r3, r5, sl
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f2c0 810a 	blt.w	800bf78 <__kernel_rem_pio2+0x4d8>
 800bd64:	f8df b078 	ldr.w	fp, [pc, #120]	; 800bde0 <__kernel_rem_pio2+0x340>
 800bd68:	ec59 8b18 	vmov	r8, r9, d8
 800bd6c:	2700      	movs	r7, #0
 800bd6e:	e0f5      	b.n	800bf5c <__kernel_rem_pio2+0x4bc>
 800bd70:	2302      	movs	r3, #2
 800bd72:	9302      	str	r3, [sp, #8]
 800bd74:	e760      	b.n	800bc38 <__kernel_rem_pio2+0x198>
 800bd76:	ab0e      	add	r3, sp, #56	; 0x38
 800bd78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd7c:	b94d      	cbnz	r5, 800bd92 <__kernel_rem_pio2+0x2f2>
 800bd7e:	b12b      	cbz	r3, 800bd8c <__kernel_rem_pio2+0x2ec>
 800bd80:	a80e      	add	r0, sp, #56	; 0x38
 800bd82:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bd86:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	3201      	adds	r2, #1
 800bd8e:	461d      	mov	r5, r3
 800bd90:	e759      	b.n	800bc46 <__kernel_rem_pio2+0x1a6>
 800bd92:	a80e      	add	r0, sp, #56	; 0x38
 800bd94:	1acb      	subs	r3, r1, r3
 800bd96:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800bd9a:	462b      	mov	r3, r5
 800bd9c:	e7f6      	b.n	800bd8c <__kernel_rem_pio2+0x2ec>
 800bd9e:	1e62      	subs	r2, r4, #1
 800bda0:	ab0e      	add	r3, sp, #56	; 0x38
 800bda2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bda6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bdaa:	a90e      	add	r1, sp, #56	; 0x38
 800bdac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bdb0:	e757      	b.n	800bc62 <__kernel_rem_pio2+0x1c2>
 800bdb2:	bf00      	nop
 800bdb4:	f3af 8000 	nop.w
	...
 800bdc4:	3ff00000 	.word	0x3ff00000
 800bdc8:	0800cc80 	.word	0x0800cc80
 800bdcc:	40200000 	.word	0x40200000
 800bdd0:	3ff00000 	.word	0x3ff00000
 800bdd4:	3e700000 	.word	0x3e700000
 800bdd8:	41700000 	.word	0x41700000
 800bddc:	3fe00000 	.word	0x3fe00000
 800bde0:	0800cc40 	.word	0x0800cc40
 800bde4:	1e62      	subs	r2, r4, #1
 800bde6:	ab0e      	add	r3, sp, #56	; 0x38
 800bde8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bdf0:	e7db      	b.n	800bdaa <__kernel_rem_pio2+0x30a>
 800bdf2:	a90e      	add	r1, sp, #56	; 0x38
 800bdf4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	430a      	orrs	r2, r1
 800bdfc:	e78b      	b.n	800bd16 <__kernel_rem_pio2+0x276>
 800bdfe:	3301      	adds	r3, #1
 800be00:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800be04:	2900      	cmp	r1, #0
 800be06:	d0fa      	beq.n	800bdfe <__kernel_rem_pio2+0x35e>
 800be08:	9a08      	ldr	r2, [sp, #32]
 800be0a:	4422      	add	r2, r4
 800be0c:	00d2      	lsls	r2, r2, #3
 800be0e:	a922      	add	r1, sp, #136	; 0x88
 800be10:	18e3      	adds	r3, r4, r3
 800be12:	9206      	str	r2, [sp, #24]
 800be14:	440a      	add	r2, r1
 800be16:	9302      	str	r3, [sp, #8]
 800be18:	f10b 0108 	add.w	r1, fp, #8
 800be1c:	f102 0308 	add.w	r3, r2, #8
 800be20:	1c66      	adds	r6, r4, #1
 800be22:	910a      	str	r1, [sp, #40]	; 0x28
 800be24:	2500      	movs	r5, #0
 800be26:	930d      	str	r3, [sp, #52]	; 0x34
 800be28:	9b02      	ldr	r3, [sp, #8]
 800be2a:	42b3      	cmp	r3, r6
 800be2c:	da04      	bge.n	800be38 <__kernel_rem_pio2+0x398>
 800be2e:	461c      	mov	r4, r3
 800be30:	e6a6      	b.n	800bb80 <__kernel_rem_pio2+0xe0>
 800be32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be34:	2301      	movs	r3, #1
 800be36:	e7e3      	b.n	800be00 <__kernel_rem_pio2+0x360>
 800be38:	9b06      	ldr	r3, [sp, #24]
 800be3a:	18ef      	adds	r7, r5, r3
 800be3c:	ab22      	add	r3, sp, #136	; 0x88
 800be3e:	441f      	add	r7, r3
 800be40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800be46:	f7f4 fb6d 	bl	8000524 <__aeabi_i2d>
 800be4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be4c:	461c      	mov	r4, r3
 800be4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be50:	e9c7 0100 	strd	r0, r1, [r7]
 800be54:	eb03 0b05 	add.w	fp, r3, r5
 800be58:	2700      	movs	r7, #0
 800be5a:	f04f 0800 	mov.w	r8, #0
 800be5e:	f04f 0900 	mov.w	r9, #0
 800be62:	9b07      	ldr	r3, [sp, #28]
 800be64:	429f      	cmp	r7, r3
 800be66:	dd08      	ble.n	800be7a <__kernel_rem_pio2+0x3da>
 800be68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be6a:	aa72      	add	r2, sp, #456	; 0x1c8
 800be6c:	18eb      	adds	r3, r5, r3
 800be6e:	4413      	add	r3, r2
 800be70:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800be74:	3601      	adds	r6, #1
 800be76:	3508      	adds	r5, #8
 800be78:	e7d6      	b.n	800be28 <__kernel_rem_pio2+0x388>
 800be7a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800be7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800be82:	f7f4 fbb9 	bl	80005f8 <__aeabi_dmul>
 800be86:	4602      	mov	r2, r0
 800be88:	460b      	mov	r3, r1
 800be8a:	4640      	mov	r0, r8
 800be8c:	4649      	mov	r1, r9
 800be8e:	f7f4 f9fd 	bl	800028c <__adddf3>
 800be92:	3701      	adds	r7, #1
 800be94:	4680      	mov	r8, r0
 800be96:	4689      	mov	r9, r1
 800be98:	e7e3      	b.n	800be62 <__kernel_rem_pio2+0x3c2>
 800be9a:	3d01      	subs	r5, #1
 800be9c:	e741      	b.n	800bd22 <__kernel_rem_pio2+0x282>
 800be9e:	f1ca 0000 	rsb	r0, sl, #0
 800bea2:	ec47 6b10 	vmov	d0, r6, r7
 800bea6:	f000 fc27 	bl	800c6f8 <scalbn>
 800beaa:	ec57 6b10 	vmov	r6, r7, d0
 800beae:	2200      	movs	r2, #0
 800beb0:	4b99      	ldr	r3, [pc, #612]	; (800c118 <__kernel_rem_pio2+0x678>)
 800beb2:	ee10 0a10 	vmov	r0, s0
 800beb6:	4639      	mov	r1, r7
 800beb8:	f7f4 fe24 	bl	8000b04 <__aeabi_dcmpge>
 800bebc:	b1f8      	cbz	r0, 800befe <__kernel_rem_pio2+0x45e>
 800bebe:	2200      	movs	r2, #0
 800bec0:	4b96      	ldr	r3, [pc, #600]	; (800c11c <__kernel_rem_pio2+0x67c>)
 800bec2:	4630      	mov	r0, r6
 800bec4:	4639      	mov	r1, r7
 800bec6:	f7f4 fb97 	bl	80005f8 <__aeabi_dmul>
 800beca:	f7f4 fe45 	bl	8000b58 <__aeabi_d2iz>
 800bece:	4680      	mov	r8, r0
 800bed0:	f7f4 fb28 	bl	8000524 <__aeabi_i2d>
 800bed4:	2200      	movs	r2, #0
 800bed6:	4b90      	ldr	r3, [pc, #576]	; (800c118 <__kernel_rem_pio2+0x678>)
 800bed8:	f7f4 fb8e 	bl	80005f8 <__aeabi_dmul>
 800bedc:	460b      	mov	r3, r1
 800bede:	4602      	mov	r2, r0
 800bee0:	4639      	mov	r1, r7
 800bee2:	4630      	mov	r0, r6
 800bee4:	f7f4 f9d0 	bl	8000288 <__aeabi_dsub>
 800bee8:	f7f4 fe36 	bl	8000b58 <__aeabi_d2iz>
 800beec:	1c65      	adds	r5, r4, #1
 800beee:	ab0e      	add	r3, sp, #56	; 0x38
 800bef0:	f10a 0a18 	add.w	sl, sl, #24
 800bef4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bef8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800befc:	e719      	b.n	800bd32 <__kernel_rem_pio2+0x292>
 800befe:	4630      	mov	r0, r6
 800bf00:	4639      	mov	r1, r7
 800bf02:	f7f4 fe29 	bl	8000b58 <__aeabi_d2iz>
 800bf06:	ab0e      	add	r3, sp, #56	; 0x38
 800bf08:	4625      	mov	r5, r4
 800bf0a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bf0e:	e710      	b.n	800bd32 <__kernel_rem_pio2+0x292>
 800bf10:	ab0e      	add	r3, sp, #56	; 0x38
 800bf12:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bf16:	f7f4 fb05 	bl	8000524 <__aeabi_i2d>
 800bf1a:	4642      	mov	r2, r8
 800bf1c:	464b      	mov	r3, r9
 800bf1e:	f7f4 fb6b 	bl	80005f8 <__aeabi_dmul>
 800bf22:	2200      	movs	r2, #0
 800bf24:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800bf28:	4b7c      	ldr	r3, [pc, #496]	; (800c11c <__kernel_rem_pio2+0x67c>)
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	f7f4 fb63 	bl	80005f8 <__aeabi_dmul>
 800bf32:	3f01      	subs	r7, #1
 800bf34:	4680      	mov	r8, r0
 800bf36:	4689      	mov	r9, r1
 800bf38:	e708      	b.n	800bd4c <__kernel_rem_pio2+0x2ac>
 800bf3a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800bf46:	f7f4 fb57 	bl	80005f8 <__aeabi_dmul>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4640      	mov	r0, r8
 800bf50:	4649      	mov	r1, r9
 800bf52:	f7f4 f99b 	bl	800028c <__adddf3>
 800bf56:	3701      	adds	r7, #1
 800bf58:	4680      	mov	r8, r0
 800bf5a:	4689      	mov	r9, r1
 800bf5c:	9b04      	ldr	r3, [sp, #16]
 800bf5e:	429f      	cmp	r7, r3
 800bf60:	dc01      	bgt.n	800bf66 <__kernel_rem_pio2+0x4c6>
 800bf62:	45ba      	cmp	sl, r7
 800bf64:	dae9      	bge.n	800bf3a <__kernel_rem_pio2+0x49a>
 800bf66:	ab4a      	add	r3, sp, #296	; 0x128
 800bf68:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bf6c:	e9c3 8900 	strd	r8, r9, [r3]
 800bf70:	f10a 0a01 	add.w	sl, sl, #1
 800bf74:	3e08      	subs	r6, #8
 800bf76:	e6f0      	b.n	800bd5a <__kernel_rem_pio2+0x2ba>
 800bf78:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bf7a:	2b03      	cmp	r3, #3
 800bf7c:	d85b      	bhi.n	800c036 <__kernel_rem_pio2+0x596>
 800bf7e:	e8df f003 	tbb	[pc, r3]
 800bf82:	264a      	.short	0x264a
 800bf84:	0226      	.short	0x0226
 800bf86:	ab9a      	add	r3, sp, #616	; 0x268
 800bf88:	441c      	add	r4, r3
 800bf8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bf8e:	46a2      	mov	sl, r4
 800bf90:	46ab      	mov	fp, r5
 800bf92:	f1bb 0f00 	cmp.w	fp, #0
 800bf96:	dc6c      	bgt.n	800c072 <__kernel_rem_pio2+0x5d2>
 800bf98:	46a2      	mov	sl, r4
 800bf9a:	46ab      	mov	fp, r5
 800bf9c:	f1bb 0f01 	cmp.w	fp, #1
 800bfa0:	f300 8086 	bgt.w	800c0b0 <__kernel_rem_pio2+0x610>
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	2d01      	cmp	r5, #1
 800bfaa:	f300 80a0 	bgt.w	800c0ee <__kernel_rem_pio2+0x64e>
 800bfae:	9b02      	ldr	r3, [sp, #8]
 800bfb0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800bfb4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f040 809e 	bne.w	800c0fa <__kernel_rem_pio2+0x65a>
 800bfbe:	9b01      	ldr	r3, [sp, #4]
 800bfc0:	e9c3 7800 	strd	r7, r8, [r3]
 800bfc4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bfc8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bfcc:	e033      	b.n	800c036 <__kernel_rem_pio2+0x596>
 800bfce:	3408      	adds	r4, #8
 800bfd0:	ab4a      	add	r3, sp, #296	; 0x128
 800bfd2:	441c      	add	r4, r3
 800bfd4:	462e      	mov	r6, r5
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	2100      	movs	r1, #0
 800bfda:	2e00      	cmp	r6, #0
 800bfdc:	da3a      	bge.n	800c054 <__kernel_rem_pio2+0x5b4>
 800bfde:	9b02      	ldr	r3, [sp, #8]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d03d      	beq.n	800c060 <__kernel_rem_pio2+0x5c0>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfea:	9c01      	ldr	r4, [sp, #4]
 800bfec:	e9c4 2300 	strd	r2, r3, [r4]
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800bff8:	f7f4 f946 	bl	8000288 <__aeabi_dsub>
 800bffc:	ae4c      	add	r6, sp, #304	; 0x130
 800bffe:	2401      	movs	r4, #1
 800c000:	42a5      	cmp	r5, r4
 800c002:	da30      	bge.n	800c066 <__kernel_rem_pio2+0x5c6>
 800c004:	9b02      	ldr	r3, [sp, #8]
 800c006:	b113      	cbz	r3, 800c00e <__kernel_rem_pio2+0x56e>
 800c008:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c00c:	4619      	mov	r1, r3
 800c00e:	9b01      	ldr	r3, [sp, #4]
 800c010:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c014:	e00f      	b.n	800c036 <__kernel_rem_pio2+0x596>
 800c016:	ab9a      	add	r3, sp, #616	; 0x268
 800c018:	441c      	add	r4, r3
 800c01a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c01e:	2000      	movs	r0, #0
 800c020:	2100      	movs	r1, #0
 800c022:	2d00      	cmp	r5, #0
 800c024:	da10      	bge.n	800c048 <__kernel_rem_pio2+0x5a8>
 800c026:	9b02      	ldr	r3, [sp, #8]
 800c028:	b113      	cbz	r3, 800c030 <__kernel_rem_pio2+0x590>
 800c02a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c02e:	4619      	mov	r1, r3
 800c030:	9b01      	ldr	r3, [sp, #4]
 800c032:	e9c3 0100 	strd	r0, r1, [r3]
 800c036:	9b06      	ldr	r3, [sp, #24]
 800c038:	f003 0007 	and.w	r0, r3, #7
 800c03c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c040:	ecbd 8b02 	vpop	{d8}
 800c044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c048:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c04c:	f7f4 f91e 	bl	800028c <__adddf3>
 800c050:	3d01      	subs	r5, #1
 800c052:	e7e6      	b.n	800c022 <__kernel_rem_pio2+0x582>
 800c054:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c058:	f7f4 f918 	bl	800028c <__adddf3>
 800c05c:	3e01      	subs	r6, #1
 800c05e:	e7bc      	b.n	800bfda <__kernel_rem_pio2+0x53a>
 800c060:	4602      	mov	r2, r0
 800c062:	460b      	mov	r3, r1
 800c064:	e7c1      	b.n	800bfea <__kernel_rem_pio2+0x54a>
 800c066:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c06a:	f7f4 f90f 	bl	800028c <__adddf3>
 800c06e:	3401      	adds	r4, #1
 800c070:	e7c6      	b.n	800c000 <__kernel_rem_pio2+0x560>
 800c072:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800c076:	ed3a 7b02 	vldmdb	sl!, {d7}
 800c07a:	4640      	mov	r0, r8
 800c07c:	ec53 2b17 	vmov	r2, r3, d7
 800c080:	4649      	mov	r1, r9
 800c082:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c086:	f7f4 f901 	bl	800028c <__adddf3>
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	4606      	mov	r6, r0
 800c090:	460f      	mov	r7, r1
 800c092:	4640      	mov	r0, r8
 800c094:	4649      	mov	r1, r9
 800c096:	f7f4 f8f7 	bl	8000288 <__aeabi_dsub>
 800c09a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c09e:	f7f4 f8f5 	bl	800028c <__adddf3>
 800c0a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c0a6:	e9ca 0100 	strd	r0, r1, [sl]
 800c0aa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800c0ae:	e770      	b.n	800bf92 <__kernel_rem_pio2+0x4f2>
 800c0b0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800c0b4:	ed3a 7b02 	vldmdb	sl!, {d7}
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	ec53 2b17 	vmov	r2, r3, d7
 800c0be:	4639      	mov	r1, r7
 800c0c0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c0c4:	f7f4 f8e2 	bl	800028c <__adddf3>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	4680      	mov	r8, r0
 800c0ce:	4689      	mov	r9, r1
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	f7f4 f8d8 	bl	8000288 <__aeabi_dsub>
 800c0d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0dc:	f7f4 f8d6 	bl	800028c <__adddf3>
 800c0e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c0e4:	e9ca 0100 	strd	r0, r1, [sl]
 800c0e8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800c0ec:	e756      	b.n	800bf9c <__kernel_rem_pio2+0x4fc>
 800c0ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c0f2:	f7f4 f8cb 	bl	800028c <__adddf3>
 800c0f6:	3d01      	subs	r5, #1
 800c0f8:	e756      	b.n	800bfa8 <__kernel_rem_pio2+0x508>
 800c0fa:	9b01      	ldr	r3, [sp, #4]
 800c0fc:	9a01      	ldr	r2, [sp, #4]
 800c0fe:	601f      	str	r7, [r3, #0]
 800c100:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c104:	605c      	str	r4, [r3, #4]
 800c106:	609d      	str	r5, [r3, #8]
 800c108:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c10c:	60d3      	str	r3, [r2, #12]
 800c10e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c112:	6110      	str	r0, [r2, #16]
 800c114:	6153      	str	r3, [r2, #20]
 800c116:	e78e      	b.n	800c036 <__kernel_rem_pio2+0x596>
 800c118:	41700000 	.word	0x41700000
 800c11c:	3e700000 	.word	0x3e700000

0800c120 <__kernel_sin>:
 800c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c124:	ec55 4b10 	vmov	r4, r5, d0
 800c128:	b085      	sub	sp, #20
 800c12a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c12e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c132:	ed8d 1b00 	vstr	d1, [sp]
 800c136:	9002      	str	r0, [sp, #8]
 800c138:	da06      	bge.n	800c148 <__kernel_sin+0x28>
 800c13a:	ee10 0a10 	vmov	r0, s0
 800c13e:	4629      	mov	r1, r5
 800c140:	f7f4 fd0a 	bl	8000b58 <__aeabi_d2iz>
 800c144:	2800      	cmp	r0, #0
 800c146:	d051      	beq.n	800c1ec <__kernel_sin+0xcc>
 800c148:	4622      	mov	r2, r4
 800c14a:	462b      	mov	r3, r5
 800c14c:	4620      	mov	r0, r4
 800c14e:	4629      	mov	r1, r5
 800c150:	f7f4 fa52 	bl	80005f8 <__aeabi_dmul>
 800c154:	4682      	mov	sl, r0
 800c156:	468b      	mov	fp, r1
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4620      	mov	r0, r4
 800c15e:	4629      	mov	r1, r5
 800c160:	f7f4 fa4a 	bl	80005f8 <__aeabi_dmul>
 800c164:	a341      	add	r3, pc, #260	; (adr r3, 800c26c <__kernel_sin+0x14c>)
 800c166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16a:	4680      	mov	r8, r0
 800c16c:	4689      	mov	r9, r1
 800c16e:	4650      	mov	r0, sl
 800c170:	4659      	mov	r1, fp
 800c172:	f7f4 fa41 	bl	80005f8 <__aeabi_dmul>
 800c176:	a33f      	add	r3, pc, #252	; (adr r3, 800c274 <__kernel_sin+0x154>)
 800c178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17c:	f7f4 f884 	bl	8000288 <__aeabi_dsub>
 800c180:	4652      	mov	r2, sl
 800c182:	465b      	mov	r3, fp
 800c184:	f7f4 fa38 	bl	80005f8 <__aeabi_dmul>
 800c188:	a33c      	add	r3, pc, #240	; (adr r3, 800c27c <__kernel_sin+0x15c>)
 800c18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18e:	f7f4 f87d 	bl	800028c <__adddf3>
 800c192:	4652      	mov	r2, sl
 800c194:	465b      	mov	r3, fp
 800c196:	f7f4 fa2f 	bl	80005f8 <__aeabi_dmul>
 800c19a:	a33a      	add	r3, pc, #232	; (adr r3, 800c284 <__kernel_sin+0x164>)
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	f7f4 f872 	bl	8000288 <__aeabi_dsub>
 800c1a4:	4652      	mov	r2, sl
 800c1a6:	465b      	mov	r3, fp
 800c1a8:	f7f4 fa26 	bl	80005f8 <__aeabi_dmul>
 800c1ac:	a337      	add	r3, pc, #220	; (adr r3, 800c28c <__kernel_sin+0x16c>)
 800c1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b2:	f7f4 f86b 	bl	800028c <__adddf3>
 800c1b6:	9b02      	ldr	r3, [sp, #8]
 800c1b8:	4606      	mov	r6, r0
 800c1ba:	460f      	mov	r7, r1
 800c1bc:	b9db      	cbnz	r3, 800c1f6 <__kernel_sin+0xd6>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4650      	mov	r0, sl
 800c1c4:	4659      	mov	r1, fp
 800c1c6:	f7f4 fa17 	bl	80005f8 <__aeabi_dmul>
 800c1ca:	a325      	add	r3, pc, #148	; (adr r3, 800c260 <__kernel_sin+0x140>)
 800c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d0:	f7f4 f85a 	bl	8000288 <__aeabi_dsub>
 800c1d4:	4642      	mov	r2, r8
 800c1d6:	464b      	mov	r3, r9
 800c1d8:	f7f4 fa0e 	bl	80005f8 <__aeabi_dmul>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	f7f4 f852 	bl	800028c <__adddf3>
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	460d      	mov	r5, r1
 800c1ec:	ec45 4b10 	vmov	d0, r4, r5
 800c1f0:	b005      	add	sp, #20
 800c1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	4b1b      	ldr	r3, [pc, #108]	; (800c268 <__kernel_sin+0x148>)
 800c1fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1fe:	f7f4 f9fb 	bl	80005f8 <__aeabi_dmul>
 800c202:	4632      	mov	r2, r6
 800c204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c208:	463b      	mov	r3, r7
 800c20a:	4640      	mov	r0, r8
 800c20c:	4649      	mov	r1, r9
 800c20e:	f7f4 f9f3 	bl	80005f8 <__aeabi_dmul>
 800c212:	4602      	mov	r2, r0
 800c214:	460b      	mov	r3, r1
 800c216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c21a:	f7f4 f835 	bl	8000288 <__aeabi_dsub>
 800c21e:	4652      	mov	r2, sl
 800c220:	465b      	mov	r3, fp
 800c222:	f7f4 f9e9 	bl	80005f8 <__aeabi_dmul>
 800c226:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c22a:	f7f4 f82d 	bl	8000288 <__aeabi_dsub>
 800c22e:	a30c      	add	r3, pc, #48	; (adr r3, 800c260 <__kernel_sin+0x140>)
 800c230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c234:	4606      	mov	r6, r0
 800c236:	460f      	mov	r7, r1
 800c238:	4640      	mov	r0, r8
 800c23a:	4649      	mov	r1, r9
 800c23c:	f7f4 f9dc 	bl	80005f8 <__aeabi_dmul>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4630      	mov	r0, r6
 800c246:	4639      	mov	r1, r7
 800c248:	f7f4 f820 	bl	800028c <__adddf3>
 800c24c:	4602      	mov	r2, r0
 800c24e:	460b      	mov	r3, r1
 800c250:	4620      	mov	r0, r4
 800c252:	4629      	mov	r1, r5
 800c254:	f7f4 f818 	bl	8000288 <__aeabi_dsub>
 800c258:	e7c6      	b.n	800c1e8 <__kernel_sin+0xc8>
 800c25a:	bf00      	nop
 800c25c:	f3af 8000 	nop.w
 800c260:	55555549 	.word	0x55555549
 800c264:	3fc55555 	.word	0x3fc55555
 800c268:	3fe00000 	.word	0x3fe00000
 800c26c:	5acfd57c 	.word	0x5acfd57c
 800c270:	3de5d93a 	.word	0x3de5d93a
 800c274:	8a2b9ceb 	.word	0x8a2b9ceb
 800c278:	3e5ae5e6 	.word	0x3e5ae5e6
 800c27c:	57b1fe7d 	.word	0x57b1fe7d
 800c280:	3ec71de3 	.word	0x3ec71de3
 800c284:	19c161d5 	.word	0x19c161d5
 800c288:	3f2a01a0 	.word	0x3f2a01a0
 800c28c:	1110f8a6 	.word	0x1110f8a6
 800c290:	3f811111 	.word	0x3f811111
 800c294:	00000000 	.word	0x00000000

0800c298 <atan>:
 800c298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c29c:	ec55 4b10 	vmov	r4, r5, d0
 800c2a0:	4bc3      	ldr	r3, [pc, #780]	; (800c5b0 <atan+0x318>)
 800c2a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c2a6:	429e      	cmp	r6, r3
 800c2a8:	46ab      	mov	fp, r5
 800c2aa:	dd18      	ble.n	800c2de <atan+0x46>
 800c2ac:	4bc1      	ldr	r3, [pc, #772]	; (800c5b4 <atan+0x31c>)
 800c2ae:	429e      	cmp	r6, r3
 800c2b0:	dc01      	bgt.n	800c2b6 <atan+0x1e>
 800c2b2:	d109      	bne.n	800c2c8 <atan+0x30>
 800c2b4:	b144      	cbz	r4, 800c2c8 <atan+0x30>
 800c2b6:	4622      	mov	r2, r4
 800c2b8:	462b      	mov	r3, r5
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	4629      	mov	r1, r5
 800c2be:	f7f3 ffe5 	bl	800028c <__adddf3>
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	460d      	mov	r5, r1
 800c2c6:	e006      	b.n	800c2d6 <atan+0x3e>
 800c2c8:	f1bb 0f00 	cmp.w	fp, #0
 800c2cc:	f340 8131 	ble.w	800c532 <atan+0x29a>
 800c2d0:	a59b      	add	r5, pc, #620	; (adr r5, 800c540 <atan+0x2a8>)
 800c2d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2d6:	ec45 4b10 	vmov	d0, r4, r5
 800c2da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2de:	4bb6      	ldr	r3, [pc, #728]	; (800c5b8 <atan+0x320>)
 800c2e0:	429e      	cmp	r6, r3
 800c2e2:	dc14      	bgt.n	800c30e <atan+0x76>
 800c2e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c2e8:	429e      	cmp	r6, r3
 800c2ea:	dc0d      	bgt.n	800c308 <atan+0x70>
 800c2ec:	a396      	add	r3, pc, #600	; (adr r3, 800c548 <atan+0x2b0>)
 800c2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f2:	ee10 0a10 	vmov	r0, s0
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	f7f3 ffc8 	bl	800028c <__adddf3>
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	4baf      	ldr	r3, [pc, #700]	; (800c5bc <atan+0x324>)
 800c300:	f7f4 fc0a 	bl	8000b18 <__aeabi_dcmpgt>
 800c304:	2800      	cmp	r0, #0
 800c306:	d1e6      	bne.n	800c2d6 <atan+0x3e>
 800c308:	f04f 3aff 	mov.w	sl, #4294967295
 800c30c:	e02b      	b.n	800c366 <atan+0xce>
 800c30e:	f000 f963 	bl	800c5d8 <fabs>
 800c312:	4bab      	ldr	r3, [pc, #684]	; (800c5c0 <atan+0x328>)
 800c314:	429e      	cmp	r6, r3
 800c316:	ec55 4b10 	vmov	r4, r5, d0
 800c31a:	f300 80bf 	bgt.w	800c49c <atan+0x204>
 800c31e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c322:	429e      	cmp	r6, r3
 800c324:	f300 80a0 	bgt.w	800c468 <atan+0x1d0>
 800c328:	ee10 2a10 	vmov	r2, s0
 800c32c:	ee10 0a10 	vmov	r0, s0
 800c330:	462b      	mov	r3, r5
 800c332:	4629      	mov	r1, r5
 800c334:	f7f3 ffaa 	bl	800028c <__adddf3>
 800c338:	2200      	movs	r2, #0
 800c33a:	4ba0      	ldr	r3, [pc, #640]	; (800c5bc <atan+0x324>)
 800c33c:	f7f3 ffa4 	bl	8000288 <__aeabi_dsub>
 800c340:	2200      	movs	r2, #0
 800c342:	4606      	mov	r6, r0
 800c344:	460f      	mov	r7, r1
 800c346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c34a:	4620      	mov	r0, r4
 800c34c:	4629      	mov	r1, r5
 800c34e:	f7f3 ff9d 	bl	800028c <__adddf3>
 800c352:	4602      	mov	r2, r0
 800c354:	460b      	mov	r3, r1
 800c356:	4630      	mov	r0, r6
 800c358:	4639      	mov	r1, r7
 800c35a:	f7f4 fa77 	bl	800084c <__aeabi_ddiv>
 800c35e:	f04f 0a00 	mov.w	sl, #0
 800c362:	4604      	mov	r4, r0
 800c364:	460d      	mov	r5, r1
 800c366:	4622      	mov	r2, r4
 800c368:	462b      	mov	r3, r5
 800c36a:	4620      	mov	r0, r4
 800c36c:	4629      	mov	r1, r5
 800c36e:	f7f4 f943 	bl	80005f8 <__aeabi_dmul>
 800c372:	4602      	mov	r2, r0
 800c374:	460b      	mov	r3, r1
 800c376:	4680      	mov	r8, r0
 800c378:	4689      	mov	r9, r1
 800c37a:	f7f4 f93d 	bl	80005f8 <__aeabi_dmul>
 800c37e:	a374      	add	r3, pc, #464	; (adr r3, 800c550 <atan+0x2b8>)
 800c380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c384:	4606      	mov	r6, r0
 800c386:	460f      	mov	r7, r1
 800c388:	f7f4 f936 	bl	80005f8 <__aeabi_dmul>
 800c38c:	a372      	add	r3, pc, #456	; (adr r3, 800c558 <atan+0x2c0>)
 800c38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c392:	f7f3 ff7b 	bl	800028c <__adddf3>
 800c396:	4632      	mov	r2, r6
 800c398:	463b      	mov	r3, r7
 800c39a:	f7f4 f92d 	bl	80005f8 <__aeabi_dmul>
 800c39e:	a370      	add	r3, pc, #448	; (adr r3, 800c560 <atan+0x2c8>)
 800c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a4:	f7f3 ff72 	bl	800028c <__adddf3>
 800c3a8:	4632      	mov	r2, r6
 800c3aa:	463b      	mov	r3, r7
 800c3ac:	f7f4 f924 	bl	80005f8 <__aeabi_dmul>
 800c3b0:	a36d      	add	r3, pc, #436	; (adr r3, 800c568 <atan+0x2d0>)
 800c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b6:	f7f3 ff69 	bl	800028c <__adddf3>
 800c3ba:	4632      	mov	r2, r6
 800c3bc:	463b      	mov	r3, r7
 800c3be:	f7f4 f91b 	bl	80005f8 <__aeabi_dmul>
 800c3c2:	a36b      	add	r3, pc, #428	; (adr r3, 800c570 <atan+0x2d8>)
 800c3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c8:	f7f3 ff60 	bl	800028c <__adddf3>
 800c3cc:	4632      	mov	r2, r6
 800c3ce:	463b      	mov	r3, r7
 800c3d0:	f7f4 f912 	bl	80005f8 <__aeabi_dmul>
 800c3d4:	a368      	add	r3, pc, #416	; (adr r3, 800c578 <atan+0x2e0>)
 800c3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3da:	f7f3 ff57 	bl	800028c <__adddf3>
 800c3de:	4642      	mov	r2, r8
 800c3e0:	464b      	mov	r3, r9
 800c3e2:	f7f4 f909 	bl	80005f8 <__aeabi_dmul>
 800c3e6:	a366      	add	r3, pc, #408	; (adr r3, 800c580 <atan+0x2e8>)
 800c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ec:	4680      	mov	r8, r0
 800c3ee:	4689      	mov	r9, r1
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	4639      	mov	r1, r7
 800c3f4:	f7f4 f900 	bl	80005f8 <__aeabi_dmul>
 800c3f8:	a363      	add	r3, pc, #396	; (adr r3, 800c588 <atan+0x2f0>)
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	f7f3 ff43 	bl	8000288 <__aeabi_dsub>
 800c402:	4632      	mov	r2, r6
 800c404:	463b      	mov	r3, r7
 800c406:	f7f4 f8f7 	bl	80005f8 <__aeabi_dmul>
 800c40a:	a361      	add	r3, pc, #388	; (adr r3, 800c590 <atan+0x2f8>)
 800c40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c410:	f7f3 ff3a 	bl	8000288 <__aeabi_dsub>
 800c414:	4632      	mov	r2, r6
 800c416:	463b      	mov	r3, r7
 800c418:	f7f4 f8ee 	bl	80005f8 <__aeabi_dmul>
 800c41c:	a35e      	add	r3, pc, #376	; (adr r3, 800c598 <atan+0x300>)
 800c41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c422:	f7f3 ff31 	bl	8000288 <__aeabi_dsub>
 800c426:	4632      	mov	r2, r6
 800c428:	463b      	mov	r3, r7
 800c42a:	f7f4 f8e5 	bl	80005f8 <__aeabi_dmul>
 800c42e:	a35c      	add	r3, pc, #368	; (adr r3, 800c5a0 <atan+0x308>)
 800c430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c434:	f7f3 ff28 	bl	8000288 <__aeabi_dsub>
 800c438:	4632      	mov	r2, r6
 800c43a:	463b      	mov	r3, r7
 800c43c:	f7f4 f8dc 	bl	80005f8 <__aeabi_dmul>
 800c440:	4602      	mov	r2, r0
 800c442:	460b      	mov	r3, r1
 800c444:	4640      	mov	r0, r8
 800c446:	4649      	mov	r1, r9
 800c448:	f7f3 ff20 	bl	800028c <__adddf3>
 800c44c:	4622      	mov	r2, r4
 800c44e:	462b      	mov	r3, r5
 800c450:	f7f4 f8d2 	bl	80005f8 <__aeabi_dmul>
 800c454:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c458:	4602      	mov	r2, r0
 800c45a:	460b      	mov	r3, r1
 800c45c:	d14b      	bne.n	800c4f6 <atan+0x25e>
 800c45e:	4620      	mov	r0, r4
 800c460:	4629      	mov	r1, r5
 800c462:	f7f3 ff11 	bl	8000288 <__aeabi_dsub>
 800c466:	e72c      	b.n	800c2c2 <atan+0x2a>
 800c468:	ee10 0a10 	vmov	r0, s0
 800c46c:	2200      	movs	r2, #0
 800c46e:	4b53      	ldr	r3, [pc, #332]	; (800c5bc <atan+0x324>)
 800c470:	4629      	mov	r1, r5
 800c472:	f7f3 ff09 	bl	8000288 <__aeabi_dsub>
 800c476:	2200      	movs	r2, #0
 800c478:	4606      	mov	r6, r0
 800c47a:	460f      	mov	r7, r1
 800c47c:	4b4f      	ldr	r3, [pc, #316]	; (800c5bc <atan+0x324>)
 800c47e:	4620      	mov	r0, r4
 800c480:	4629      	mov	r1, r5
 800c482:	f7f3 ff03 	bl	800028c <__adddf3>
 800c486:	4602      	mov	r2, r0
 800c488:	460b      	mov	r3, r1
 800c48a:	4630      	mov	r0, r6
 800c48c:	4639      	mov	r1, r7
 800c48e:	f7f4 f9dd 	bl	800084c <__aeabi_ddiv>
 800c492:	f04f 0a01 	mov.w	sl, #1
 800c496:	4604      	mov	r4, r0
 800c498:	460d      	mov	r5, r1
 800c49a:	e764      	b.n	800c366 <atan+0xce>
 800c49c:	4b49      	ldr	r3, [pc, #292]	; (800c5c4 <atan+0x32c>)
 800c49e:	429e      	cmp	r6, r3
 800c4a0:	dc1d      	bgt.n	800c4de <atan+0x246>
 800c4a2:	ee10 0a10 	vmov	r0, s0
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	4b47      	ldr	r3, [pc, #284]	; (800c5c8 <atan+0x330>)
 800c4aa:	4629      	mov	r1, r5
 800c4ac:	f7f3 feec 	bl	8000288 <__aeabi_dsub>
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	460f      	mov	r7, r1
 800c4b6:	4b44      	ldr	r3, [pc, #272]	; (800c5c8 <atan+0x330>)
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	4629      	mov	r1, r5
 800c4bc:	f7f4 f89c 	bl	80005f8 <__aeabi_dmul>
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	4b3e      	ldr	r3, [pc, #248]	; (800c5bc <atan+0x324>)
 800c4c4:	f7f3 fee2 	bl	800028c <__adddf3>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	4639      	mov	r1, r7
 800c4d0:	f7f4 f9bc 	bl	800084c <__aeabi_ddiv>
 800c4d4:	f04f 0a02 	mov.w	sl, #2
 800c4d8:	4604      	mov	r4, r0
 800c4da:	460d      	mov	r5, r1
 800c4dc:	e743      	b.n	800c366 <atan+0xce>
 800c4de:	462b      	mov	r3, r5
 800c4e0:	ee10 2a10 	vmov	r2, s0
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	4939      	ldr	r1, [pc, #228]	; (800c5cc <atan+0x334>)
 800c4e8:	f7f4 f9b0 	bl	800084c <__aeabi_ddiv>
 800c4ec:	f04f 0a03 	mov.w	sl, #3
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	460d      	mov	r5, r1
 800c4f4:	e737      	b.n	800c366 <atan+0xce>
 800c4f6:	4b36      	ldr	r3, [pc, #216]	; (800c5d0 <atan+0x338>)
 800c4f8:	4e36      	ldr	r6, [pc, #216]	; (800c5d4 <atan+0x33c>)
 800c4fa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c4fe:	4456      	add	r6, sl
 800c500:	449a      	add	sl, r3
 800c502:	e9da 2300 	ldrd	r2, r3, [sl]
 800c506:	f7f3 febf 	bl	8000288 <__aeabi_dsub>
 800c50a:	4622      	mov	r2, r4
 800c50c:	462b      	mov	r3, r5
 800c50e:	f7f3 febb 	bl	8000288 <__aeabi_dsub>
 800c512:	4602      	mov	r2, r0
 800c514:	460b      	mov	r3, r1
 800c516:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c51a:	f7f3 feb5 	bl	8000288 <__aeabi_dsub>
 800c51e:	f1bb 0f00 	cmp.w	fp, #0
 800c522:	4604      	mov	r4, r0
 800c524:	460d      	mov	r5, r1
 800c526:	f6bf aed6 	bge.w	800c2d6 <atan+0x3e>
 800c52a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c52e:	461d      	mov	r5, r3
 800c530:	e6d1      	b.n	800c2d6 <atan+0x3e>
 800c532:	a51d      	add	r5, pc, #116	; (adr r5, 800c5a8 <atan+0x310>)
 800c534:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c538:	e6cd      	b.n	800c2d6 <atan+0x3e>
 800c53a:	bf00      	nop
 800c53c:	f3af 8000 	nop.w
 800c540:	54442d18 	.word	0x54442d18
 800c544:	3ff921fb 	.word	0x3ff921fb
 800c548:	8800759c 	.word	0x8800759c
 800c54c:	7e37e43c 	.word	0x7e37e43c
 800c550:	e322da11 	.word	0xe322da11
 800c554:	3f90ad3a 	.word	0x3f90ad3a
 800c558:	24760deb 	.word	0x24760deb
 800c55c:	3fa97b4b 	.word	0x3fa97b4b
 800c560:	a0d03d51 	.word	0xa0d03d51
 800c564:	3fb10d66 	.word	0x3fb10d66
 800c568:	c54c206e 	.word	0xc54c206e
 800c56c:	3fb745cd 	.word	0x3fb745cd
 800c570:	920083ff 	.word	0x920083ff
 800c574:	3fc24924 	.word	0x3fc24924
 800c578:	5555550d 	.word	0x5555550d
 800c57c:	3fd55555 	.word	0x3fd55555
 800c580:	2c6a6c2f 	.word	0x2c6a6c2f
 800c584:	bfa2b444 	.word	0xbfa2b444
 800c588:	52defd9a 	.word	0x52defd9a
 800c58c:	3fadde2d 	.word	0x3fadde2d
 800c590:	af749a6d 	.word	0xaf749a6d
 800c594:	3fb3b0f2 	.word	0x3fb3b0f2
 800c598:	fe231671 	.word	0xfe231671
 800c59c:	3fbc71c6 	.word	0x3fbc71c6
 800c5a0:	9998ebc4 	.word	0x9998ebc4
 800c5a4:	3fc99999 	.word	0x3fc99999
 800c5a8:	54442d18 	.word	0x54442d18
 800c5ac:	bff921fb 	.word	0xbff921fb
 800c5b0:	440fffff 	.word	0x440fffff
 800c5b4:	7ff00000 	.word	0x7ff00000
 800c5b8:	3fdbffff 	.word	0x3fdbffff
 800c5bc:	3ff00000 	.word	0x3ff00000
 800c5c0:	3ff2ffff 	.word	0x3ff2ffff
 800c5c4:	40037fff 	.word	0x40037fff
 800c5c8:	3ff80000 	.word	0x3ff80000
 800c5cc:	bff00000 	.word	0xbff00000
 800c5d0:	0800ccb0 	.word	0x0800ccb0
 800c5d4:	0800cc90 	.word	0x0800cc90

0800c5d8 <fabs>:
 800c5d8:	ec51 0b10 	vmov	r0, r1, d0
 800c5dc:	ee10 2a10 	vmov	r2, s0
 800c5e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c5e4:	ec43 2b10 	vmov	d0, r2, r3
 800c5e8:	4770      	bx	lr
 800c5ea:	0000      	movs	r0, r0
 800c5ec:	0000      	movs	r0, r0
	...

0800c5f0 <floor>:
 800c5f0:	ec51 0b10 	vmov	r0, r1, d0
 800c5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c5fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c600:	2e13      	cmp	r6, #19
 800c602:	460c      	mov	r4, r1
 800c604:	ee10 5a10 	vmov	r5, s0
 800c608:	4680      	mov	r8, r0
 800c60a:	dc34      	bgt.n	800c676 <floor+0x86>
 800c60c:	2e00      	cmp	r6, #0
 800c60e:	da16      	bge.n	800c63e <floor+0x4e>
 800c610:	a335      	add	r3, pc, #212	; (adr r3, 800c6e8 <floor+0xf8>)
 800c612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c616:	f7f3 fe39 	bl	800028c <__adddf3>
 800c61a:	2200      	movs	r2, #0
 800c61c:	2300      	movs	r3, #0
 800c61e:	f7f4 fa7b 	bl	8000b18 <__aeabi_dcmpgt>
 800c622:	b148      	cbz	r0, 800c638 <floor+0x48>
 800c624:	2c00      	cmp	r4, #0
 800c626:	da59      	bge.n	800c6dc <floor+0xec>
 800c628:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c62c:	4a30      	ldr	r2, [pc, #192]	; (800c6f0 <floor+0x100>)
 800c62e:	432b      	orrs	r3, r5
 800c630:	2500      	movs	r5, #0
 800c632:	42ab      	cmp	r3, r5
 800c634:	bf18      	it	ne
 800c636:	4614      	movne	r4, r2
 800c638:	4621      	mov	r1, r4
 800c63a:	4628      	mov	r0, r5
 800c63c:	e025      	b.n	800c68a <floor+0x9a>
 800c63e:	4f2d      	ldr	r7, [pc, #180]	; (800c6f4 <floor+0x104>)
 800c640:	4137      	asrs	r7, r6
 800c642:	ea01 0307 	and.w	r3, r1, r7
 800c646:	4303      	orrs	r3, r0
 800c648:	d01f      	beq.n	800c68a <floor+0x9a>
 800c64a:	a327      	add	r3, pc, #156	; (adr r3, 800c6e8 <floor+0xf8>)
 800c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c650:	f7f3 fe1c 	bl	800028c <__adddf3>
 800c654:	2200      	movs	r2, #0
 800c656:	2300      	movs	r3, #0
 800c658:	f7f4 fa5e 	bl	8000b18 <__aeabi_dcmpgt>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d0eb      	beq.n	800c638 <floor+0x48>
 800c660:	2c00      	cmp	r4, #0
 800c662:	bfbe      	ittt	lt
 800c664:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c668:	fa43 f606 	asrlt.w	r6, r3, r6
 800c66c:	19a4      	addlt	r4, r4, r6
 800c66e:	ea24 0407 	bic.w	r4, r4, r7
 800c672:	2500      	movs	r5, #0
 800c674:	e7e0      	b.n	800c638 <floor+0x48>
 800c676:	2e33      	cmp	r6, #51	; 0x33
 800c678:	dd0b      	ble.n	800c692 <floor+0xa2>
 800c67a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c67e:	d104      	bne.n	800c68a <floor+0x9a>
 800c680:	ee10 2a10 	vmov	r2, s0
 800c684:	460b      	mov	r3, r1
 800c686:	f7f3 fe01 	bl	800028c <__adddf3>
 800c68a:	ec41 0b10 	vmov	d0, r0, r1
 800c68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c692:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c696:	f04f 33ff 	mov.w	r3, #4294967295
 800c69a:	fa23 f707 	lsr.w	r7, r3, r7
 800c69e:	4207      	tst	r7, r0
 800c6a0:	d0f3      	beq.n	800c68a <floor+0x9a>
 800c6a2:	a311      	add	r3, pc, #68	; (adr r3, 800c6e8 <floor+0xf8>)
 800c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a8:	f7f3 fdf0 	bl	800028c <__adddf3>
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	f7f4 fa32 	bl	8000b18 <__aeabi_dcmpgt>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	d0bf      	beq.n	800c638 <floor+0x48>
 800c6b8:	2c00      	cmp	r4, #0
 800c6ba:	da02      	bge.n	800c6c2 <floor+0xd2>
 800c6bc:	2e14      	cmp	r6, #20
 800c6be:	d103      	bne.n	800c6c8 <floor+0xd8>
 800c6c0:	3401      	adds	r4, #1
 800c6c2:	ea25 0507 	bic.w	r5, r5, r7
 800c6c6:	e7b7      	b.n	800c638 <floor+0x48>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c6ce:	fa03 f606 	lsl.w	r6, r3, r6
 800c6d2:	4435      	add	r5, r6
 800c6d4:	4545      	cmp	r5, r8
 800c6d6:	bf38      	it	cc
 800c6d8:	18e4      	addcc	r4, r4, r3
 800c6da:	e7f2      	b.n	800c6c2 <floor+0xd2>
 800c6dc:	2500      	movs	r5, #0
 800c6de:	462c      	mov	r4, r5
 800c6e0:	e7aa      	b.n	800c638 <floor+0x48>
 800c6e2:	bf00      	nop
 800c6e4:	f3af 8000 	nop.w
 800c6e8:	8800759c 	.word	0x8800759c
 800c6ec:	7e37e43c 	.word	0x7e37e43c
 800c6f0:	bff00000 	.word	0xbff00000
 800c6f4:	000fffff 	.word	0x000fffff

0800c6f8 <scalbn>:
 800c6f8:	b570      	push	{r4, r5, r6, lr}
 800c6fa:	ec55 4b10 	vmov	r4, r5, d0
 800c6fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c702:	4606      	mov	r6, r0
 800c704:	462b      	mov	r3, r5
 800c706:	b9aa      	cbnz	r2, 800c734 <scalbn+0x3c>
 800c708:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c70c:	4323      	orrs	r3, r4
 800c70e:	d03b      	beq.n	800c788 <scalbn+0x90>
 800c710:	4b31      	ldr	r3, [pc, #196]	; (800c7d8 <scalbn+0xe0>)
 800c712:	4629      	mov	r1, r5
 800c714:	2200      	movs	r2, #0
 800c716:	ee10 0a10 	vmov	r0, s0
 800c71a:	f7f3 ff6d 	bl	80005f8 <__aeabi_dmul>
 800c71e:	4b2f      	ldr	r3, [pc, #188]	; (800c7dc <scalbn+0xe4>)
 800c720:	429e      	cmp	r6, r3
 800c722:	4604      	mov	r4, r0
 800c724:	460d      	mov	r5, r1
 800c726:	da12      	bge.n	800c74e <scalbn+0x56>
 800c728:	a327      	add	r3, pc, #156	; (adr r3, 800c7c8 <scalbn+0xd0>)
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	f7f3 ff63 	bl	80005f8 <__aeabi_dmul>
 800c732:	e009      	b.n	800c748 <scalbn+0x50>
 800c734:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c738:	428a      	cmp	r2, r1
 800c73a:	d10c      	bne.n	800c756 <scalbn+0x5e>
 800c73c:	ee10 2a10 	vmov	r2, s0
 800c740:	4620      	mov	r0, r4
 800c742:	4629      	mov	r1, r5
 800c744:	f7f3 fda2 	bl	800028c <__adddf3>
 800c748:	4604      	mov	r4, r0
 800c74a:	460d      	mov	r5, r1
 800c74c:	e01c      	b.n	800c788 <scalbn+0x90>
 800c74e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c752:	460b      	mov	r3, r1
 800c754:	3a36      	subs	r2, #54	; 0x36
 800c756:	4432      	add	r2, r6
 800c758:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c75c:	428a      	cmp	r2, r1
 800c75e:	dd0b      	ble.n	800c778 <scalbn+0x80>
 800c760:	ec45 4b11 	vmov	d1, r4, r5
 800c764:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c7d0 <scalbn+0xd8>
 800c768:	f000 f83c 	bl	800c7e4 <copysign>
 800c76c:	a318      	add	r3, pc, #96	; (adr r3, 800c7d0 <scalbn+0xd8>)
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	ec51 0b10 	vmov	r0, r1, d0
 800c776:	e7da      	b.n	800c72e <scalbn+0x36>
 800c778:	2a00      	cmp	r2, #0
 800c77a:	dd08      	ble.n	800c78e <scalbn+0x96>
 800c77c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c780:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c784:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c788:	ec45 4b10 	vmov	d0, r4, r5
 800c78c:	bd70      	pop	{r4, r5, r6, pc}
 800c78e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c792:	da0d      	bge.n	800c7b0 <scalbn+0xb8>
 800c794:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c798:	429e      	cmp	r6, r3
 800c79a:	ec45 4b11 	vmov	d1, r4, r5
 800c79e:	dce1      	bgt.n	800c764 <scalbn+0x6c>
 800c7a0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c7c8 <scalbn+0xd0>
 800c7a4:	f000 f81e 	bl	800c7e4 <copysign>
 800c7a8:	a307      	add	r3, pc, #28	; (adr r3, 800c7c8 <scalbn+0xd0>)
 800c7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ae:	e7e0      	b.n	800c772 <scalbn+0x7a>
 800c7b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c7b4:	3236      	adds	r2, #54	; 0x36
 800c7b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c7ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c7be:	4620      	mov	r0, r4
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	4b06      	ldr	r3, [pc, #24]	; (800c7e0 <scalbn+0xe8>)
 800c7c6:	e7b2      	b.n	800c72e <scalbn+0x36>
 800c7c8:	c2f8f359 	.word	0xc2f8f359
 800c7cc:	01a56e1f 	.word	0x01a56e1f
 800c7d0:	8800759c 	.word	0x8800759c
 800c7d4:	7e37e43c 	.word	0x7e37e43c
 800c7d8:	43500000 	.word	0x43500000
 800c7dc:	ffff3cb0 	.word	0xffff3cb0
 800c7e0:	3c900000 	.word	0x3c900000

0800c7e4 <copysign>:
 800c7e4:	ec51 0b10 	vmov	r0, r1, d0
 800c7e8:	ee11 0a90 	vmov	r0, s3
 800c7ec:	ee10 2a10 	vmov	r2, s0
 800c7f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c7f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c7f8:	ea41 0300 	orr.w	r3, r1, r0
 800c7fc:	ec43 2b10 	vmov	d0, r2, r3
 800c800:	4770      	bx	lr
	...

0800c804 <_init>:
 800c804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c806:	bf00      	nop
 800c808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c80a:	bc08      	pop	{r3}
 800c80c:	469e      	mov	lr, r3
 800c80e:	4770      	bx	lr

0800c810 <_fini>:
 800c810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c812:	bf00      	nop
 800c814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c816:	bc08      	pop	{r3}
 800c818:	469e      	mov	lr, r3
 800c81a:	4770      	bx	lr
