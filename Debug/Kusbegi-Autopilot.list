
Kusbegi-Autopilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008940  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08008ac8  08008ac8  00018ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d38  08008d38  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d40  08008d40  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d40  08008d40  00018d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d44  08008d44  00018d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  200001e0  08008f24  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  08008f24  000207d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d32c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003489  00000000  00000000  0003d538  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  000409c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  00041bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024773  00000000  00000000  00042c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e65  00000000  00000000  000673bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0bc2  00000000  00000000  00079220  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149de2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c4  00000000  00000000  00149e60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ab0 	.word	0x08008ab0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	08008ab0 	.word	0x08008ab0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	73fb      	strb	r3, [r7, #15]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8000e12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 f9bd 	bl	8001194 <null_ptr_check>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000e1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d11f      	bne.n	8000e66 <bmp280_get_regs+0x66>
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d01c      	beq.n	8000e66 <bmp280_get_regs+0x66>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	789b      	ldrb	r3, [r3, #2]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d103      	bne.n	8000e3c <bmp280_get_regs+0x3c>
        {
            reg_addr = reg_addr | 0x80;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e3a:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len,huartI2C);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685c      	ldr	r4, [r3, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7858      	ldrb	r0, [r3, #1]
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	7bf9      	ldrb	r1, [r7, #15]
 8000e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	68ba      	ldr	r2, [r7, #8]
 8000e52:	47a0      	blx	r4
 8000e54:	4603      	mov	r3, r0
 8000e56:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000e58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d004      	beq.n	8000e6a <bmp280_get_regs+0x6a>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000e60:	23fc      	movs	r3, #252	; 0xfc
 8000e62:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000e64:	e001      	b.n	8000e6a <bmp280_get_regs+0x6a>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000e66:	23ff      	movs	r3, #255	; 0xff
 8000e68:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	371c      	adds	r7, #28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd90      	pop	{r4, r7, pc}

08000e76 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8000e76:	b5b0      	push	{r4, r5, r7, lr}
 8000e78:	b08a      	sub	sp, #40	; 0x28
 8000e7a:	af02      	add	r7, sp, #8
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4613      	mov	r3, r2
 8000e84:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d901      	bls.n	8000e90 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev,huartI2C);
 8000e90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e92:	6838      	ldr	r0, [r7, #0]
 8000e94:	f000 f97e 	bl	8001194 <null_ptr_check>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000e9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d150      	bne.n	8000f46 <bmp280_set_regs+0xd0>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d04d      	beq.n	8000f46 <bmp280_set_regs+0xd0>
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d04a      	beq.n	8000f46 <bmp280_set_regs+0xd0>
    {
        if (len != 0)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d044      	beq.n	8000f40 <bmp280_set_regs+0xca>
        {
            temp_buff[0] = reg_data[0];
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	789b      	ldrb	r3, [r3, #2]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d114      	bne.n	8000eee <bmp280_set_regs+0x78>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	76fb      	strb	r3, [r7, #27]
 8000ec8:	e00d      	b.n	8000ee6 <bmp280_set_regs+0x70>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000eca:	7efb      	ldrb	r3, [r7, #27]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781a      	ldrb	r2, [r3, #0]
 8000ed2:	7efb      	ldrb	r3, [r7, #27]
 8000ed4:	68f9      	ldr	r1, [r7, #12]
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000ee0:	7efb      	ldrb	r3, [r7, #27]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	76fb      	strb	r3, [r7, #27]
 8000ee6:	7efa      	ldrb	r2, [r7, #27]
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d3ed      	bcc.n	8000eca <bmp280_set_regs+0x54>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d90d      	bls.n	8000f10 <bmp280_set_regs+0x9a>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f107 0110 	add.w	r1, r7, #16
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f000 f96a 	bl	80011d6 <interleave_data>
                temp_len = ((len * 2) - 1);
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	83bb      	strh	r3, [r7, #28]
 8000f0e:	e001      	b.n	8000f14 <bmp280_set_regs+0x9e>
            }
            else
            {
                temp_len = len;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len,huartI2C);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689c      	ldr	r4, [r3, #8]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	7858      	ldrb	r0, [r3, #1]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	7819      	ldrb	r1, [r3, #0]
 8000f20:	8bbd      	ldrh	r5, [r7, #28]
 8000f22:	f107 0210 	add.w	r2, r7, #16
 8000f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	462b      	mov	r3, r5
 8000f2c:	47a0      	blx	r4
 8000f2e:	4603      	mov	r3, r0
 8000f30:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8000f32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d008      	beq.n	8000f4c <bmp280_set_regs+0xd6>
            {
                rslt = BMP280_E_COMM_FAIL;
 8000f3a:	23fc      	movs	r3, #252	; 0xfc
 8000f3c:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000f3e:	e005      	b.n	8000f4c <bmp280_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8000f40:	23fd      	movs	r3, #253	; 0xfd
 8000f42:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000f44:	e002      	b.n	8000f4c <bmp280_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000f46:	23ff      	movs	r3, #255	; 0xff
 8000f48:	77fb      	strb	r3, [r7, #31]
 8000f4a:	e000      	b.n	8000f4e <bmp280_set_regs+0xd8>
        if (len != 0)
 8000f4c:	bf00      	nop
    }

    return rslt;
 8000f4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bdb0      	pop	{r4, r5, r7, pc}

08000f5a <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af02      	add	r7, sp, #8
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8000f64:	23e0      	movs	r3, #224	; 0xe0
 8000f66:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8000f68:	23b6      	movs	r3, #182	; 0xb6
 8000f6a:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev,huartI2C);
 8000f6c:	6839      	ldr	r1, [r7, #0]
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f910 	bl	8001194 <null_ptr_check>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10f      	bne.n	8000fa0 <bmp280_soft_reset+0x46>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev,huartI2C);
 8000f80:	f107 010d 	add.w	r1, r7, #13
 8000f84:	f107 000e 	add.w	r0, r7, #14
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f7ff ff71 	bl	8000e76 <bmp280_set_regs>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	4798      	blx	r3
    }

    return rslt;
 8000fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
    int8_t rslt;


    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev,huartI2C);
 8000fba:	6839      	ldr	r1, [r7, #0]
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f8e9 	bl	8001194 <null_ptr_check>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d154      	bne.n	8001078 <bmp280_init+0xcc>
    {
        while (try_count)
 8000fce:	e031      	b.n	8001034 <bmp280_init+0x88>
        {

            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev,huartI2C);
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	20d0      	movs	r0, #208	; 0xd0
 8000fdc:	f7ff ff10 	bl	8000e00 <bmp280_get_regs>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]


            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8000fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d11c      	bne.n	8001026 <bmp280_init+0x7a>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8000ff0:	2b56      	cmp	r3, #86	; 0x56
 8000ff2:	d007      	beq.n	8001004 <bmp280_init+0x58>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b57      	cmp	r3, #87	; 0x57
 8000ffa:	d003      	beq.n	8001004 <bmp280_init+0x58>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b58      	cmp	r3, #88	; 0x58
 8001002:	d110      	bne.n	8001026 <bmp280_init+0x7a>
            {
                rslt = bmp280_soft_reset(dev,huartI2C);
 8001004:	6839      	ldr	r1, [r7, #0]
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffa7 	bl	8000f5a <bmp280_soft_reset>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 8001010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d111      	bne.n	800103c <bmp280_init+0x90>
                {
                    rslt = get_calib_param(dev,huartI2C);
 8001018:	6839      	ldr	r1, [r7, #0]
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f906 	bl	800122c <get_calib_param>
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8001024:	e00a      	b.n	800103c <bmp280_init+0x90>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	200a      	movs	r0, #10
 800102c:	4798      	blx	r3
            --try_count;
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	3b01      	subs	r3, #1
 8001032:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1ca      	bne.n	8000fd0 <bmp280_init+0x24>
 800103a:	e000      	b.n	800103e <bmp280_init+0x92>
                break;
 800103c:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <bmp280_init+0x9c>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8001044:	23fe      	movs	r3, #254	; 0xfe
 8001046:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8001048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d113      	bne.n	8001078 <bmp280_init+0xcc>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }


    return rslt;
 8001078:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af02      	add	r7, sp, #8
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001090:	2300      	movs	r3, #0
 8001092:	753b      	strb	r3, [r7, #20]
 8001094:	2300      	movs	r3, #0
 8001096:	757b      	strb	r3, [r7, #21]

    rslt = null_ptr_check(dev,huartI2C);
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	68b8      	ldr	r0, [r7, #8]
 800109c:	f000 f87a 	bl	8001194 <null_ptr_check>
 80010a0:	4603      	mov	r3, r0
 80010a2:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 80010a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d139      	bne.n	8001120 <bmp280_get_config+0x9c>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d036      	beq.n	8001120 <bmp280_get_config+0x9c>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev,huartI2C);
 80010b2:	f107 0114 	add.w	r1, r7, #20
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2202      	movs	r2, #2
 80010be:	20f4      	movs	r0, #244	; 0xf4
 80010c0:	f7ff fe9e 	bl	8000e00 <bmp280_get_regs>
 80010c4:	4603      	mov	r3, r0
 80010c6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80010c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d129      	bne.n	8001124 <bmp280_get_config+0xa0>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 80010d0:	7d3b      	ldrb	r3, [r7, #20]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 80010da:	7d3b      	ldrb	r3, [r7, #20]
 80010dc:	109b      	asrs	r3, r3, #2
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80010ea:	7d7b      	ldrb	r3, [r7, #21]
 80010ec:	095b      	lsrs	r3, r3, #5
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80010f4:	7d7b      	ldrb	r3, [r7, #21]
 80010f6:	109b      	asrs	r3, r3, #2
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 8001104:	7d7b      	ldrb	r3, [r7, #21]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	b2da      	uxtb	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	332c      	adds	r3, #44	; 0x2c
 8001116:	6810      	ldr	r0, [r2, #0]
 8001118:	6018      	str	r0, [r3, #0]
 800111a:	7912      	ldrb	r2, [r2, #4]
 800111c:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 800111e:	e001      	b.n	8001124 <bmp280_get_config+0xa0>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001120:	23ff      	movs	r3, #255	; 0xff
 8001122:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001124:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev,huartI2C);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	68f9      	ldr	r1, [r7, #12]
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f914 	bl	8001370 <conf_sensor>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev,huartI2C);
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	68b8      	ldr	r0, [r7, #8]
 8001164:	f000 f816 	bl	8001194 <null_ptr_check>
 8001168:	4603      	mov	r3, r0
 800116a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMP280_OK)
 800116c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d109      	bne.n	8001188 <bmp280_set_power_mode+0x36>
    {
        rslt = conf_sensor(mode, &dev->conf, dev,huartI2C);
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800117a:	7bf8      	ldrb	r0, [r7, #15]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f000 f8f6 	bl	8001370 <conf_sensor>
 8001184:	4603      	mov	r3, r0
 8001186:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001188:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00b      	beq.n	80011bc <null_ptr_check+0x28>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <null_ptr_check+0x28>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <null_ptr_check+0x28>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <null_ptr_check+0x2e>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 80011bc:	23ff      	movs	r3, #255	; 0xff
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e001      	b.n	80011c6 <null_ptr_check+0x32>
    }
    else
    {
        rslt = BMP280_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b087      	sub	sp, #28
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 80011e4:	2301      	movs	r3, #1
 80011e6:	75fb      	strb	r3, [r7, #23]
 80011e8:	e016      	b.n	8001218 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	441a      	add	r2, r3
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	3b01      	subs	r3, #1
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	440b      	add	r3, r1
 80011fa:	7812      	ldrb	r2, [r2, #0]
 80011fc:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	441a      	add	r2, r3
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4619      	mov	r1, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	440b      	add	r3, r1
 800120e:	7812      	ldrb	r2, [r2, #0]
 8001210:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	3301      	adds	r3, #1
 8001216:	75fb      	strb	r3, [r7, #23]
 8001218:	7dfa      	ldrb	r2, [r7, #23]
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	429a      	cmp	r2, r3
 800121e:	d3e4      	bcc.n	80011ea <interleave_data+0x14>
    }
}
 8001220:	bf00      	nop
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af02      	add	r7, sp, #8
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]
 8001246:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev,huartI2C);
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffa2 	bl	8001194 <null_ptr_check>
 8001250:	4603      	mov	r3, r0
 8001252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001256:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 8082 	bne.w	8001364 <get_calib_param+0x138>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev,huartI2C);
 8001260:	f107 010c 	add.w	r1, r7, #12
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2218      	movs	r2, #24
 800126c:	2088      	movs	r0, #136	; 0x88
 800126e:	f7ff fdc7 	bl	8000e00 <bmp280_get_regs>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8001278:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800127c:	2b00      	cmp	r3, #0
 800127e:	d171      	bne.n	8001364 <get_calib_param+0x138>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8001280:	7b7b      	ldrb	r3, [r7, #13]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21a      	sxth	r2, r3
 8001286:	7b3b      	ldrb	r3, [r7, #12]
 8001288:	b21b      	sxth	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b21b      	sxth	r3, r3
 800128e:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 80012a6:	7c7b      	ldrb	r3, [r7, #17]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	7c3b      	ldrb	r3, [r7, #16]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 80012b8:	7cfb      	ldrb	r3, [r7, #19]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	7cbb      	ldrb	r3, [r7, #18]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 80012cc:	7d7b      	ldrb	r3, [r7, #21]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	7d3b      	ldrb	r3, [r7, #20]
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	7dbb      	ldrb	r3, [r7, #22]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 80012f0:	7e7b      	ldrb	r3, [r7, #25]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	7e3b      	ldrb	r3, [r7, #24]
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8001302:	7efb      	ldrb	r3, [r7, #27]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21a      	sxth	r2, r3
 8001308:	7ebb      	ldrb	r3, [r7, #26]
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8001314:	7f7b      	ldrb	r3, [r7, #29]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b21a      	sxth	r2, r3
 800131a:	7f3b      	ldrb	r3, [r7, #28]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8001326:	7ffb      	ldrb	r3, [r7, #31]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b21a      	sxth	r2, r3
 800132c:	7fbb      	ldrb	r3, [r7, #30]
 800132e:	b21b      	sxth	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8001338:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 800134e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	b21a      	sxth	r2, r3
 8001356:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8001364:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001368:	4618      	mov	r0, r3
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev,I2C_HandleTypeDef *huartI2C)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af02      	add	r7, sp, #8
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	4603      	mov	r3, r0
 800137e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001380:	2300      	movs	r3, #0
 8001382:	753b      	strb	r3, [r7, #20]
 8001384:	2300      	movs	r3, #0
 8001386:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8001388:	4b5a      	ldr	r3, [pc, #360]	; (80014f4 <conf_sensor+0x184>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev,huartI2C);
 800138e:	6839      	ldr	r1, [r7, #0]
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff feff 	bl	8001194 <null_ptr_check>
 8001396:	4603      	mov	r3, r0
 8001398:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 800139a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 809d 	bne.w	80014de <conf_sensor+0x16e>
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8099 	beq.w	80014de <conf_sensor+0x16e>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev,huartI2C);
 80013ac:	f107 0114 	add.w	r1, r7, #20
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2202      	movs	r2, #2
 80013b8:	20f4      	movs	r0, #244	; 0xf4
 80013ba:	f7ff fd21 	bl	8000e00 <bmp280_get_regs>
 80013be:	4603      	mov	r3, r0
 80013c0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80013c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 808c 	bne.w	80014e4 <conf_sensor+0x174>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev,huartI2C);
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fdc3 	bl	8000f5a <bmp280_soft_reset>
 80013d4:	4603      	mov	r3, r0
 80013d6:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 80013d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f040 8081 	bne.w	80014e4 <conf_sensor+0x174>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 80013e2:	7d3b      	ldrb	r3, [r7, #20]
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	f003 031f 	and.w	r3, r3, #31
 80013ea:	b25a      	sxtb	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	015b      	lsls	r3, r3, #5
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 80013fc:	7d3b      	ldrb	r3, [r7, #20]
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	f023 031c 	bic.w	r3, r3, #28
 8001404:	b25a      	sxtb	r2, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	b25b      	sxtb	r3, r3
 800140e:	f003 031c 	and.w	r3, r3, #28
 8001412:	b25b      	sxtb	r3, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	b25b      	sxtb	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 800141c:	7d7b      	ldrb	r3, [r7, #21]
 800141e:	b25b      	sxtb	r3, r3
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	b25a      	sxtb	r2, r3
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	789b      	ldrb	r3, [r3, #2]
 800142a:	015b      	lsls	r3, r3, #5
 800142c:	b25b      	sxtb	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b25b      	sxtb	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8001436:	7d7b      	ldrb	r3, [r7, #21]
 8001438:	b25b      	sxtb	r3, r3
 800143a:	f023 031c 	bic.w	r3, r3, #28
 800143e:	b25a      	sxtb	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	78db      	ldrb	r3, [r3, #3]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	b25b      	sxtb	r3, r3
 8001448:	f003 031c 	and.w	r3, r3, #28
 800144c:	b25b      	sxtb	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b25b      	sxtb	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8001456:	7d7b      	ldrb	r3, [r7, #21]
 8001458:	b25b      	sxtb	r3, r3
 800145a:	f023 0301 	bic.w	r3, r3, #1
 800145e:	b25a      	sxtb	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	791b      	ldrb	r3, [r3, #4]
 8001464:	b25b      	sxtb	r3, r3
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	b25b      	sxtb	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b25b      	sxtb	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev,huartI2C);
 8001474:	f107 0114 	add.w	r1, r7, #20
 8001478:	f107 0010 	add.w	r0, r7, #16
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f7ff fcf7 	bl	8000e76 <bmp280_set_regs>
 8001488:	4603      	mov	r3, r0
 800148a:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 800148c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d127      	bne.n	80014e4 <conf_sensor+0x174>
                {
                    dev->conf = *conf;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	332c      	adds	r3, #44	; 0x2c
 800149a:	6810      	ldr	r0, [r2, #0]
 800149c:	6018      	str	r0, [r3, #0]
 800149e:	7912      	ldrb	r2, [r2, #4]
 80014a0:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01d      	beq.n	80014e4 <conf_sensor+0x174>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 80014a8:	7d3b      	ldrb	r3, [r7, #20]
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	f023 0303 	bic.w	r3, r3, #3
 80014b0:	b25a      	sxtb	r2, r3
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev,huartI2C);
 80014c4:	f107 0114 	add.w	r1, r7, #20
 80014c8:	f107 0010 	add.w	r0, r7, #16
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f7ff fccf 	bl	8000e76 <bmp280_set_regs>
 80014d8:	4603      	mov	r3, r0
 80014da:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80014dc:	e002      	b.n	80014e4 <conf_sensor+0x174>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80014de:	23ff      	movs	r3, #255	; 0xff
 80014e0:	75fb      	strb	r3, [r7, #23]
 80014e2:	e000      	b.n	80014e6 <conf_sensor+0x176>
        if (rslt == BMP280_OK)
 80014e4:	bf00      	nop
    }

    return rslt;
 80014e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	08008ac8 	.word	0x08008ac8

080014f8 <reset_Buffer>:
 */


#include <drivers/BNO055/BNO055.h>

void reset_Buffer(void){
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	buffer[0] = 0;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <reset_Buffer+0x44>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <reset_Buffer+0x44>)
 8001504:	2200      	movs	r2, #0
 8001506:	705a      	strb	r2, [r3, #1]
	buffer[2] = 0;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <reset_Buffer+0x44>)
 800150a:	2200      	movs	r2, #0
 800150c:	709a      	strb	r2, [r3, #2]
	buffer[3] = 0;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <reset_Buffer+0x44>)
 8001510:	2200      	movs	r2, #0
 8001512:	70da      	strb	r2, [r3, #3]
	buffer[4] = 0;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <reset_Buffer+0x44>)
 8001516:	2200      	movs	r2, #0
 8001518:	711a      	strb	r2, [r3, #4]
	buffer[5] = 0;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <reset_Buffer+0x44>)
 800151c:	2200      	movs	r2, #0
 800151e:	715a      	strb	r2, [r3, #5]
	buffer[6] = 0;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <reset_Buffer+0x44>)
 8001522:	2200      	movs	r2, #0
 8001524:	719a      	strb	r2, [r3, #6]
	buffer[7] = 0;
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <reset_Buffer+0x44>)
 8001528:	2200      	movs	r2, #0
 800152a:	71da      	strb	r2, [r3, #7]
	buffer[8] = 0;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <reset_Buffer+0x44>)
 800152e:	2200      	movs	r2, #0
 8001530:	721a      	strb	r2, [r3, #8]
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20000218 	.word	0x20000218

08001540 <BNO055_Chip_ID_Check>:

int8_t BNO055_Chip_ID_Check(I2C_HandleTypeDef *huart) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	uint8_t chip_id;
	int8_t rslt;
	reset_Buffer();
 8001548:	f7ff ffd6 	bl	80014f8 <reset_Buffer>
	rslt = read8(huart, BNO055_READ_ADDR, BNO055_CHIP_ID_ADDR, &chip_id);
 800154c:	f107 030e 	add.w	r3, r7, #14
 8001550:	2200      	movs	r2, #0
 8001552:	2151      	movs	r1, #81	; 0x51
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f001 fb37 	bl	8002bc8 <read8>
 800155a:	4603      	mov	r3, r0
 800155c:	73fb      	strb	r3, [r7, #15]
	if (rslt == HAL_OK) {
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d107      	bne.n	8001576 <BNO055_Chip_ID_Check+0x36>
		if (chip_id == BNO055_ID) {
 8001566:	7bbb      	ldrb	r3, [r7, #14]
 8001568:	2ba0      	cmp	r3, #160	; 0xa0
 800156a:	d101      	bne.n	8001570 <BNO055_Chip_ID_Check+0x30>
			return BNO055_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	e004      	b.n	800157a <BNO055_Chip_ID_Check+0x3a>
		} else
			return BNO055_E_DEV_NOT_FOUND;
 8001570:	f06f 0312 	mvn.w	r3, #18
 8001574:	e001      	b.n	800157a <BNO055_Chip_ID_Check+0x3a>
	} else
		return rslt;
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <BNO055_Init>:

int8_t BNO055_Init(I2C_HandleTypeDef *huart, bno055_opmode_t mode,uint8_t delay_time) {
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	70fb      	strb	r3, [r7, #3]
 800158e:	4613      	mov	r3, r2
 8001590:	70bb      	strb	r3, [r7, #2]
	int8_t rslt;
	rslt = BNO055_Chip_ID_Check(huart);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffd4 	bl	8001540 <BNO055_Chip_ID_Check>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 800159c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <BNO055_Init+0x28>
		return rslt;
 80015a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a8:	e00c      	b.n	80015c4 <BNO055_Init+0x42>
	}

	//TODO: Add counter to count try. and try 5 times
	rslt = BNO055_SetMode(huart, mode);
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 fbba 	bl	8001d28 <BNO055_SetMode>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(delay_time);
 80015b8:	78bb      	ldrb	r3, [r7, #2]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 f83a 	bl	8003634 <HAL_Delay>
	return rslt;
 80015c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <BNO055_Read_Eul>:
	}
	return rslt;
}

//Reading Raw Data from BNO055
int8_t BNO055_Read_Eul(I2C_HandleTypeDef *huart,float *eulerXYZ) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t temp;
	rslt = BNO055_Chip_ID_Check(huart);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffb2 	bl	8001540 <BNO055_Chip_ID_Check>
 80015dc:	4603      	mov	r3, r0
 80015de:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 80015e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <BNO055_Read_Eul+0x22>
		return rslt;
 80015e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ec:	e0bf      	b.n	800176e <BNO055_Read_Eul+0x1a2>
	}

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_EUL_DATA_x_LSB_ADDR, &temp);
 80015ee:	f107 030e 	add.w	r3, r7, #14
 80015f2:	221a      	movs	r2, #26
 80015f4:	2151      	movs	r1, #81	; 0x51
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f001 fae6 	bl	8002bc8 <read8>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <BNO055_Read_Eul+0x42>
		return rslt;
 8001608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160c:	e0af      	b.n	800176e <BNO055_Read_Eul+0x1a2>
	buffer[1] = temp;
 800160e:	7bba      	ldrb	r2, [r7, #14]
 8001610:	4b59      	ldr	r3, [pc, #356]	; (8001778 <BNO055_Read_Eul+0x1ac>)
 8001612:	705a      	strb	r2, [r3, #1]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_EUL_DATA_x_MSB_ADDR, &temp);
 8001614:	f107 030e 	add.w	r3, r7, #14
 8001618:	221b      	movs	r2, #27
 800161a:	2151      	movs	r1, #81	; 0x51
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f001 fad3 	bl	8002bc8 <read8>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <BNO055_Read_Eul+0x68>
		return rslt;
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001632:	e09c      	b.n	800176e <BNO055_Read_Eul+0x1a2>
	buffer[2] = temp;
 8001634:	7bba      	ldrb	r2, [r7, #14]
 8001636:	4b50      	ldr	r3, [pc, #320]	; (8001778 <BNO055_Read_Eul+0x1ac>)
 8001638:	709a      	strb	r2, [r3, #2]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_EUL_DATA_y_LSB_ADDR, &temp);
 800163a:	f107 030e 	add.w	r3, r7, #14
 800163e:	221c      	movs	r2, #28
 8001640:	2151      	movs	r1, #81	; 0x51
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f001 fac0 	bl	8002bc8 <read8>
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 800164c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <BNO055_Read_Eul+0x8e>
		return rslt;
 8001654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001658:	e089      	b.n	800176e <BNO055_Read_Eul+0x1a2>
	buffer[3] = temp;
 800165a:	7bba      	ldrb	r2, [r7, #14]
 800165c:	4b46      	ldr	r3, [pc, #280]	; (8001778 <BNO055_Read_Eul+0x1ac>)
 800165e:	70da      	strb	r2, [r3, #3]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_EUL_DATA_y_MSB_ADDR, &temp);
 8001660:	f107 030e 	add.w	r3, r7, #14
 8001664:	221d      	movs	r2, #29
 8001666:	2151      	movs	r1, #81	; 0x51
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f001 faad 	bl	8002bc8 <read8>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <BNO055_Read_Eul+0xb4>
		return rslt;
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	e076      	b.n	800176e <BNO055_Read_Eul+0x1a2>
	buffer[4] = temp;
 8001680:	7bba      	ldrb	r2, [r7, #14]
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <BNO055_Read_Eul+0x1ac>)
 8001684:	711a      	strb	r2, [r3, #4]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_EUL_DATA_z_LSB_ADDR, &temp);
 8001686:	f107 030e 	add.w	r3, r7, #14
 800168a:	221e      	movs	r2, #30
 800168c:	2151      	movs	r1, #81	; 0x51
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f001 fa9a 	bl	8002bc8 <read8>
 8001694:	4603      	mov	r3, r0
 8001696:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <BNO055_Read_Eul+0xda>
		return rslt;
 80016a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a4:	e063      	b.n	800176e <BNO055_Read_Eul+0x1a2>
	buffer[5] = temp;
 80016a6:	7bba      	ldrb	r2, [r7, #14]
 80016a8:	4b33      	ldr	r3, [pc, #204]	; (8001778 <BNO055_Read_Eul+0x1ac>)
 80016aa:	715a      	strb	r2, [r3, #5]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_EUL_DATA_z_MSB_ADDR, &temp);
 80016ac:	f107 030e 	add.w	r3, r7, #14
 80016b0:	221f      	movs	r2, #31
 80016b2:	2151      	movs	r1, #81	; 0x51
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f001 fa87 	bl	8002bc8 <read8>
 80016ba:	4603      	mov	r3, r0
 80016bc:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <BNO055_Read_Eul+0x100>
		return rslt;
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	e050      	b.n	800176e <BNO055_Read_Eul+0x1a2>
	buffer[6] = temp;
 80016cc:	7bba      	ldrb	r2, [r7, #14]
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <BNO055_Read_Eul+0x1ac>)
 80016d0:	719a      	strb	r2, [r3, #6]

	data_read[0] = (buffer[1]) | ((buffer[2]) << 8);
 80016d2:	4b29      	ldr	r3, [pc, #164]	; (8001778 <BNO055_Read_Eul+0x1ac>)
 80016d4:	785b      	ldrb	r3, [r3, #1]
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <BNO055_Read_Eul+0x1ac>)
 80016da:	789b      	ldrb	r3, [r3, #2]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <BNO055_Read_Eul+0x1b0>)
 80016e6:	801a      	strh	r2, [r3, #0]
	data_read[1] = (buffer[3]) | ((buffer[4]) << 8);
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <BNO055_Read_Eul+0x1ac>)
 80016ea:	78db      	ldrb	r3, [r3, #3]
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <BNO055_Read_Eul+0x1ac>)
 80016f0:	791b      	ldrb	r3, [r3, #4]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	4313      	orrs	r3, r2
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <BNO055_Read_Eul+0x1b0>)
 80016fc:	805a      	strh	r2, [r3, #2]
	data_read[2] = (buffer[5]) | ((buffer[6]) << 8);
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <BNO055_Read_Eul+0x1ac>)
 8001700:	795b      	ldrb	r3, [r3, #5]
 8001702:	b21a      	sxth	r2, r3
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <BNO055_Read_Eul+0x1ac>)
 8001706:	799b      	ldrb	r3, [r3, #6]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b21b      	sxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b21a      	sxth	r2, r3
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <BNO055_Read_Eul+0x1b0>)
 8001712:	809a      	strh	r2, [r3, #4]

	eulerXYZ[0] = ((float) data_read[0]) / 16.0;
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <BNO055_Read_Eul+0x1b0>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001722:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	edc3 7a00 	vstr	s15, [r3]
	eulerXYZ[1] = (float) data_read[1] / 16.0;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <BNO055_Read_Eul+0x1b0>)
 8001732:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	3304      	adds	r3, #4
 8001742:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174a:	edc3 7a00 	vstr	s15, [r3]
	eulerXYZ[2] = (float) data_read[2] / 16.0;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <BNO055_Read_Eul+0x1b0>)
 8001750:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	3308      	adds	r3, #8
 8001760:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001764:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001768:	edc3 7a00 	vstr	s15, [r3]

	return BNO055_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000218 	.word	0x20000218
 800177c:	20000208 	.word	0x20000208

08001780 <BNO055_Read_Qua>:

int8_t BNO055_Read_Qua(I2C_HandleTypeDef *huart,float *quaternionWXYZ) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t temp;
	rslt = BNO055_Chip_ID_Check(huart);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fed8 	bl	8001540 <BNO055_Chip_ID_Check>
 8001790:	4603      	mov	r3, r0
 8001792:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 8001794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <BNO055_Read_Qua+0x22>
		return rslt;
 800179c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a0:	e0ff      	b.n	80019a2 <BNO055_Read_Qua+0x222>
	}

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_W_LSB_ADDR, &temp);
 80017a2:	f107 030e 	add.w	r3, r7, #14
 80017a6:	2220      	movs	r2, #32
 80017a8:	2151      	movs	r1, #81	; 0x51
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f001 fa0c 	bl	8002bc8 <read8>
 80017b0:	4603      	mov	r3, r0
 80017b2:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80017b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <BNO055_Read_Qua+0x42>
		return rslt;
 80017bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c0:	e0ef      	b.n	80019a2 <BNO055_Read_Qua+0x222>
	buffer[1] = temp;
 80017c2:	7bba      	ldrb	r2, [r7, #14]
 80017c4:	4b79      	ldr	r3, [pc, #484]	; (80019ac <BNO055_Read_Qua+0x22c>)
 80017c6:	705a      	strb	r2, [r3, #1]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_W_MSB_ADDR, &temp);
 80017c8:	f107 030e 	add.w	r3, r7, #14
 80017cc:	2221      	movs	r2, #33	; 0x21
 80017ce:	2151      	movs	r1, #81	; 0x51
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f001 f9f9 	bl	8002bc8 <read8>
 80017d6:	4603      	mov	r3, r0
 80017d8:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <BNO055_Read_Qua+0x68>
		return rslt;
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	e0dc      	b.n	80019a2 <BNO055_Read_Qua+0x222>
	buffer[2] = temp;
 80017e8:	7bba      	ldrb	r2, [r7, #14]
 80017ea:	4b70      	ldr	r3, [pc, #448]	; (80019ac <BNO055_Read_Qua+0x22c>)
 80017ec:	709a      	strb	r2, [r3, #2]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_X_LSB_ADDR, &temp);
 80017ee:	f107 030e 	add.w	r3, r7, #14
 80017f2:	2222      	movs	r2, #34	; 0x22
 80017f4:	2151      	movs	r1, #81	; 0x51
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f001 f9e6 	bl	8002bc8 <read8>
 80017fc:	4603      	mov	r3, r0
 80017fe:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <BNO055_Read_Qua+0x8e>
		return rslt;
 8001808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180c:	e0c9      	b.n	80019a2 <BNO055_Read_Qua+0x222>
	buffer[3] = temp;
 800180e:	7bba      	ldrb	r2, [r7, #14]
 8001810:	4b66      	ldr	r3, [pc, #408]	; (80019ac <BNO055_Read_Qua+0x22c>)
 8001812:	70da      	strb	r2, [r3, #3]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_X_MSB_ADDR, &temp);
 8001814:	f107 030e 	add.w	r3, r7, #14
 8001818:	2223      	movs	r2, #35	; 0x23
 800181a:	2151      	movs	r1, #81	; 0x51
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f001 f9d3 	bl	8002bc8 <read8>
 8001822:	4603      	mov	r3, r0
 8001824:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <BNO055_Read_Qua+0xb4>
		return rslt;
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	e0b6      	b.n	80019a2 <BNO055_Read_Qua+0x222>
	buffer[4] = temp;
 8001834:	7bba      	ldrb	r2, [r7, #14]
 8001836:	4b5d      	ldr	r3, [pc, #372]	; (80019ac <BNO055_Read_Qua+0x22c>)
 8001838:	711a      	strb	r2, [r3, #4]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_Y_LSB_ADDR, &temp);
 800183a:	f107 030e 	add.w	r3, r7, #14
 800183e:	2224      	movs	r2, #36	; 0x24
 8001840:	2151      	movs	r1, #81	; 0x51
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f001 f9c0 	bl	8002bc8 <read8>
 8001848:	4603      	mov	r3, r0
 800184a:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 800184c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <BNO055_Read_Qua+0xda>
		return rslt;
 8001854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001858:	e0a3      	b.n	80019a2 <BNO055_Read_Qua+0x222>
	buffer[5] = temp;
 800185a:	7bba      	ldrb	r2, [r7, #14]
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <BNO055_Read_Qua+0x22c>)
 800185e:	715a      	strb	r2, [r3, #5]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_Y_MSB_ADDR, &temp);
 8001860:	f107 030e 	add.w	r3, r7, #14
 8001864:	2225      	movs	r2, #37	; 0x25
 8001866:	2151      	movs	r1, #81	; 0x51
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f001 f9ad 	bl	8002bc8 <read8>
 800186e:	4603      	mov	r3, r0
 8001870:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <BNO055_Read_Qua+0x100>
		return rslt;
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	e090      	b.n	80019a2 <BNO055_Read_Qua+0x222>
	buffer[6] = temp;
 8001880:	7bba      	ldrb	r2, [r7, #14]
 8001882:	4b4a      	ldr	r3, [pc, #296]	; (80019ac <BNO055_Read_Qua+0x22c>)
 8001884:	719a      	strb	r2, [r3, #6]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_Z_LSB_ADDR, &temp);
 8001886:	f107 030e 	add.w	r3, r7, #14
 800188a:	2226      	movs	r2, #38	; 0x26
 800188c:	2151      	movs	r1, #81	; 0x51
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f001 f99a 	bl	8002bc8 <read8>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <BNO055_Read_Qua+0x126>
		return rslt;
 80018a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a4:	e07d      	b.n	80019a2 <BNO055_Read_Qua+0x222>
	buffer[7] = temp;
 80018a6:	7bba      	ldrb	r2, [r7, #14]
 80018a8:	4b40      	ldr	r3, [pc, #256]	; (80019ac <BNO055_Read_Qua+0x22c>)
 80018aa:	71da      	strb	r2, [r3, #7]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_QUATERNION_DATA_Z_MSB_ADDR, &temp);
 80018ac:	f107 030e 	add.w	r3, r7, #14
 80018b0:	2227      	movs	r2, #39	; 0x27
 80018b2:	2151      	movs	r1, #81	; 0x51
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f001 f987 	bl	8002bc8 <read8>
 80018ba:	4603      	mov	r3, r0
 80018bc:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <BNO055_Read_Qua+0x14c>
		return rslt;
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	e06a      	b.n	80019a2 <BNO055_Read_Qua+0x222>
	buffer[8] = temp;
 80018cc:	7bba      	ldrb	r2, [r7, #14]
 80018ce:	4b37      	ldr	r3, [pc, #220]	; (80019ac <BNO055_Read_Qua+0x22c>)
 80018d0:	721a      	strb	r2, [r3, #8]

	//TODO: Check NDOF OR Other modes if they supports Quaternion

	data_read[0] = (buffer[1]) | ((buffer[2]) << 8);
 80018d2:	4b36      	ldr	r3, [pc, #216]	; (80019ac <BNO055_Read_Qua+0x22c>)
 80018d4:	785b      	ldrb	r3, [r3, #1]
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <BNO055_Read_Qua+0x22c>)
 80018da:	789b      	ldrb	r3, [r3, #2]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b21b      	sxth	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <BNO055_Read_Qua+0x230>)
 80018e6:	801a      	strh	r2, [r3, #0]
	data_read[1] = (buffer[3]) | ((buffer[4]) << 8);
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <BNO055_Read_Qua+0x22c>)
 80018ea:	78db      	ldrb	r3, [r3, #3]
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <BNO055_Read_Qua+0x22c>)
 80018f0:	791b      	ldrb	r3, [r3, #4]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <BNO055_Read_Qua+0x230>)
 80018fc:	805a      	strh	r2, [r3, #2]
	data_read[2] = (buffer[5]) | ((buffer[6]) << 8);
 80018fe:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <BNO055_Read_Qua+0x22c>)
 8001900:	795b      	ldrb	r3, [r3, #5]
 8001902:	b21a      	sxth	r2, r3
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <BNO055_Read_Qua+0x22c>)
 8001906:	799b      	ldrb	r3, [r3, #6]
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b21b      	sxth	r3, r3
 800190c:	4313      	orrs	r3, r2
 800190e:	b21a      	sxth	r2, r3
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <BNO055_Read_Qua+0x230>)
 8001912:	809a      	strh	r2, [r3, #4]
	data_read[3] = (buffer[7]) | ((buffer[8]) << 8);
 8001914:	4b25      	ldr	r3, [pc, #148]	; (80019ac <BNO055_Read_Qua+0x22c>)
 8001916:	79db      	ldrb	r3, [r3, #7]
 8001918:	b21a      	sxth	r2, r3
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <BNO055_Read_Qua+0x22c>)
 800191c:	7a1b      	ldrb	r3, [r3, #8]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	b21b      	sxth	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b21a      	sxth	r2, r3
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <BNO055_Read_Qua+0x230>)
 8001928:	80da      	strh	r2, [r3, #6]

	quaternionWXYZ[0] = (float) data_read[0] / 16383.0;
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <BNO055_Read_Qua+0x230>)
 800192c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001938:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80019b4 <BNO055_Read_Qua+0x234>
 800193c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	edc3 7a00 	vstr	s15, [r3]
	quaternionWXYZ[1] = (float) data_read[1] / 16383.0;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <BNO055_Read_Qua+0x230>)
 8001948:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	3304      	adds	r3, #4
 8001958:	eddf 6a16 	vldr	s13, [pc, #88]	; 80019b4 <BNO055_Read_Qua+0x234>
 800195c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001960:	edc3 7a00 	vstr	s15, [r3]
	quaternionWXYZ[2] = (float) data_read[2] / 16383.0;
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <BNO055_Read_Qua+0x230>)
 8001966:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	3308      	adds	r3, #8
 8001976:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80019b4 <BNO055_Read_Qua+0x234>
 800197a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800197e:	edc3 7a00 	vstr	s15, [r3]
	quaternionWXYZ[3] = (float) data_read[3] / 16383.0;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <BNO055_Read_Qua+0x230>)
 8001984:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	330c      	adds	r3, #12
 8001994:	eddf 6a07 	vldr	s13, [pc, #28]	; 80019b4 <BNO055_Read_Qua+0x234>
 8001998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199c:	edc3 7a00 	vstr	s15, [r3]

	return BNO055_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000218 	.word	0x20000218
 80019b0:	20000208 	.word	0x20000208
 80019b4:	467ffc00 	.word	0x467ffc00

080019b8 <BNO055_Read_Acc>:

int8_t BNO055_Read_Acc(I2C_HandleTypeDef *huart,float *accelXYZ) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t temp;
	rslt = BNO055_Chip_ID_Check(huart);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fdbc 	bl	8001540 <BNO055_Chip_ID_Check>
 80019c8:	4603      	mov	r3, r0
 80019ca:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 80019cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <BNO055_Read_Acc+0x22>
		return rslt;
 80019d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d8:	e0bf      	b.n	8001b5a <BNO055_Read_Acc+0x1a2>
	}

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_ACCEL_DATA_X_LSB_ADDR, &temp);
 80019da:	f107 030e 	add.w	r3, r7, #14
 80019de:	2208      	movs	r2, #8
 80019e0:	2151      	movs	r1, #81	; 0x51
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f001 f8f0 	bl	8002bc8 <read8>
 80019e8:	4603      	mov	r3, r0
 80019ea:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 80019ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <BNO055_Read_Acc+0x42>
		return rslt;
 80019f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f8:	e0af      	b.n	8001b5a <BNO055_Read_Acc+0x1a2>
	buffer[1] = temp;
 80019fa:	7bba      	ldrb	r2, [r7, #14]
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <BNO055_Read_Acc+0x1ac>)
 80019fe:	705a      	strb	r2, [r3, #1]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_ACCEL_DATA_X_MSB_ADDR, &temp);
 8001a00:	f107 030e 	add.w	r3, r7, #14
 8001a04:	2209      	movs	r2, #9
 8001a06:	2151      	movs	r1, #81	; 0x51
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f001 f8dd 	bl	8002bc8 <read8>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <BNO055_Read_Acc+0x68>
		return rslt;
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	e09c      	b.n	8001b5a <BNO055_Read_Acc+0x1a2>
	buffer[2] = temp;
 8001a20:	7bba      	ldrb	r2, [r7, #14]
 8001a22:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <BNO055_Read_Acc+0x1ac>)
 8001a24:	709a      	strb	r2, [r3, #2]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_ACCEL_DATA_Y_LSB_ADDR, &temp);
 8001a26:	f107 030e 	add.w	r3, r7, #14
 8001a2a:	220a      	movs	r2, #10
 8001a2c:	2151      	movs	r1, #81	; 0x51
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f001 f8ca 	bl	8002bc8 <read8>
 8001a34:	4603      	mov	r3, r0
 8001a36:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <BNO055_Read_Acc+0x8e>
		return rslt;
 8001a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a44:	e089      	b.n	8001b5a <BNO055_Read_Acc+0x1a2>
	buffer[3] = temp;
 8001a46:	7bba      	ldrb	r2, [r7, #14]
 8001a48:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <BNO055_Read_Acc+0x1ac>)
 8001a4a:	70da      	strb	r2, [r3, #3]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_ACCEL_DATA_Y_MSB_ADDR, &temp);
 8001a4c:	f107 030e 	add.w	r3, r7, #14
 8001a50:	220b      	movs	r2, #11
 8001a52:	2151      	movs	r1, #81	; 0x51
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f001 f8b7 	bl	8002bc8 <read8>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <BNO055_Read_Acc+0xb4>
		return rslt;
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	e076      	b.n	8001b5a <BNO055_Read_Acc+0x1a2>
	buffer[4] = temp;
 8001a6c:	7bba      	ldrb	r2, [r7, #14]
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <BNO055_Read_Acc+0x1ac>)
 8001a70:	711a      	strb	r2, [r3, #4]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_ACCEL_DATA_Z_LSB_ADDR, &temp);
 8001a72:	f107 030e 	add.w	r3, r7, #14
 8001a76:	220c      	movs	r2, #12
 8001a78:	2151      	movs	r1, #81	; 0x51
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f001 f8a4 	bl	8002bc8 <read8>
 8001a80:	4603      	mov	r3, r0
 8001a82:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <BNO055_Read_Acc+0xda>
		return rslt;
 8001a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a90:	e063      	b.n	8001b5a <BNO055_Read_Acc+0x1a2>
	buffer[5] = temp;
 8001a92:	7bba      	ldrb	r2, [r7, #14]
 8001a94:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <BNO055_Read_Acc+0x1ac>)
 8001a96:	715a      	strb	r2, [r3, #5]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_ACCEL_DATA_Z_MSB_ADDR, &temp);
 8001a98:	f107 030e 	add.w	r3, r7, #14
 8001a9c:	220d      	movs	r2, #13
 8001a9e:	2151      	movs	r1, #81	; 0x51
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f001 f891 	bl	8002bc8 <read8>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <BNO055_Read_Acc+0x100>
		return rslt;
 8001ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab6:	e050      	b.n	8001b5a <BNO055_Read_Acc+0x1a2>
	buffer[6] = temp;
 8001ab8:	7bba      	ldrb	r2, [r7, #14]
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <BNO055_Read_Acc+0x1ac>)
 8001abc:	719a      	strb	r2, [r3, #6]

	//TODO: Sometimes goes 0 0 0 and errors when reading chip ID

	data_read[0] = (buffer[1]) | ((buffer[2]) << 8);
 8001abe:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <BNO055_Read_Acc+0x1ac>)
 8001ac0:	785b      	ldrb	r3, [r3, #1]
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <BNO055_Read_Acc+0x1ac>)
 8001ac6:	789b      	ldrb	r3, [r3, #2]
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b21a      	sxth	r2, r3
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <BNO055_Read_Acc+0x1b0>)
 8001ad2:	801a      	strh	r2, [r3, #0]
	data_read[1] = (buffer[3]) | ((buffer[4]) << 8);
 8001ad4:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <BNO055_Read_Acc+0x1ac>)
 8001ad6:	78db      	ldrb	r3, [r3, #3]
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <BNO055_Read_Acc+0x1ac>)
 8001adc:	791b      	ldrb	r3, [r3, #4]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	b21a      	sxth	r2, r3
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <BNO055_Read_Acc+0x1b0>)
 8001ae8:	805a      	strh	r2, [r3, #2]
	data_read[2] = (buffer[5]) | ((buffer[6]) << 8);
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <BNO055_Read_Acc+0x1ac>)
 8001aec:	795b      	ldrb	r3, [r3, #5]
 8001aee:	b21a      	sxth	r2, r3
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <BNO055_Read_Acc+0x1ac>)
 8001af2:	799b      	ldrb	r3, [r3, #6]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <BNO055_Read_Acc+0x1b0>)
 8001afe:	809a      	strh	r2, [r3, #4]
	accelXYZ[0] = ((float) data_read[0]) / 100.0;
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <BNO055_Read_Acc+0x1b0>)
 8001b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001b6c <BNO055_Read_Acc+0x1b4>
 8001b12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	edc3 7a00 	vstr	s15, [r3]
	accelXYZ[1] = (float) data_read[1] / 100.0;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <BNO055_Read_Acc+0x1b0>)
 8001b1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001b6c <BNO055_Read_Acc+0x1b4>
 8001b32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b36:	edc3 7a00 	vstr	s15, [r3]
	accelXYZ[2] = (float) data_read[2] / 100.0;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <BNO055_Read_Acc+0x1b0>)
 8001b3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001b6c <BNO055_Read_Acc+0x1b4>
 8001b50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b54:	edc3 7a00 	vstr	s15, [r3]

	return BNO055_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000218 	.word	0x20000218
 8001b68:	20000208 	.word	0x20000208
 8001b6c:	42c80000 	.word	0x42c80000

08001b70 <BNO055_Read_Lia>:
	grvXYZ[1] = (float) data_read[1] / 100.0;
	grvXYZ[2] = (float) data_read[2] / 100.0;

	return BNO055_OK;
}
int8_t BNO055_Read_Lia(I2C_HandleTypeDef *huart,float *liaXYZ) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t temp;
	rslt = BNO055_Chip_ID_Check(huart);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fce0 	bl	8001540 <BNO055_Chip_ID_Check>
 8001b80:	4603      	mov	r3, r0
 8001b82:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 8001b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <BNO055_Read_Lia+0x22>
		return rslt;
 8001b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b90:	e0bf      	b.n	8001d12 <BNO055_Read_Lia+0x1a2>
	}

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_LINEAR_ACCEL_DATA_X_LSB_ADDR, &temp);
 8001b92:	f107 030e 	add.w	r3, r7, #14
 8001b96:	2228      	movs	r2, #40	; 0x28
 8001b98:	2151      	movs	r1, #81	; 0x51
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f001 f814 	bl	8002bc8 <read8>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <BNO055_Read_Lia+0x42>
		return rslt;
 8001bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb0:	e0af      	b.n	8001d12 <BNO055_Read_Lia+0x1a2>
	buffer[1] = temp;
 8001bb2:	7bba      	ldrb	r2, [r7, #14]
 8001bb4:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <BNO055_Read_Lia+0x1ac>)
 8001bb6:	705a      	strb	r2, [r3, #1]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_LINEAR_ACCEL_DATA_X_MSB_ADDR, &temp);
 8001bb8:	f107 030e 	add.w	r3, r7, #14
 8001bbc:	2229      	movs	r2, #41	; 0x29
 8001bbe:	2151      	movs	r1, #81	; 0x51
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f001 f801 	bl	8002bc8 <read8>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <BNO055_Read_Lia+0x68>
		return rslt;
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	e09c      	b.n	8001d12 <BNO055_Read_Lia+0x1a2>
	buffer[2] = temp;
 8001bd8:	7bba      	ldrb	r2, [r7, #14]
 8001bda:	4b50      	ldr	r3, [pc, #320]	; (8001d1c <BNO055_Read_Lia+0x1ac>)
 8001bdc:	709a      	strb	r2, [r3, #2]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_LINEAR_ACCEL_DATA_Y_LSB_ADDR, &temp);
 8001bde:	f107 030e 	add.w	r3, r7, #14
 8001be2:	222a      	movs	r2, #42	; 0x2a
 8001be4:	2151      	movs	r1, #81	; 0x51
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 ffee 	bl	8002bc8 <read8>
 8001bec:	4603      	mov	r3, r0
 8001bee:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <BNO055_Read_Lia+0x8e>
		return rslt;
 8001bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfc:	e089      	b.n	8001d12 <BNO055_Read_Lia+0x1a2>
	buffer[3] = temp;
 8001bfe:	7bba      	ldrb	r2, [r7, #14]
 8001c00:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <BNO055_Read_Lia+0x1ac>)
 8001c02:	70da      	strb	r2, [r3, #3]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_LINEAR_ACCEL_DATA_Y_MSB_ADDR, &temp);
 8001c04:	f107 030e 	add.w	r3, r7, #14
 8001c08:	222b      	movs	r2, #43	; 0x2b
 8001c0a:	2151      	movs	r1, #81	; 0x51
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 ffdb 	bl	8002bc8 <read8>
 8001c12:	4603      	mov	r3, r0
 8001c14:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <BNO055_Read_Lia+0xb4>
		return rslt;
 8001c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c22:	e076      	b.n	8001d12 <BNO055_Read_Lia+0x1a2>
	buffer[4] = temp;
 8001c24:	7bba      	ldrb	r2, [r7, #14]
 8001c26:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <BNO055_Read_Lia+0x1ac>)
 8001c28:	711a      	strb	r2, [r3, #4]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_LINEAR_ACCEL_DATA_Z_LSB_ADDR, &temp);
 8001c2a:	f107 030e 	add.w	r3, r7, #14
 8001c2e:	222c      	movs	r2, #44	; 0x2c
 8001c30:	2151      	movs	r1, #81	; 0x51
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 ffc8 	bl	8002bc8 <read8>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <BNO055_Read_Lia+0xda>
		return rslt;
 8001c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c48:	e063      	b.n	8001d12 <BNO055_Read_Lia+0x1a2>
	buffer[5] = temp;
 8001c4a:	7bba      	ldrb	r2, [r7, #14]
 8001c4c:	4b33      	ldr	r3, [pc, #204]	; (8001d1c <BNO055_Read_Lia+0x1ac>)
 8001c4e:	715a      	strb	r2, [r3, #5]

	rslt = read8(huart, BNO055_READ_ADDR, BNO055_LINEAR_ACCEL_DATA_Z_MSB_ADDR, &temp);
 8001c50:	f107 030e 	add.w	r3, r7, #14
 8001c54:	222d      	movs	r2, #45	; 0x2d
 8001c56:	2151      	movs	r1, #81	; 0x51
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 ffb5 	bl	8002bc8 <read8>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	73fb      	strb	r3, [r7, #15]
	if (rslt != HAL_OK)
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <BNO055_Read_Lia+0x100>
		return rslt;
 8001c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6e:	e050      	b.n	8001d12 <BNO055_Read_Lia+0x1a2>
	buffer[6] = temp;
 8001c70:	7bba      	ldrb	r2, [r7, #14]
 8001c72:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <BNO055_Read_Lia+0x1ac>)
 8001c74:	719a      	strb	r2, [r3, #6]

	data_read[0] = (buffer[1]) | ((buffer[2]) << 8);
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <BNO055_Read_Lia+0x1ac>)
 8001c78:	785b      	ldrb	r3, [r3, #1]
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <BNO055_Read_Lia+0x1ac>)
 8001c7e:	789b      	ldrb	r3, [r3, #2]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	4313      	orrs	r3, r2
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <BNO055_Read_Lia+0x1b0>)
 8001c8a:	801a      	strh	r2, [r3, #0]
	data_read[1] = (buffer[3]) | ((buffer[4]) << 8);
 8001c8c:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <BNO055_Read_Lia+0x1ac>)
 8001c8e:	78db      	ldrb	r3, [r3, #3]
 8001c90:	b21a      	sxth	r2, r3
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <BNO055_Read_Lia+0x1ac>)
 8001c94:	791b      	ldrb	r3, [r3, #4]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b21a      	sxth	r2, r3
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <BNO055_Read_Lia+0x1b0>)
 8001ca0:	805a      	strh	r2, [r3, #2]
	data_read[2] = (buffer[5]) | ((buffer[6]) << 8);
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <BNO055_Read_Lia+0x1ac>)
 8001ca4:	795b      	ldrb	r3, [r3, #5]
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <BNO055_Read_Lia+0x1ac>)
 8001caa:	799b      	ldrb	r3, [r3, #6]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <BNO055_Read_Lia+0x1b0>)
 8001cb6:	809a      	strh	r2, [r3, #4]
	liaXYZ[0] = ((float) data_read[0]) / 100.0;
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <BNO055_Read_Lia+0x1b0>)
 8001cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc6:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001d24 <BNO055_Read_Lia+0x1b4>
 8001cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	edc3 7a00 	vstr	s15, [r3]
	liaXYZ[1] = (float) data_read[1] / 100.0;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <BNO055_Read_Lia+0x1b0>)
 8001cd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001d24 <BNO055_Read_Lia+0x1b4>
 8001cea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cee:	edc3 7a00 	vstr	s15, [r3]
	liaXYZ[2] = (float) data_read[2] / 100.0;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <BNO055_Read_Lia+0x1b0>)
 8001cf4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cf8:	ee07 3a90 	vmov	s15, r3
 8001cfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	3308      	adds	r3, #8
 8001d04:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001d24 <BNO055_Read_Lia+0x1b4>
 8001d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d0c:	edc3 7a00 	vstr	s15, [r3]

	return BNO055_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000218 	.word	0x20000218
 8001d20:	20000208 	.word	0x20000208
 8001d24:	42c80000 	.word	0x42c80000

08001d28 <BNO055_SetMode>:
	}

	return BNO055_E_EMPTY_FUNCTION;
}

int8_t BNO055_SetMode(I2C_HandleTypeDef *huart,bno055_opmode_t mode){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
	int8_t rslt;
	rslt = BNO055_Chip_ID_Check(huart);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff fc03 	bl	8001540 <BNO055_Chip_ID_Check>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	73fb      	strb	r3, [r7, #15]
	if (rslt != BNO055_OK) {
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <BNO055_SetMode+0x24>
		return rslt;
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	e012      	b.n	8001d72 <BNO055_SetMode+0x4a>
	}

	rslt = write8(huart, BNO055_WRITE_ADDR, BNO055_OPR_MODE_ADDR, mode);
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	223d      	movs	r2, #61	; 0x3d
 8001d50:	2150      	movs	r1, #80	; 0x50
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 ff12 	bl	8002b7c <write8>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 8001d5c:	2014      	movs	r0, #20
 8001d5e:	f001 fc69 	bl	8003634 <HAL_Delay>
	if(rslt == HAL_OK)
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <BNO055_SetMode+0x46>
		return BNO055_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e001      	b.n	8001d72 <BNO055_SetMode+0x4a>
	else
		return BNO055_E_SET_MODE_FAIL;
 8001d6e:	f06f 0314 	mvn.w	r3, #20
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <init_imu>:
 */

#include "imu.h"


int8_t init_imu(IMU *imu,I2C_HandleTypeDef *huartI2C){
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	imu->eulerXYZ[0] = 0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
	imu->eulerXYZ[1] = 0;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	605a      	str	r2, [r3, #4]
	imu->eulerXYZ[2] = 0;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]

	imu->quaternionWXYZ[0] = 0;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
	imu->quaternionWXYZ[1] = 0;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
	imu->quaternionWXYZ[2] = 0;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
	imu->quaternionWXYZ[3] = 0;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]

	imu->accelXYZ[0] = 0;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
	imu->accelXYZ[1] = 0;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
	imu->accelXYZ[2] = 0;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24

	imu->magXYZ[0] = 0;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28
	imu->magXYZ[1] = 0;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c
	imu->magXYZ[2] = 0;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30

	imu->liaXYZ[0] = 0;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
	imu->liaXYZ[1] = 0;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
	imu->liaXYZ[2] = 0;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	63da      	str	r2, [r3, #60]	; 0x3c

	imu->grvXYZ[0] = 0;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
	imu->grvXYZ[1] = 0;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
	imu->grvXYZ[2] = 0;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	649a      	str	r2, [r3, #72]	; 0x48

	imu->gyrXYZ[0] = 0;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	64da      	str	r2, [r3, #76]	; 0x4c
	imu->gyrXYZ[1] = 0;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	651a      	str	r2, [r3, #80]	; 0x50
	imu->gyrXYZ[2] = 0;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54

	imu->ypr[0] = 0;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	659a      	str	r2, [r3, #88]	; 0x58
	imu->ypr[1] = 0;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	65da      	str	r2, [r3, #92]	; 0x5c
	imu->ypr[2] = 0;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	661a      	str	r2, [r3, #96]	; 0x60

#ifdef Selected_IMU_BNO055

	rslt = BNO055_Init(huartI2C, OPERATION_MODE_NDOF, 10);
 8001e4e:	220a      	movs	r2, #10
 8001e50:	210c      	movs	r1, #12
 8001e52:	6838      	ldr	r0, [r7, #0]
 8001e54:	f7ff fb95 	bl	8001582 <BNO055_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	73fb      	strb	r3, [r7, #15]
	if(rslt != BNO055_OK){
 8001e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <init_imu+0xee>
		return rslt;
 8001e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e68:	e05c      	b.n	8001f24 <init_imu+0x1a8>
#endif

#ifdef Selected_BAR_BMP280

	//init Temp
	temp32 = 0;
 8001e6a:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <init_imu+0x1b0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
	temp = 0;
 8001e70:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <init_imu+0x1b4>)
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	f04f 0400 	mov.w	r4, #0
 8001e7a:	e9c2 3400 	strd	r3, r4, [r2]

	//init Barometer
	/* Map the delay function pointer with the function responsible for implementing the delay */
	bmp.delay_ms = delay_ms;
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <init_imu+0x1b8>)
 8001e80:	4a2d      	ldr	r2, [pc, #180]	; (8001f38 <init_imu+0x1bc>)
 8001e82:	60da      	str	r2, [r3, #12]

	/* Assign device I2C address based on the status of SDO pin (GND for PRIMARY(0x76) & VDD for SECONDARY(0x77)) */
	bmp.dev_id = BMP280_ADDR_R;
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <init_imu+0x1b8>)
 8001e86:	22ed      	movs	r2, #237	; 0xed
 8001e88:	705a      	strb	r2, [r3, #1]

	/* Select the interface mode as I2C */
	bmp.intf = BMP280_I2C_INTF;
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <init_imu+0x1b8>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	709a      	strb	r2, [r3, #2]

	/* Map the I2C read & write function pointer with the functions responsible for I2C bus transfer */
	bmp.read = i2c_reg_read;
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <init_imu+0x1b8>)
 8001e92:	4a2a      	ldr	r2, [pc, #168]	; (8001f3c <init_imu+0x1c0>)
 8001e94:	605a      	str	r2, [r3, #4]
	bmp.write = i2c_reg_write;
 8001e96:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <init_imu+0x1b8>)
 8001e98:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <init_imu+0x1c4>)
 8001e9a:	609a      	str	r2, [r3, #8]

	rslt = bmp280_init(&bmp, huartI2C);
 8001e9c:	6839      	ldr	r1, [r7, #0]
 8001e9e:	4825      	ldr	r0, [pc, #148]	; (8001f34 <init_imu+0x1b8>)
 8001ea0:	f7ff f884 	bl	8000fac <bmp280_init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8001ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <init_imu+0x13a>
		return rslt;
 8001eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb4:	e036      	b.n	8001f24 <init_imu+0x1a8>
	}

	rslt = bmp280_get_config(&conf, &bmp, huartI2C);
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	491e      	ldr	r1, [pc, #120]	; (8001f34 <init_imu+0x1b8>)
 8001eba:	4822      	ldr	r0, [pc, #136]	; (8001f44 <init_imu+0x1c8>)
 8001ebc:	f7ff f8e2 	bl	8001084 <bmp280_get_config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8001ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <init_imu+0x156>
		return rslt;
 8001ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed0:	e028      	b.n	8001f24 <init_imu+0x1a8>
	}
	conf.filter = BMP280_FILTER_COEFF_2;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <init_imu+0x1c8>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	70da      	strb	r2, [r3, #3]
	conf.os_temp = BMP280_OS_4X;
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <init_imu+0x1c8>)
 8001eda:	2203      	movs	r2, #3
 8001edc:	701a      	strb	r2, [r3, #0]
	/* Pressure oversampling set at 4x */
	conf.os_pres = BMP280_OS_4X;
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <init_imu+0x1c8>)
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	705a      	strb	r2, [r3, #1]

	/* Setting the output data rate as 1HZ(1000ms) */
	conf.odr = BMP280_ODR_1000_MS;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <init_imu+0x1c8>)
 8001ee6:	2205      	movs	r2, #5
 8001ee8:	709a      	strb	r2, [r3, #2]

	rslt = bmp280_set_config(&conf, &bmp, huartI2C);
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	4911      	ldr	r1, [pc, #68]	; (8001f34 <init_imu+0x1b8>)
 8001eee:	4815      	ldr	r0, [pc, #84]	; (8001f44 <init_imu+0x1c8>)
 8001ef0:	f7ff f91e 	bl	8001130 <bmp280_set_config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8001ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <init_imu+0x18a>
		return rslt;
 8001f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f04:	e00e      	b.n	8001f24 <init_imu+0x1a8>
	}

	/* Always set the power mode after setting the configuration */
	rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp, huartI2C);
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	490a      	ldr	r1, [pc, #40]	; (8001f34 <init_imu+0x1b8>)
 8001f0a:	2003      	movs	r0, #3
 8001f0c:	f7ff f921 	bl	8001152 <bmp280_set_power_mode>
 8001f10:	4603      	mov	r3, r0
 8001f12:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP280_OK) {
 8001f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <init_imu+0x1a6>
		return rslt;
 8001f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f20:	e000      	b.n	8001f24 <init_imu+0x1a8>
	}

/* #ifdef Selected_BAR_BMP280 */
#endif

	return IMU_INIT_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd90      	pop	{r4, r7, pc}
 8001f2c:	200002dc 	.word	0x200002dc
 8001f30:	200002c8 	.word	0x200002c8
 8001f34:	20000288 	.word	0x20000288
 8001f38:	08002005 	.word	0x08002005
 8001f3c:	08002051 	.word	0x08002051
 8001f40:	0800201b 	.word	0x0800201b
 8001f44:	20000230 	.word	0x20000230

08001f48 <read_imu>:

int8_t read_imu(IMU *imu,I2C_HandleTypeDef *huart,KUSBEGI_FLAGS *kusbegi_flags){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
	int8_t rslt;

#ifdef Selected_IMU_BNO055

	rslt = BNO055_Read_Acc(huart, imu->accelXYZ);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	331c      	adds	r3, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	68b8      	ldr	r0, [r7, #8]
 8001f5c:	f7ff fd2c 	bl	80019b8 <BNO055_Read_Acc>
 8001f60:	4603      	mov	r3, r0
 8001f62:	75fb      	strb	r3, [r7, #23]
	if (rslt != BNO055_OK) {
 8001f64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <read_imu+0x30>
		kusbegi_flags->FLAG_IMU_ACC_R_OK = 0;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	705a      	strb	r2, [r3, #1]
		return rslt;
 8001f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f76:	e041      	b.n	8001ffc <read_imu+0xb4>
	}
	kusbegi_flags->FLAG_IMU_ACC_R_OK = 1;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	705a      	strb	r2, [r3, #1]

	rslt = BNO055_Read_Eul(huart, imu->eulerXYZ);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4619      	mov	r1, r3
 8001f82:	68b8      	ldr	r0, [r7, #8]
 8001f84:	f7ff fb22 	bl	80015cc <BNO055_Read_Eul>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	75fb      	strb	r3, [r7, #23]
	if (rslt != BNO055_OK) {
 8001f8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <read_imu+0x58>
		kusbegi_flags->FLAG_IMU_EUL_R_OK = 0;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	711a      	strb	r2, [r3, #4]
		return rslt;
 8001f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f9e:	e02d      	b.n	8001ffc <read_imu+0xb4>
	}
	kusbegi_flags->FLAG_IMU_EUL_R_OK = 1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	711a      	strb	r2, [r3, #4]

	rslt = BNO055_Read_Qua(huart, imu->quaternionWXYZ);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	330c      	adds	r3, #12
 8001faa:	4619      	mov	r1, r3
 8001fac:	68b8      	ldr	r0, [r7, #8]
 8001fae:	f7ff fbe7 	bl	8001780 <BNO055_Read_Qua>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	75fb      	strb	r3, [r7, #23]
	if (rslt != BNO055_OK) {
 8001fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <read_imu+0x82>
		kusbegi_flags->FLAG_IMU_QUA_R_OK = 0;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	70da      	strb	r2, [r3, #3]
		return rslt;
 8001fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fc8:	e018      	b.n	8001ffc <read_imu+0xb4>
	}
	kusbegi_flags->FLAG_IMU_QUA_R_OK = 1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	70da      	strb	r2, [r3, #3]

	rslt = BNO055_Read_Lia(huart, imu->liaXYZ);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3334      	adds	r3, #52	; 0x34
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	68b8      	ldr	r0, [r7, #8]
 8001fd8:	f7ff fdca 	bl	8001b70 <BNO055_Read_Lia>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	75fb      	strb	r3, [r7, #23]
	if (rslt != BNO055_OK) {
 8001fe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <read_imu+0xac>
		kusbegi_flags->FLAG_IMU_LIA_R_OK = 0;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	709a      	strb	r2, [r3, #2]
		return rslt;
 8001fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ff2:	e003      	b.n	8001ffc <read_imu+0xb4>
	}
	kusbegi_flags->FLAG_IMU_LIA_R_OK = 1;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	709a      	strb	r2, [r3, #2]

/* #ifdef Selected_IMU_BNO055 */
#endif

	return IMU_READ_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <delay_ms>:

	return IMU_READ_OK;
}

void delay_ms(uint32_t period_ms)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    HAL_Delay(period_ms);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f001 fb11 	bl	8003634 <HAL_Delay>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <i2c_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_write(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length,I2C_HandleTypeDef *huartI2C)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	603a      	str	r2, [r7, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	4603      	mov	r3, r0
 8002026:	71fb      	strb	r3, [r7, #7]
 8002028:	460b      	mov	r3, r1
 800202a:	71bb      	strb	r3, [r7, #6]
 800202c:	4613      	mov	r3, r2
 800202e:	80bb      	strh	r3, [r7, #4]
//	for(uint8_t i=0;i<length;i++){
//		bmp_i2c_buff[i+1] = reg_data[i];
//	}
//
//	HAL_I2C_Master_Transmit(huartI2C, i2c_addr, bmp_i2c_buff, (length + 1), I2C_TRANSMIT_TIMEOUT);
	rslt = write8(huartI2C,0XEC,reg_addr,*reg_data);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	79ba      	ldrb	r2, [r7, #6]
 8002036:	21ec      	movs	r1, #236	; 0xec
 8002038:	69b8      	ldr	r0, [r7, #24]
 800203a:	f000 fd9f 	bl	8002b7c <write8>
 800203e:	4603      	mov	r3, r0
 8002040:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8002042:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <i2c_reg_read>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_read(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length,I2C_HandleTypeDef *huartI2C)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af02      	add	r7, sp, #8
 8002056:	603a      	str	r2, [r7, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
 800205e:	460b      	mov	r3, r1
 8002060:	71bb      	strb	r3, [r7, #6]
 8002062:	4613      	mov	r3, r2
 8002064:	80bb      	strh	r3, [r7, #4]
	int8_t rslt;
	bmp_i2c_buff[0] = reg_addr;
 8002066:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <i2c_reg_read+0x8c>)
 8002068:	79bb      	ldrb	r3, [r7, #6]
 800206a:	7013      	strb	r3, [r2, #0]


	rslt = HAL_I2C_Master_Transmit(huartI2C, i2c_addr, bmp_i2c_buff, 1, I2C_TRANSMIT_TIMEOUT);
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	b299      	uxth	r1, r3
 8002070:	230a      	movs	r3, #10
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2301      	movs	r3, #1
 8002076:	4a19      	ldr	r2, [pc, #100]	; (80020dc <i2c_reg_read+0x8c>)
 8002078:	69b8      	ldr	r0, [r7, #24]
 800207a:	f002 f9eb 	bl	8004454 <HAL_I2C_Master_Transmit>
 800207e:	4603      	mov	r3, r0
 8002080:	73bb      	strb	r3, [r7, #14]
	if (rslt != HAL_OK) {
 8002082:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <i2c_reg_read+0x40>
		return rslt;
 800208a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800208e:	e020      	b.n	80020d2 <i2c_reg_read+0x82>
	}
	rslt = HAL_I2C_Master_Receive(huartI2C, i2c_addr, &bmp_i2c_buff[1], length, I2C_RECEIVE_TIMEOUT);
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	b299      	uxth	r1, r3
 8002094:	88ba      	ldrh	r2, [r7, #4]
 8002096:	230a      	movs	r3, #10
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	4613      	mov	r3, r2
 800209c:	4a10      	ldr	r2, [pc, #64]	; (80020e0 <i2c_reg_read+0x90>)
 800209e:	69b8      	ldr	r0, [r7, #24]
 80020a0:	f002 fad6 	bl	8004650 <HAL_I2C_Master_Receive>
 80020a4:	4603      	mov	r3, r0
 80020a6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < length; i++) {
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e00a      	b.n	80020c4 <i2c_reg_read+0x74>
		reg_data[i] = bmp_i2c_buff[i + 1];
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	6839      	ldr	r1, [r7, #0]
 80020b6:	440b      	add	r3, r1
 80020b8:	4908      	ldr	r1, [pc, #32]	; (80020dc <i2c_reg_read+0x8c>)
 80020ba:	5c8a      	ldrb	r2, [r1, r2]
 80020bc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < length; i++) {
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	3301      	adds	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	88ba      	ldrh	r2, [r7, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d8ef      	bhi.n	80020ae <i2c_reg_read+0x5e>
	}

    return rslt;
 80020ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000238 	.word	0x20000238
 80020e0:	20000239 	.word	0x20000239

080020e4 <flight_mode_update>:
 */

#include "flight_mode.h"


int8_t flight_mode_update(FLIGHT_MODE *flight_mode,OUTPUT_MIXER *output_mixer,KUSBEGI_FLAGS *kusbegi_flags){
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
	return 1;
 80020f0:	2301      	movs	r3, #1
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <flight_task_update>:
 * Language:  C
 */

#include "flight_task.h"

int8_t flight_task_update(FLIGHT_TASK *flight_task,FLIGHT_MODE *flight_mode,OUTPUT_MIXER *output_mixer,KUSBEGI_FLAGS *kusbegi_flags){
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	603b      	str	r3, [r7, #0]
	return 1;
 800210c:	2301      	movs	r3, #1
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <kusbegi_init>:
 * Purpose: Autopilot
 * Language:  C
 */
#include "kusbegi_autopilot.h"

int8_t kusbegi_init(I2C_HandleTypeDef *huartI2C,KUSBEGI *kusbegi,UART_HandleTypeDef* huart){
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
	int8_t rslt;
	/* init output_mixer */
	rslt = init_output_mixer(&output_mixer, huartI2C,huart);
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68f9      	ldr	r1, [r7, #12]
 800212c:	4820      	ldr	r0, [pc, #128]	; (80021b0 <kusbegi_init+0x94>)
 800212e:	f000 f971 	bl	8002414 <init_output_mixer>
 8002132:	4603      	mov	r3, r0
 8002134:	75bb      	strb	r3, [r7, #22]

	/* init kusbegi autopilot*/
	kusbegi->mc_arm_state = DISARM;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2200      	movs	r2, #0
 800213a:	705a      	strb	r2, [r3, #1]
	kusbegi->mc_fc_state = KUSBEGI_INIT;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2200      	movs	r2, #0
 8002140:	709a      	strb	r2, [r3, #2]
	kusbegi->mc_flight_mode = MODE_STABILIZE;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
	kusbegi->mc_gps_available = GPS_UNAVAILABLE;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2201      	movs	r2, #1
 800214c:	711a      	strb	r2, [r3, #4]
	kusbegi->mc_kill_switch = 0;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2200      	movs	r2, #0
 8002152:	719a      	strb	r2, [r3, #6]
	kusbegi->mc_land_state = LANDED;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2200      	movs	r2, #0
 8002158:	70da      	strb	r2, [r3, #3]

	for(uint8_t i = 0;i<4;i++){
 800215a:	2300      	movs	r3, #0
 800215c:	75fb      	strb	r3, [r7, #23]
 800215e:	e008      	b.n	8002172 <kusbegi_init+0x56>
		kusbegi->PWM_US_MOTOR[i] = 0;
 8002160:	7dfa      	ldrb	r2, [r7, #23]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3204      	adds	r2, #4
 8002166:	2100      	movs	r1, #0
 8002168:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i = 0;i<4;i++){
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	3301      	adds	r3, #1
 8002170:	75fb      	strb	r3, [r7, #23]
 8002172:	7dfb      	ldrb	r3, [r7, #23]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d9f3      	bls.n	8002160 <kusbegi_init+0x44>
	}

	last_tick_l1 = 0;
 8002178:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <kusbegi_init+0x98>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
	last_tick_l2 = 0;
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <kusbegi_init+0x9c>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
	last_tick_l3 = 0;
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <kusbegi_init+0xa0>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
	last_tick_l4 = 0;
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <kusbegi_init+0xa4>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
	last_tick_l5 = 0;
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <kusbegi_init+0xa8>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
	last_tick_l6 = 0;
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <kusbegi_init+0xac>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
	kusbegi_tick = 0;
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <kusbegi_init+0xb0>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]



	return rslt;
 80021a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000538 	.word	0x20000538
 80021b4:	2000063c 	.word	0x2000063c
 80021b8:	20000644 	.word	0x20000644
 80021bc:	20000530 	.word	0x20000530
 80021c0:	200004f0 	.word	0x200004f0
 80021c4:	20000650 	.word	0x20000650
 80021c8:	20000640 	.word	0x20000640
 80021cc:	20000638 	.word	0x20000638

080021d0 <kusbegi_loop>:

void kusbegi_loop(UART_HandleTypeDef* huart,I2C_HandleTypeDef *huartI2C,KUSBEGI *kusbegi){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]

	kusbegi_tick = HAL_GetTick();
 80021dc:	f001 fa1e 	bl	800361c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <kusbegi_loop+0xfc>)
 80021e4:	601a      	str	r2, [r3, #0]

	if (kusbegi_tick - last_tick_l1 >= LOOP1DELAY_MS) {
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <kusbegi_loop+0xfc>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <kusbegi_loop+0x100>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021f4:	d30a      	bcc.n	800220c <kusbegi_loop+0x3c>
		loop1(huart,huartI2C,kusbegi,&kusbegi_flags);
 80021f6:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <kusbegi_loop+0x104>)
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 f875 	bl	80022ec <loop1>
		last_tick_l1 = HAL_GetTick();
 8002202:	f001 fa0b 	bl	800361c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <kusbegi_loop+0x100>)
 800220a:	601a      	str	r2, [r3, #0]
	}
	if (kusbegi_tick - last_tick_l2 >= LOOP2DELAY_MS) {
 800220c:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <kusbegi_loop+0xfc>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <kusbegi_loop+0x108>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800221a:	d30a      	bcc.n	8002232 <kusbegi_loop+0x62>
		loop2(huart,huartI2C,kusbegi,&kusbegi_flags);
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <kusbegi_loop+0x104>)
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f8b4 	bl	8002390 <loop2>
		last_tick_l2 = HAL_GetTick();
 8002228:	f001 f9f8 	bl	800361c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <kusbegi_loop+0x108>)
 8002230:	601a      	str	r2, [r3, #0]
	}
	if (kusbegi_tick - last_tick_l3 >= LOOP3DELAY_MS) {
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <kusbegi_loop+0xfc>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b29      	ldr	r3, [pc, #164]	; (80022dc <kusbegi_loop+0x10c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2bf9      	cmp	r3, #249	; 0xf9
 800223e:	d90a      	bls.n	8002256 <kusbegi_loop+0x86>
		loop3(huart,huartI2C,kusbegi,&kusbegi_flags);
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <kusbegi_loop+0x104>)
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f8af 	bl	80023aa <loop3>
		last_tick_l3 = HAL_GetTick();
 800224c:	f001 f9e6 	bl	800361c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	4b22      	ldr	r3, [pc, #136]	; (80022dc <kusbegi_loop+0x10c>)
 8002254:	601a      	str	r2, [r3, #0]
	}
	if (kusbegi_tick - last_tick_l4 >= LOOP4DELAY_MS) {
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <kusbegi_loop+0xfc>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <kusbegi_loop+0x110>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2bb3      	cmp	r3, #179	; 0xb3
 8002262:	d90a      	bls.n	800227a <kusbegi_loop+0xaa>
		loop4(huart,huartI2C,kusbegi,&kusbegi_flags);
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <kusbegi_loop+0x104>)
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f8aa 	bl	80023c4 <loop4>
		last_tick_l4 = HAL_GetTick();
 8002270:	f001 f9d4 	bl	800361c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <kusbegi_loop+0x110>)
 8002278:	601a      	str	r2, [r3, #0]
	}
	if (kusbegi_tick - last_tick_l5 >= LOOP5DELAY_MS) {
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <kusbegi_loop+0xfc>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <kusbegi_loop+0x114>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b09      	cmp	r3, #9
 8002286:	d90a      	bls.n	800229e <kusbegi_loop+0xce>
		loop5(huart,huartI2C,kusbegi,&kusbegi_flags);
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <kusbegi_loop+0x104>)
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f8a5 	bl	80023de <loop5>
		last_tick_l5 = HAL_GetTick();
 8002294:	f001 f9c2 	bl	800361c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <kusbegi_loop+0x114>)
 800229c:	601a      	str	r2, [r3, #0]
	}
	if (kusbegi_tick - last_tick_l6 >= LOOP6DELAY_MS) {
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <kusbegi_loop+0xfc>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <kusbegi_loop+0x118>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d90a      	bls.n	80022c2 <kusbegi_loop+0xf2>
		loop6(huart,huartI2C,kusbegi,&kusbegi_flags);
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <kusbegi_loop+0x104>)
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f8a0 	bl	80023f8 <loop6>
		last_tick_l6 = HAL_GetTick();
 80022b8:	f001 f9b0 	bl	800361c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <kusbegi_loop+0x118>)
 80022c0:	601a      	str	r2, [r3, #0]
	}

}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000638 	.word	0x20000638
 80022d0:	2000063c 	.word	0x2000063c
 80022d4:	20000648 	.word	0x20000648
 80022d8:	20000644 	.word	0x20000644
 80022dc:	20000530 	.word	0x20000530
 80022e0:	200004f0 	.word	0x200004f0
 80022e4:	20000650 	.word	0x20000650
 80022e8:	20000640 	.word	0x20000640

080022ec <loop1>:

void loop1(UART_HandleTypeDef* huart,I2C_HandleTypeDef *huartI2C,KUSBEGI *kusbegi,KUSBEGI_FLAGS *kusbegi_flags){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]

	if(update_imu(&output_mixer, huartI2C,kusbegi_flags) == OUTPUT_MIXER_OK){
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	4821      	ldr	r0, [pc, #132]	; (8002384 <loop1+0x98>)
 8002300:	f000 fb08 	bl	8002914 <update_imu>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d103      	bne.n	8002312 <loop1+0x26>
		kusbegi_flags->FLAG_IMU_READ_OK = 1;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	e002      	b.n	8002318 <loop1+0x2c>
	}
	else{
		kusbegi_flags->FLAG_IMU_READ_OK = 0;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
	}

	if (kusbegi_flags->FLAG_IMU_READ_OK == 1) {
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d12c      	bne.n	800237a <loop1+0x8e>

		flight_mode_update(&flight_mode, &output_mixer, kusbegi_flags);
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4918      	ldr	r1, [pc, #96]	; (8002384 <loop1+0x98>)
 8002324:	4818      	ldr	r0, [pc, #96]	; (8002388 <loop1+0x9c>)
 8002326:	f7ff fedd 	bl	80020e4 <flight_mode_update>
		flight_task_update(&flight_task,&flight_mode, &output_mixer, kusbegi_flags);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	4a15      	ldr	r2, [pc, #84]	; (8002384 <loop1+0x98>)
 800232e:	4916      	ldr	r1, [pc, #88]	; (8002388 <loop1+0x9c>)
 8002330:	4816      	ldr	r0, [pc, #88]	; (800238c <loop1+0xa0>)
 8002332:	f7ff fee4 	bl	80020fe <flight_task_update>
		update_pid(&output_mixer, flight_task.flight_task_setpoint.yaw,
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <loop1+0xa0>)
 8002338:	edd3 7a04 	vldr	s15, [r3, #16]
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <loop1+0xa0>)
 800233e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <loop1+0xa0>)
 8002344:	edd3 6a06 	vldr	s13, [r3, #24]
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <loop1+0xa0>)
 800234a:	ed93 6a07 	vldr	s12, [r3, #28]
 800234e:	eef0 1a46 	vmov.f32	s3, s12
 8002352:	eeb0 1a66 	vmov.f32	s2, s13
 8002356:	eef0 0a47 	vmov.f32	s1, s14
 800235a:	eeb0 0a67 	vmov.f32	s0, s15
 800235e:	4809      	ldr	r0, [pc, #36]	; (8002384 <loop1+0x98>)
 8002360:	f000 fab6 	bl	80028d0 <update_pid>
				flight_task.flight_task_setpoint.pitch,
				flight_task.flight_task_setpoint.roll,
				flight_task.flight_task_setpoint.altitude);
		if((kusbegi_flags->FLAG_ARM == 1) && (kusbegi_flags->KILL_S == 0)){
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	795b      	ldrb	r3, [r3, #5]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d106      	bne.n	800237a <loop1+0x8e>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	799b      	ldrb	r3, [r3, #6]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <loop1+0x8e>
			set_motor_pwm_values(&output_mixer);
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <loop1+0x98>)
 8002376:	f000 fa17 	bl	80027a8 <set_motor_pwm_values>
		}

	}

}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000538 	.word	0x20000538
 8002388:	20000654 	.word	0x20000654
 800238c:	200004f4 	.word	0x200004f4

08002390 <loop2>:

void loop2(UART_HandleTypeDef* huart,I2C_HandleTypeDef *huartI2C,KUSBEGI *kusbegi,KUSBEGI_FLAGS *kusbegi_flags){
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <loop3>:

void loop3(UART_HandleTypeDef* huart,I2C_HandleTypeDef *huartI2C,KUSBEGI *kusbegi,KUSBEGI_FLAGS *kusbegi_flags){
 80023aa:	b480      	push	{r7}
 80023ac:	b085      	sub	sp, #20
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	603b      	str	r3, [r7, #0]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <loop4>:

void loop4(UART_HandleTypeDef* huart,I2C_HandleTypeDef *huartI2C,KUSBEGI *kusbegi,KUSBEGI_FLAGS *kusbegi_flags){
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <loop5>:

void loop5(UART_HandleTypeDef* huart,I2C_HandleTypeDef *huartI2C,KUSBEGI *kusbegi,KUSBEGI_FLAGS *kusbegi_flags){
 80023de:	b480      	push	{r7}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	603b      	str	r3, [r7, #0]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <loop6>:

void loop6(UART_HandleTypeDef* huart,I2C_HandleTypeDef *huartI2C,KUSBEGI *kusbegi,KUSBEGI_FLAGS *kusbegi_flags){
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <init_output_mixer>:
 * Language:  C
 */
#include "output_mixer.h"


int8_t init_output_mixer(OUTPUT_MIXER *output_mixer,I2C_HandleTypeDef *huartI2C,UART_HandleTypeDef* huart){
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
	int8_t rslt;

	//Set PID values
	pid_roll.Kp = PID_ROLL_PITCH_KP;
 8002420:	4ba8      	ldr	r3, [pc, #672]	; (80026c4 <init_output_mixer+0x2b0>)
 8002422:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002426:	601a      	str	r2, [r3, #0]
	pid_altitude.Kp = PID_ALTITUDE_KP;
 8002428:	4ba7      	ldr	r3, [pc, #668]	; (80026c8 <init_output_mixer+0x2b4>)
 800242a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800242e:	601a      	str	r2, [r3, #0]
	pid_pitch.Kp = PID_ROLL_PITCH_KP;
 8002430:	4ba6      	ldr	r3, [pc, #664]	; (80026cc <init_output_mixer+0x2b8>)
 8002432:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002436:	601a      	str	r2, [r3, #0]
	pid_yaw.Kp = PID_YAW_KP;
 8002438:	4ba5      	ldr	r3, [pc, #660]	; (80026d0 <init_output_mixer+0x2bc>)
 800243a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800243e:	601a      	str	r2, [r3, #0]

	pid_roll.Ki = PID_ROLL_PITCH_KI;
 8002440:	4ba0      	ldr	r3, [pc, #640]	; (80026c4 <init_output_mixer+0x2b0>)
 8002442:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002446:	605a      	str	r2, [r3, #4]
	pid_altitude.Ki = PID_ALTITUDE_KI;
 8002448:	4b9f      	ldr	r3, [pc, #636]	; (80026c8 <init_output_mixer+0x2b4>)
 800244a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800244e:	605a      	str	r2, [r3, #4]
	pid_pitch.Ki = PID_ROLL_PITCH_KI;
 8002450:	4b9e      	ldr	r3, [pc, #632]	; (80026cc <init_output_mixer+0x2b8>)
 8002452:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002456:	605a      	str	r2, [r3, #4]
	pid_yaw.Ki = PID_YAW_KI;
 8002458:	4b9d      	ldr	r3, [pc, #628]	; (80026d0 <init_output_mixer+0x2bc>)
 800245a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800245e:	605a      	str	r2, [r3, #4]

	pid_roll.Kd = PID_ROLL_PITCH_KD;
 8002460:	4b98      	ldr	r3, [pc, #608]	; (80026c4 <init_output_mixer+0x2b0>)
 8002462:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8002466:	609a      	str	r2, [r3, #8]
	pid_altitude.Kd = PID_ALTITUDE_KD;
 8002468:	4b97      	ldr	r3, [pc, #604]	; (80026c8 <init_output_mixer+0x2b4>)
 800246a:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800246e:	609a      	str	r2, [r3, #8]
	pid_pitch.Kd = PID_ROLL_PITCH_KD;
 8002470:	4b96      	ldr	r3, [pc, #600]	; (80026cc <init_output_mixer+0x2b8>)
 8002472:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8002476:	609a      	str	r2, [r3, #8]
	pid_yaw.Kd = PID_YAW_KD;
 8002478:	4b95      	ldr	r3, [pc, #596]	; (80026d0 <init_output_mixer+0x2bc>)
 800247a:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800247e:	609a      	str	r2, [r3, #8]

	pid_roll.tau = PID_TAU;
 8002480:	4b90      	ldr	r3, [pc, #576]	; (80026c4 <init_output_mixer+0x2b0>)
 8002482:	4a94      	ldr	r2, [pc, #592]	; (80026d4 <init_output_mixer+0x2c0>)
 8002484:	60da      	str	r2, [r3, #12]
	pid_altitude.tau = PID_TAU;
 8002486:	4b90      	ldr	r3, [pc, #576]	; (80026c8 <init_output_mixer+0x2b4>)
 8002488:	4a92      	ldr	r2, [pc, #584]	; (80026d4 <init_output_mixer+0x2c0>)
 800248a:	60da      	str	r2, [r3, #12]
	pid_pitch.tau = PID_TAU;
 800248c:	4b8f      	ldr	r3, [pc, #572]	; (80026cc <init_output_mixer+0x2b8>)
 800248e:	4a91      	ldr	r2, [pc, #580]	; (80026d4 <init_output_mixer+0x2c0>)
 8002490:	60da      	str	r2, [r3, #12]
	pid_yaw.tau = PID_TAU;
 8002492:	4b8f      	ldr	r3, [pc, #572]	; (80026d0 <init_output_mixer+0x2bc>)
 8002494:	4a8f      	ldr	r2, [pc, #572]	; (80026d4 <init_output_mixer+0x2c0>)
 8002496:	60da      	str	r2, [r3, #12]

	pid_roll.limMin = PID_ROLL_PITCH_LIM_MIN;
 8002498:	4b8a      	ldr	r3, [pc, #552]	; (80026c4 <init_output_mixer+0x2b0>)
 800249a:	4a8f      	ldr	r2, [pc, #572]	; (80026d8 <init_output_mixer+0x2c4>)
 800249c:	611a      	str	r2, [r3, #16]
	pid_altitude.limMin = PID_ALTITUDE_LIM_MIN;
 800249e:	4b8a      	ldr	r3, [pc, #552]	; (80026c8 <init_output_mixer+0x2b4>)
 80024a0:	4a8e      	ldr	r2, [pc, #568]	; (80026dc <init_output_mixer+0x2c8>)
 80024a2:	611a      	str	r2, [r3, #16]
	pid_pitch.limMin = PID_ROLL_PITCH_LIM_MIN;
 80024a4:	4b89      	ldr	r3, [pc, #548]	; (80026cc <init_output_mixer+0x2b8>)
 80024a6:	4a8c      	ldr	r2, [pc, #560]	; (80026d8 <init_output_mixer+0x2c4>)
 80024a8:	611a      	str	r2, [r3, #16]
	pid_yaw.limMin = PID_YAW_LIM_MIN;
 80024aa:	4b89      	ldr	r3, [pc, #548]	; (80026d0 <init_output_mixer+0x2bc>)
 80024ac:	4a8b      	ldr	r2, [pc, #556]	; (80026dc <init_output_mixer+0x2c8>)
 80024ae:	611a      	str	r2, [r3, #16]

	pid_roll.limMax = PID_ROLL_PITCH_LIM_MAX;
 80024b0:	4b84      	ldr	r3, [pc, #528]	; (80026c4 <init_output_mixer+0x2b0>)
 80024b2:	4a8b      	ldr	r2, [pc, #556]	; (80026e0 <init_output_mixer+0x2cc>)
 80024b4:	615a      	str	r2, [r3, #20]
	pid_altitude.limMax = PID_ALTITUDE_LIM_MAX;
 80024b6:	4b84      	ldr	r3, [pc, #528]	; (80026c8 <init_output_mixer+0x2b4>)
 80024b8:	4a8a      	ldr	r2, [pc, #552]	; (80026e4 <init_output_mixer+0x2d0>)
 80024ba:	615a      	str	r2, [r3, #20]
	pid_pitch.limMax = PID_ROLL_PITCH_LIM_MAX;
 80024bc:	4b83      	ldr	r3, [pc, #524]	; (80026cc <init_output_mixer+0x2b8>)
 80024be:	4a88      	ldr	r2, [pc, #544]	; (80026e0 <init_output_mixer+0x2cc>)
 80024c0:	615a      	str	r2, [r3, #20]
	pid_yaw.limMax = PID_YAW_LIM_MAX;
 80024c2:	4b83      	ldr	r3, [pc, #524]	; (80026d0 <init_output_mixer+0x2bc>)
 80024c4:	4a87      	ldr	r2, [pc, #540]	; (80026e4 <init_output_mixer+0x2d0>)
 80024c6:	615a      	str	r2, [r3, #20]

	pid_roll.limMinInt = PID_ROLL_PITCH_LIM_MIN_INT;
 80024c8:	4b7e      	ldr	r3, [pc, #504]	; (80026c4 <init_output_mixer+0x2b0>)
 80024ca:	4a87      	ldr	r2, [pc, #540]	; (80026e8 <init_output_mixer+0x2d4>)
 80024cc:	619a      	str	r2, [r3, #24]
	pid_altitude.limMinInt = PID_ALTITUDE_LIM_MIN_INT;
 80024ce:	4b7e      	ldr	r3, [pc, #504]	; (80026c8 <init_output_mixer+0x2b4>)
 80024d0:	4a85      	ldr	r2, [pc, #532]	; (80026e8 <init_output_mixer+0x2d4>)
 80024d2:	619a      	str	r2, [r3, #24]
	pid_pitch.limMinInt = PID_ROLL_PITCH_LIM_MIN_INT;
 80024d4:	4b7d      	ldr	r3, [pc, #500]	; (80026cc <init_output_mixer+0x2b8>)
 80024d6:	4a84      	ldr	r2, [pc, #528]	; (80026e8 <init_output_mixer+0x2d4>)
 80024d8:	619a      	str	r2, [r3, #24]
	pid_yaw.limMinInt = PID_YAW_LIM_MIN_INT;
 80024da:	4b7d      	ldr	r3, [pc, #500]	; (80026d0 <init_output_mixer+0x2bc>)
 80024dc:	4a82      	ldr	r2, [pc, #520]	; (80026e8 <init_output_mixer+0x2d4>)
 80024de:	619a      	str	r2, [r3, #24]

	pid_roll.limMaxInt = PID_ROLL_PITCH_LIM_MAX_INT;
 80024e0:	4b78      	ldr	r3, [pc, #480]	; (80026c4 <init_output_mixer+0x2b0>)
 80024e2:	4a82      	ldr	r2, [pc, #520]	; (80026ec <init_output_mixer+0x2d8>)
 80024e4:	61da      	str	r2, [r3, #28]
	pid_altitude.limMaxInt = PID_ALTITUDE_LIM_MAX_INT;
 80024e6:	4b78      	ldr	r3, [pc, #480]	; (80026c8 <init_output_mixer+0x2b4>)
 80024e8:	4a80      	ldr	r2, [pc, #512]	; (80026ec <init_output_mixer+0x2d8>)
 80024ea:	61da      	str	r2, [r3, #28]
	pid_pitch.limMaxInt = PID_ROLL_PITCH_LIM_MAX_INT;
 80024ec:	4b77      	ldr	r3, [pc, #476]	; (80026cc <init_output_mixer+0x2b8>)
 80024ee:	4a7f      	ldr	r2, [pc, #508]	; (80026ec <init_output_mixer+0x2d8>)
 80024f0:	61da      	str	r2, [r3, #28]
	pid_yaw.limMaxInt = PID_YAW_LIM_MAX_INT;
 80024f2:	4b77      	ldr	r3, [pc, #476]	; (80026d0 <init_output_mixer+0x2bc>)
 80024f4:	4a7d      	ldr	r2, [pc, #500]	; (80026ec <init_output_mixer+0x2d8>)
 80024f6:	61da      	str	r2, [r3, #28]

	pid_roll.T = SAMPLE_TIME_S;
 80024f8:	4b72      	ldr	r3, [pc, #456]	; (80026c4 <init_output_mixer+0x2b0>)
 80024fa:	4a7d      	ldr	r2, [pc, #500]	; (80026f0 <init_output_mixer+0x2dc>)
 80024fc:	621a      	str	r2, [r3, #32]
	pid_altitude.T = SAMPLE_TIME_S;
 80024fe:	4b72      	ldr	r3, [pc, #456]	; (80026c8 <init_output_mixer+0x2b4>)
 8002500:	4a7b      	ldr	r2, [pc, #492]	; (80026f0 <init_output_mixer+0x2dc>)
 8002502:	621a      	str	r2, [r3, #32]
	pid_pitch.T = SAMPLE_TIME_S;
 8002504:	4b71      	ldr	r3, [pc, #452]	; (80026cc <init_output_mixer+0x2b8>)
 8002506:	4a7a      	ldr	r2, [pc, #488]	; (80026f0 <init_output_mixer+0x2dc>)
 8002508:	621a      	str	r2, [r3, #32]
	pid_yaw.T = SAMPLE_TIME_S;
 800250a:	4b71      	ldr	r3, [pc, #452]	; (80026d0 <init_output_mixer+0x2bc>)
 800250c:	4a78      	ldr	r2, [pc, #480]	; (80026f0 <init_output_mixer+0x2dc>)
 800250e:	621a      	str	r2, [r3, #32]

	//Init PID
	PIDController_Init(&pid_altitude);
 8002510:	486d      	ldr	r0, [pc, #436]	; (80026c8 <init_output_mixer+0x2b4>)
 8002512:	f000 fa23 	bl	800295c <PIDController_Init>
	PIDController_Init(&pid_roll);
 8002516:	486b      	ldr	r0, [pc, #428]	; (80026c4 <init_output_mixer+0x2b0>)
 8002518:	f000 fa20 	bl	800295c <PIDController_Init>
	PIDController_Init(&pid_pitch);
 800251c:	486b      	ldr	r0, [pc, #428]	; (80026cc <init_output_mixer+0x2b8>)
 800251e:	f000 fa1d 	bl	800295c <PIDController_Init>
	PIDController_Init(&pid_yaw);
 8002522:	486b      	ldr	r0, [pc, #428]	; (80026d0 <init_output_mixer+0x2bc>)
 8002524:	f000 fa1a 	bl	800295c <PIDController_Init>

	//Init output_mixer
	output_mixer->PWM_US_MOTOR[0] = 0;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]
	output_mixer->PWM_US_MOTOR[1] = 0;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	805a      	strh	r2, [r3, #2]
	output_mixer->PWM_US_MOTOR[2] = 0;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	809a      	strh	r2, [r3, #4]
	output_mixer->PWM_US_MOTOR[3] = 0;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	80da      	strh	r2, [r3, #6]

	output_mixer->PID_ALTITUDE_OUTPUT = 0;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	615a      	str	r2, [r3, #20]
	output_mixer->PID_ROLL_OUTPUT = 0;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
	output_mixer->PID_PITCH_OUTPUT = 0;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	60da      	str	r2, [r3, #12]
	output_mixer->PID_YAW_OUTPUT = 0;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	611a      	str	r2, [r3, #16]

	output_mixer->IMU.eulerXYZ[0] = 0;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	output_mixer->IMU.eulerXYZ[1] = 0;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	output_mixer->IMU.eulerXYZ[2] = 0;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	output_mixer->IMU.quaternionWXYZ[0] = 0;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	output_mixer->IMU.quaternionWXYZ[1] = 0;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	output_mixer->IMU.quaternionWXYZ[2] = 0;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	output_mixer->IMU.quaternionWXYZ[3] = 0;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	output_mixer->IMU.accelXYZ[0] = 0;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	output_mixer->IMU.accelXYZ[1] = 0;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	output_mixer->IMU.accelXYZ[2] = 0;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	output_mixer->IMU.magXYZ[0] = 0;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	output_mixer->IMU.magXYZ[1] = 0;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	output_mixer->IMU.magXYZ[2] = 0;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	output_mixer->IMU.liaXYZ[0] = 0;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	output_mixer->IMU.liaXYZ[1] = 0;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	output_mixer->IMU.liaXYZ[2] = 0;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	output_mixer->IMU.grvXYZ[0] = 0;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	output_mixer->IMU.grvXYZ[1] = 0;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	output_mixer->IMU.grvXYZ[2] = 0;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	output_mixer->IMU.gyrXYZ[0] = 0;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	output_mixer->IMU.gyrXYZ[1] = 0;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	output_mixer->IMU.gyrXYZ[2] = 0;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	output_mixer->IMU.ypr[0] = 0;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	output_mixer->IMU.ypr[1] = 0;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	output_mixer->IMU.ypr[2] = 0;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	output_mixer->IMU.temperature = 0;
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	f04f 0400 	mov.w	r4, #0
 8002664:	e9c2 343e 	strd	r3, r4, [r2, #248]	; 0xf8
	output_mixer->IMU.pressure = 0;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	output_mixer->RC_INPUT.rc_channels[throttle].pwm_value = 0;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	835a      	strh	r2, [r3, #26]
	output_mixer->RC_INPUT.rc_channels[yaw].pwm_value = 0;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	87da      	strh	r2, [r3, #62]	; 0x3e
	output_mixer->RC_INPUT.rc_channels[pitch].pwm_value = 0;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	865a      	strh	r2, [r3, #50]	; 0x32
	output_mixer->RC_INPUT.rc_channels[roll].pwm_value = 0;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	84da      	strh	r2, [r3, #38]	; 0x26

	//init IMU
	rslt = init_imu(&imu, huartI2C);
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	481a      	ldr	r0, [pc, #104]	; (80026f4 <init_output_mixer+0x2e0>)
 800268c:	f7ff fb76 	bl	8001d7c <init_imu>
 8002690:	4603      	mov	r3, r0
 8002692:	75fb      	strb	r3, [r7, #23]
	if(rslt != IMU_INIT_OK){
 8002694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <init_output_mixer+0x28e>
		return rslt;
 800269c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026a0:	e00c      	b.n	80026bc <init_output_mixer+0x2a8>
	}

	//init RC_input
	rslt = init_rc_input(&rc_input);
 80026a2:	4815      	ldr	r0, [pc, #84]	; (80026f8 <init_output_mixer+0x2e4>)
 80026a4:	f000 fa3c 	bl	8002b20 <init_rc_input>
 80026a8:	4603      	mov	r3, r0
 80026aa:	75fb      	strb	r3, [r7, #23]
	if (rslt != RC_INPUT_OK) {
 80026ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <init_output_mixer+0x2a6>
		return rslt;
 80026b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026b8:	e000      	b.n	80026bc <init_output_mixer+0x2a8>
	}

	return OUTPUT_MIXER_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd90      	pop	{r4, r7, pc}
 80026c4:	200002e0 	.word	0x200002e0
 80026c8:	200003c8 	.word	0x200003c8
 80026cc:	20000400 	.word	0x20000400
 80026d0:	20000390 	.word	0x20000390
 80026d4:	3ca3d70a 	.word	0x3ca3d70a
 80026d8:	c3fa0000 	.word	0xc3fa0000
 80026dc:	c1200000 	.word	0xc1200000
 80026e0:	43fa0000 	.word	0x43fa0000
 80026e4:	41200000 	.word	0x41200000
 80026e8:	c0a00000 	.word	0xc0a00000
 80026ec:	40a00000 	.word	0x40a00000
 80026f0:	3c23d70a 	.word	0x3c23d70a
 80026f4:	20000318 	.word	0x20000318
 80026f8:	20000438 	.word	0x20000438

080026fc <calculate_pid_values>:

int8_t calculate_pid_values(OUTPUT_MIXER *output_mixer,IMU *imu,float setpoint_yaw,float setpoint_pitch,float setpoint_roll,float setpoint_altitude){
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6178      	str	r0, [r7, #20]
 8002704:	6139      	str	r1, [r7, #16]
 8002706:	ed87 0a03 	vstr	s0, [r7, #12]
 800270a:	edc7 0a02 	vstr	s1, [r7, #8]
 800270e:	ed87 1a01 	vstr	s2, [r7, #4]
 8002712:	edc7 1a00 	vstr	s3, [r7]

	output_mixer->PID_YAW_OUTPUT = PIDController_Update(&pid_yaw,setpoint_yaw,imu->ypr[0]);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800271c:	eef0 0a67 	vmov.f32	s1, s15
 8002720:	ed97 0a03 	vldr	s0, [r7, #12]
 8002724:	481c      	ldr	r0, [pc, #112]	; (8002798 <calculate_pid_values+0x9c>)
 8002726:	f000 f937 	bl	8002998 <PIDController_Update>
 800272a:	eef0 7a40 	vmov.f32	s15, s0
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	edc3 7a04 	vstr	s15, [r3, #16]
	output_mixer->PID_PITCH_OUTPUT = PIDController_Update(&pid_pitch,setpoint_pitch,imu->ypr[1]);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800273a:	eef0 0a67 	vmov.f32	s1, s15
 800273e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002742:	4816      	ldr	r0, [pc, #88]	; (800279c <calculate_pid_values+0xa0>)
 8002744:	f000 f928 	bl	8002998 <PIDController_Update>
 8002748:	eef0 7a40 	vmov.f32	s15, s0
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	edc3 7a03 	vstr	s15, [r3, #12]
	output_mixer->PID_ROLL_OUTPUT = PIDController_Update(&pid_roll,setpoint_roll,imu->ypr[2]);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002758:	eef0 0a67 	vmov.f32	s1, s15
 800275c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002760:	480f      	ldr	r0, [pc, #60]	; (80027a0 <calculate_pid_values+0xa4>)
 8002762:	f000 f919 	bl	8002998 <PIDController_Update>
 8002766:	eef0 7a40 	vmov.f32	s15, s0
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	edc3 7a02 	vstr	s15, [r3, #8]
	output_mixer->PID_ALTITUDE_OUTPUT = PIDController_Update(&pid_altitude,setpoint_altitude,imu->altitude);
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002776:	eef0 0a67 	vmov.f32	s1, s15
 800277a:	ed97 0a00 	vldr	s0, [r7]
 800277e:	4809      	ldr	r0, [pc, #36]	; (80027a4 <calculate_pid_values+0xa8>)
 8002780:	f000 f90a 	bl	8002998 <PIDController_Update>
 8002784:	eef0 7a40 	vmov.f32	s15, s0
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	edc3 7a05 	vstr	s15, [r3, #20]

	return OUTPUT_MIXER_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000390 	.word	0x20000390
 800279c:	20000400 	.word	0x20000400
 80027a0:	200002e0 	.word	0x200002e0
 80027a4:	200003c8 	.word	0x200003c8

080027a8 <set_motor_pwm_values>:

int8_t set_motor_pwm_values(OUTPUT_MIXER *output_mixer){
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	 * 2		4			 [1]		[3]
	 *
	 *
	 */
	output_mixer->PWM_US_MOTOR[0] =
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	ed93 7a05 	vldr	s14, [r3, #20]
					- output_mixer->PID_ROLL_OUTPUT
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80027bc:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ output_mixer->PID_PITCH_OUTPUT
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80027c6:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ output_mixer->PID_YAW_OUTPUT);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80027d0:	ee77 7a27 	vadd.f32	s15, s14, s15
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 80027d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027d8:	ee17 3a90 	vmov	r3, s15
 80027dc:	b29a      	uxth	r2, r3
	output_mixer->PWM_US_MOTOR[0] =
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	801a      	strh	r2, [r3, #0]
	output_mixer->PWM_US_MOTOR[1] =
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	ed93 7a05 	vldr	s14, [r3, #20]
					+ output_mixer->PID_ROLL_OUTPUT
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80027ee:	ee37 7a27 	vadd.f32	s14, s14, s15
					- output_mixer->PID_PITCH_OUTPUT
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80027f8:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ output_mixer->PID_YAW_OUTPUT);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8002802:	ee77 7a27 	vadd.f32	s15, s14, s15
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 8002806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800280a:	ee17 3a90 	vmov	r3, s15
 800280e:	b29a      	uxth	r2, r3
	output_mixer->PWM_US_MOTOR[1] =
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	805a      	strh	r2, [r3, #2]
	output_mixer->PWM_US_MOTOR[2] =
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	ed93 7a05 	vldr	s14, [r3, #20]
					+ output_mixer->PID_ROLL_OUTPUT
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002820:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ output_mixer->PID_PITCH_OUTPUT
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	edd3 7a03 	vldr	s15, [r3, #12]
 800282a:	ee37 7a27 	vadd.f32	s14, s14, s15
					- output_mixer->PID_YAW_OUTPUT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	edd3 7a04 	vldr	s15, [r3, #16]
 8002834:	ee77 7a67 	vsub.f32	s15, s14, s15
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 8002838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800283c:	ee17 3a90 	vmov	r3, s15
 8002840:	b29a      	uxth	r2, r3
	output_mixer->PWM_US_MOTOR[2] =
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	809a      	strh	r2, [r3, #4]
	output_mixer->PWM_US_MOTOR[3] =
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	ed93 7a05 	vldr	s14, [r3, #20]
					- output_mixer->PID_ROLL_OUTPUT
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002852:	ee37 7a67 	vsub.f32	s14, s14, s15
					- output_mixer->PID_PITCH_OUTPUT
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	edd3 7a03 	vldr	s15, [r3, #12]
 800285c:	ee37 7a67 	vsub.f32	s14, s14, s15
					- output_mixer->PID_YAW_OUTPUT);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	edd3 7a04 	vldr	s15, [r3, #16]
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
			(uint16_t) (output_mixer->PID_ALTITUDE_OUTPUT
 800286a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286e:	ee17 3a90 	vmov	r3, s15
 8002872:	b29a      	uxth	r2, r3
	output_mixer->PWM_US_MOTOR[3] =
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	80da      	strh	r2, [r3, #6]
	/* Clamp output*/
	for (uint8_t i = 0; i < 4; i++) {
 8002878:	2300      	movs	r3, #0
 800287a:	73fb      	strb	r3, [r7, #15]
 800287c:	e01d      	b.n	80028ba <set_motor_pwm_values+0x112>
		if (output_mixer->PWM_US_MOTOR[i] > OUTPUT_MIXER_MAX_PWM) {
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002886:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800288a:	d906      	bls.n	800289a <set_motor_pwm_values+0xf2>
			output_mixer->PWM_US_MOTOR[i] = OUTPUT_MIXER_MAX_PWM;
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002894:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002898:	e00c      	b.n	80028b4 <set_motor_pwm_values+0x10c>
		} else if (output_mixer->PWM_US_MOTOR[i] < OUTPUT_MIXER_MIN_PWM) {
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80028a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028a6:	d205      	bcs.n	80028b4 <set_motor_pwm_values+0x10c>
			output_mixer->PWM_US_MOTOR[i] = OUTPUT_MIXER_MIN_PWM;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint8_t i = 0; i < 4; i++) {
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	3301      	adds	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d9de      	bls.n	800287e <set_motor_pwm_values+0xd6>
		}
	}

	return OUTPUT_MIXER_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <update_pid>:


int8_t update_pid(OUTPUT_MIXER *output_mixer, float setpoint_yaw,
		float setpoint_pitch, float setpoint_roll, float setpoint_altitude) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6178      	str	r0, [r7, #20]
 80028d8:	ed87 0a04 	vstr	s0, [r7, #16]
 80028dc:	edc7 0a03 	vstr	s1, [r7, #12]
 80028e0:	ed87 1a02 	vstr	s2, [r7, #8]
 80028e4:	edc7 1a01 	vstr	s3, [r7, #4]
	int8_t rslt;
	/* Calculate PID*/
	rslt = calculate_pid_values(output_mixer, &imu, setpoint_yaw,
 80028e8:	edd7 1a01 	vldr	s3, [r7, #4]
 80028ec:	ed97 1a02 	vldr	s2, [r7, #8]
 80028f0:	edd7 0a03 	vldr	s1, [r7, #12]
 80028f4:	ed97 0a04 	vldr	s0, [r7, #16]
 80028f8:	4905      	ldr	r1, [pc, #20]	; (8002910 <update_pid+0x40>)
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	f7ff fefe 	bl	80026fc <calculate_pid_values>
 8002900:	4603      	mov	r3, r0
 8002902:	77fb      	strb	r3, [r7, #31]
			setpoint_pitch, setpoint_roll, setpoint_altitude);

	return rslt;
 8002904:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000318 	.word	0x20000318

08002914 <update_imu>:

int8_t update_imu(OUTPUT_MIXER *output_mixer, I2C_HandleTypeDef *huartI2C,
		KUSBEGI_FLAGS *kusbegi_flags) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
	int8_t rslt;

	/* Read IMU*/
	rslt = read_imu(&imu, huartI2C, kusbegi_flags);
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <update_imu+0x44>)
 8002926:	f7ff fb0f 	bl	8001f48 <read_imu>
 800292a:	4603      	mov	r3, r0
 800292c:	75fb      	strb	r3, [r7, #23]
	if (rslt != IMU_READ_OK) {
 800292e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <update_imu+0x28>
		return rslt;
 8002936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800293a:	e008      	b.n	800294e <update_imu+0x3a>
	}
	/* Copy IMU to output_mixer struct*/
	output_mixer->IMU = imu;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a06      	ldr	r2, [pc, #24]	; (8002958 <update_imu+0x44>)
 8002940:	3388      	adds	r3, #136	; 0x88
 8002942:	4611      	mov	r1, r2
 8002944:	2278      	movs	r2, #120	; 0x78
 8002946:	4618      	mov	r0, r3
 8002948:	f004 fb70 	bl	800702c <memcpy>

	return OUTPUT_MIXER_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000318 	.word	0x20000318

0800295c <PIDController_Init>:
 * Language:  C
 */

#include "PID.h"

void PIDController_Init(PIDController *pid) {
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80029a4:	edc7 0a01 	vstr	s1, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 80029a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80029ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80029b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b4:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ed97 7a05 	vldr	s14, [r7, #20]
 80029c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c6:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80029d6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80029da:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80029e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 80029ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80029f2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80029f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a18:	dd04      	ble.n	8002a24 <PIDController_Update+0x8c>

        pid->integrator = pid->limMaxInt;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
 8002a22:	e00e      	b.n	8002a42 <PIDController_Update+0xaa>

    } else if (pid->integrator < pid->limMinInt) {
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a38:	d503      	bpl.n	8002a42 <PIDController_Update+0xaa>

        pid->integrator = pid->limMinInt;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

	/*
	* Derivative (band-limited differentiator)
	*/

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a48:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002a52:	edd7 6a01 	vldr	s13, [r7, #4]
 8002a56:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a64:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a6e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8002a80:	eef1 6a67 	vneg.f32	s13, s15
                        / (2.0f * pid->tau + pid->T);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a8a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002aa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad4:	dd04      	ble.n	8002ae0 <PIDController_Update+0x148>

        pid->out = pid->limMax;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ade:	e00e      	b.n	8002afe <PIDController_Update+0x166>

    } else if (pid->out < pid->limMin) {
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002aec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af4:	d503      	bpl.n	8002afe <PIDController_Update+0x166>

        pid->out = pid->limMin;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	635a      	str	r2, [r3, #52]	; 0x34

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
    return pid->out;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0e:	ee07 3a90 	vmov	s15, r3

}
 8002b12:	eeb0 0a67 	vmov.f32	s0, s15
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <init_rc_input>:

	return RC_INPUT_OK;
}


int8_t init_rc_input(RC_INPUT *rc_input){
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	rc_input->rc_channels[throttle].pwm_value = 0;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	805a      	strh	r2, [r3, #2]
	rc_input->rc_channels[yaw].pwm_value = 0;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	84da      	strh	r2, [r3, #38]	; 0x26
	rc_input->rc_channels[pitch].pwm_value = 0;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	835a      	strh	r2, [r3, #26]
	rc_input->rc_channels[roll].pwm_value = 0;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	81da      	strh	r2, [r3, #14]
	rc_input->arm_state = 0;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	sbus.arm = 0;
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <init_rc_input+0x58>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sbus.disarm = 0;
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <init_rc_input+0x58>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	sbus.arm_cnt = 0;
 8002b58:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <init_rc_input+0x58>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	sbus.disarm_cnt = 0;
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <init_rc_input+0x58>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	return RC_INPUT_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	200004a8 	.word	0x200004a8

08002b7c <write8>:
#include <module/i2c/i2c_read_write.h>




int8_t write8(I2C_HandleTypeDef *huart,uint8_t device,uint8_t reg,uint8_t val){
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	70fb      	strb	r3, [r7, #3]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	70bb      	strb	r3, [r7, #2]
 8002b92:	4613      	mov	r3, r2
 8002b94:	707b      	strb	r3, [r7, #1]
	int8_t rslt;
	buffer_i2c[0] = reg;
 8002b96:	4a0b      	ldr	r2, [pc, #44]	; (8002bc4 <write8+0x48>)
 8002b98:	78bb      	ldrb	r3, [r7, #2]
 8002b9a:	7013      	strb	r3, [r2, #0]
	buffer_i2c[1] = val;
 8002b9c:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <write8+0x48>)
 8002b9e:	787b      	ldrb	r3, [r7, #1]
 8002ba0:	7053      	strb	r3, [r2, #1]
	rslt = HAL_I2C_Master_Transmit(huart, device, buffer_i2c, 2, I2C_TRANSMIT_TIMEOUT);
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	b299      	uxth	r1, r3
 8002ba6:	230a      	movs	r3, #10
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2302      	movs	r3, #2
 8002bac:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <write8+0x48>)
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f001 fc50 	bl	8004454 <HAL_I2C_Master_Transmit>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8002bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000214 	.word	0x20000214

08002bc8 <read8>:

int8_t read8(I2C_HandleTypeDef *huart,uint8_t device,uint8_t reg,uint8_t *val){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	72fb      	strb	r3, [r7, #11]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	72bb      	strb	r3, [r7, #10]
	int8_t rslt;
	buffer_i2c[0] = reg;
 8002bda:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <read8+0x60>)
 8002bdc:	7abb      	ldrb	r3, [r7, #10]
 8002bde:	7013      	strb	r3, [r2, #0]
	rslt = HAL_I2C_Master_Transmit(huart, device, buffer_i2c, 1, I2C_TRANSMIT_TIMEOUT);
 8002be0:	7afb      	ldrb	r3, [r7, #11]
 8002be2:	b299      	uxth	r1, r3
 8002be4:	230a      	movs	r3, #10
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	2301      	movs	r3, #1
 8002bea:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <read8+0x60>)
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f001 fc31 	bl	8004454 <HAL_I2C_Master_Transmit>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	75fb      	strb	r3, [r7, #23]
	if(rslt == HAL_OK)
 8002bf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <read8+0x4c>
		rslt = HAL_I2C_Master_Receive(huart, device, &buffer_i2c[1], 1, I2C_RECEIVE_TIMEOUT);
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
 8002c00:	b299      	uxth	r1, r3
 8002c02:	230a      	movs	r3, #10
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	2301      	movs	r3, #1
 8002c08:	4a08      	ldr	r2, [pc, #32]	; (8002c2c <read8+0x64>)
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f001 fd20 	bl	8004650 <HAL_I2C_Master_Receive>
 8002c10:	4603      	mov	r3, r0
 8002c12:	75fb      	strb	r3, [r7, #23]
	*val = buffer_i2c[1];
 8002c14:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <read8+0x60>)
 8002c16:	785a      	ldrb	r2, [r3, #1]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	701a      	strb	r2, [r3, #0]
	return rslt;
 8002c1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000214 	.word	0x20000214
 8002c2c:	20000215 	.word	0x20000215

08002c30 <sendString>:
	char sendBuffer[30]="";
	sprintf(sendBuffer, "%.2f", myFloat);
	sendString(sendBuffer,huart,newLine);
}

void sendString(char* myString,UART_HandleTypeDef* huart,uint8_t newLine){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b094      	sub	sp, #80	; 0x50
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	71fb      	strb	r3, [r7, #7]
	char sendBuffer[60]="";
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	f107 0318 	add.w	r3, r7, #24
 8002c46:	2238      	movs	r2, #56	; 0x38
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 f9f9 	bl	8007042 <memset>
	strncat(sendBuffer, myString, strlen(myString));
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f7fd fab9 	bl	80001c8 <strlen>
 8002c56:	4602      	mov	r2, r0
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	68f9      	ldr	r1, [r7, #12]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 fd41 	bl	80076e6 <strncat>
	if(newLine)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00e      	beq.n	8002c88 <sendString+0x58>
		strncat(sendBuffer, "\r\n", strlen("\r\n"));
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd faaa 	bl	80001c8 <strlen>
 8002c74:	4603      	mov	r3, r0
 8002c76:	461a      	mov	r2, r3
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4413      	add	r3, r2
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <sendString+0x7c>)
 8002c80:	8811      	ldrh	r1, [r2, #0]
 8002c82:	7892      	ldrb	r2, [r2, #2]
 8002c84:	8019      	strh	r1, [r3, #0]
 8002c86:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(huart, (uint8_t *)sendBuffer, strlen(sendBuffer), 10);
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd fa9b 	bl	80001c8 <strlen>
 8002c92:	4603      	mov	r3, r0
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	f107 0114 	add.w	r1, r7, #20
 8002c9a:	230a      	movs	r3, #10
 8002c9c:	68b8      	ldr	r0, [r7, #8]
 8002c9e:	f003 fafc 	bl	800629a <HAL_UART_Transmit>
}
 8002ca2:	bf00      	nop
 8002ca4:	3750      	adds	r7, #80	; 0x50
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	08008ad8 	.word	0x08008ad8

08002cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cb6:	f000 fc4b 	bl	8003550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cba:	f000 f839 	bl	8002d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cbe:	f000 f9bf 	bl	8003040 <MX_GPIO_Init>
  MX_DMA_Init();
 8002cc2:	f000 f99d 	bl	8003000 <MX_DMA_Init>
  MX_I2C1_Init();
 8002cc6:	f000 f89d 	bl	8002e04 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002cca:	f000 f8c9 	bl	8002e60 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002cce:	f000 f941 	bl	8002f54 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002cd2:	f000 f96b 	bl	8002fac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4811      	ldr	r0, [pc, #68]	; (8002d20 <main+0x70>)
 8002cda:	f002 fe9b 	bl	8005a14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002cde:	2104      	movs	r1, #4
 8002ce0:	480f      	ldr	r0, [pc, #60]	; (8002d20 <main+0x70>)
 8002ce2:	f002 fe97 	bl	8005a14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002ce6:	2108      	movs	r1, #8
 8002ce8:	480d      	ldr	r0, [pc, #52]	; (8002d20 <main+0x70>)
 8002cea:	f002 fe93 	bl	8005a14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002cee:	210c      	movs	r1, #12
 8002cf0:	480b      	ldr	r0, [pc, #44]	; (8002d20 <main+0x70>)
 8002cf2:	f002 fe8f 	bl	8005a14 <HAL_TIM_PWM_Start>

	KUSBEGI kusbegi;

	if(!kusbegi_init(&hi2c1,&kusbegi,&huart2)){
 8002cf6:	463b      	mov	r3, r7
 8002cf8:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <main+0x74>)
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	480a      	ldr	r0, [pc, #40]	; (8002d28 <main+0x78>)
 8002cfe:	f7ff fa0d 	bl	800211c <kusbegi_init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d104      	bne.n	8002d12 <main+0x62>
		sendString("init basarili", &huart2, 1);
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4906      	ldr	r1, [pc, #24]	; (8002d24 <main+0x74>)
 8002d0c:	4807      	ldr	r0, [pc, #28]	; (8002d2c <main+0x7c>)
 8002d0e:	f7ff ff8f 	bl	8002c30 <sendString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		kusbegi_loop(&huart2,&hi2c1,&kusbegi);
 8002d12:	463b      	mov	r3, r7
 8002d14:	461a      	mov	r2, r3
 8002d16:	4904      	ldr	r1, [pc, #16]	; (8002d28 <main+0x78>)
 8002d18:	4802      	ldr	r0, [pc, #8]	; (8002d24 <main+0x74>)
 8002d1a:	f7ff fa59 	bl	80021d0 <kusbegi_loop>
 8002d1e:	e7f8      	b.n	8002d12 <main+0x62>
 8002d20:	20000658 	.word	0x20000658
 8002d24:	2000078c 	.word	0x2000078c
 8002d28:	20000698 	.word	0x20000698
 8002d2c:	08008adc 	.word	0x08008adc

08002d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b094      	sub	sp, #80	; 0x50
 8002d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d36:	f107 0320 	add.w	r3, r7, #32
 8002d3a:	2230      	movs	r2, #48	; 0x30
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f004 f97f 	bl	8007042 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d44:	f107 030c 	add.w	r3, r7, #12
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <SystemClock_Config+0xcc>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <SystemClock_Config+0xcc>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6413      	str	r3, [r2, #64]	; 0x40
 8002d64:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <SystemClock_Config+0xcc>)
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d70:	2300      	movs	r3, #0
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <SystemClock_Config+0xd0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a21      	ldr	r2, [pc, #132]	; (8002e00 <SystemClock_Config+0xd0>)
 8002d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <SystemClock_Config+0xd0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d88:	607b      	str	r3, [r7, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d96:	2302      	movs	r3, #2
 8002d98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002da0:	2304      	movs	r3, #4
 8002da2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002da4:	23a8      	movs	r3, #168	; 0xa8
 8002da6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002da8:	2302      	movs	r3, #2
 8002daa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002dac:	2304      	movs	r3, #4
 8002dae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002db0:	f107 0320 	add.w	r3, r7, #32
 8002db4:	4618      	mov	r0, r3
 8002db6:	f002 f99f 	bl	80050f8 <HAL_RCC_OscConfig>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002dc0:	f000 f982 	bl	80030c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002dd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ddc:	f107 030c 	add.w	r3, r7, #12
 8002de0:	2105      	movs	r1, #5
 8002de2:	4618      	mov	r0, r3
 8002de4:	f002 fbf8 	bl	80055d8 <HAL_RCC_ClockConfig>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002dee:	f000 f96b 	bl	80030c8 <Error_Handler>
  }
}
 8002df2:	bf00      	nop
 8002df4:	3750      	adds	r7, #80	; 0x50
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40007000 	.word	0x40007000

08002e04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e08:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <MX_I2C1_Init+0x54>)
 8002e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e10:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <MX_I2C1_Init+0x58>)
 8002e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e34:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e40:	4804      	ldr	r0, [pc, #16]	; (8002e54 <MX_I2C1_Init+0x50>)
 8002e42:	f001 f9cf 	bl	80041e4 <HAL_I2C_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e4c:	f000 f93c 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000698 	.word	0x20000698
 8002e58:	40005400 	.word	0x40005400
 8002e5c:	000186a0 	.word	0x000186a0

08002e60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e66:	f107 0320 	add.w	r3, r7, #32
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e70:	1d3b      	adds	r3, r7, #4
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
 8002e7c:	611a      	str	r2, [r3, #16]
 8002e7e:	615a      	str	r2, [r3, #20]
 8002e80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e82:	4b32      	ldr	r3, [pc, #200]	; (8002f4c <MX_TIM4_Init+0xec>)
 8002e84:	4a32      	ldr	r2, [pc, #200]	; (8002f50 <MX_TIM4_Init+0xf0>)
 8002e86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002e88:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <MX_TIM4_Init+0xec>)
 8002e8a:	2253      	movs	r2, #83	; 0x53
 8002e8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8e:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <MX_TIM4_Init+0xec>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8002e94:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <MX_TIM4_Init+0xec>)
 8002e96:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002e9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e9c:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <MX_TIM4_Init+0xec>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea2:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <MX_TIM4_Init+0xec>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ea8:	4828      	ldr	r0, [pc, #160]	; (8002f4c <MX_TIM4_Init+0xec>)
 8002eaa:	f002 fd87 	bl	80059bc <HAL_TIM_PWM_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002eb4:	f000 f908 	bl	80030c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ec0:	f107 0320 	add.w	r3, r7, #32
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4821      	ldr	r0, [pc, #132]	; (8002f4c <MX_TIM4_Init+0xec>)
 8002ec8:	f003 f91e 	bl	8006108 <HAL_TIMEx_MasterConfigSynchronization>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002ed2:	f000 f8f9 	bl	80030c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ed6:	2360      	movs	r3, #96	; 0x60
 8002ed8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	2200      	movs	r2, #0
 8002eea:	4619      	mov	r1, r3
 8002eec:	4817      	ldr	r0, [pc, #92]	; (8002f4c <MX_TIM4_Init+0xec>)
 8002eee:	f002 fdcf 	bl	8005a90 <HAL_TIM_PWM_ConfigChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002ef8:	f000 f8e6 	bl	80030c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	2204      	movs	r2, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	4812      	ldr	r0, [pc, #72]	; (8002f4c <MX_TIM4_Init+0xec>)
 8002f04:	f002 fdc4 	bl	8005a90 <HAL_TIM_PWM_ConfigChannel>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002f0e:	f000 f8db 	bl	80030c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	2208      	movs	r2, #8
 8002f16:	4619      	mov	r1, r3
 8002f18:	480c      	ldr	r0, [pc, #48]	; (8002f4c <MX_TIM4_Init+0xec>)
 8002f1a:	f002 fdb9 	bl	8005a90 <HAL_TIM_PWM_ConfigChannel>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8002f24:	f000 f8d0 	bl	80030c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4807      	ldr	r0, [pc, #28]	; (8002f4c <MX_TIM4_Init+0xec>)
 8002f30:	f002 fdae 	bl	8005a90 <HAL_TIM_PWM_ConfigChannel>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8002f3a:	f000 f8c5 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f3e:	4803      	ldr	r0, [pc, #12]	; (8002f4c <MX_TIM4_Init+0xec>)
 8002f40:	f000 f95c 	bl	80031fc <HAL_TIM_MspPostInit>

}
 8002f44:	bf00      	nop
 8002f46:	3728      	adds	r7, #40	; 0x28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000658 	.word	0x20000658
 8002f50:	40000800 	.word	0x40000800

08002f54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f5a:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <MX_USART1_UART_Init+0x50>)
 8002f5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f60:	4a11      	ldr	r2, [pc, #68]	; (8002fa8 <MX_USART1_UART_Init+0x54>)
 8002f62:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f64:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f8a:	4805      	ldr	r0, [pc, #20]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f8c:	f003 f938 	bl	8006200 <HAL_UART_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f96:	f000 f897 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2000074c 	.word	0x2000074c
 8002fa4:	40011000 	.word	0x40011000
 8002fa8:	000186a0 	.word	0x000186a0

08002fac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <MX_USART2_UART_Init+0x4c>)
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <MX_USART2_UART_Init+0x50>)
 8002fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <MX_USART2_UART_Init+0x4c>)
 8002fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <MX_USART2_UART_Init+0x4c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <MX_USART2_UART_Init+0x4c>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <MX_USART2_UART_Init+0x4c>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <MX_USART2_UART_Init+0x4c>)
 8002fd2:	220c      	movs	r2, #12
 8002fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <MX_USART2_UART_Init+0x4c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <MX_USART2_UART_Init+0x4c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fe2:	4805      	ldr	r0, [pc, #20]	; (8002ff8 <MX_USART2_UART_Init+0x4c>)
 8002fe4:	f003 f90c 	bl	8006200 <HAL_UART_Init>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fee:	f000 f86b 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000078c 	.word	0x2000078c
 8002ffc:	40004400 	.word	0x40004400

08003000 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <MX_DMA_Init+0x3c>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	4a0b      	ldr	r2, [pc, #44]	; (800303c <MX_DMA_Init+0x3c>)
 8003010:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003014:	6313      	str	r3, [r2, #48]	; 0x30
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <MX_DMA_Init+0x3c>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301e:	607b      	str	r3, [r7, #4]
 8003020:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003022:	2200      	movs	r2, #0
 8003024:	2100      	movs	r1, #0
 8003026:	203a      	movs	r0, #58	; 0x3a
 8003028:	f000 fc01 	bl	800382e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800302c:	203a      	movs	r0, #58	; 0x3a
 800302e:	f000 fc1a 	bl	8003866 <HAL_NVIC_EnableIRQ>

}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800

08003040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <MX_GPIO_Init+0x84>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <MX_GPIO_Init+0x84>)
 8003050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <MX_GPIO_Init+0x84>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <MX_GPIO_Init+0x84>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <MX_GPIO_Init+0x84>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <MX_GPIO_Init+0x84>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <MX_GPIO_Init+0x84>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <MX_GPIO_Init+0x84>)
 8003088:	f043 0308 	orr.w	r3, r3, #8
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <MX_GPIO_Init+0x84>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <MX_GPIO_Init+0x84>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a08      	ldr	r2, [pc, #32]	; (80030c4 <MX_GPIO_Init+0x84>)
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <MX_GPIO_Init+0x84>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]

}
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800

080030c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_MspInit+0x4c>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <HAL_MspInit+0x4c>)
 80030e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ec:	6453      	str	r3, [r2, #68]	; 0x44
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <HAL_MspInit+0x4c>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_MspInit+0x4c>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a08      	ldr	r2, [pc, #32]	; (8003124 <HAL_MspInit+0x4c>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_MspInit+0x4c>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800

08003128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a19      	ldr	r2, [pc, #100]	; (80031ac <HAL_I2C_MspInit+0x84>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d12b      	bne.n	80031a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	4b18      	ldr	r3, [pc, #96]	; (80031b0 <HAL_I2C_MspInit+0x88>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <HAL_I2C_MspInit+0x88>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <HAL_I2C_MspInit+0x88>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003166:	23c0      	movs	r3, #192	; 0xc0
 8003168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800316a:	2312      	movs	r3, #18
 800316c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800316e:	2301      	movs	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003176:	2304      	movs	r3, #4
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	f107 0314 	add.w	r3, r7, #20
 800317e:	4619      	mov	r1, r3
 8003180:	480c      	ldr	r0, [pc, #48]	; (80031b4 <HAL_I2C_MspInit+0x8c>)
 8003182:	f000 fe95 	bl	8003eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_I2C_MspInit+0x88>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <HAL_I2C_MspInit+0x88>)
 8003190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_I2C_MspInit+0x88>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031a2:	bf00      	nop
 80031a4:	3728      	adds	r7, #40	; 0x28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40005400 	.word	0x40005400
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40020400 	.word	0x40020400

080031b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0b      	ldr	r2, [pc, #44]	; (80031f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10d      	bne.n	80031e6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_TIM_PWM_MspInit+0x40>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <HAL_TIM_PWM_MspInit+0x40>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6413      	str	r3, [r2, #64]	; 0x40
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <HAL_TIM_PWM_MspInit+0x40>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40000800 	.word	0x40000800
 80031f8:	40023800 	.word	0x40023800

080031fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a12      	ldr	r2, [pc, #72]	; (8003264 <HAL_TIM_MspPostInit+0x68>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d11e      	bne.n	800325c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <HAL_TIM_MspPostInit+0x6c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a10      	ldr	r2, [pc, #64]	; (8003268 <HAL_TIM_MspPostInit+0x6c>)
 8003228:	f043 0308 	orr.w	r3, r3, #8
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HAL_TIM_MspPostInit+0x6c>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800323a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800323e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003240:	2302      	movs	r3, #2
 8003242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003248:	2300      	movs	r3, #0
 800324a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800324c:	2302      	movs	r3, #2
 800324e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	4619      	mov	r1, r3
 8003256:	4805      	ldr	r0, [pc, #20]	; (800326c <HAL_TIM_MspPostInit+0x70>)
 8003258:	f000 fe2a 	bl	8003eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800325c:	bf00      	nop
 800325e:	3720      	adds	r7, #32
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40000800 	.word	0x40000800
 8003268:	40023800 	.word	0x40023800
 800326c:	40020c00 	.word	0x40020c00

08003270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08c      	sub	sp, #48	; 0x30
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 031c 	add.w	r3, r7, #28
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a4e      	ldr	r2, [pc, #312]	; (80033c8 <HAL_UART_MspInit+0x158>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d15c      	bne.n	800334c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	4b4d      	ldr	r3, [pc, #308]	; (80033cc <HAL_UART_MspInit+0x15c>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	4a4c      	ldr	r2, [pc, #304]	; (80033cc <HAL_UART_MspInit+0x15c>)
 800329c:	f043 0310 	orr.w	r3, r3, #16
 80032a0:	6453      	str	r3, [r2, #68]	; 0x44
 80032a2:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_UART_MspInit+0x15c>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	4b46      	ldr	r3, [pc, #280]	; (80033cc <HAL_UART_MspInit+0x15c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a45      	ldr	r2, [pc, #276]	; (80033cc <HAL_UART_MspInit+0x15c>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b43      	ldr	r3, [pc, #268]	; (80033cc <HAL_UART_MspInit+0x15c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d8:	2303      	movs	r3, #3
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032dc:	2307      	movs	r3, #7
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 031c 	add.w	r3, r7, #28
 80032e4:	4619      	mov	r1, r3
 80032e6:	483a      	ldr	r0, [pc, #232]	; (80033d0 <HAL_UART_MspInit+0x160>)
 80032e8:	f000 fde2 	bl	8003eb0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80032ec:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <HAL_UART_MspInit+0x164>)
 80032ee:	4a3a      	ldr	r2, [pc, #232]	; (80033d8 <HAL_UART_MspInit+0x168>)
 80032f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80032f2:	4b38      	ldr	r3, [pc, #224]	; (80033d4 <HAL_UART_MspInit+0x164>)
 80032f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032fa:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_UART_MspInit+0x164>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003300:	4b34      	ldr	r3, [pc, #208]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003306:	4b33      	ldr	r3, [pc, #204]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800330c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800330e:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003310:	2200      	movs	r2, #0
 8003312:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003314:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003316:	2200      	movs	r2, #0
 8003318:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800331a:	4b2e      	ldr	r3, [pc, #184]	; (80033d4 <HAL_UART_MspInit+0x164>)
 800331c:	2200      	movs	r2, #0
 800331e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003320:	4b2c      	ldr	r3, [pc, #176]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003322:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003326:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003328:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <HAL_UART_MspInit+0x164>)
 800332a:	2200      	movs	r2, #0
 800332c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800332e:	4829      	ldr	r0, [pc, #164]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003330:	f000 fab4 	bl	800389c <HAL_DMA_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800333a:	f7ff fec5 	bl	80030c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003342:	635a      	str	r2, [r3, #52]	; 0x34
 8003344:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800334a:	e038      	b.n	80033be <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a22      	ldr	r2, [pc, #136]	; (80033dc <HAL_UART_MspInit+0x16c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d133      	bne.n	80033be <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <HAL_UART_MspInit+0x15c>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a1b      	ldr	r2, [pc, #108]	; (80033cc <HAL_UART_MspInit+0x15c>)
 8003360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b19      	ldr	r3, [pc, #100]	; (80033cc <HAL_UART_MspInit+0x15c>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <HAL_UART_MspInit+0x15c>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a14      	ldr	r2, [pc, #80]	; (80033cc <HAL_UART_MspInit+0x15c>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_UART_MspInit+0x15c>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800338e:	230c      	movs	r3, #12
 8003390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339a:	2303      	movs	r3, #3
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800339e:	2307      	movs	r3, #7
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a2:	f107 031c 	add.w	r3, r7, #28
 80033a6:	4619      	mov	r1, r3
 80033a8:	4809      	ldr	r0, [pc, #36]	; (80033d0 <HAL_UART_MspInit+0x160>)
 80033aa:	f000 fd81 	bl	8003eb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2100      	movs	r1, #0
 80033b2:	2026      	movs	r0, #38	; 0x26
 80033b4:	f000 fa3b 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033b8:	2026      	movs	r0, #38	; 0x26
 80033ba:	f000 fa54 	bl	8003866 <HAL_NVIC_EnableIRQ>
}
 80033be:	bf00      	nop
 80033c0:	3730      	adds	r7, #48	; 0x30
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40011000 	.word	0x40011000
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40020000 	.word	0x40020000
 80033d4:	200006ec 	.word	0x200006ec
 80033d8:	40026440 	.word	0x40026440
 80033dc:	40004400 	.word	0x40004400

080033e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033f2:	e7fe      	b.n	80033f2 <HardFault_Handler+0x4>

080033f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f8:	e7fe      	b.n	80033f8 <MemManage_Handler+0x4>

080033fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033fe:	e7fe      	b.n	80033fe <BusFault_Handler+0x4>

08003400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003404:	e7fe      	b.n	8003404 <UsageFault_Handler+0x4>

08003406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003422:	b480      	push	{r7}
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003434:	f000 f8de 	bl	80035f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}

0800343c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003440:	4802      	ldr	r0, [pc, #8]	; (800344c <USART2_IRQHandler+0x10>)
 8003442:	f002 ffc3 	bl	80063cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	2000078c 	.word	0x2000078c

08003450 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003454:	4802      	ldr	r0, [pc, #8]	; (8003460 <DMA2_Stream2_IRQHandler+0x10>)
 8003456:	f000 faf1 	bl	8003a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	200006ec 	.word	0x200006ec

08003464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800346c:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <_sbrk+0x5c>)
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <_sbrk+0x60>)
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003478:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <_sbrk+0x64>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <_sbrk+0x64>)
 8003482:	4a12      	ldr	r2, [pc, #72]	; (80034cc <_sbrk+0x68>)
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <_sbrk+0x64>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	429a      	cmp	r2, r3
 8003492:	d207      	bcs.n	80034a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003494:	f003 fda0 	bl	8006fd8 <__errno>
 8003498:	4602      	mov	r2, r0
 800349a:	230c      	movs	r3, #12
 800349c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295
 80034a2:	e009      	b.n	80034b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <_sbrk+0x64>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <_sbrk+0x64>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	4a05      	ldr	r2, [pc, #20]	; (80034c8 <_sbrk+0x64>)
 80034b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034b6:	68fb      	ldr	r3, [r7, #12]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20020000 	.word	0x20020000
 80034c4:	00000400 	.word	0x00000400
 80034c8:	200001fc 	.word	0x200001fc
 80034cc:	200007d8 	.word	0x200007d8

080034d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <SystemInit+0x28>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	4a07      	ldr	r2, [pc, #28]	; (80034f8 <SystemInit+0x28>)
 80034dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <SystemInit+0x28>)
 80034e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034ea:	609a      	str	r2, [r3, #8]
#endif
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003534 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003500:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003502:	e003      	b.n	800350c <LoopCopyDataInit>

08003504 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003506:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003508:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800350a:	3104      	adds	r1, #4

0800350c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800350c:	480b      	ldr	r0, [pc, #44]	; (800353c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800350e:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003510:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003512:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003514:	d3f6      	bcc.n	8003504 <CopyDataInit>
  ldr  r2, =_sbss
 8003516:	4a0b      	ldr	r2, [pc, #44]	; (8003544 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003518:	e002      	b.n	8003520 <LoopFillZerobss>

0800351a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800351a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800351c:	f842 3b04 	str.w	r3, [r2], #4

08003520 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003522:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003524:	d3f9      	bcc.n	800351a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003526:	f7ff ffd3 	bl	80034d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800352a:	f003 fd5b 	bl	8006fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800352e:	f7ff fbbf 	bl	8002cb0 <main>
  bx  lr    
 8003532:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003534:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003538:	08008d48 	.word	0x08008d48
  ldr  r0, =_sdata
 800353c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003540:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003544:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003548:	200007d4 	.word	0x200007d4

0800354c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800354c:	e7fe      	b.n	800354c <ADC_IRQHandler>
	...

08003550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_Init+0x40>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a0d      	ldr	r2, [pc, #52]	; (8003590 <HAL_Init+0x40>)
 800355a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800355e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_Init+0x40>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <HAL_Init+0x40>)
 8003566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800356a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800356c:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_Init+0x40>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a07      	ldr	r2, [pc, #28]	; (8003590 <HAL_Init+0x40>)
 8003572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003578:	2003      	movs	r0, #3
 800357a:	f000 f94d 	bl	8003818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800357e:	2000      	movs	r0, #0
 8003580:	f000 f808 	bl	8003594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003584:	f7ff fda8 	bl	80030d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023c00 	.word	0x40023c00

08003594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800359c:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_InitTick+0x54>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_InitTick+0x58>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	4619      	mov	r1, r3
 80035a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f965 	bl	8003882 <HAL_SYSTICK_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e00e      	b.n	80035e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b0f      	cmp	r3, #15
 80035c6:	d80a      	bhi.n	80035de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035c8:	2200      	movs	r2, #0
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	f000 f92d 	bl	800382e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035d4:	4a06      	ldr	r2, [pc, #24]	; (80035f0 <HAL_InitTick+0x5c>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000000 	.word	0x20000000
 80035ec:	20000008 	.word	0x20000008
 80035f0:	20000004 	.word	0x20000004

080035f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_IncTick+0x20>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_IncTick+0x24>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4413      	add	r3, r2
 8003604:	4a04      	ldr	r2, [pc, #16]	; (8003618 <HAL_IncTick+0x24>)
 8003606:	6013      	str	r3, [r2, #0]
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	20000008 	.word	0x20000008
 8003618:	200007cc 	.word	0x200007cc

0800361c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return uwTick;
 8003620:	4b03      	ldr	r3, [pc, #12]	; (8003630 <HAL_GetTick+0x14>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	200007cc 	.word	0x200007cc

08003634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800363c:	f7ff ffee 	bl	800361c <HAL_GetTick>
 8003640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d005      	beq.n	800365a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_Delay+0x40>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800365a:	bf00      	nop
 800365c:	f7ff ffde 	bl	800361c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	429a      	cmp	r2, r3
 800366a:	d8f7      	bhi.n	800365c <HAL_Delay+0x28>
  {
  }
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000008 	.word	0x20000008

08003678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <__NVIC_SetPriorityGrouping+0x44>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003694:	4013      	ands	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036aa:	4a04      	ldr	r2, [pc, #16]	; (80036bc <__NVIC_SetPriorityGrouping+0x44>)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	60d3      	str	r3, [r2, #12]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <__NVIC_GetPriorityGrouping+0x18>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	0a1b      	lsrs	r3, r3, #8
 80036ca:	f003 0307 	and.w	r3, r3, #7
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	db0b      	blt.n	8003706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	f003 021f 	and.w	r2, r3, #31
 80036f4:	4907      	ldr	r1, [pc, #28]	; (8003714 <__NVIC_EnableIRQ+0x38>)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	2001      	movs	r0, #1
 80036fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	e000e100 	.word	0xe000e100

08003718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	6039      	str	r1, [r7, #0]
 8003722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003728:	2b00      	cmp	r3, #0
 800372a:	db0a      	blt.n	8003742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	b2da      	uxtb	r2, r3
 8003730:	490c      	ldr	r1, [pc, #48]	; (8003764 <__NVIC_SetPriority+0x4c>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	0112      	lsls	r2, r2, #4
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	440b      	add	r3, r1
 800373c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003740:	e00a      	b.n	8003758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4908      	ldr	r1, [pc, #32]	; (8003768 <__NVIC_SetPriority+0x50>)
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	3b04      	subs	r3, #4
 8003750:	0112      	lsls	r2, r2, #4
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	440b      	add	r3, r1
 8003756:	761a      	strb	r2, [r3, #24]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000e100 	.word	0xe000e100
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800376c:	b480      	push	{r7}
 800376e:	b089      	sub	sp, #36	; 0x24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f1c3 0307 	rsb	r3, r3, #7
 8003786:	2b04      	cmp	r3, #4
 8003788:	bf28      	it	cs
 800378a:	2304      	movcs	r3, #4
 800378c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3304      	adds	r3, #4
 8003792:	2b06      	cmp	r3, #6
 8003794:	d902      	bls.n	800379c <NVIC_EncodePriority+0x30>
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3b03      	subs	r3, #3
 800379a:	e000      	b.n	800379e <NVIC_EncodePriority+0x32>
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	401a      	ands	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b4:	f04f 31ff 	mov.w	r1, #4294967295
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	43d9      	mvns	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c4:	4313      	orrs	r3, r2
         );
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e4:	d301      	bcc.n	80037ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e6:	2301      	movs	r3, #1
 80037e8:	e00f      	b.n	800380a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <SysTick_Config+0x40>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f2:	210f      	movs	r1, #15
 80037f4:	f04f 30ff 	mov.w	r0, #4294967295
 80037f8:	f7ff ff8e 	bl	8003718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <SysTick_Config+0x40>)
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003802:	4b04      	ldr	r3, [pc, #16]	; (8003814 <SysTick_Config+0x40>)
 8003804:	2207      	movs	r2, #7
 8003806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	e000e010 	.word	0xe000e010

08003818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ff29 	bl	8003678 <__NVIC_SetPriorityGrouping>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800382e:	b580      	push	{r7, lr}
 8003830:	b086      	sub	sp, #24
 8003832:	af00      	add	r7, sp, #0
 8003834:	4603      	mov	r3, r0
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003840:	f7ff ff3e 	bl	80036c0 <__NVIC_GetPriorityGrouping>
 8003844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	6978      	ldr	r0, [r7, #20]
 800384c:	f7ff ff8e 	bl	800376c <NVIC_EncodePriority>
 8003850:	4602      	mov	r2, r0
 8003852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff ff5d 	bl	8003718 <__NVIC_SetPriority>
}
 800385e:	bf00      	nop
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	4603      	mov	r3, r0
 800386e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ff31 	bl	80036dc <__NVIC_EnableIRQ>
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff ffa2 	bl	80037d4 <SysTick_Config>
 8003890:	4603      	mov	r3, r0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038a8:	f7ff feb8 	bl	800361c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e099      	b.n	80039ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038d8:	e00f      	b.n	80038fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038da:	f7ff fe9f 	bl	800361c <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	d908      	bls.n	80038fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2203      	movs	r2, #3
 80038f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e078      	b.n	80039ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e8      	bne.n	80038da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4b38      	ldr	r3, [pc, #224]	; (80039f4 <HAL_DMA_Init+0x158>)
 8003914:	4013      	ands	r3, r2
 8003916:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003926:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b04      	cmp	r3, #4
 8003952:	d107      	bne.n	8003964 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	4313      	orrs	r3, r2
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0307 	bic.w	r3, r3, #7
 800397a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	2b04      	cmp	r3, #4
 800398c:	d117      	bne.n	80039be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fa0b 	bl	8003dbc <DMA_CheckFifoParam>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2240      	movs	r2, #64	; 0x40
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039ba:	2301      	movs	r3, #1
 80039bc:	e016      	b.n	80039ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f9c2 	bl	8003d50 <DMA_CalcBaseAndBitshift>
 80039cc:	4603      	mov	r3, r0
 80039ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	223f      	movs	r2, #63	; 0x3f
 80039d6:	409a      	lsls	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	f010803f 	.word	0xf010803f

080039f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d004      	beq.n	8003a16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e00c      	b.n	8003a30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2205      	movs	r2, #5
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0201 	bic.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a48:	4b92      	ldr	r3, [pc, #584]	; (8003c94 <HAL_DMA_IRQHandler+0x258>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a92      	ldr	r2, [pc, #584]	; (8003c98 <HAL_DMA_IRQHandler+0x25c>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	0a9b      	lsrs	r3, r3, #10
 8003a54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	2208      	movs	r2, #8
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01a      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d013      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0204 	bic.w	r2, r2, #4
 8003a8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	2208      	movs	r2, #8
 8003a96:	409a      	lsls	r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	f043 0201 	orr.w	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	2201      	movs	r2, #1
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d012      	beq.n	8003ade <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aca:	2201      	movs	r2, #1
 8003acc:	409a      	lsls	r2, r3
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad6:	f043 0202 	orr.w	r2, r3, #2
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d012      	beq.n	8003b14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00b      	beq.n	8003b14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	2204      	movs	r2, #4
 8003b02:	409a      	lsls	r2, r3
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0c:	f043 0204 	orr.w	r2, r3, #4
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	2210      	movs	r2, #16
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d043      	beq.n	8003bac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d03c      	beq.n	8003bac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	2210      	movs	r2, #16
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d018      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d108      	bne.n	8003b6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d024      	beq.n	8003bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
 8003b6a:	e01f      	b.n	8003bac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01b      	beq.n	8003bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	4798      	blx	r3
 8003b7c:	e016      	b.n	8003bac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d107      	bne.n	8003b9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0208 	bic.w	r2, r2, #8
 8003b9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 808e 	beq.w	8003cda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8086 	beq.w	8003cda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d136      	bne.n	8003c54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0216 	bic.w	r2, r2, #22
 8003bf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <HAL_DMA_IRQHandler+0x1da>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d007      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0208 	bic.w	r2, r2, #8
 8003c24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2a:	223f      	movs	r2, #63	; 0x3f
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d07d      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	4798      	blx	r3
        }
        return;
 8003c52:	e078      	b.n	8003d46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d01c      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d108      	bne.n	8003c82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d030      	beq.n	8003cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
 8003c80:	e02b      	b.n	8003cda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d027      	beq.n	8003cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
 8003c92:	e022      	b.n	8003cda <HAL_DMA_IRQHandler+0x29e>
 8003c94:	20000000 	.word	0x20000000
 8003c98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10f      	bne.n	8003cca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0210 	bic.w	r2, r2, #16
 8003cb8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d032      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d022      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2205      	movs	r2, #5
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d307      	bcc.n	8003d22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f2      	bne.n	8003d06 <HAL_DMA_IRQHandler+0x2ca>
 8003d20:	e000      	b.n	8003d24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
 8003d44:	e000      	b.n	8003d48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d46:	bf00      	nop
    }
  }
}
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop

08003d50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	3b10      	subs	r3, #16
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <DMA_CalcBaseAndBitshift+0x64>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d6a:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <DMA_CalcBaseAndBitshift+0x68>)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d909      	bls.n	8003d92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	1d1a      	adds	r2, r3, #4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d90:	e007      	b.n	8003da2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d9a:	f023 0303 	bic.w	r3, r3, #3
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	aaaaaaab 	.word	0xaaaaaaab
 8003db8:	08008b04 	.word	0x08008b04

08003dbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11f      	bne.n	8003e16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d855      	bhi.n	8003e88 <DMA_CheckFifoParam+0xcc>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <DMA_CheckFifoParam+0x28>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003e07 	.word	0x08003e07
 8003dec:	08003df5 	.word	0x08003df5
 8003df0:	08003e89 	.word	0x08003e89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d045      	beq.n	8003e8c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e04:	e042      	b.n	8003e8c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e0e:	d13f      	bne.n	8003e90 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e14:	e03c      	b.n	8003e90 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1e:	d121      	bne.n	8003e64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d836      	bhi.n	8003e94 <DMA_CheckFifoParam+0xd8>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <DMA_CheckFifoParam+0x70>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e3d 	.word	0x08003e3d
 8003e30:	08003e43 	.word	0x08003e43
 8003e34:	08003e3d 	.word	0x08003e3d
 8003e38:	08003e55 	.word	0x08003e55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e40:	e02f      	b.n	8003ea2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d024      	beq.n	8003e98 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e52:	e021      	b.n	8003e98 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e5c:	d11e      	bne.n	8003e9c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e62:	e01b      	b.n	8003e9c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d902      	bls.n	8003e70 <DMA_CheckFifoParam+0xb4>
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d003      	beq.n	8003e76 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e6e:	e018      	b.n	8003ea2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
      break;
 8003e74:	e015      	b.n	8003ea2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00e      	beq.n	8003ea0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
      break;
 8003e86:	e00b      	b.n	8003ea0 <DMA_CheckFifoParam+0xe4>
      break;
 8003e88:	bf00      	nop
 8003e8a:	e00a      	b.n	8003ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8003e8c:	bf00      	nop
 8003e8e:	e008      	b.n	8003ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8003e90:	bf00      	nop
 8003e92:	e006      	b.n	8003ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8003e94:	bf00      	nop
 8003e96:	e004      	b.n	8003ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8003e98:	bf00      	nop
 8003e9a:	e002      	b.n	8003ea2 <DMA_CheckFifoParam+0xe6>
      break;   
 8003e9c:	bf00      	nop
 8003e9e:	e000      	b.n	8003ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8003ea0:	bf00      	nop
    }
  } 
  
  return status; 
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b089      	sub	sp, #36	; 0x24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	e16b      	b.n	80041a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ecc:	2201      	movs	r2, #1
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4013      	ands	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	f040 815a 	bne.w	800419e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d00b      	beq.n	8003f0a <HAL_GPIO_Init+0x5a>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d007      	beq.n	8003f0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003efe:	2b11      	cmp	r3, #17
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b12      	cmp	r3, #18
 8003f08:	d130      	bne.n	8003f6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	2203      	movs	r2, #3
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f40:	2201      	movs	r2, #1
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	091b      	lsrs	r3, r3, #4
 8003f56:	f003 0201 	and.w	r2, r3, #1
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	2203      	movs	r2, #3
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0xfc>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b12      	cmp	r3, #18
 8003faa:	d123      	bne.n	8003ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	08da      	lsrs	r2, r3, #3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3208      	adds	r2, #8
 8003fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	220f      	movs	r2, #15
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	08da      	lsrs	r2, r3, #3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3208      	adds	r2, #8
 8003fee:	69b9      	ldr	r1, [r7, #24]
 8003ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	2203      	movs	r2, #3
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0203 	and.w	r2, r3, #3
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80b4 	beq.w	800419e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	4b5f      	ldr	r3, [pc, #380]	; (80041b8 <HAL_GPIO_Init+0x308>)
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	4a5e      	ldr	r2, [pc, #376]	; (80041b8 <HAL_GPIO_Init+0x308>)
 8004040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004044:	6453      	str	r3, [r2, #68]	; 0x44
 8004046:	4b5c      	ldr	r3, [pc, #368]	; (80041b8 <HAL_GPIO_Init+0x308>)
 8004048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004052:	4a5a      	ldr	r2, [pc, #360]	; (80041bc <HAL_GPIO_Init+0x30c>)
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	089b      	lsrs	r3, r3, #2
 8004058:	3302      	adds	r3, #2
 800405a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	220f      	movs	r2, #15
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4013      	ands	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a51      	ldr	r2, [pc, #324]	; (80041c0 <HAL_GPIO_Init+0x310>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02b      	beq.n	80040d6 <HAL_GPIO_Init+0x226>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a50      	ldr	r2, [pc, #320]	; (80041c4 <HAL_GPIO_Init+0x314>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d025      	beq.n	80040d2 <HAL_GPIO_Init+0x222>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a4f      	ldr	r2, [pc, #316]	; (80041c8 <HAL_GPIO_Init+0x318>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01f      	beq.n	80040ce <HAL_GPIO_Init+0x21e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a4e      	ldr	r2, [pc, #312]	; (80041cc <HAL_GPIO_Init+0x31c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d019      	beq.n	80040ca <HAL_GPIO_Init+0x21a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a4d      	ldr	r2, [pc, #308]	; (80041d0 <HAL_GPIO_Init+0x320>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d013      	beq.n	80040c6 <HAL_GPIO_Init+0x216>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a4c      	ldr	r2, [pc, #304]	; (80041d4 <HAL_GPIO_Init+0x324>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00d      	beq.n	80040c2 <HAL_GPIO_Init+0x212>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a4b      	ldr	r2, [pc, #300]	; (80041d8 <HAL_GPIO_Init+0x328>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <HAL_GPIO_Init+0x20e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a4a      	ldr	r2, [pc, #296]	; (80041dc <HAL_GPIO_Init+0x32c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d101      	bne.n	80040ba <HAL_GPIO_Init+0x20a>
 80040b6:	2307      	movs	r3, #7
 80040b8:	e00e      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040ba:	2308      	movs	r3, #8
 80040bc:	e00c      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040be:	2306      	movs	r3, #6
 80040c0:	e00a      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040c2:	2305      	movs	r3, #5
 80040c4:	e008      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040c6:	2304      	movs	r3, #4
 80040c8:	e006      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040ca:	2303      	movs	r3, #3
 80040cc:	e004      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e002      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040d6:	2300      	movs	r3, #0
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	f002 0203 	and.w	r2, r2, #3
 80040de:	0092      	lsls	r2, r2, #2
 80040e0:	4093      	lsls	r3, r2
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040e8:	4934      	ldr	r1, [pc, #208]	; (80041bc <HAL_GPIO_Init+0x30c>)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	3302      	adds	r3, #2
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040f6:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <HAL_GPIO_Init+0x330>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	43db      	mvns	r3, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4013      	ands	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800411a:	4a31      	ldr	r2, [pc, #196]	; (80041e0 <HAL_GPIO_Init+0x330>)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004120:	4b2f      	ldr	r3, [pc, #188]	; (80041e0 <HAL_GPIO_Init+0x330>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004144:	4a26      	ldr	r2, [pc, #152]	; (80041e0 <HAL_GPIO_Init+0x330>)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800414a:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <HAL_GPIO_Init+0x330>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	43db      	mvns	r3, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4013      	ands	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800416e:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <HAL_GPIO_Init+0x330>)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <HAL_GPIO_Init+0x330>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	43db      	mvns	r3, r3
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4013      	ands	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004198:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <HAL_GPIO_Init+0x330>)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3301      	adds	r3, #1
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	2b0f      	cmp	r3, #15
 80041a8:	f67f ae90 	bls.w	8003ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041ac:	bf00      	nop
 80041ae:	3724      	adds	r7, #36	; 0x24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40013800 	.word	0x40013800
 80041c0:	40020000 	.word	0x40020000
 80041c4:	40020400 	.word	0x40020400
 80041c8:	40020800 	.word	0x40020800
 80041cc:	40020c00 	.word	0x40020c00
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40021400 	.word	0x40021400
 80041d8:	40021800 	.word	0x40021800
 80041dc:	40021c00 	.word	0x40021c00
 80041e0:	40013c00 	.word	0x40013c00

080041e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e11f      	b.n	8004436 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fe ff8c 	bl	8003128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2224      	movs	r2, #36	; 0x24
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004236:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004246:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004248:	f001 fb90 	bl	800596c <HAL_RCC_GetPCLK1Freq>
 800424c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4a7b      	ldr	r2, [pc, #492]	; (8004440 <HAL_I2C_Init+0x25c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d807      	bhi.n	8004268 <HAL_I2C_Init+0x84>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4a7a      	ldr	r2, [pc, #488]	; (8004444 <HAL_I2C_Init+0x260>)
 800425c:	4293      	cmp	r3, r2
 800425e:	bf94      	ite	ls
 8004260:	2301      	movls	r3, #1
 8004262:	2300      	movhi	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	e006      	b.n	8004276 <HAL_I2C_Init+0x92>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a77      	ldr	r2, [pc, #476]	; (8004448 <HAL_I2C_Init+0x264>)
 800426c:	4293      	cmp	r3, r2
 800426e:	bf94      	ite	ls
 8004270:	2301      	movls	r3, #1
 8004272:	2300      	movhi	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0db      	b.n	8004436 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4a72      	ldr	r2, [pc, #456]	; (800444c <HAL_I2C_Init+0x268>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	0c9b      	lsrs	r3, r3, #18
 8004288:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4a64      	ldr	r2, [pc, #400]	; (8004440 <HAL_I2C_Init+0x25c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d802      	bhi.n	80042b8 <HAL_I2C_Init+0xd4>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	3301      	adds	r3, #1
 80042b6:	e009      	b.n	80042cc <HAL_I2C_Init+0xe8>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042be:	fb02 f303 	mul.w	r3, r2, r3
 80042c2:	4a63      	ldr	r2, [pc, #396]	; (8004450 <HAL_I2C_Init+0x26c>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	099b      	lsrs	r3, r3, #6
 80042ca:	3301      	adds	r3, #1
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4956      	ldr	r1, [pc, #344]	; (8004440 <HAL_I2C_Init+0x25c>)
 80042e8:	428b      	cmp	r3, r1
 80042ea:	d80d      	bhi.n	8004308 <HAL_I2C_Init+0x124>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1e59      	subs	r1, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042fa:	3301      	adds	r3, #1
 80042fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004300:	2b04      	cmp	r3, #4
 8004302:	bf38      	it	cc
 8004304:	2304      	movcc	r3, #4
 8004306:	e04f      	b.n	80043a8 <HAL_I2C_Init+0x1c4>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d111      	bne.n	8004334 <HAL_I2C_Init+0x150>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1e58      	subs	r0, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6859      	ldr	r1, [r3, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	440b      	add	r3, r1
 800431e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004322:	3301      	adds	r3, #1
 8004324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	e012      	b.n	800435a <HAL_I2C_Init+0x176>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1e58      	subs	r0, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6859      	ldr	r1, [r3, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	0099      	lsls	r1, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	fbb0 f3f3 	udiv	r3, r0, r3
 800434a:	3301      	adds	r3, #1
 800434c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004350:	2b00      	cmp	r3, #0
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_I2C_Init+0x17e>
 800435e:	2301      	movs	r3, #1
 8004360:	e022      	b.n	80043a8 <HAL_I2C_Init+0x1c4>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10e      	bne.n	8004388 <HAL_I2C_Init+0x1a4>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1e58      	subs	r0, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6859      	ldr	r1, [r3, #4]
 8004372:	460b      	mov	r3, r1
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	440b      	add	r3, r1
 8004378:	fbb0 f3f3 	udiv	r3, r0, r3
 800437c:	3301      	adds	r3, #1
 800437e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004386:	e00f      	b.n	80043a8 <HAL_I2C_Init+0x1c4>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1e58      	subs	r0, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6859      	ldr	r1, [r3, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	0099      	lsls	r1, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	fbb0 f3f3 	udiv	r3, r0, r3
 800439e:	3301      	adds	r3, #1
 80043a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	6809      	ldr	r1, [r1, #0]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69da      	ldr	r2, [r3, #28]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6911      	ldr	r1, [r2, #16]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68d2      	ldr	r2, [r2, #12]
 80043e2:	4311      	orrs	r1, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	430b      	orrs	r3, r1
 80043ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695a      	ldr	r2, [r3, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	000186a0 	.word	0x000186a0
 8004444:	001e847f 	.word	0x001e847f
 8004448:	003d08ff 	.word	0x003d08ff
 800444c:	431bde83 	.word	0x431bde83
 8004450:	10624dd3 	.word	0x10624dd3

08004454 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	461a      	mov	r2, r3
 8004460:	460b      	mov	r3, r1
 8004462:	817b      	strh	r3, [r7, #10]
 8004464:	4613      	mov	r3, r2
 8004466:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004468:	f7ff f8d8 	bl	800361c <HAL_GetTick>
 800446c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b20      	cmp	r3, #32
 8004478:	f040 80e0 	bne.w	800463c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	2319      	movs	r3, #25
 8004482:	2201      	movs	r2, #1
 8004484:	4970      	ldr	r1, [pc, #448]	; (8004648 <HAL_I2C_Master_Transmit+0x1f4>)
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fc58 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004492:	2302      	movs	r3, #2
 8004494:	e0d3      	b.n	800463e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_I2C_Master_Transmit+0x50>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e0cc      	b.n	800463e <HAL_I2C_Master_Transmit+0x1ea>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d007      	beq.n	80044ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2221      	movs	r2, #33	; 0x21
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2210      	movs	r2, #16
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	893a      	ldrh	r2, [r7, #8]
 80044fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a50      	ldr	r2, [pc, #320]	; (800464c <HAL_I2C_Master_Transmit+0x1f8>)
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800450c:	8979      	ldrh	r1, [r7, #10]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	6a3a      	ldr	r2, [r7, #32]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 fac2 	bl	8004a9c <I2C_MasterRequestWrite>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e08d      	b.n	800463e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004522:	2300      	movs	r3, #0
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004538:	e066      	b.n	8004608 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	6a39      	ldr	r1, [r7, #32]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fcd2 	bl	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00d      	beq.n	8004566 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	2b04      	cmp	r3, #4
 8004550:	d107      	bne.n	8004562 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004560:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e06b      	b.n	800463e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	781a      	ldrb	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d11b      	bne.n	80045dc <HAL_I2C_Master_Transmit+0x188>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d017      	beq.n	80045dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	781a      	ldrb	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	6a39      	ldr	r1, [r7, #32]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fcc2 	bl	8004f6a <I2C_WaitOnBTFFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00d      	beq.n	8004608 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d107      	bne.n	8004604 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004602:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e01a      	b.n	800463e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460c:	2b00      	cmp	r3, #0
 800460e:	d194      	bne.n	800453a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	e000      	b.n	800463e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800463c:	2302      	movs	r3, #2
  }
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	00100002 	.word	0x00100002
 800464c:	ffff0000 	.word	0xffff0000

08004650 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08c      	sub	sp, #48	; 0x30
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	461a      	mov	r2, r3
 800465c:	460b      	mov	r3, r1
 800465e:	817b      	strh	r3, [r7, #10]
 8004660:	4613      	mov	r3, r2
 8004662:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004664:	f7fe ffda 	bl	800361c <HAL_GetTick>
 8004668:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b20      	cmp	r3, #32
 8004674:	f040 820b 	bne.w	8004a8e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	2319      	movs	r3, #25
 800467e:	2201      	movs	r2, #1
 8004680:	497c      	ldr	r1, [pc, #496]	; (8004874 <HAL_I2C_Master_Receive+0x224>)
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fb5a 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800468e:	2302      	movs	r3, #2
 8004690:	e1fe      	b.n	8004a90 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_I2C_Master_Receive+0x50>
 800469c:	2302      	movs	r3, #2
 800469e:	e1f7      	b.n	8004a90 <HAL_I2C_Master_Receive+0x440>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d007      	beq.n	80046c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0201 	orr.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2222      	movs	r2, #34	; 0x22
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2210      	movs	r2, #16
 80046e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	893a      	ldrh	r2, [r7, #8]
 80046f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a5c      	ldr	r2, [pc, #368]	; (8004878 <HAL_I2C_Master_Receive+0x228>)
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004708:	8979      	ldrh	r1, [r7, #10]
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fa46 	bl	8004ba0 <I2C_MasterRequestRead>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e1b8      	b.n	8004a90 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004722:	2b00      	cmp	r3, #0
 8004724:	d113      	bne.n	800474e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004726:	2300      	movs	r3, #0
 8004728:	623b      	str	r3, [r7, #32]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	623b      	str	r3, [r7, #32]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	623b      	str	r3, [r7, #32]
 800473a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e18c      	b.n	8004a68 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	2b01      	cmp	r3, #1
 8004754:	d11b      	bne.n	800478e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004764:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	61fb      	str	r3, [r7, #28]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e16c      	b.n	8004a68 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004792:	2b02      	cmp	r3, #2
 8004794:	d11b      	bne.n	80047ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	e14c      	b.n	8004a68 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047f4:	e138      	b.n	8004a68 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	f200 80f1 	bhi.w	80049e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004804:	2b01      	cmp	r3, #1
 8004806:	d123      	bne.n	8004850 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 fbed 	bl	8004fec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e139      	b.n	8004a90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800484e:	e10b      	b.n	8004a68 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004854:	2b02      	cmp	r3, #2
 8004856:	d14e      	bne.n	80048f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	2200      	movs	r2, #0
 8004860:	4906      	ldr	r1, [pc, #24]	; (800487c <HAL_I2C_Master_Receive+0x22c>)
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fa6a 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d008      	beq.n	8004880 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e10e      	b.n	8004a90 <HAL_I2C_Master_Receive+0x440>
 8004872:	bf00      	nop
 8004874:	00100002 	.word	0x00100002
 8004878:	ffff0000 	.word	0xffff0000
 800487c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048f4:	e0b8      	b.n	8004a68 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	2200      	movs	r2, #0
 80048fe:	4966      	ldr	r1, [pc, #408]	; (8004a98 <HAL_I2C_Master_Receive+0x448>)
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 fa1b 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0bf      	b.n	8004a90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	2200      	movs	r2, #0
 800495a:	494f      	ldr	r1, [pc, #316]	; (8004a98 <HAL_I2C_Master_Receive+0x448>)
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f9ed 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e091      	b.n	8004a90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049e0:	e042      	b.n	8004a68 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 fb00 	bl	8004fec <I2C_WaitOnRXNEFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e04c      	b.n	8004a90 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d118      	bne.n	8004a68 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f47f aec2 	bne.w	80047f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e000      	b.n	8004a90 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a8e:	2302      	movs	r3, #2
  }
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3728      	adds	r7, #40	; 0x28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	00010004 	.word	0x00010004

08004a9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	607a      	str	r2, [r7, #4]
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d006      	beq.n	8004ac6 <I2C_MasterRequestWrite+0x2a>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d003      	beq.n	8004ac6 <I2C_MasterRequestWrite+0x2a>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ac4:	d108      	bne.n	8004ad8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e00b      	b.n	8004af0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	2b12      	cmp	r3, #18
 8004ade:	d107      	bne.n	8004af0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f91d 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00d      	beq.n	8004b24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b16:	d103      	bne.n	8004b20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e035      	b.n	8004b90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b2c:	d108      	bne.n	8004b40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b2e:	897b      	ldrh	r3, [r7, #10]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	461a      	mov	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b3c:	611a      	str	r2, [r3, #16]
 8004b3e:	e01b      	b.n	8004b78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b40:	897b      	ldrh	r3, [r7, #10]
 8004b42:	11db      	asrs	r3, r3, #7
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f003 0306 	and.w	r3, r3, #6
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f063 030f 	orn	r3, r3, #15
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	490e      	ldr	r1, [pc, #56]	; (8004b98 <I2C_MasterRequestWrite+0xfc>)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f943 	bl	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e010      	b.n	8004b90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b6e:	897b      	ldrh	r3, [r7, #10]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4907      	ldr	r1, [pc, #28]	; (8004b9c <I2C_MasterRequestWrite+0x100>)
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f933 	bl	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	00010008 	.word	0x00010008
 8004b9c:	00010002 	.word	0x00010002

08004ba0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	460b      	mov	r3, r1
 8004bae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bc4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d006      	beq.n	8004bda <I2C_MasterRequestRead+0x3a>
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d003      	beq.n	8004bda <I2C_MasterRequestRead+0x3a>
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bd8:	d108      	bne.n	8004bec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e00b      	b.n	8004c04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	2b11      	cmp	r3, #17
 8004bf2:	d107      	bne.n	8004c04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f893 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00d      	beq.n	8004c38 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2a:	d103      	bne.n	8004c34 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e079      	b.n	8004d2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c40:	d108      	bne.n	8004c54 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c42:	897b      	ldrh	r3, [r7, #10]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	611a      	str	r2, [r3, #16]
 8004c52:	e05f      	b.n	8004d14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c54:	897b      	ldrh	r3, [r7, #10]
 8004c56:	11db      	asrs	r3, r3, #7
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f003 0306 	and.w	r3, r3, #6
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f063 030f 	orn	r3, r3, #15
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	4930      	ldr	r1, [pc, #192]	; (8004d34 <I2C_MasterRequestRead+0x194>)
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f8b9 	bl	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e054      	b.n	8004d2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c82:	897b      	ldrh	r3, [r7, #10]
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	4929      	ldr	r1, [pc, #164]	; (8004d38 <I2C_MasterRequestRead+0x198>)
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 f8a9 	bl	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e044      	b.n	8004d2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cc6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f831 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00d      	beq.n	8004cfc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cee:	d103      	bne.n	8004cf8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e017      	b.n	8004d2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004cfc:	897b      	ldrh	r3, [r7, #10]
 8004cfe:	11db      	asrs	r3, r3, #7
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	f003 0306 	and.w	r3, r3, #6
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	f063 030e 	orn	r3, r3, #14
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	4907      	ldr	r1, [pc, #28]	; (8004d38 <I2C_MasterRequestRead+0x198>)
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f865 	bl	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	00010008 	.word	0x00010008
 8004d38:	00010002 	.word	0x00010002

08004d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d4c:	e025      	b.n	8004d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d021      	beq.n	8004d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d56:	f7fe fc61 	bl	800361c <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d116      	bne.n	8004d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e023      	b.n	8004de2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d10d      	bne.n	8004dc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	43da      	mvns	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4013      	ands	r3, r2
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bf0c      	ite	eq
 8004db6:	2301      	moveq	r3, #1
 8004db8:	2300      	movne	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	e00c      	b.n	8004dda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	43da      	mvns	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bf0c      	ite	eq
 8004dd2:	2301      	moveq	r3, #1
 8004dd4:	2300      	movne	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d0b6      	beq.n	8004d4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004df8:	e051      	b.n	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e08:	d123      	bne.n	8004e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f043 0204 	orr.w	r2, r3, #4
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e046      	b.n	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d021      	beq.n	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5a:	f7fe fbdf 	bl	800361c <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d302      	bcc.n	8004e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d116      	bne.n	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e020      	b.n	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10c      	bne.n	8004ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	43da      	mvns	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bf14      	ite	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	2300      	moveq	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	e00b      	b.n	8004eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	43da      	mvns	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d18d      	bne.n	8004dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ef4:	e02d      	b.n	8004f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f8ce 	bl	8005098 <I2C_IsAcknowledgeFailed>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e02d      	b.n	8004f62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d021      	beq.n	8004f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0e:	f7fe fb85 	bl	800361c <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d302      	bcc.n	8004f24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d116      	bne.n	8004f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f043 0220 	orr.w	r2, r3, #32
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e007      	b.n	8004f62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5c:	2b80      	cmp	r3, #128	; 0x80
 8004f5e:	d1ca      	bne.n	8004ef6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f76:	e02d      	b.n	8004fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f88d 	bl	8005098 <I2C_IsAcknowledgeFailed>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e02d      	b.n	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8e:	d021      	beq.n	8004fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f90:	f7fe fb44 	bl	800361c <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d302      	bcc.n	8004fa6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d116      	bne.n	8004fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	f043 0220 	orr.w	r2, r3, #32
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e007      	b.n	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d1ca      	bne.n	8004f78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ff8:	e042      	b.n	8005080 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b10      	cmp	r3, #16
 8005006:	d119      	bne.n	800503c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0210 	mvn.w	r2, #16
 8005010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e029      	b.n	8005090 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503c:	f7fe faee 	bl	800361c <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	429a      	cmp	r2, r3
 800504a:	d302      	bcc.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d116      	bne.n	8005080 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e007      	b.n	8005090 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508a:	2b40      	cmp	r3, #64	; 0x40
 800508c:	d1b5      	bne.n	8004ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ae:	d11b      	bne.n	80050e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	f043 0204 	orr.w	r2, r3, #4
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e25b      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d075      	beq.n	8005202 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005116:	4ba3      	ldr	r3, [pc, #652]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b04      	cmp	r3, #4
 8005120:	d00c      	beq.n	800513c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005122:	4ba0      	ldr	r3, [pc, #640]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800512a:	2b08      	cmp	r3, #8
 800512c:	d112      	bne.n	8005154 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800512e:	4b9d      	ldr	r3, [pc, #628]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800513a:	d10b      	bne.n	8005154 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800513c:	4b99      	ldr	r3, [pc, #612]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d05b      	beq.n	8005200 <HAL_RCC_OscConfig+0x108>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d157      	bne.n	8005200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e236      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515c:	d106      	bne.n	800516c <HAL_RCC_OscConfig+0x74>
 800515e:	4b91      	ldr	r3, [pc, #580]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a90      	ldr	r2, [pc, #576]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	e01d      	b.n	80051a8 <HAL_RCC_OscConfig+0xb0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005174:	d10c      	bne.n	8005190 <HAL_RCC_OscConfig+0x98>
 8005176:	4b8b      	ldr	r3, [pc, #556]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a8a      	ldr	r2, [pc, #552]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800517c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	4b88      	ldr	r3, [pc, #544]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a87      	ldr	r2, [pc, #540]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	e00b      	b.n	80051a8 <HAL_RCC_OscConfig+0xb0>
 8005190:	4b84      	ldr	r3, [pc, #528]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a83      	ldr	r2, [pc, #524]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	4b81      	ldr	r3, [pc, #516]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a80      	ldr	r2, [pc, #512]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80051a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d013      	beq.n	80051d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b0:	f7fe fa34 	bl	800361c <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051b8:	f7fe fa30 	bl	800361c <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b64      	cmp	r3, #100	; 0x64
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e1fb      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ca:	4b76      	ldr	r3, [pc, #472]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0f0      	beq.n	80051b8 <HAL_RCC_OscConfig+0xc0>
 80051d6:	e014      	b.n	8005202 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7fe fa20 	bl	800361c <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051e0:	f7fe fa1c 	bl	800361c <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b64      	cmp	r3, #100	; 0x64
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e1e7      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051f2:	4b6c      	ldr	r3, [pc, #432]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0xe8>
 80051fe:	e000      	b.n	8005202 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d063      	beq.n	80052d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800520e:	4b65      	ldr	r3, [pc, #404]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800521a:	4b62      	ldr	r3, [pc, #392]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005222:	2b08      	cmp	r3, #8
 8005224:	d11c      	bne.n	8005260 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005226:	4b5f      	ldr	r3, [pc, #380]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d116      	bne.n	8005260 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005232:	4b5c      	ldr	r3, [pc, #368]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_RCC_OscConfig+0x152>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d001      	beq.n	800524a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e1bb      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524a:	4b56      	ldr	r3, [pc, #344]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4952      	ldr	r1, [pc, #328]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800525a:	4313      	orrs	r3, r2
 800525c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525e:	e03a      	b.n	80052d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d020      	beq.n	80052aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005268:	4b4f      	ldr	r3, [pc, #316]	; (80053a8 <HAL_RCC_OscConfig+0x2b0>)
 800526a:	2201      	movs	r2, #1
 800526c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526e:	f7fe f9d5 	bl	800361c <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005276:	f7fe f9d1 	bl	800361c <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e19c      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005288:	4b46      	ldr	r3, [pc, #280]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005294:	4b43      	ldr	r3, [pc, #268]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	4940      	ldr	r1, [pc, #256]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	600b      	str	r3, [r1, #0]
 80052a8:	e015      	b.n	80052d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052aa:	4b3f      	ldr	r3, [pc, #252]	; (80053a8 <HAL_RCC_OscConfig+0x2b0>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fe f9b4 	bl	800361c <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052b8:	f7fe f9b0 	bl	800361c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e17b      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ca:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1f0      	bne.n	80052b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d030      	beq.n	8005344 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d016      	beq.n	8005318 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ea:	4b30      	ldr	r3, [pc, #192]	; (80053ac <HAL_RCC_OscConfig+0x2b4>)
 80052ec:	2201      	movs	r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f0:	f7fe f994 	bl	800361c <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052f8:	f7fe f990 	bl	800361c <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e15b      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800530a:	4b26      	ldr	r3, [pc, #152]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800530c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f0      	beq.n	80052f8 <HAL_RCC_OscConfig+0x200>
 8005316:	e015      	b.n	8005344 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005318:	4b24      	ldr	r3, [pc, #144]	; (80053ac <HAL_RCC_OscConfig+0x2b4>)
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531e:	f7fe f97d 	bl	800361c <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005326:	f7fe f979 	bl	800361c <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e144      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f0      	bne.n	8005326 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80a0 	beq.w	8005492 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005352:	2300      	movs	r3, #0
 8005354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10f      	bne.n	8005382 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	60bb      	str	r3, [r7, #8]
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	4a0e      	ldr	r2, [pc, #56]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800536c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005370:	6413      	str	r3, [r2, #64]	; 0x40
 8005372:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537a:	60bb      	str	r3, [r7, #8]
 800537c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800537e:	2301      	movs	r3, #1
 8005380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005382:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <HAL_RCC_OscConfig+0x2b8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d121      	bne.n	80053d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800538e:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <HAL_RCC_OscConfig+0x2b8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a07      	ldr	r2, [pc, #28]	; (80053b0 <HAL_RCC_OscConfig+0x2b8>)
 8005394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800539a:	f7fe f93f 	bl	800361c <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a0:	e011      	b.n	80053c6 <HAL_RCC_OscConfig+0x2ce>
 80053a2:	bf00      	nop
 80053a4:	40023800 	.word	0x40023800
 80053a8:	42470000 	.word	0x42470000
 80053ac:	42470e80 	.word	0x42470e80
 80053b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b4:	f7fe f932 	bl	800361c <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e0fd      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c6:	4b81      	ldr	r3, [pc, #516]	; (80055cc <HAL_RCC_OscConfig+0x4d4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d106      	bne.n	80053e8 <HAL_RCC_OscConfig+0x2f0>
 80053da:	4b7d      	ldr	r3, [pc, #500]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	4a7c      	ldr	r2, [pc, #496]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	6713      	str	r3, [r2, #112]	; 0x70
 80053e6:	e01c      	b.n	8005422 <HAL_RCC_OscConfig+0x32a>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b05      	cmp	r3, #5
 80053ee:	d10c      	bne.n	800540a <HAL_RCC_OscConfig+0x312>
 80053f0:	4b77      	ldr	r3, [pc, #476]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 80053f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f4:	4a76      	ldr	r2, [pc, #472]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 80053f6:	f043 0304 	orr.w	r3, r3, #4
 80053fa:	6713      	str	r3, [r2, #112]	; 0x70
 80053fc:	4b74      	ldr	r3, [pc, #464]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	4a73      	ldr	r2, [pc, #460]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	6713      	str	r3, [r2, #112]	; 0x70
 8005408:	e00b      	b.n	8005422 <HAL_RCC_OscConfig+0x32a>
 800540a:	4b71      	ldr	r3, [pc, #452]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	4a70      	ldr	r2, [pc, #448]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	6713      	str	r3, [r2, #112]	; 0x70
 8005416:	4b6e      	ldr	r3, [pc, #440]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	4a6d      	ldr	r2, [pc, #436]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 800541c:	f023 0304 	bic.w	r3, r3, #4
 8005420:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d015      	beq.n	8005456 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542a:	f7fe f8f7 	bl	800361c <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005430:	e00a      	b.n	8005448 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005432:	f7fe f8f3 	bl	800361c <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e0bc      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005448:	4b61      	ldr	r3, [pc, #388]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 800544a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0ee      	beq.n	8005432 <HAL_RCC_OscConfig+0x33a>
 8005454:	e014      	b.n	8005480 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005456:	f7fe f8e1 	bl	800361c <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800545c:	e00a      	b.n	8005474 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800545e:	f7fe f8dd 	bl	800361c <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	f241 3288 	movw	r2, #5000	; 0x1388
 800546c:	4293      	cmp	r3, r2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e0a6      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005474:	4b56      	ldr	r3, [pc, #344]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 8005476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1ee      	bne.n	800545e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d105      	bne.n	8005492 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005486:	4b52      	ldr	r3, [pc, #328]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	4a51      	ldr	r2, [pc, #324]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 800548c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005490:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 8092 	beq.w	80055c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800549c:	4b4c      	ldr	r3, [pc, #304]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 030c 	and.w	r3, r3, #12
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d05c      	beq.n	8005562 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d141      	bne.n	8005534 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054b0:	4b48      	ldr	r3, [pc, #288]	; (80055d4 <HAL_RCC_OscConfig+0x4dc>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b6:	f7fe f8b1 	bl	800361c <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054be:	f7fe f8ad 	bl	800361c <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e078      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d0:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1f0      	bne.n	80054be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	019b      	lsls	r3, r3, #6
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	3b01      	subs	r3, #1
 80054f6:	041b      	lsls	r3, r3, #16
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	061b      	lsls	r3, r3, #24
 8005500:	4933      	ldr	r1, [pc, #204]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 8005502:	4313      	orrs	r3, r2
 8005504:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005506:	4b33      	ldr	r3, [pc, #204]	; (80055d4 <HAL_RCC_OscConfig+0x4dc>)
 8005508:	2201      	movs	r2, #1
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550c:	f7fe f886 	bl	800361c <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005514:	f7fe f882 	bl	800361c <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e04d      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005526:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0f0      	beq.n	8005514 <HAL_RCC_OscConfig+0x41c>
 8005532:	e045      	b.n	80055c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005534:	4b27      	ldr	r3, [pc, #156]	; (80055d4 <HAL_RCC_OscConfig+0x4dc>)
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553a:	f7fe f86f 	bl	800361c <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005542:	f7fe f86b 	bl	800361c <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e036      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005554:	4b1e      	ldr	r3, [pc, #120]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f0      	bne.n	8005542 <HAL_RCC_OscConfig+0x44a>
 8005560:	e02e      	b.n	80055c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e029      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800556e:	4b18      	ldr	r3, [pc, #96]	; (80055d0 <HAL_RCC_OscConfig+0x4d8>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	429a      	cmp	r2, r3
 8005580:	d11c      	bne.n	80055bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800558c:	429a      	cmp	r2, r3
 800558e:	d115      	bne.n	80055bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005596:	4013      	ands	r3, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800559c:	4293      	cmp	r3, r2
 800559e:	d10d      	bne.n	80055bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d106      	bne.n	80055bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40007000 	.word	0x40007000
 80055d0:	40023800 	.word	0x40023800
 80055d4:	42470060 	.word	0x42470060

080055d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e0cc      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055ec:	4b68      	ldr	r3, [pc, #416]	; (8005790 <HAL_RCC_ClockConfig+0x1b8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 030f 	and.w	r3, r3, #15
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d90c      	bls.n	8005614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fa:	4b65      	ldr	r3, [pc, #404]	; (8005790 <HAL_RCC_ClockConfig+0x1b8>)
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005602:	4b63      	ldr	r3, [pc, #396]	; (8005790 <HAL_RCC_ClockConfig+0x1b8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d001      	beq.n	8005614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e0b8      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d020      	beq.n	8005662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800562c:	4b59      	ldr	r3, [pc, #356]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4a58      	ldr	r2, [pc, #352]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005644:	4b53      	ldr	r3, [pc, #332]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	4a52      	ldr	r2, [pc, #328]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800564e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005650:	4b50      	ldr	r3, [pc, #320]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	494d      	ldr	r1, [pc, #308]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	4313      	orrs	r3, r2
 8005660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d044      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d107      	bne.n	8005686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005676:	4b47      	ldr	r3, [pc, #284]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d119      	bne.n	80056b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e07f      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d003      	beq.n	8005696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005692:	2b03      	cmp	r3, #3
 8005694:	d107      	bne.n	80056a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005696:	4b3f      	ldr	r3, [pc, #252]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e06f      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a6:	4b3b      	ldr	r3, [pc, #236]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e067      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056b6:	4b37      	ldr	r3, [pc, #220]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f023 0203 	bic.w	r2, r3, #3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	4934      	ldr	r1, [pc, #208]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056c8:	f7fd ffa8 	bl	800361c <HAL_GetTick>
 80056cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ce:	e00a      	b.n	80056e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d0:	f7fd ffa4 	bl	800361c <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f241 3288 	movw	r2, #5000	; 0x1388
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e04f      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e6:	4b2b      	ldr	r3, [pc, #172]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 020c 	and.w	r2, r3, #12
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d1eb      	bne.n	80056d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <HAL_RCC_ClockConfig+0x1b8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d20c      	bcs.n	8005720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005706:	4b22      	ldr	r3, [pc, #136]	; (8005790 <HAL_RCC_ClockConfig+0x1b8>)
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800570e:	4b20      	ldr	r3, [pc, #128]	; (8005790 <HAL_RCC_ClockConfig+0x1b8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e032      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800572c:	4b19      	ldr	r3, [pc, #100]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4916      	ldr	r1, [pc, #88]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	490e      	ldr	r1, [pc, #56]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800575e:	f000 f821 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8005762:	4601      	mov	r1, r0
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	4a0a      	ldr	r2, [pc, #40]	; (8005798 <HAL_RCC_ClockConfig+0x1c0>)
 8005770:	5cd3      	ldrb	r3, [r2, r3]
 8005772:	fa21 f303 	lsr.w	r3, r1, r3
 8005776:	4a09      	ldr	r2, [pc, #36]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 8005778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_RCC_ClockConfig+0x1c8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7fd ff08 	bl	8003594 <HAL_InitTick>

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40023c00 	.word	0x40023c00
 8005794:	40023800 	.word	0x40023800
 8005798:	08008aec 	.word	0x08008aec
 800579c:	20000000 	.word	0x20000000
 80057a0:	20000004 	.word	0x20000004

080057a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	2300      	movs	r3, #0
 80057b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057ba:	4b63      	ldr	r3, [pc, #396]	; (8005948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 030c 	and.w	r3, r3, #12
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d007      	beq.n	80057d6 <HAL_RCC_GetSysClockFreq+0x32>
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d008      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0x38>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f040 80b4 	bne.w	8005938 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057d0:	4b5e      	ldr	r3, [pc, #376]	; (800594c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80057d2:	60bb      	str	r3, [r7, #8]
       break;
 80057d4:	e0b3      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057d6:	4b5e      	ldr	r3, [pc, #376]	; (8005950 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80057d8:	60bb      	str	r3, [r7, #8]
      break;
 80057da:	e0b0      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057dc:	4b5a      	ldr	r3, [pc, #360]	; (8005948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057e6:	4b58      	ldr	r3, [pc, #352]	; (8005948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d04a      	beq.n	8005888 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f2:	4b55      	ldr	r3, [pc, #340]	; (8005948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	099b      	lsrs	r3, r3, #6
 80057f8:	f04f 0400 	mov.w	r4, #0
 80057fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	ea03 0501 	and.w	r5, r3, r1
 8005808:	ea04 0602 	and.w	r6, r4, r2
 800580c:	4629      	mov	r1, r5
 800580e:	4632      	mov	r2, r6
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	f04f 0400 	mov.w	r4, #0
 8005818:	0154      	lsls	r4, r2, #5
 800581a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800581e:	014b      	lsls	r3, r1, #5
 8005820:	4619      	mov	r1, r3
 8005822:	4622      	mov	r2, r4
 8005824:	1b49      	subs	r1, r1, r5
 8005826:	eb62 0206 	sbc.w	r2, r2, r6
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	f04f 0400 	mov.w	r4, #0
 8005832:	0194      	lsls	r4, r2, #6
 8005834:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005838:	018b      	lsls	r3, r1, #6
 800583a:	1a5b      	subs	r3, r3, r1
 800583c:	eb64 0402 	sbc.w	r4, r4, r2
 8005840:	f04f 0100 	mov.w	r1, #0
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	00e2      	lsls	r2, r4, #3
 800584a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800584e:	00d9      	lsls	r1, r3, #3
 8005850:	460b      	mov	r3, r1
 8005852:	4614      	mov	r4, r2
 8005854:	195b      	adds	r3, r3, r5
 8005856:	eb44 0406 	adc.w	r4, r4, r6
 800585a:	f04f 0100 	mov.w	r1, #0
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	0262      	lsls	r2, r4, #9
 8005864:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005868:	0259      	lsls	r1, r3, #9
 800586a:	460b      	mov	r3, r1
 800586c:	4614      	mov	r4, r2
 800586e:	4618      	mov	r0, r3
 8005870:	4621      	mov	r1, r4
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f04f 0400 	mov.w	r4, #0
 8005878:	461a      	mov	r2, r3
 800587a:	4623      	mov	r3, r4
 800587c:	f7fb f940 	bl	8000b00 <__aeabi_uldivmod>
 8005880:	4603      	mov	r3, r0
 8005882:	460c      	mov	r4, r1
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e049      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005888:	4b2f      	ldr	r3, [pc, #188]	; (8005948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	099b      	lsrs	r3, r3, #6
 800588e:	f04f 0400 	mov.w	r4, #0
 8005892:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	ea03 0501 	and.w	r5, r3, r1
 800589e:	ea04 0602 	and.w	r6, r4, r2
 80058a2:	4629      	mov	r1, r5
 80058a4:	4632      	mov	r2, r6
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	f04f 0400 	mov.w	r4, #0
 80058ae:	0154      	lsls	r4, r2, #5
 80058b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80058b4:	014b      	lsls	r3, r1, #5
 80058b6:	4619      	mov	r1, r3
 80058b8:	4622      	mov	r2, r4
 80058ba:	1b49      	subs	r1, r1, r5
 80058bc:	eb62 0206 	sbc.w	r2, r2, r6
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	f04f 0400 	mov.w	r4, #0
 80058c8:	0194      	lsls	r4, r2, #6
 80058ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80058ce:	018b      	lsls	r3, r1, #6
 80058d0:	1a5b      	subs	r3, r3, r1
 80058d2:	eb64 0402 	sbc.w	r4, r4, r2
 80058d6:	f04f 0100 	mov.w	r1, #0
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	00e2      	lsls	r2, r4, #3
 80058e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058e4:	00d9      	lsls	r1, r3, #3
 80058e6:	460b      	mov	r3, r1
 80058e8:	4614      	mov	r4, r2
 80058ea:	195b      	adds	r3, r3, r5
 80058ec:	eb44 0406 	adc.w	r4, r4, r6
 80058f0:	f04f 0100 	mov.w	r1, #0
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	02a2      	lsls	r2, r4, #10
 80058fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80058fe:	0299      	lsls	r1, r3, #10
 8005900:	460b      	mov	r3, r1
 8005902:	4614      	mov	r4, r2
 8005904:	4618      	mov	r0, r3
 8005906:	4621      	mov	r1, r4
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f04f 0400 	mov.w	r4, #0
 800590e:	461a      	mov	r2, r3
 8005910:	4623      	mov	r3, r4
 8005912:	f7fb f8f5 	bl	8000b00 <__aeabi_uldivmod>
 8005916:	4603      	mov	r3, r0
 8005918:	460c      	mov	r4, r1
 800591a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	0c1b      	lsrs	r3, r3, #16
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	3301      	adds	r3, #1
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	fbb2 f3f3 	udiv	r3, r2, r3
 8005934:	60bb      	str	r3, [r7, #8]
      break;
 8005936:	e002      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005938:	4b04      	ldr	r3, [pc, #16]	; (800594c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800593a:	60bb      	str	r3, [r7, #8]
      break;
 800593c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800593e:	68bb      	ldr	r3, [r7, #8]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005948:	40023800 	.word	0x40023800
 800594c:	00f42400 	.word	0x00f42400
 8005950:	007a1200 	.word	0x007a1200

08005954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005958:	4b03      	ldr	r3, [pc, #12]	; (8005968 <HAL_RCC_GetHCLKFreq+0x14>)
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	20000000 	.word	0x20000000

0800596c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005970:	f7ff fff0 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 8005974:	4601      	mov	r1, r0
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	0a9b      	lsrs	r3, r3, #10
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	4a03      	ldr	r2, [pc, #12]	; (8005990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005982:	5cd3      	ldrb	r3, [r2, r3]
 8005984:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005988:	4618      	mov	r0, r3
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40023800 	.word	0x40023800
 8005990:	08008afc 	.word	0x08008afc

08005994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005998:	f7ff ffdc 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 800599c:	4601      	mov	r1, r0
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	0b5b      	lsrs	r3, r3, #13
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	4a03      	ldr	r2, [pc, #12]	; (80059b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059aa:	5cd3      	ldrb	r3, [r2, r3]
 80059ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40023800 	.word	0x40023800
 80059b8:	08008afc 	.word	0x08008afc

080059bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e01d      	b.n	8005a0a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fd fbe8 	bl	80031b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3304      	adds	r3, #4
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f000 f90e 	bl	8005c1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2201      	movs	r2, #1
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fb48 	bl	80060bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <HAL_TIM_PWM_Start+0x74>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d004      	beq.n	8005a40 <HAL_TIM_PWM_Start+0x2c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a14      	ldr	r2, [pc, #80]	; (8005a8c <HAL_TIM_PWM_Start+0x78>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d101      	bne.n	8005a44 <HAL_TIM_PWM_Start+0x30>
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <HAL_TIM_PWM_Start+0x32>
 8005a44:	2300      	movs	r3, #0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d007      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b06      	cmp	r3, #6
 8005a6a:	d007      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40010400 	.word	0x40010400

08005a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e0b4      	b.n	8005c14 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b0c      	cmp	r3, #12
 8005abe:	f200 809f 	bhi.w	8005c00 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005ac2:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005afd 	.word	0x08005afd
 8005acc:	08005c01 	.word	0x08005c01
 8005ad0:	08005c01 	.word	0x08005c01
 8005ad4:	08005c01 	.word	0x08005c01
 8005ad8:	08005b3d 	.word	0x08005b3d
 8005adc:	08005c01 	.word	0x08005c01
 8005ae0:	08005c01 	.word	0x08005c01
 8005ae4:	08005c01 	.word	0x08005c01
 8005ae8:	08005b7f 	.word	0x08005b7f
 8005aec:	08005c01 	.word	0x08005c01
 8005af0:	08005c01 	.word	0x08005c01
 8005af4:	08005c01 	.word	0x08005c01
 8005af8:	08005bbf 	.word	0x08005bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f92a 	bl	8005d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0208 	orr.w	r2, r2, #8
 8005b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0204 	bic.w	r2, r2, #4
 8005b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6999      	ldr	r1, [r3, #24]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	619a      	str	r2, [r3, #24]
      break;
 8005b3a:	e062      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f97a 	bl	8005e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699a      	ldr	r2, [r3, #24]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6999      	ldr	r1, [r3, #24]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	021a      	lsls	r2, r3, #8
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	619a      	str	r2, [r3, #24]
      break;
 8005b7c:	e041      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 f9cf 	bl	8005f28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69da      	ldr	r2, [r3, #28]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0208 	orr.w	r2, r2, #8
 8005b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0204 	bic.w	r2, r2, #4
 8005ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69d9      	ldr	r1, [r3, #28]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	61da      	str	r2, [r3, #28]
      break;
 8005bbc:	e021      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fa23 	bl	8006010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69da      	ldr	r2, [r3, #28]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69d9      	ldr	r1, [r3, #28]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	021a      	lsls	r2, r3, #8
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	61da      	str	r2, [r3, #28]
      break;
 8005bfe:	e000      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005c00:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a40      	ldr	r2, [pc, #256]	; (8005d30 <TIM_Base_SetConfig+0x114>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d013      	beq.n	8005c5c <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3a:	d00f      	beq.n	8005c5c <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a3d      	ldr	r2, [pc, #244]	; (8005d34 <TIM_Base_SetConfig+0x118>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00b      	beq.n	8005c5c <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a3c      	ldr	r2, [pc, #240]	; (8005d38 <TIM_Base_SetConfig+0x11c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d007      	beq.n	8005c5c <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3b      	ldr	r2, [pc, #236]	; (8005d3c <TIM_Base_SetConfig+0x120>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a3a      	ldr	r2, [pc, #232]	; (8005d40 <TIM_Base_SetConfig+0x124>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d108      	bne.n	8005c6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a2f      	ldr	r2, [pc, #188]	; (8005d30 <TIM_Base_SetConfig+0x114>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d02b      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7c:	d027      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a2c      	ldr	r2, [pc, #176]	; (8005d34 <TIM_Base_SetConfig+0x118>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d023      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2b      	ldr	r2, [pc, #172]	; (8005d38 <TIM_Base_SetConfig+0x11c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01f      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2a      	ldr	r2, [pc, #168]	; (8005d3c <TIM_Base_SetConfig+0x120>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01b      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a29      	ldr	r2, [pc, #164]	; (8005d40 <TIM_Base_SetConfig+0x124>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d017      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a28      	ldr	r2, [pc, #160]	; (8005d44 <TIM_Base_SetConfig+0x128>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d013      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a27      	ldr	r2, [pc, #156]	; (8005d48 <TIM_Base_SetConfig+0x12c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00f      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a26      	ldr	r2, [pc, #152]	; (8005d4c <TIM_Base_SetConfig+0x130>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00b      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a25      	ldr	r2, [pc, #148]	; (8005d50 <TIM_Base_SetConfig+0x134>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d007      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a24      	ldr	r2, [pc, #144]	; (8005d54 <TIM_Base_SetConfig+0x138>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a23      	ldr	r2, [pc, #140]	; (8005d58 <TIM_Base_SetConfig+0x13c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d108      	bne.n	8005ce0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a0a      	ldr	r2, [pc, #40]	; (8005d30 <TIM_Base_SetConfig+0x114>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_Base_SetConfig+0xf8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a0c      	ldr	r2, [pc, #48]	; (8005d40 <TIM_Base_SetConfig+0x124>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d103      	bne.n	8005d1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	615a      	str	r2, [r3, #20]
}
 8005d22:	bf00      	nop
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40010400 	.word	0x40010400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	40014800 	.word	0x40014800
 8005d50:	40001800 	.word	0x40001800
 8005d54:	40001c00 	.word	0x40001c00
 8005d58:	40002000 	.word	0x40002000

08005d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f023 0201 	bic.w	r2, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 0302 	bic.w	r3, r3, #2
 8005da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a20      	ldr	r2, [pc, #128]	; (8005e34 <TIM_OC1_SetConfig+0xd8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_OC1_SetConfig+0x64>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a1f      	ldr	r2, [pc, #124]	; (8005e38 <TIM_OC1_SetConfig+0xdc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10c      	bne.n	8005dda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f023 0308 	bic.w	r3, r3, #8
 8005dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f023 0304 	bic.w	r3, r3, #4
 8005dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a15      	ldr	r2, [pc, #84]	; (8005e34 <TIM_OC1_SetConfig+0xd8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d003      	beq.n	8005dea <TIM_OC1_SetConfig+0x8e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a14      	ldr	r2, [pc, #80]	; (8005e38 <TIM_OC1_SetConfig+0xdc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d111      	bne.n	8005e0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40010400 	.word	0x40010400

08005e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f023 0210 	bic.w	r2, r3, #16
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0320 	bic.w	r3, r3, #32
 8005e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a22      	ldr	r2, [pc, #136]	; (8005f20 <TIM_OC2_SetConfig+0xe4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC2_SetConfig+0x68>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a21      	ldr	r2, [pc, #132]	; (8005f24 <TIM_OC2_SetConfig+0xe8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10d      	bne.n	8005ec0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ebe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a17      	ldr	r2, [pc, #92]	; (8005f20 <TIM_OC2_SetConfig+0xe4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_OC2_SetConfig+0x94>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a16      	ldr	r2, [pc, #88]	; (8005f24 <TIM_OC2_SetConfig+0xe8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d113      	bne.n	8005ef8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40010400 	.word	0x40010400

08005f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0303 	bic.w	r3, r3, #3
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a21      	ldr	r2, [pc, #132]	; (8006008 <TIM_OC3_SetConfig+0xe0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d003      	beq.n	8005f8e <TIM_OC3_SetConfig+0x66>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a20      	ldr	r2, [pc, #128]	; (800600c <TIM_OC3_SetConfig+0xe4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d10d      	bne.n	8005faa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a16      	ldr	r2, [pc, #88]	; (8006008 <TIM_OC3_SetConfig+0xe0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_OC3_SetConfig+0x92>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a15      	ldr	r2, [pc, #84]	; (800600c <TIM_OC3_SetConfig+0xe4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d113      	bne.n	8005fe2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	621a      	str	r2, [r3, #32]
}
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	40010000 	.word	0x40010000
 800600c:	40010400 	.word	0x40010400

08006010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800605a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	031b      	lsls	r3, r3, #12
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a12      	ldr	r2, [pc, #72]	; (80060b4 <TIM_OC4_SetConfig+0xa4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_OC4_SetConfig+0x68>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a11      	ldr	r2, [pc, #68]	; (80060b8 <TIM_OC4_SetConfig+0xa8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d109      	bne.n	800608c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800607e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	019b      	lsls	r3, r3, #6
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4313      	orrs	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40010400 	.word	0x40010400

080060bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	2201      	movs	r2, #1
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1a      	ldr	r2, [r3, #32]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	43db      	mvns	r3, r3
 80060de:	401a      	ands	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a1a      	ldr	r2, [r3, #32]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f003 031f 	and.w	r3, r3, #31
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	fa01 f303 	lsl.w	r3, r1, r3
 80060f4:	431a      	orrs	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	621a      	str	r2, [r3, #32]
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
	...

08006108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800611c:	2302      	movs	r3, #2
 800611e:	e05a      	b.n	80061d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a21      	ldr	r2, [pc, #132]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d022      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616c:	d01d      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1d      	ldr	r2, [pc, #116]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d018      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a1b      	ldr	r2, [pc, #108]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d013      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1a      	ldr	r2, [pc, #104]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00e      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a18      	ldr	r2, [pc, #96]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a15      	ldr	r2, [pc, #84]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d10c      	bne.n	80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40000c00 	.word	0x40000c00
 80061f4:	40010400 	.word	0x40010400
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40001800 	.word	0x40001800

08006200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e03f      	b.n	8006292 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7fd f822 	bl	8003270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2224      	movs	r2, #36	; 0x24
 8006230:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fb4b 	bl	80068e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695a      	ldr	r2, [r3, #20]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b088      	sub	sp, #32
 800629e:	af02      	add	r7, sp, #8
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	603b      	str	r3, [r7, #0]
 80062a6:	4613      	mov	r3, r2
 80062a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	f040 8083 	bne.w	80063c2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <HAL_UART_Transmit+0x2e>
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e07b      	b.n	80063c4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_UART_Transmit+0x40>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e074      	b.n	80063c4 <HAL_UART_Transmit+0x12a>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2221      	movs	r2, #33	; 0x21
 80062ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80062f0:	f7fd f994 	bl	800361c <HAL_GetTick>
 80062f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	88fa      	ldrh	r2, [r7, #6]
 80062fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	88fa      	ldrh	r2, [r7, #6]
 8006300:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800630a:	e042      	b.n	8006392 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006310:	b29b      	uxth	r3, r3
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006322:	d122      	bne.n	800636a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2200      	movs	r2, #0
 800632c:	2180      	movs	r1, #128	; 0x80
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 f96a 	bl	8006608 <UART_WaitOnFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e042      	b.n	80063c4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006350:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d103      	bne.n	8006362 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	3302      	adds	r3, #2
 800635e:	60bb      	str	r3, [r7, #8]
 8006360:	e017      	b.n	8006392 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	3301      	adds	r3, #1
 8006366:	60bb      	str	r3, [r7, #8]
 8006368:	e013      	b.n	8006392 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2200      	movs	r2, #0
 8006372:	2180      	movs	r1, #128	; 0x80
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f947 	bl	8006608 <UART_WaitOnFlagUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e01f      	b.n	80063c4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	60ba      	str	r2, [r7, #8]
 800638a:	781a      	ldrb	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1b7      	bne.n	800630c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2200      	movs	r2, #0
 80063a4:	2140      	movs	r1, #64	; 0x40
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f92e 	bl	8006608 <UART_WaitOnFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e006      	b.n	80063c4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	e000      	b.n	80063c4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80063c2:	2302      	movs	r3, #2
  }
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10d      	bne.n	800641e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	f003 0320 	and.w	r3, r3, #32
 8006408:	2b00      	cmp	r3, #0
 800640a:	d008      	beq.n	800641e <HAL_UART_IRQHandler+0x52>
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f9e0 	bl	80067dc <UART_Receive_IT>
      return;
 800641c:	e0d1      	b.n	80065c2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 80b0 	beq.w	8006586 <HAL_UART_IRQHandler+0x1ba>
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d105      	bne.n	800643c <HAL_UART_IRQHandler+0x70>
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 80a5 	beq.w	8006586 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_UART_IRQHandler+0x90>
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006454:	f043 0201 	orr.w	r2, r3, #1
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	f003 0304 	and.w	r3, r3, #4
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <HAL_UART_IRQHandler+0xb0>
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006474:	f043 0202 	orr.w	r2, r3, #2
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <HAL_UART_IRQHandler+0xd0>
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006494:	f043 0204 	orr.w	r2, r3, #4
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00f      	beq.n	80064c6 <HAL_UART_IRQHandler+0xfa>
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d104      	bne.n	80064ba <HAL_UART_IRQHandler+0xee>
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064be:	f043 0208 	orr.w	r2, r3, #8
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d078      	beq.n	80065c0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d007      	beq.n	80064e8 <HAL_UART_IRQHandler+0x11c>
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f97a 	bl	80067dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b40      	cmp	r3, #64	; 0x40
 80064f4:	bf0c      	ite	eq
 80064f6:	2301      	moveq	r3, #1
 80064f8:	2300      	movne	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	2b00      	cmp	r3, #0
 8006508:	d102      	bne.n	8006510 <HAL_UART_IRQHandler+0x144>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d031      	beq.n	8006574 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f8c3 	bl	800669c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006520:	2b40      	cmp	r3, #64	; 0x40
 8006522:	d123      	bne.n	800656c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695a      	ldr	r2, [r3, #20]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006532:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006538:	2b00      	cmp	r3, #0
 800653a:	d013      	beq.n	8006564 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006540:	4a21      	ldr	r2, [pc, #132]	; (80065c8 <HAL_UART_IRQHandler+0x1fc>)
 8006542:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006548:	4618      	mov	r0, r3
 800654a:	f7fd fa55 	bl	80039f8 <HAL_DMA_Abort_IT>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d016      	beq.n	8006582 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800655e:	4610      	mov	r0, r2
 8006560:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006562:	e00e      	b.n	8006582 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f845 	bl	80065f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656a:	e00a      	b.n	8006582 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f841 	bl	80065f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006572:	e006      	b.n	8006582 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f83d 	bl	80065f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006580:	e01e      	b.n	80065c0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006582:	bf00      	nop
    return;
 8006584:	e01c      	b.n	80065c0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658c:	2b00      	cmp	r3, #0
 800658e:	d008      	beq.n	80065a2 <HAL_UART_IRQHandler+0x1d6>
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f8b0 	bl	8006700 <UART_Transmit_IT>
    return;
 80065a0:	e00f      	b.n	80065c2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <HAL_UART_IRQHandler+0x1f6>
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d005      	beq.n	80065c2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f8f8 	bl	80067ac <UART_EndTransmit_IT>
    return;
 80065bc:	bf00      	nop
 80065be:	e000      	b.n	80065c2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80065c0:	bf00      	nop
  }
}
 80065c2:	3720      	adds	r7, #32
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	080066d9 	.word	0x080066d9

080065cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	4613      	mov	r3, r2
 8006616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006618:	e02c      	b.n	8006674 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d028      	beq.n	8006674 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d007      	beq.n	8006638 <UART_WaitOnFlagUntilTimeout+0x30>
 8006628:	f7fc fff8 	bl	800361c <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	429a      	cmp	r2, r3
 8006636:	d21d      	bcs.n	8006674 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006646:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e00f      	b.n	8006694 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4013      	ands	r3, r2
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	429a      	cmp	r2, r3
 8006682:	bf0c      	ite	eq
 8006684:	2301      	moveq	r3, #1
 8006686:	2300      	movne	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	429a      	cmp	r2, r3
 8006690:	d0c3      	beq.n	800661a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0201 	bic.w	r2, r2, #1
 80066c2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff ff7e 	bl	80065f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f8:	bf00      	nop
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b21      	cmp	r3, #33	; 0x21
 8006712:	d144      	bne.n	800679e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671c:	d11a      	bne.n	8006754 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006732:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d105      	bne.n	8006748 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	1c9a      	adds	r2, r3, #2
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	621a      	str	r2, [r3, #32]
 8006746:	e00e      	b.n	8006766 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	621a      	str	r2, [r3, #32]
 8006752:	e008      	b.n	8006766 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	1c59      	adds	r1, r3, #1
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6211      	str	r1, [r2, #32]
 800675e:	781a      	ldrb	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b01      	subs	r3, #1
 800676e:	b29b      	uxth	r3, r3
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	4619      	mov	r1, r3
 8006774:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10f      	bne.n	800679a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006788:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006798:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	e000      	b.n	80067a0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800679e:	2302      	movs	r3, #2
  }
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7ff fefd 	bl	80065cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b22      	cmp	r3, #34	; 0x22
 80067ee:	d171      	bne.n	80068d4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f8:	d123      	bne.n	8006842 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10e      	bne.n	8006826 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681e:	1c9a      	adds	r2, r3, #2
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	629a      	str	r2, [r3, #40]	; 0x28
 8006824:	e029      	b.n	800687a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	b29b      	uxth	r3, r3
 800682e:	b2db      	uxtb	r3, r3
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	629a      	str	r2, [r3, #40]	; 0x28
 8006840:	e01b      	b.n	800687a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6858      	ldr	r0, [r3, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006854:	1c59      	adds	r1, r3, #1
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6291      	str	r1, [r2, #40]	; 0x28
 800685a:	b2c2      	uxtb	r2, r0
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e00c      	b.n	800687a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	b2da      	uxtb	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	1c58      	adds	r0, r3, #1
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	6288      	str	r0, [r1, #40]	; 0x28
 8006872:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29b      	uxth	r3, r3
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	4619      	mov	r1, r3
 8006888:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800688a:	2b00      	cmp	r3, #0
 800688c:	d120      	bne.n	80068d0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0220 	bic.w	r2, r2, #32
 800689c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695a      	ldr	r2, [r3, #20]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0201 	bic.w	r2, r2, #1
 80068bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff fe8a 	bl	80065e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	e002      	b.n	80068d6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	e000      	b.n	80068d6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80068d4:	2302      	movs	r3, #2
  }
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006922:	f023 030c 	bic.w	r3, r3, #12
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	430b      	orrs	r3, r1
 800692e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800694e:	f040 818b 	bne.w	8006c68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4ac1      	ldr	r2, [pc, #772]	; (8006c5c <UART_SetConfig+0x37c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d005      	beq.n	8006968 <UART_SetConfig+0x88>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4abf      	ldr	r2, [pc, #764]	; (8006c60 <UART_SetConfig+0x380>)
 8006962:	4293      	cmp	r3, r2
 8006964:	f040 80bd 	bne.w	8006ae2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006968:	f7ff f814 	bl	8005994 <HAL_RCC_GetPCLK2Freq>
 800696c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	461d      	mov	r5, r3
 8006972:	f04f 0600 	mov.w	r6, #0
 8006976:	46a8      	mov	r8, r5
 8006978:	46b1      	mov	r9, r6
 800697a:	eb18 0308 	adds.w	r3, r8, r8
 800697e:	eb49 0409 	adc.w	r4, r9, r9
 8006982:	4698      	mov	r8, r3
 8006984:	46a1      	mov	r9, r4
 8006986:	eb18 0805 	adds.w	r8, r8, r5
 800698a:	eb49 0906 	adc.w	r9, r9, r6
 800698e:	f04f 0100 	mov.w	r1, #0
 8006992:	f04f 0200 	mov.w	r2, #0
 8006996:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800699a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800699e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069a2:	4688      	mov	r8, r1
 80069a4:	4691      	mov	r9, r2
 80069a6:	eb18 0005 	adds.w	r0, r8, r5
 80069aa:	eb49 0106 	adc.w	r1, r9, r6
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	461d      	mov	r5, r3
 80069b4:	f04f 0600 	mov.w	r6, #0
 80069b8:	196b      	adds	r3, r5, r5
 80069ba:	eb46 0406 	adc.w	r4, r6, r6
 80069be:	461a      	mov	r2, r3
 80069c0:	4623      	mov	r3, r4
 80069c2:	f7fa f89d 	bl	8000b00 <__aeabi_uldivmod>
 80069c6:	4603      	mov	r3, r0
 80069c8:	460c      	mov	r4, r1
 80069ca:	461a      	mov	r2, r3
 80069cc:	4ba5      	ldr	r3, [pc, #660]	; (8006c64 <UART_SetConfig+0x384>)
 80069ce:	fba3 2302 	umull	r2, r3, r3, r2
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	461d      	mov	r5, r3
 80069dc:	f04f 0600 	mov.w	r6, #0
 80069e0:	46a9      	mov	r9, r5
 80069e2:	46b2      	mov	sl, r6
 80069e4:	eb19 0309 	adds.w	r3, r9, r9
 80069e8:	eb4a 040a 	adc.w	r4, sl, sl
 80069ec:	4699      	mov	r9, r3
 80069ee:	46a2      	mov	sl, r4
 80069f0:	eb19 0905 	adds.w	r9, r9, r5
 80069f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80069f8:	f04f 0100 	mov.w	r1, #0
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a0c:	4689      	mov	r9, r1
 8006a0e:	4692      	mov	sl, r2
 8006a10:	eb19 0005 	adds.w	r0, r9, r5
 8006a14:	eb4a 0106 	adc.w	r1, sl, r6
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	461d      	mov	r5, r3
 8006a1e:	f04f 0600 	mov.w	r6, #0
 8006a22:	196b      	adds	r3, r5, r5
 8006a24:	eb46 0406 	adc.w	r4, r6, r6
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4623      	mov	r3, r4
 8006a2c:	f7fa f868 	bl	8000b00 <__aeabi_uldivmod>
 8006a30:	4603      	mov	r3, r0
 8006a32:	460c      	mov	r4, r1
 8006a34:	461a      	mov	r2, r3
 8006a36:	4b8b      	ldr	r3, [pc, #556]	; (8006c64 <UART_SetConfig+0x384>)
 8006a38:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3c:	095b      	lsrs	r3, r3, #5
 8006a3e:	2164      	movs	r1, #100	; 0x64
 8006a40:	fb01 f303 	mul.w	r3, r1, r3
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	3332      	adds	r3, #50	; 0x32
 8006a4a:	4a86      	ldr	r2, [pc, #536]	; (8006c64 <UART_SetConfig+0x384>)
 8006a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a58:	4498      	add	r8, r3
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	461d      	mov	r5, r3
 8006a5e:	f04f 0600 	mov.w	r6, #0
 8006a62:	46a9      	mov	r9, r5
 8006a64:	46b2      	mov	sl, r6
 8006a66:	eb19 0309 	adds.w	r3, r9, r9
 8006a6a:	eb4a 040a 	adc.w	r4, sl, sl
 8006a6e:	4699      	mov	r9, r3
 8006a70:	46a2      	mov	sl, r4
 8006a72:	eb19 0905 	adds.w	r9, r9, r5
 8006a76:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a7a:	f04f 0100 	mov.w	r1, #0
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a8e:	4689      	mov	r9, r1
 8006a90:	4692      	mov	sl, r2
 8006a92:	eb19 0005 	adds.w	r0, r9, r5
 8006a96:	eb4a 0106 	adc.w	r1, sl, r6
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	461d      	mov	r5, r3
 8006aa0:	f04f 0600 	mov.w	r6, #0
 8006aa4:	196b      	adds	r3, r5, r5
 8006aa6:	eb46 0406 	adc.w	r4, r6, r6
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4623      	mov	r3, r4
 8006aae:	f7fa f827 	bl	8000b00 <__aeabi_uldivmod>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	4b6a      	ldr	r3, [pc, #424]	; (8006c64 <UART_SetConfig+0x384>)
 8006aba:	fba3 1302 	umull	r1, r3, r3, r2
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	2164      	movs	r1, #100	; 0x64
 8006ac2:	fb01 f303 	mul.w	r3, r1, r3
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	3332      	adds	r3, #50	; 0x32
 8006acc:	4a65      	ldr	r2, [pc, #404]	; (8006c64 <UART_SetConfig+0x384>)
 8006ace:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	f003 0207 	and.w	r2, r3, #7
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4442      	add	r2, r8
 8006ade:	609a      	str	r2, [r3, #8]
 8006ae0:	e26f      	b.n	8006fc2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ae2:	f7fe ff43 	bl	800596c <HAL_RCC_GetPCLK1Freq>
 8006ae6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	461d      	mov	r5, r3
 8006aec:	f04f 0600 	mov.w	r6, #0
 8006af0:	46a8      	mov	r8, r5
 8006af2:	46b1      	mov	r9, r6
 8006af4:	eb18 0308 	adds.w	r3, r8, r8
 8006af8:	eb49 0409 	adc.w	r4, r9, r9
 8006afc:	4698      	mov	r8, r3
 8006afe:	46a1      	mov	r9, r4
 8006b00:	eb18 0805 	adds.w	r8, r8, r5
 8006b04:	eb49 0906 	adc.w	r9, r9, r6
 8006b08:	f04f 0100 	mov.w	r1, #0
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b1c:	4688      	mov	r8, r1
 8006b1e:	4691      	mov	r9, r2
 8006b20:	eb18 0005 	adds.w	r0, r8, r5
 8006b24:	eb49 0106 	adc.w	r1, r9, r6
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	461d      	mov	r5, r3
 8006b2e:	f04f 0600 	mov.w	r6, #0
 8006b32:	196b      	adds	r3, r5, r5
 8006b34:	eb46 0406 	adc.w	r4, r6, r6
 8006b38:	461a      	mov	r2, r3
 8006b3a:	4623      	mov	r3, r4
 8006b3c:	f7f9 ffe0 	bl	8000b00 <__aeabi_uldivmod>
 8006b40:	4603      	mov	r3, r0
 8006b42:	460c      	mov	r4, r1
 8006b44:	461a      	mov	r2, r3
 8006b46:	4b47      	ldr	r3, [pc, #284]	; (8006c64 <UART_SetConfig+0x384>)
 8006b48:	fba3 2302 	umull	r2, r3, r3, r2
 8006b4c:	095b      	lsrs	r3, r3, #5
 8006b4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	461d      	mov	r5, r3
 8006b56:	f04f 0600 	mov.w	r6, #0
 8006b5a:	46a9      	mov	r9, r5
 8006b5c:	46b2      	mov	sl, r6
 8006b5e:	eb19 0309 	adds.w	r3, r9, r9
 8006b62:	eb4a 040a 	adc.w	r4, sl, sl
 8006b66:	4699      	mov	r9, r3
 8006b68:	46a2      	mov	sl, r4
 8006b6a:	eb19 0905 	adds.w	r9, r9, r5
 8006b6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b72:	f04f 0100 	mov.w	r1, #0
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b86:	4689      	mov	r9, r1
 8006b88:	4692      	mov	sl, r2
 8006b8a:	eb19 0005 	adds.w	r0, r9, r5
 8006b8e:	eb4a 0106 	adc.w	r1, sl, r6
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	461d      	mov	r5, r3
 8006b98:	f04f 0600 	mov.w	r6, #0
 8006b9c:	196b      	adds	r3, r5, r5
 8006b9e:	eb46 0406 	adc.w	r4, r6, r6
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	4623      	mov	r3, r4
 8006ba6:	f7f9 ffab 	bl	8000b00 <__aeabi_uldivmod>
 8006baa:	4603      	mov	r3, r0
 8006bac:	460c      	mov	r4, r1
 8006bae:	461a      	mov	r2, r3
 8006bb0:	4b2c      	ldr	r3, [pc, #176]	; (8006c64 <UART_SetConfig+0x384>)
 8006bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	2164      	movs	r1, #100	; 0x64
 8006bba:	fb01 f303 	mul.w	r3, r1, r3
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	3332      	adds	r3, #50	; 0x32
 8006bc4:	4a27      	ldr	r2, [pc, #156]	; (8006c64 <UART_SetConfig+0x384>)
 8006bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bd2:	4498      	add	r8, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	461d      	mov	r5, r3
 8006bd8:	f04f 0600 	mov.w	r6, #0
 8006bdc:	46a9      	mov	r9, r5
 8006bde:	46b2      	mov	sl, r6
 8006be0:	eb19 0309 	adds.w	r3, r9, r9
 8006be4:	eb4a 040a 	adc.w	r4, sl, sl
 8006be8:	4699      	mov	r9, r3
 8006bea:	46a2      	mov	sl, r4
 8006bec:	eb19 0905 	adds.w	r9, r9, r5
 8006bf0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006bf4:	f04f 0100 	mov.w	r1, #0
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c08:	4689      	mov	r9, r1
 8006c0a:	4692      	mov	sl, r2
 8006c0c:	eb19 0005 	adds.w	r0, r9, r5
 8006c10:	eb4a 0106 	adc.w	r1, sl, r6
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	461d      	mov	r5, r3
 8006c1a:	f04f 0600 	mov.w	r6, #0
 8006c1e:	196b      	adds	r3, r5, r5
 8006c20:	eb46 0406 	adc.w	r4, r6, r6
 8006c24:	461a      	mov	r2, r3
 8006c26:	4623      	mov	r3, r4
 8006c28:	f7f9 ff6a 	bl	8000b00 <__aeabi_uldivmod>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	461a      	mov	r2, r3
 8006c32:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <UART_SetConfig+0x384>)
 8006c34:	fba3 1302 	umull	r1, r3, r3, r2
 8006c38:	095b      	lsrs	r3, r3, #5
 8006c3a:	2164      	movs	r1, #100	; 0x64
 8006c3c:	fb01 f303 	mul.w	r3, r1, r3
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	3332      	adds	r3, #50	; 0x32
 8006c46:	4a07      	ldr	r2, [pc, #28]	; (8006c64 <UART_SetConfig+0x384>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	f003 0207 	and.w	r2, r3, #7
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4442      	add	r2, r8
 8006c58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006c5a:	e1b2      	b.n	8006fc2 <UART_SetConfig+0x6e2>
 8006c5c:	40011000 	.word	0x40011000
 8006c60:	40011400 	.word	0x40011400
 8006c64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4ad7      	ldr	r2, [pc, #860]	; (8006fcc <UART_SetConfig+0x6ec>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d005      	beq.n	8006c7e <UART_SetConfig+0x39e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4ad6      	ldr	r2, [pc, #856]	; (8006fd0 <UART_SetConfig+0x6f0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	f040 80d1 	bne.w	8006e20 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c7e:	f7fe fe89 	bl	8005994 <HAL_RCC_GetPCLK2Freq>
 8006c82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	469a      	mov	sl, r3
 8006c88:	f04f 0b00 	mov.w	fp, #0
 8006c8c:	46d0      	mov	r8, sl
 8006c8e:	46d9      	mov	r9, fp
 8006c90:	eb18 0308 	adds.w	r3, r8, r8
 8006c94:	eb49 0409 	adc.w	r4, r9, r9
 8006c98:	4698      	mov	r8, r3
 8006c9a:	46a1      	mov	r9, r4
 8006c9c:	eb18 080a 	adds.w	r8, r8, sl
 8006ca0:	eb49 090b 	adc.w	r9, r9, fp
 8006ca4:	f04f 0100 	mov.w	r1, #0
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006cb8:	4688      	mov	r8, r1
 8006cba:	4691      	mov	r9, r2
 8006cbc:	eb1a 0508 	adds.w	r5, sl, r8
 8006cc0:	eb4b 0609 	adc.w	r6, fp, r9
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	f04f 0400 	mov.w	r4, #0
 8006cd6:	0094      	lsls	r4, r2, #2
 8006cd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cdc:	008b      	lsls	r3, r1, #2
 8006cde:	461a      	mov	r2, r3
 8006ce0:	4623      	mov	r3, r4
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	f7f9 ff0b 	bl	8000b00 <__aeabi_uldivmod>
 8006cea:	4603      	mov	r3, r0
 8006cec:	460c      	mov	r4, r1
 8006cee:	461a      	mov	r2, r3
 8006cf0:	4bb8      	ldr	r3, [pc, #736]	; (8006fd4 <UART_SetConfig+0x6f4>)
 8006cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	469b      	mov	fp, r3
 8006d00:	f04f 0c00 	mov.w	ip, #0
 8006d04:	46d9      	mov	r9, fp
 8006d06:	46e2      	mov	sl, ip
 8006d08:	eb19 0309 	adds.w	r3, r9, r9
 8006d0c:	eb4a 040a 	adc.w	r4, sl, sl
 8006d10:	4699      	mov	r9, r3
 8006d12:	46a2      	mov	sl, r4
 8006d14:	eb19 090b 	adds.w	r9, r9, fp
 8006d18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d1c:	f04f 0100 	mov.w	r1, #0
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d30:	4689      	mov	r9, r1
 8006d32:	4692      	mov	sl, r2
 8006d34:	eb1b 0509 	adds.w	r5, fp, r9
 8006d38:	eb4c 060a 	adc.w	r6, ip, sl
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	4619      	mov	r1, r3
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	f04f 0400 	mov.w	r4, #0
 8006d4e:	0094      	lsls	r4, r2, #2
 8006d50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d54:	008b      	lsls	r3, r1, #2
 8006d56:	461a      	mov	r2, r3
 8006d58:	4623      	mov	r3, r4
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	f7f9 fecf 	bl	8000b00 <__aeabi_uldivmod>
 8006d62:	4603      	mov	r3, r0
 8006d64:	460c      	mov	r4, r1
 8006d66:	461a      	mov	r2, r3
 8006d68:	4b9a      	ldr	r3, [pc, #616]	; (8006fd4 <UART_SetConfig+0x6f4>)
 8006d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8006d6e:	095b      	lsrs	r3, r3, #5
 8006d70:	2164      	movs	r1, #100	; 0x64
 8006d72:	fb01 f303 	mul.w	r3, r1, r3
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	3332      	adds	r3, #50	; 0x32
 8006d7c:	4a95      	ldr	r2, [pc, #596]	; (8006fd4 <UART_SetConfig+0x6f4>)
 8006d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d88:	4498      	add	r8, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	469b      	mov	fp, r3
 8006d8e:	f04f 0c00 	mov.w	ip, #0
 8006d92:	46d9      	mov	r9, fp
 8006d94:	46e2      	mov	sl, ip
 8006d96:	eb19 0309 	adds.w	r3, r9, r9
 8006d9a:	eb4a 040a 	adc.w	r4, sl, sl
 8006d9e:	4699      	mov	r9, r3
 8006da0:	46a2      	mov	sl, r4
 8006da2:	eb19 090b 	adds.w	r9, r9, fp
 8006da6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006daa:	f04f 0100 	mov.w	r1, #0
 8006dae:	f04f 0200 	mov.w	r2, #0
 8006db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006db6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dbe:	4689      	mov	r9, r1
 8006dc0:	4692      	mov	sl, r2
 8006dc2:	eb1b 0509 	adds.w	r5, fp, r9
 8006dc6:	eb4c 060a 	adc.w	r6, ip, sl
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	f04f 0200 	mov.w	r2, #0
 8006dd4:	f04f 0300 	mov.w	r3, #0
 8006dd8:	f04f 0400 	mov.w	r4, #0
 8006ddc:	0094      	lsls	r4, r2, #2
 8006dde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006de2:	008b      	lsls	r3, r1, #2
 8006de4:	461a      	mov	r2, r3
 8006de6:	4623      	mov	r3, r4
 8006de8:	4628      	mov	r0, r5
 8006dea:	4631      	mov	r1, r6
 8006dec:	f7f9 fe88 	bl	8000b00 <__aeabi_uldivmod>
 8006df0:	4603      	mov	r3, r0
 8006df2:	460c      	mov	r4, r1
 8006df4:	461a      	mov	r2, r3
 8006df6:	4b77      	ldr	r3, [pc, #476]	; (8006fd4 <UART_SetConfig+0x6f4>)
 8006df8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	2164      	movs	r1, #100	; 0x64
 8006e00:	fb01 f303 	mul.w	r3, r1, r3
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	3332      	adds	r3, #50	; 0x32
 8006e0a:	4a72      	ldr	r2, [pc, #456]	; (8006fd4 <UART_SetConfig+0x6f4>)
 8006e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	f003 020f 	and.w	r2, r3, #15
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4442      	add	r2, r8
 8006e1c:	609a      	str	r2, [r3, #8]
 8006e1e:	e0d0      	b.n	8006fc2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e20:	f7fe fda4 	bl	800596c <HAL_RCC_GetPCLK1Freq>
 8006e24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	469a      	mov	sl, r3
 8006e2a:	f04f 0b00 	mov.w	fp, #0
 8006e2e:	46d0      	mov	r8, sl
 8006e30:	46d9      	mov	r9, fp
 8006e32:	eb18 0308 	adds.w	r3, r8, r8
 8006e36:	eb49 0409 	adc.w	r4, r9, r9
 8006e3a:	4698      	mov	r8, r3
 8006e3c:	46a1      	mov	r9, r4
 8006e3e:	eb18 080a 	adds.w	r8, r8, sl
 8006e42:	eb49 090b 	adc.w	r9, r9, fp
 8006e46:	f04f 0100 	mov.w	r1, #0
 8006e4a:	f04f 0200 	mov.w	r2, #0
 8006e4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e5a:	4688      	mov	r8, r1
 8006e5c:	4691      	mov	r9, r2
 8006e5e:	eb1a 0508 	adds.w	r5, sl, r8
 8006e62:	eb4b 0609 	adc.w	r6, fp, r9
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	f04f 0400 	mov.w	r4, #0
 8006e78:	0094      	lsls	r4, r2, #2
 8006e7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e7e:	008b      	lsls	r3, r1, #2
 8006e80:	461a      	mov	r2, r3
 8006e82:	4623      	mov	r3, r4
 8006e84:	4628      	mov	r0, r5
 8006e86:	4631      	mov	r1, r6
 8006e88:	f7f9 fe3a 	bl	8000b00 <__aeabi_uldivmod>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	460c      	mov	r4, r1
 8006e90:	461a      	mov	r2, r3
 8006e92:	4b50      	ldr	r3, [pc, #320]	; (8006fd4 <UART_SetConfig+0x6f4>)
 8006e94:	fba3 2302 	umull	r2, r3, r3, r2
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	469b      	mov	fp, r3
 8006ea2:	f04f 0c00 	mov.w	ip, #0
 8006ea6:	46d9      	mov	r9, fp
 8006ea8:	46e2      	mov	sl, ip
 8006eaa:	eb19 0309 	adds.w	r3, r9, r9
 8006eae:	eb4a 040a 	adc.w	r4, sl, sl
 8006eb2:	4699      	mov	r9, r3
 8006eb4:	46a2      	mov	sl, r4
 8006eb6:	eb19 090b 	adds.w	r9, r9, fp
 8006eba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ebe:	f04f 0100 	mov.w	r1, #0
 8006ec2:	f04f 0200 	mov.w	r2, #0
 8006ec6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006eca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ece:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ed2:	4689      	mov	r9, r1
 8006ed4:	4692      	mov	sl, r2
 8006ed6:	eb1b 0509 	adds.w	r5, fp, r9
 8006eda:	eb4c 060a 	adc.w	r6, ip, sl
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	f04f 0400 	mov.w	r4, #0
 8006ef0:	0094      	lsls	r4, r2, #2
 8006ef2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ef6:	008b      	lsls	r3, r1, #2
 8006ef8:	461a      	mov	r2, r3
 8006efa:	4623      	mov	r3, r4
 8006efc:	4628      	mov	r0, r5
 8006efe:	4631      	mov	r1, r6
 8006f00:	f7f9 fdfe 	bl	8000b00 <__aeabi_uldivmod>
 8006f04:	4603      	mov	r3, r0
 8006f06:	460c      	mov	r4, r1
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4b32      	ldr	r3, [pc, #200]	; (8006fd4 <UART_SetConfig+0x6f4>)
 8006f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f10:	095b      	lsrs	r3, r3, #5
 8006f12:	2164      	movs	r1, #100	; 0x64
 8006f14:	fb01 f303 	mul.w	r3, r1, r3
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	3332      	adds	r3, #50	; 0x32
 8006f1e:	4a2d      	ldr	r2, [pc, #180]	; (8006fd4 <UART_SetConfig+0x6f4>)
 8006f20:	fba2 2303 	umull	r2, r3, r2, r3
 8006f24:	095b      	lsrs	r3, r3, #5
 8006f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f2a:	4498      	add	r8, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	469b      	mov	fp, r3
 8006f30:	f04f 0c00 	mov.w	ip, #0
 8006f34:	46d9      	mov	r9, fp
 8006f36:	46e2      	mov	sl, ip
 8006f38:	eb19 0309 	adds.w	r3, r9, r9
 8006f3c:	eb4a 040a 	adc.w	r4, sl, sl
 8006f40:	4699      	mov	r9, r3
 8006f42:	46a2      	mov	sl, r4
 8006f44:	eb19 090b 	adds.w	r9, r9, fp
 8006f48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f4c:	f04f 0100 	mov.w	r1, #0
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f60:	4689      	mov	r9, r1
 8006f62:	4692      	mov	sl, r2
 8006f64:	eb1b 0509 	adds.w	r5, fp, r9
 8006f68:	eb4c 060a 	adc.w	r6, ip, sl
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4619      	mov	r1, r3
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	f04f 0400 	mov.w	r4, #0
 8006f7e:	0094      	lsls	r4, r2, #2
 8006f80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f84:	008b      	lsls	r3, r1, #2
 8006f86:	461a      	mov	r2, r3
 8006f88:	4623      	mov	r3, r4
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	f7f9 fdb7 	bl	8000b00 <__aeabi_uldivmod>
 8006f92:	4603      	mov	r3, r0
 8006f94:	460c      	mov	r4, r1
 8006f96:	461a      	mov	r2, r3
 8006f98:	4b0e      	ldr	r3, [pc, #56]	; (8006fd4 <UART_SetConfig+0x6f4>)
 8006f9a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	2164      	movs	r1, #100	; 0x64
 8006fa2:	fb01 f303 	mul.w	r3, r1, r3
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	3332      	adds	r3, #50	; 0x32
 8006fac:	4a09      	ldr	r2, [pc, #36]	; (8006fd4 <UART_SetConfig+0x6f4>)
 8006fae:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	f003 020f 	and.w	r2, r3, #15
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4442      	add	r2, r8
 8006fbe:	609a      	str	r2, [r3, #8]
}
 8006fc0:	e7ff      	b.n	8006fc2 <UART_SetConfig+0x6e2>
 8006fc2:	bf00      	nop
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fcc:	40011000 	.word	0x40011000
 8006fd0:	40011400 	.word	0x40011400
 8006fd4:	51eb851f 	.word	0x51eb851f

08006fd8 <__errno>:
 8006fd8:	4b01      	ldr	r3, [pc, #4]	; (8006fe0 <__errno+0x8>)
 8006fda:	6818      	ldr	r0, [r3, #0]
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	2000000c 	.word	0x2000000c

08006fe4 <__libc_init_array>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	4e0d      	ldr	r6, [pc, #52]	; (800701c <__libc_init_array+0x38>)
 8006fe8:	4c0d      	ldr	r4, [pc, #52]	; (8007020 <__libc_init_array+0x3c>)
 8006fea:	1ba4      	subs	r4, r4, r6
 8006fec:	10a4      	asrs	r4, r4, #2
 8006fee:	2500      	movs	r5, #0
 8006ff0:	42a5      	cmp	r5, r4
 8006ff2:	d109      	bne.n	8007008 <__libc_init_array+0x24>
 8006ff4:	4e0b      	ldr	r6, [pc, #44]	; (8007024 <__libc_init_array+0x40>)
 8006ff6:	4c0c      	ldr	r4, [pc, #48]	; (8007028 <__libc_init_array+0x44>)
 8006ff8:	f001 fd5a 	bl	8008ab0 <_init>
 8006ffc:	1ba4      	subs	r4, r4, r6
 8006ffe:	10a4      	asrs	r4, r4, #2
 8007000:	2500      	movs	r5, #0
 8007002:	42a5      	cmp	r5, r4
 8007004:	d105      	bne.n	8007012 <__libc_init_array+0x2e>
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800700c:	4798      	blx	r3
 800700e:	3501      	adds	r5, #1
 8007010:	e7ee      	b.n	8006ff0 <__libc_init_array+0xc>
 8007012:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007016:	4798      	blx	r3
 8007018:	3501      	adds	r5, #1
 800701a:	e7f2      	b.n	8007002 <__libc_init_array+0x1e>
 800701c:	08008d40 	.word	0x08008d40
 8007020:	08008d40 	.word	0x08008d40
 8007024:	08008d40 	.word	0x08008d40
 8007028:	08008d44 	.word	0x08008d44

0800702c <memcpy>:
 800702c:	b510      	push	{r4, lr}
 800702e:	1e43      	subs	r3, r0, #1
 8007030:	440a      	add	r2, r1
 8007032:	4291      	cmp	r1, r2
 8007034:	d100      	bne.n	8007038 <memcpy+0xc>
 8007036:	bd10      	pop	{r4, pc}
 8007038:	f811 4b01 	ldrb.w	r4, [r1], #1
 800703c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007040:	e7f7      	b.n	8007032 <memcpy+0x6>

08007042 <memset>:
 8007042:	4402      	add	r2, r0
 8007044:	4603      	mov	r3, r0
 8007046:	4293      	cmp	r3, r2
 8007048:	d100      	bne.n	800704c <memset+0xa>
 800704a:	4770      	bx	lr
 800704c:	f803 1b01 	strb.w	r1, [r3], #1
 8007050:	e7f9      	b.n	8007046 <memset+0x4>

08007052 <__cvt>:
 8007052:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007056:	ec55 4b10 	vmov	r4, r5, d0
 800705a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800705c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007060:	2d00      	cmp	r5, #0
 8007062:	460e      	mov	r6, r1
 8007064:	4691      	mov	r9, r2
 8007066:	4619      	mov	r1, r3
 8007068:	bfb8      	it	lt
 800706a:	4622      	movlt	r2, r4
 800706c:	462b      	mov	r3, r5
 800706e:	f027 0720 	bic.w	r7, r7, #32
 8007072:	bfbb      	ittet	lt
 8007074:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007078:	461d      	movlt	r5, r3
 800707a:	2300      	movge	r3, #0
 800707c:	232d      	movlt	r3, #45	; 0x2d
 800707e:	bfb8      	it	lt
 8007080:	4614      	movlt	r4, r2
 8007082:	2f46      	cmp	r7, #70	; 0x46
 8007084:	700b      	strb	r3, [r1, #0]
 8007086:	d004      	beq.n	8007092 <__cvt+0x40>
 8007088:	2f45      	cmp	r7, #69	; 0x45
 800708a:	d100      	bne.n	800708e <__cvt+0x3c>
 800708c:	3601      	adds	r6, #1
 800708e:	2102      	movs	r1, #2
 8007090:	e000      	b.n	8007094 <__cvt+0x42>
 8007092:	2103      	movs	r1, #3
 8007094:	ab03      	add	r3, sp, #12
 8007096:	9301      	str	r3, [sp, #4]
 8007098:	ab02      	add	r3, sp, #8
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	4632      	mov	r2, r6
 800709e:	4653      	mov	r3, sl
 80070a0:	ec45 4b10 	vmov	d0, r4, r5
 80070a4:	f000 fbc0 	bl	8007828 <_dtoa_r>
 80070a8:	2f47      	cmp	r7, #71	; 0x47
 80070aa:	4680      	mov	r8, r0
 80070ac:	d102      	bne.n	80070b4 <__cvt+0x62>
 80070ae:	f019 0f01 	tst.w	r9, #1
 80070b2:	d026      	beq.n	8007102 <__cvt+0xb0>
 80070b4:	2f46      	cmp	r7, #70	; 0x46
 80070b6:	eb08 0906 	add.w	r9, r8, r6
 80070ba:	d111      	bne.n	80070e0 <__cvt+0x8e>
 80070bc:	f898 3000 	ldrb.w	r3, [r8]
 80070c0:	2b30      	cmp	r3, #48	; 0x30
 80070c2:	d10a      	bne.n	80070da <__cvt+0x88>
 80070c4:	2200      	movs	r2, #0
 80070c6:	2300      	movs	r3, #0
 80070c8:	4620      	mov	r0, r4
 80070ca:	4629      	mov	r1, r5
 80070cc:	f7f9 fca8 	bl	8000a20 <__aeabi_dcmpeq>
 80070d0:	b918      	cbnz	r0, 80070da <__cvt+0x88>
 80070d2:	f1c6 0601 	rsb	r6, r6, #1
 80070d6:	f8ca 6000 	str.w	r6, [sl]
 80070da:	f8da 3000 	ldr.w	r3, [sl]
 80070de:	4499      	add	r9, r3
 80070e0:	2200      	movs	r2, #0
 80070e2:	2300      	movs	r3, #0
 80070e4:	4620      	mov	r0, r4
 80070e6:	4629      	mov	r1, r5
 80070e8:	f7f9 fc9a 	bl	8000a20 <__aeabi_dcmpeq>
 80070ec:	b938      	cbnz	r0, 80070fe <__cvt+0xac>
 80070ee:	2230      	movs	r2, #48	; 0x30
 80070f0:	9b03      	ldr	r3, [sp, #12]
 80070f2:	454b      	cmp	r3, r9
 80070f4:	d205      	bcs.n	8007102 <__cvt+0xb0>
 80070f6:	1c59      	adds	r1, r3, #1
 80070f8:	9103      	str	r1, [sp, #12]
 80070fa:	701a      	strb	r2, [r3, #0]
 80070fc:	e7f8      	b.n	80070f0 <__cvt+0x9e>
 80070fe:	f8cd 900c 	str.w	r9, [sp, #12]
 8007102:	9b03      	ldr	r3, [sp, #12]
 8007104:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007106:	eba3 0308 	sub.w	r3, r3, r8
 800710a:	4640      	mov	r0, r8
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	b004      	add	sp, #16
 8007110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007114 <__exponent>:
 8007114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007116:	2900      	cmp	r1, #0
 8007118:	4604      	mov	r4, r0
 800711a:	bfba      	itte	lt
 800711c:	4249      	neglt	r1, r1
 800711e:	232d      	movlt	r3, #45	; 0x2d
 8007120:	232b      	movge	r3, #43	; 0x2b
 8007122:	2909      	cmp	r1, #9
 8007124:	f804 2b02 	strb.w	r2, [r4], #2
 8007128:	7043      	strb	r3, [r0, #1]
 800712a:	dd20      	ble.n	800716e <__exponent+0x5a>
 800712c:	f10d 0307 	add.w	r3, sp, #7
 8007130:	461f      	mov	r7, r3
 8007132:	260a      	movs	r6, #10
 8007134:	fb91 f5f6 	sdiv	r5, r1, r6
 8007138:	fb06 1115 	mls	r1, r6, r5, r1
 800713c:	3130      	adds	r1, #48	; 0x30
 800713e:	2d09      	cmp	r5, #9
 8007140:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007144:	f103 32ff 	add.w	r2, r3, #4294967295
 8007148:	4629      	mov	r1, r5
 800714a:	dc09      	bgt.n	8007160 <__exponent+0x4c>
 800714c:	3130      	adds	r1, #48	; 0x30
 800714e:	3b02      	subs	r3, #2
 8007150:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007154:	42bb      	cmp	r3, r7
 8007156:	4622      	mov	r2, r4
 8007158:	d304      	bcc.n	8007164 <__exponent+0x50>
 800715a:	1a10      	subs	r0, r2, r0
 800715c:	b003      	add	sp, #12
 800715e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007160:	4613      	mov	r3, r2
 8007162:	e7e7      	b.n	8007134 <__exponent+0x20>
 8007164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007168:	f804 2b01 	strb.w	r2, [r4], #1
 800716c:	e7f2      	b.n	8007154 <__exponent+0x40>
 800716e:	2330      	movs	r3, #48	; 0x30
 8007170:	4419      	add	r1, r3
 8007172:	7083      	strb	r3, [r0, #2]
 8007174:	1d02      	adds	r2, r0, #4
 8007176:	70c1      	strb	r1, [r0, #3]
 8007178:	e7ef      	b.n	800715a <__exponent+0x46>
	...

0800717c <_printf_float>:
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	b08d      	sub	sp, #52	; 0x34
 8007182:	460c      	mov	r4, r1
 8007184:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007188:	4616      	mov	r6, r2
 800718a:	461f      	mov	r7, r3
 800718c:	4605      	mov	r5, r0
 800718e:	f001 f903 	bl	8008398 <_localeconv_r>
 8007192:	6803      	ldr	r3, [r0, #0]
 8007194:	9304      	str	r3, [sp, #16]
 8007196:	4618      	mov	r0, r3
 8007198:	f7f9 f816 	bl	80001c8 <strlen>
 800719c:	2300      	movs	r3, #0
 800719e:	930a      	str	r3, [sp, #40]	; 0x28
 80071a0:	f8d8 3000 	ldr.w	r3, [r8]
 80071a4:	9005      	str	r0, [sp, #20]
 80071a6:	3307      	adds	r3, #7
 80071a8:	f023 0307 	bic.w	r3, r3, #7
 80071ac:	f103 0208 	add.w	r2, r3, #8
 80071b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80071b4:	f8d4 b000 	ldr.w	fp, [r4]
 80071b8:	f8c8 2000 	str.w	r2, [r8]
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80071c4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80071c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071cc:	9307      	str	r3, [sp, #28]
 80071ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80071d2:	f04f 32ff 	mov.w	r2, #4294967295
 80071d6:	4ba7      	ldr	r3, [pc, #668]	; (8007474 <_printf_float+0x2f8>)
 80071d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071dc:	f7f9 fc52 	bl	8000a84 <__aeabi_dcmpun>
 80071e0:	bb70      	cbnz	r0, 8007240 <_printf_float+0xc4>
 80071e2:	f04f 32ff 	mov.w	r2, #4294967295
 80071e6:	4ba3      	ldr	r3, [pc, #652]	; (8007474 <_printf_float+0x2f8>)
 80071e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071ec:	f7f9 fc2c 	bl	8000a48 <__aeabi_dcmple>
 80071f0:	bb30      	cbnz	r0, 8007240 <_printf_float+0xc4>
 80071f2:	2200      	movs	r2, #0
 80071f4:	2300      	movs	r3, #0
 80071f6:	4640      	mov	r0, r8
 80071f8:	4649      	mov	r1, r9
 80071fa:	f7f9 fc1b 	bl	8000a34 <__aeabi_dcmplt>
 80071fe:	b110      	cbz	r0, 8007206 <_printf_float+0x8a>
 8007200:	232d      	movs	r3, #45	; 0x2d
 8007202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007206:	4a9c      	ldr	r2, [pc, #624]	; (8007478 <_printf_float+0x2fc>)
 8007208:	4b9c      	ldr	r3, [pc, #624]	; (800747c <_printf_float+0x300>)
 800720a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800720e:	bf8c      	ite	hi
 8007210:	4690      	movhi	r8, r2
 8007212:	4698      	movls	r8, r3
 8007214:	2303      	movs	r3, #3
 8007216:	f02b 0204 	bic.w	r2, fp, #4
 800721a:	6123      	str	r3, [r4, #16]
 800721c:	6022      	str	r2, [r4, #0]
 800721e:	f04f 0900 	mov.w	r9, #0
 8007222:	9700      	str	r7, [sp, #0]
 8007224:	4633      	mov	r3, r6
 8007226:	aa0b      	add	r2, sp, #44	; 0x2c
 8007228:	4621      	mov	r1, r4
 800722a:	4628      	mov	r0, r5
 800722c:	f000 f9e6 	bl	80075fc <_printf_common>
 8007230:	3001      	adds	r0, #1
 8007232:	f040 808d 	bne.w	8007350 <_printf_float+0x1d4>
 8007236:	f04f 30ff 	mov.w	r0, #4294967295
 800723a:	b00d      	add	sp, #52	; 0x34
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	4642      	mov	r2, r8
 8007242:	464b      	mov	r3, r9
 8007244:	4640      	mov	r0, r8
 8007246:	4649      	mov	r1, r9
 8007248:	f7f9 fc1c 	bl	8000a84 <__aeabi_dcmpun>
 800724c:	b110      	cbz	r0, 8007254 <_printf_float+0xd8>
 800724e:	4a8c      	ldr	r2, [pc, #560]	; (8007480 <_printf_float+0x304>)
 8007250:	4b8c      	ldr	r3, [pc, #560]	; (8007484 <_printf_float+0x308>)
 8007252:	e7da      	b.n	800720a <_printf_float+0x8e>
 8007254:	6861      	ldr	r1, [r4, #4]
 8007256:	1c4b      	adds	r3, r1, #1
 8007258:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800725c:	a80a      	add	r0, sp, #40	; 0x28
 800725e:	d13e      	bne.n	80072de <_printf_float+0x162>
 8007260:	2306      	movs	r3, #6
 8007262:	6063      	str	r3, [r4, #4]
 8007264:	2300      	movs	r3, #0
 8007266:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800726a:	ab09      	add	r3, sp, #36	; 0x24
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	ec49 8b10 	vmov	d0, r8, r9
 8007272:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007276:	6022      	str	r2, [r4, #0]
 8007278:	f8cd a004 	str.w	sl, [sp, #4]
 800727c:	6861      	ldr	r1, [r4, #4]
 800727e:	4628      	mov	r0, r5
 8007280:	f7ff fee7 	bl	8007052 <__cvt>
 8007284:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007288:	2b47      	cmp	r3, #71	; 0x47
 800728a:	4680      	mov	r8, r0
 800728c:	d109      	bne.n	80072a2 <_printf_float+0x126>
 800728e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007290:	1cd8      	adds	r0, r3, #3
 8007292:	db02      	blt.n	800729a <_printf_float+0x11e>
 8007294:	6862      	ldr	r2, [r4, #4]
 8007296:	4293      	cmp	r3, r2
 8007298:	dd47      	ble.n	800732a <_printf_float+0x1ae>
 800729a:	f1aa 0a02 	sub.w	sl, sl, #2
 800729e:	fa5f fa8a 	uxtb.w	sl, sl
 80072a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80072a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072a8:	d824      	bhi.n	80072f4 <_printf_float+0x178>
 80072aa:	3901      	subs	r1, #1
 80072ac:	4652      	mov	r2, sl
 80072ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072b2:	9109      	str	r1, [sp, #36]	; 0x24
 80072b4:	f7ff ff2e 	bl	8007114 <__exponent>
 80072b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ba:	1813      	adds	r3, r2, r0
 80072bc:	2a01      	cmp	r2, #1
 80072be:	4681      	mov	r9, r0
 80072c0:	6123      	str	r3, [r4, #16]
 80072c2:	dc02      	bgt.n	80072ca <_printf_float+0x14e>
 80072c4:	6822      	ldr	r2, [r4, #0]
 80072c6:	07d1      	lsls	r1, r2, #31
 80072c8:	d501      	bpl.n	80072ce <_printf_float+0x152>
 80072ca:	3301      	adds	r3, #1
 80072cc:	6123      	str	r3, [r4, #16]
 80072ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d0a5      	beq.n	8007222 <_printf_float+0xa6>
 80072d6:	232d      	movs	r3, #45	; 0x2d
 80072d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072dc:	e7a1      	b.n	8007222 <_printf_float+0xa6>
 80072de:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80072e2:	f000 8177 	beq.w	80075d4 <_printf_float+0x458>
 80072e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80072ea:	d1bb      	bne.n	8007264 <_printf_float+0xe8>
 80072ec:	2900      	cmp	r1, #0
 80072ee:	d1b9      	bne.n	8007264 <_printf_float+0xe8>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e7b6      	b.n	8007262 <_printf_float+0xe6>
 80072f4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80072f8:	d119      	bne.n	800732e <_printf_float+0x1b2>
 80072fa:	2900      	cmp	r1, #0
 80072fc:	6863      	ldr	r3, [r4, #4]
 80072fe:	dd0c      	ble.n	800731a <_printf_float+0x19e>
 8007300:	6121      	str	r1, [r4, #16]
 8007302:	b913      	cbnz	r3, 800730a <_printf_float+0x18e>
 8007304:	6822      	ldr	r2, [r4, #0]
 8007306:	07d2      	lsls	r2, r2, #31
 8007308:	d502      	bpl.n	8007310 <_printf_float+0x194>
 800730a:	3301      	adds	r3, #1
 800730c:	440b      	add	r3, r1
 800730e:	6123      	str	r3, [r4, #16]
 8007310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007312:	65a3      	str	r3, [r4, #88]	; 0x58
 8007314:	f04f 0900 	mov.w	r9, #0
 8007318:	e7d9      	b.n	80072ce <_printf_float+0x152>
 800731a:	b913      	cbnz	r3, 8007322 <_printf_float+0x1a6>
 800731c:	6822      	ldr	r2, [r4, #0]
 800731e:	07d0      	lsls	r0, r2, #31
 8007320:	d501      	bpl.n	8007326 <_printf_float+0x1aa>
 8007322:	3302      	adds	r3, #2
 8007324:	e7f3      	b.n	800730e <_printf_float+0x192>
 8007326:	2301      	movs	r3, #1
 8007328:	e7f1      	b.n	800730e <_printf_float+0x192>
 800732a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800732e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007332:	4293      	cmp	r3, r2
 8007334:	db05      	blt.n	8007342 <_printf_float+0x1c6>
 8007336:	6822      	ldr	r2, [r4, #0]
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	07d1      	lsls	r1, r2, #31
 800733c:	d5e8      	bpl.n	8007310 <_printf_float+0x194>
 800733e:	3301      	adds	r3, #1
 8007340:	e7e5      	b.n	800730e <_printf_float+0x192>
 8007342:	2b00      	cmp	r3, #0
 8007344:	bfd4      	ite	le
 8007346:	f1c3 0302 	rsble	r3, r3, #2
 800734a:	2301      	movgt	r3, #1
 800734c:	4413      	add	r3, r2
 800734e:	e7de      	b.n	800730e <_printf_float+0x192>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	055a      	lsls	r2, r3, #21
 8007354:	d407      	bmi.n	8007366 <_printf_float+0x1ea>
 8007356:	6923      	ldr	r3, [r4, #16]
 8007358:	4642      	mov	r2, r8
 800735a:	4631      	mov	r1, r6
 800735c:	4628      	mov	r0, r5
 800735e:	47b8      	blx	r7
 8007360:	3001      	adds	r0, #1
 8007362:	d12b      	bne.n	80073bc <_printf_float+0x240>
 8007364:	e767      	b.n	8007236 <_printf_float+0xba>
 8007366:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800736a:	f240 80dc 	bls.w	8007526 <_printf_float+0x3aa>
 800736e:	2200      	movs	r2, #0
 8007370:	2300      	movs	r3, #0
 8007372:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007376:	f7f9 fb53 	bl	8000a20 <__aeabi_dcmpeq>
 800737a:	2800      	cmp	r0, #0
 800737c:	d033      	beq.n	80073e6 <_printf_float+0x26a>
 800737e:	2301      	movs	r3, #1
 8007380:	4a41      	ldr	r2, [pc, #260]	; (8007488 <_printf_float+0x30c>)
 8007382:	4631      	mov	r1, r6
 8007384:	4628      	mov	r0, r5
 8007386:	47b8      	blx	r7
 8007388:	3001      	adds	r0, #1
 800738a:	f43f af54 	beq.w	8007236 <_printf_float+0xba>
 800738e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007392:	429a      	cmp	r2, r3
 8007394:	db02      	blt.n	800739c <_printf_float+0x220>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	07d8      	lsls	r0, r3, #31
 800739a:	d50f      	bpl.n	80073bc <_printf_float+0x240>
 800739c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073a0:	4631      	mov	r1, r6
 80073a2:	4628      	mov	r0, r5
 80073a4:	47b8      	blx	r7
 80073a6:	3001      	adds	r0, #1
 80073a8:	f43f af45 	beq.w	8007236 <_printf_float+0xba>
 80073ac:	f04f 0800 	mov.w	r8, #0
 80073b0:	f104 091a 	add.w	r9, r4, #26
 80073b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b6:	3b01      	subs	r3, #1
 80073b8:	4543      	cmp	r3, r8
 80073ba:	dc09      	bgt.n	80073d0 <_printf_float+0x254>
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	079b      	lsls	r3, r3, #30
 80073c0:	f100 8103 	bmi.w	80075ca <_printf_float+0x44e>
 80073c4:	68e0      	ldr	r0, [r4, #12]
 80073c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c8:	4298      	cmp	r0, r3
 80073ca:	bfb8      	it	lt
 80073cc:	4618      	movlt	r0, r3
 80073ce:	e734      	b.n	800723a <_printf_float+0xbe>
 80073d0:	2301      	movs	r3, #1
 80073d2:	464a      	mov	r2, r9
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	f43f af2b 	beq.w	8007236 <_printf_float+0xba>
 80073e0:	f108 0801 	add.w	r8, r8, #1
 80073e4:	e7e6      	b.n	80073b4 <_printf_float+0x238>
 80073e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dc2b      	bgt.n	8007444 <_printf_float+0x2c8>
 80073ec:	2301      	movs	r3, #1
 80073ee:	4a26      	ldr	r2, [pc, #152]	; (8007488 <_printf_float+0x30c>)
 80073f0:	4631      	mov	r1, r6
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	f43f af1d 	beq.w	8007236 <_printf_float+0xba>
 80073fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fe:	b923      	cbnz	r3, 800740a <_printf_float+0x28e>
 8007400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007402:	b913      	cbnz	r3, 800740a <_printf_float+0x28e>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	07d9      	lsls	r1, r3, #31
 8007408:	d5d8      	bpl.n	80073bc <_printf_float+0x240>
 800740a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	f43f af0e 	beq.w	8007236 <_printf_float+0xba>
 800741a:	f04f 0900 	mov.w	r9, #0
 800741e:	f104 0a1a 	add.w	sl, r4, #26
 8007422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007424:	425b      	negs	r3, r3
 8007426:	454b      	cmp	r3, r9
 8007428:	dc01      	bgt.n	800742e <_printf_float+0x2b2>
 800742a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742c:	e794      	b.n	8007358 <_printf_float+0x1dc>
 800742e:	2301      	movs	r3, #1
 8007430:	4652      	mov	r2, sl
 8007432:	4631      	mov	r1, r6
 8007434:	4628      	mov	r0, r5
 8007436:	47b8      	blx	r7
 8007438:	3001      	adds	r0, #1
 800743a:	f43f aefc 	beq.w	8007236 <_printf_float+0xba>
 800743e:	f109 0901 	add.w	r9, r9, #1
 8007442:	e7ee      	b.n	8007422 <_printf_float+0x2a6>
 8007444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007446:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007448:	429a      	cmp	r2, r3
 800744a:	bfa8      	it	ge
 800744c:	461a      	movge	r2, r3
 800744e:	2a00      	cmp	r2, #0
 8007450:	4691      	mov	r9, r2
 8007452:	dd07      	ble.n	8007464 <_printf_float+0x2e8>
 8007454:	4613      	mov	r3, r2
 8007456:	4631      	mov	r1, r6
 8007458:	4642      	mov	r2, r8
 800745a:	4628      	mov	r0, r5
 800745c:	47b8      	blx	r7
 800745e:	3001      	adds	r0, #1
 8007460:	f43f aee9 	beq.w	8007236 <_printf_float+0xba>
 8007464:	f104 031a 	add.w	r3, r4, #26
 8007468:	f04f 0b00 	mov.w	fp, #0
 800746c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007470:	9306      	str	r3, [sp, #24]
 8007472:	e015      	b.n	80074a0 <_printf_float+0x324>
 8007474:	7fefffff 	.word	0x7fefffff
 8007478:	08008b10 	.word	0x08008b10
 800747c:	08008b0c 	.word	0x08008b0c
 8007480:	08008b18 	.word	0x08008b18
 8007484:	08008b14 	.word	0x08008b14
 8007488:	08008b1c 	.word	0x08008b1c
 800748c:	2301      	movs	r3, #1
 800748e:	9a06      	ldr	r2, [sp, #24]
 8007490:	4631      	mov	r1, r6
 8007492:	4628      	mov	r0, r5
 8007494:	47b8      	blx	r7
 8007496:	3001      	adds	r0, #1
 8007498:	f43f aecd 	beq.w	8007236 <_printf_float+0xba>
 800749c:	f10b 0b01 	add.w	fp, fp, #1
 80074a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80074a4:	ebaa 0309 	sub.w	r3, sl, r9
 80074a8:	455b      	cmp	r3, fp
 80074aa:	dcef      	bgt.n	800748c <_printf_float+0x310>
 80074ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074b0:	429a      	cmp	r2, r3
 80074b2:	44d0      	add	r8, sl
 80074b4:	db15      	blt.n	80074e2 <_printf_float+0x366>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	07da      	lsls	r2, r3, #31
 80074ba:	d412      	bmi.n	80074e2 <_printf_float+0x366>
 80074bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074c0:	eba3 020a 	sub.w	r2, r3, sl
 80074c4:	eba3 0a01 	sub.w	sl, r3, r1
 80074c8:	4592      	cmp	sl, r2
 80074ca:	bfa8      	it	ge
 80074cc:	4692      	movge	sl, r2
 80074ce:	f1ba 0f00 	cmp.w	sl, #0
 80074d2:	dc0e      	bgt.n	80074f2 <_printf_float+0x376>
 80074d4:	f04f 0800 	mov.w	r8, #0
 80074d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074dc:	f104 091a 	add.w	r9, r4, #26
 80074e0:	e019      	b.n	8007516 <_printf_float+0x39a>
 80074e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074e6:	4631      	mov	r1, r6
 80074e8:	4628      	mov	r0, r5
 80074ea:	47b8      	blx	r7
 80074ec:	3001      	adds	r0, #1
 80074ee:	d1e5      	bne.n	80074bc <_printf_float+0x340>
 80074f0:	e6a1      	b.n	8007236 <_printf_float+0xba>
 80074f2:	4653      	mov	r3, sl
 80074f4:	4642      	mov	r2, r8
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	d1e9      	bne.n	80074d4 <_printf_float+0x358>
 8007500:	e699      	b.n	8007236 <_printf_float+0xba>
 8007502:	2301      	movs	r3, #1
 8007504:	464a      	mov	r2, r9
 8007506:	4631      	mov	r1, r6
 8007508:	4628      	mov	r0, r5
 800750a:	47b8      	blx	r7
 800750c:	3001      	adds	r0, #1
 800750e:	f43f ae92 	beq.w	8007236 <_printf_float+0xba>
 8007512:	f108 0801 	add.w	r8, r8, #1
 8007516:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800751a:	1a9b      	subs	r3, r3, r2
 800751c:	eba3 030a 	sub.w	r3, r3, sl
 8007520:	4543      	cmp	r3, r8
 8007522:	dcee      	bgt.n	8007502 <_printf_float+0x386>
 8007524:	e74a      	b.n	80073bc <_printf_float+0x240>
 8007526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007528:	2a01      	cmp	r2, #1
 800752a:	dc01      	bgt.n	8007530 <_printf_float+0x3b4>
 800752c:	07db      	lsls	r3, r3, #31
 800752e:	d53a      	bpl.n	80075a6 <_printf_float+0x42a>
 8007530:	2301      	movs	r3, #1
 8007532:	4642      	mov	r2, r8
 8007534:	4631      	mov	r1, r6
 8007536:	4628      	mov	r0, r5
 8007538:	47b8      	blx	r7
 800753a:	3001      	adds	r0, #1
 800753c:	f43f ae7b 	beq.w	8007236 <_printf_float+0xba>
 8007540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007544:	4631      	mov	r1, r6
 8007546:	4628      	mov	r0, r5
 8007548:	47b8      	blx	r7
 800754a:	3001      	adds	r0, #1
 800754c:	f108 0801 	add.w	r8, r8, #1
 8007550:	f43f ae71 	beq.w	8007236 <_printf_float+0xba>
 8007554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007556:	2200      	movs	r2, #0
 8007558:	f103 3aff 	add.w	sl, r3, #4294967295
 800755c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007560:	2300      	movs	r3, #0
 8007562:	f7f9 fa5d 	bl	8000a20 <__aeabi_dcmpeq>
 8007566:	b9c8      	cbnz	r0, 800759c <_printf_float+0x420>
 8007568:	4653      	mov	r3, sl
 800756a:	4642      	mov	r2, r8
 800756c:	4631      	mov	r1, r6
 800756e:	4628      	mov	r0, r5
 8007570:	47b8      	blx	r7
 8007572:	3001      	adds	r0, #1
 8007574:	d10e      	bne.n	8007594 <_printf_float+0x418>
 8007576:	e65e      	b.n	8007236 <_printf_float+0xba>
 8007578:	2301      	movs	r3, #1
 800757a:	4652      	mov	r2, sl
 800757c:	4631      	mov	r1, r6
 800757e:	4628      	mov	r0, r5
 8007580:	47b8      	blx	r7
 8007582:	3001      	adds	r0, #1
 8007584:	f43f ae57 	beq.w	8007236 <_printf_float+0xba>
 8007588:	f108 0801 	add.w	r8, r8, #1
 800758c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800758e:	3b01      	subs	r3, #1
 8007590:	4543      	cmp	r3, r8
 8007592:	dcf1      	bgt.n	8007578 <_printf_float+0x3fc>
 8007594:	464b      	mov	r3, r9
 8007596:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800759a:	e6de      	b.n	800735a <_printf_float+0x1de>
 800759c:	f04f 0800 	mov.w	r8, #0
 80075a0:	f104 0a1a 	add.w	sl, r4, #26
 80075a4:	e7f2      	b.n	800758c <_printf_float+0x410>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e7df      	b.n	800756a <_printf_float+0x3ee>
 80075aa:	2301      	movs	r3, #1
 80075ac:	464a      	mov	r2, r9
 80075ae:	4631      	mov	r1, r6
 80075b0:	4628      	mov	r0, r5
 80075b2:	47b8      	blx	r7
 80075b4:	3001      	adds	r0, #1
 80075b6:	f43f ae3e 	beq.w	8007236 <_printf_float+0xba>
 80075ba:	f108 0801 	add.w	r8, r8, #1
 80075be:	68e3      	ldr	r3, [r4, #12]
 80075c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075c2:	1a9b      	subs	r3, r3, r2
 80075c4:	4543      	cmp	r3, r8
 80075c6:	dcf0      	bgt.n	80075aa <_printf_float+0x42e>
 80075c8:	e6fc      	b.n	80073c4 <_printf_float+0x248>
 80075ca:	f04f 0800 	mov.w	r8, #0
 80075ce:	f104 0919 	add.w	r9, r4, #25
 80075d2:	e7f4      	b.n	80075be <_printf_float+0x442>
 80075d4:	2900      	cmp	r1, #0
 80075d6:	f43f ae8b 	beq.w	80072f0 <_printf_float+0x174>
 80075da:	2300      	movs	r3, #0
 80075dc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80075e0:	ab09      	add	r3, sp, #36	; 0x24
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	ec49 8b10 	vmov	d0, r8, r9
 80075e8:	6022      	str	r2, [r4, #0]
 80075ea:	f8cd a004 	str.w	sl, [sp, #4]
 80075ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075f2:	4628      	mov	r0, r5
 80075f4:	f7ff fd2d 	bl	8007052 <__cvt>
 80075f8:	4680      	mov	r8, r0
 80075fa:	e648      	b.n	800728e <_printf_float+0x112>

080075fc <_printf_common>:
 80075fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007600:	4691      	mov	r9, r2
 8007602:	461f      	mov	r7, r3
 8007604:	688a      	ldr	r2, [r1, #8]
 8007606:	690b      	ldr	r3, [r1, #16]
 8007608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800760c:	4293      	cmp	r3, r2
 800760e:	bfb8      	it	lt
 8007610:	4613      	movlt	r3, r2
 8007612:	f8c9 3000 	str.w	r3, [r9]
 8007616:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800761a:	4606      	mov	r6, r0
 800761c:	460c      	mov	r4, r1
 800761e:	b112      	cbz	r2, 8007626 <_printf_common+0x2a>
 8007620:	3301      	adds	r3, #1
 8007622:	f8c9 3000 	str.w	r3, [r9]
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	0699      	lsls	r1, r3, #26
 800762a:	bf42      	ittt	mi
 800762c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007630:	3302      	addmi	r3, #2
 8007632:	f8c9 3000 	strmi.w	r3, [r9]
 8007636:	6825      	ldr	r5, [r4, #0]
 8007638:	f015 0506 	ands.w	r5, r5, #6
 800763c:	d107      	bne.n	800764e <_printf_common+0x52>
 800763e:	f104 0a19 	add.w	sl, r4, #25
 8007642:	68e3      	ldr	r3, [r4, #12]
 8007644:	f8d9 2000 	ldr.w	r2, [r9]
 8007648:	1a9b      	subs	r3, r3, r2
 800764a:	42ab      	cmp	r3, r5
 800764c:	dc28      	bgt.n	80076a0 <_printf_common+0xa4>
 800764e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007652:	6822      	ldr	r2, [r4, #0]
 8007654:	3300      	adds	r3, #0
 8007656:	bf18      	it	ne
 8007658:	2301      	movne	r3, #1
 800765a:	0692      	lsls	r2, r2, #26
 800765c:	d42d      	bmi.n	80076ba <_printf_common+0xbe>
 800765e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007662:	4639      	mov	r1, r7
 8007664:	4630      	mov	r0, r6
 8007666:	47c0      	blx	r8
 8007668:	3001      	adds	r0, #1
 800766a:	d020      	beq.n	80076ae <_printf_common+0xb2>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	68e5      	ldr	r5, [r4, #12]
 8007670:	f8d9 2000 	ldr.w	r2, [r9]
 8007674:	f003 0306 	and.w	r3, r3, #6
 8007678:	2b04      	cmp	r3, #4
 800767a:	bf08      	it	eq
 800767c:	1aad      	subeq	r5, r5, r2
 800767e:	68a3      	ldr	r3, [r4, #8]
 8007680:	6922      	ldr	r2, [r4, #16]
 8007682:	bf0c      	ite	eq
 8007684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007688:	2500      	movne	r5, #0
 800768a:	4293      	cmp	r3, r2
 800768c:	bfc4      	itt	gt
 800768e:	1a9b      	subgt	r3, r3, r2
 8007690:	18ed      	addgt	r5, r5, r3
 8007692:	f04f 0900 	mov.w	r9, #0
 8007696:	341a      	adds	r4, #26
 8007698:	454d      	cmp	r5, r9
 800769a:	d11a      	bne.n	80076d2 <_printf_common+0xd6>
 800769c:	2000      	movs	r0, #0
 800769e:	e008      	b.n	80076b2 <_printf_common+0xb6>
 80076a0:	2301      	movs	r3, #1
 80076a2:	4652      	mov	r2, sl
 80076a4:	4639      	mov	r1, r7
 80076a6:	4630      	mov	r0, r6
 80076a8:	47c0      	blx	r8
 80076aa:	3001      	adds	r0, #1
 80076ac:	d103      	bne.n	80076b6 <_printf_common+0xba>
 80076ae:	f04f 30ff 	mov.w	r0, #4294967295
 80076b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b6:	3501      	adds	r5, #1
 80076b8:	e7c3      	b.n	8007642 <_printf_common+0x46>
 80076ba:	18e1      	adds	r1, r4, r3
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	2030      	movs	r0, #48	; 0x30
 80076c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076c4:	4422      	add	r2, r4
 80076c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076ce:	3302      	adds	r3, #2
 80076d0:	e7c5      	b.n	800765e <_printf_common+0x62>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4622      	mov	r2, r4
 80076d6:	4639      	mov	r1, r7
 80076d8:	4630      	mov	r0, r6
 80076da:	47c0      	blx	r8
 80076dc:	3001      	adds	r0, #1
 80076de:	d0e6      	beq.n	80076ae <_printf_common+0xb2>
 80076e0:	f109 0901 	add.w	r9, r9, #1
 80076e4:	e7d8      	b.n	8007698 <_printf_common+0x9c>

080076e6 <strncat>:
 80076e6:	b530      	push	{r4, r5, lr}
 80076e8:	4603      	mov	r3, r0
 80076ea:	781c      	ldrb	r4, [r3, #0]
 80076ec:	1c5d      	adds	r5, r3, #1
 80076ee:	b944      	cbnz	r4, 8007702 <strncat+0x1c>
 80076f0:	f112 32ff 	adds.w	r2, r2, #4294967295
 80076f4:	d304      	bcc.n	8007700 <strncat+0x1a>
 80076f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076fa:	f803 4b01 	strb.w	r4, [r3], #1
 80076fe:	b914      	cbnz	r4, 8007706 <strncat+0x20>
 8007700:	bd30      	pop	{r4, r5, pc}
 8007702:	462b      	mov	r3, r5
 8007704:	e7f1      	b.n	80076ea <strncat+0x4>
 8007706:	2a00      	cmp	r2, #0
 8007708:	d1f2      	bne.n	80076f0 <strncat+0xa>
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e7f0      	b.n	80076f0 <strncat+0xa>

0800770e <quorem>:
 800770e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007712:	6903      	ldr	r3, [r0, #16]
 8007714:	690c      	ldr	r4, [r1, #16]
 8007716:	42a3      	cmp	r3, r4
 8007718:	4680      	mov	r8, r0
 800771a:	f2c0 8082 	blt.w	8007822 <quorem+0x114>
 800771e:	3c01      	subs	r4, #1
 8007720:	f101 0714 	add.w	r7, r1, #20
 8007724:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007728:	f100 0614 	add.w	r6, r0, #20
 800772c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007730:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007734:	eb06 030c 	add.w	r3, r6, ip
 8007738:	3501      	adds	r5, #1
 800773a:	eb07 090c 	add.w	r9, r7, ip
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	fbb0 f5f5 	udiv	r5, r0, r5
 8007744:	b395      	cbz	r5, 80077ac <quorem+0x9e>
 8007746:	f04f 0a00 	mov.w	sl, #0
 800774a:	4638      	mov	r0, r7
 800774c:	46b6      	mov	lr, r6
 800774e:	46d3      	mov	fp, sl
 8007750:	f850 2b04 	ldr.w	r2, [r0], #4
 8007754:	b293      	uxth	r3, r2
 8007756:	fb05 a303 	mla	r3, r5, r3, sl
 800775a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800775e:	b29b      	uxth	r3, r3
 8007760:	ebab 0303 	sub.w	r3, fp, r3
 8007764:	0c12      	lsrs	r2, r2, #16
 8007766:	f8de b000 	ldr.w	fp, [lr]
 800776a:	fb05 a202 	mla	r2, r5, r2, sl
 800776e:	fa13 f38b 	uxtah	r3, r3, fp
 8007772:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007776:	fa1f fb82 	uxth.w	fp, r2
 800777a:	f8de 2000 	ldr.w	r2, [lr]
 800777e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007782:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007786:	b29b      	uxth	r3, r3
 8007788:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800778c:	4581      	cmp	r9, r0
 800778e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007792:	f84e 3b04 	str.w	r3, [lr], #4
 8007796:	d2db      	bcs.n	8007750 <quorem+0x42>
 8007798:	f856 300c 	ldr.w	r3, [r6, ip]
 800779c:	b933      	cbnz	r3, 80077ac <quorem+0x9e>
 800779e:	9b01      	ldr	r3, [sp, #4]
 80077a0:	3b04      	subs	r3, #4
 80077a2:	429e      	cmp	r6, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	d330      	bcc.n	800780a <quorem+0xfc>
 80077a8:	f8c8 4010 	str.w	r4, [r8, #16]
 80077ac:	4640      	mov	r0, r8
 80077ae:	f001 f81f 	bl	80087f0 <__mcmp>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	db25      	blt.n	8007802 <quorem+0xf4>
 80077b6:	3501      	adds	r5, #1
 80077b8:	4630      	mov	r0, r6
 80077ba:	f04f 0c00 	mov.w	ip, #0
 80077be:	f857 2b04 	ldr.w	r2, [r7], #4
 80077c2:	f8d0 e000 	ldr.w	lr, [r0]
 80077c6:	b293      	uxth	r3, r2
 80077c8:	ebac 0303 	sub.w	r3, ip, r3
 80077cc:	0c12      	lsrs	r2, r2, #16
 80077ce:	fa13 f38e 	uxtah	r3, r3, lr
 80077d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077da:	b29b      	uxth	r3, r3
 80077dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077e0:	45b9      	cmp	r9, r7
 80077e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077e6:	f840 3b04 	str.w	r3, [r0], #4
 80077ea:	d2e8      	bcs.n	80077be <quorem+0xb0>
 80077ec:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80077f0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80077f4:	b92a      	cbnz	r2, 8007802 <quorem+0xf4>
 80077f6:	3b04      	subs	r3, #4
 80077f8:	429e      	cmp	r6, r3
 80077fa:	461a      	mov	r2, r3
 80077fc:	d30b      	bcc.n	8007816 <quorem+0x108>
 80077fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8007802:	4628      	mov	r0, r5
 8007804:	b003      	add	sp, #12
 8007806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780a:	6812      	ldr	r2, [r2, #0]
 800780c:	3b04      	subs	r3, #4
 800780e:	2a00      	cmp	r2, #0
 8007810:	d1ca      	bne.n	80077a8 <quorem+0x9a>
 8007812:	3c01      	subs	r4, #1
 8007814:	e7c5      	b.n	80077a2 <quorem+0x94>
 8007816:	6812      	ldr	r2, [r2, #0]
 8007818:	3b04      	subs	r3, #4
 800781a:	2a00      	cmp	r2, #0
 800781c:	d1ef      	bne.n	80077fe <quorem+0xf0>
 800781e:	3c01      	subs	r4, #1
 8007820:	e7ea      	b.n	80077f8 <quorem+0xea>
 8007822:	2000      	movs	r0, #0
 8007824:	e7ee      	b.n	8007804 <quorem+0xf6>
	...

08007828 <_dtoa_r>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	ec57 6b10 	vmov	r6, r7, d0
 8007830:	b097      	sub	sp, #92	; 0x5c
 8007832:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007834:	9106      	str	r1, [sp, #24]
 8007836:	4604      	mov	r4, r0
 8007838:	920b      	str	r2, [sp, #44]	; 0x2c
 800783a:	9312      	str	r3, [sp, #72]	; 0x48
 800783c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007840:	e9cd 6700 	strd	r6, r7, [sp]
 8007844:	b93d      	cbnz	r5, 8007856 <_dtoa_r+0x2e>
 8007846:	2010      	movs	r0, #16
 8007848:	f000 fdb4 	bl	80083b4 <malloc>
 800784c:	6260      	str	r0, [r4, #36]	; 0x24
 800784e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007852:	6005      	str	r5, [r0, #0]
 8007854:	60c5      	str	r5, [r0, #12]
 8007856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007858:	6819      	ldr	r1, [r3, #0]
 800785a:	b151      	cbz	r1, 8007872 <_dtoa_r+0x4a>
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	604a      	str	r2, [r1, #4]
 8007860:	2301      	movs	r3, #1
 8007862:	4093      	lsls	r3, r2
 8007864:	608b      	str	r3, [r1, #8]
 8007866:	4620      	mov	r0, r4
 8007868:	f000 fde0 	bl	800842c <_Bfree>
 800786c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800786e:	2200      	movs	r2, #0
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	1e3b      	subs	r3, r7, #0
 8007874:	bfbb      	ittet	lt
 8007876:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800787a:	9301      	strlt	r3, [sp, #4]
 800787c:	2300      	movge	r3, #0
 800787e:	2201      	movlt	r2, #1
 8007880:	bfac      	ite	ge
 8007882:	f8c8 3000 	strge.w	r3, [r8]
 8007886:	f8c8 2000 	strlt.w	r2, [r8]
 800788a:	4baf      	ldr	r3, [pc, #700]	; (8007b48 <_dtoa_r+0x320>)
 800788c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007890:	ea33 0308 	bics.w	r3, r3, r8
 8007894:	d114      	bne.n	80078c0 <_dtoa_r+0x98>
 8007896:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007898:	f242 730f 	movw	r3, #9999	; 0x270f
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	9b00      	ldr	r3, [sp, #0]
 80078a0:	b923      	cbnz	r3, 80078ac <_dtoa_r+0x84>
 80078a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f000 8542 	beq.w	8008330 <_dtoa_r+0xb08>
 80078ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007b5c <_dtoa_r+0x334>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 8544 	beq.w	8008340 <_dtoa_r+0xb18>
 80078b8:	f10b 0303 	add.w	r3, fp, #3
 80078bc:	f000 bd3e 	b.w	800833c <_dtoa_r+0xb14>
 80078c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80078c4:	2200      	movs	r2, #0
 80078c6:	2300      	movs	r3, #0
 80078c8:	4630      	mov	r0, r6
 80078ca:	4639      	mov	r1, r7
 80078cc:	f7f9 f8a8 	bl	8000a20 <__aeabi_dcmpeq>
 80078d0:	4681      	mov	r9, r0
 80078d2:	b168      	cbz	r0, 80078f0 <_dtoa_r+0xc8>
 80078d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078d6:	2301      	movs	r3, #1
 80078d8:	6013      	str	r3, [r2, #0]
 80078da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 8524 	beq.w	800832a <_dtoa_r+0xb02>
 80078e2:	4b9a      	ldr	r3, [pc, #616]	; (8007b4c <_dtoa_r+0x324>)
 80078e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078e6:	f103 3bff 	add.w	fp, r3, #4294967295
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	f000 bd28 	b.w	8008340 <_dtoa_r+0xb18>
 80078f0:	aa14      	add	r2, sp, #80	; 0x50
 80078f2:	a915      	add	r1, sp, #84	; 0x54
 80078f4:	ec47 6b10 	vmov	d0, r6, r7
 80078f8:	4620      	mov	r0, r4
 80078fa:	f000 fff0 	bl	80088de <__d2b>
 80078fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007902:	9004      	str	r0, [sp, #16]
 8007904:	2d00      	cmp	r5, #0
 8007906:	d07c      	beq.n	8007a02 <_dtoa_r+0x1da>
 8007908:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800790c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007910:	46b2      	mov	sl, r6
 8007912:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007916:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800791a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800791e:	2200      	movs	r2, #0
 8007920:	4b8b      	ldr	r3, [pc, #556]	; (8007b50 <_dtoa_r+0x328>)
 8007922:	4650      	mov	r0, sl
 8007924:	4659      	mov	r1, fp
 8007926:	f7f8 fc5b 	bl	80001e0 <__aeabi_dsub>
 800792a:	a381      	add	r3, pc, #516	; (adr r3, 8007b30 <_dtoa_r+0x308>)
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	f7f8 fe0e 	bl	8000550 <__aeabi_dmul>
 8007934:	a380      	add	r3, pc, #512	; (adr r3, 8007b38 <_dtoa_r+0x310>)
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	f7f8 fc53 	bl	80001e4 <__adddf3>
 800793e:	4606      	mov	r6, r0
 8007940:	4628      	mov	r0, r5
 8007942:	460f      	mov	r7, r1
 8007944:	f7f8 fd9a 	bl	800047c <__aeabi_i2d>
 8007948:	a37d      	add	r3, pc, #500	; (adr r3, 8007b40 <_dtoa_r+0x318>)
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	f7f8 fdff 	bl	8000550 <__aeabi_dmul>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4630      	mov	r0, r6
 8007958:	4639      	mov	r1, r7
 800795a:	f7f8 fc43 	bl	80001e4 <__adddf3>
 800795e:	4606      	mov	r6, r0
 8007960:	460f      	mov	r7, r1
 8007962:	f7f9 f8a5 	bl	8000ab0 <__aeabi_d2iz>
 8007966:	2200      	movs	r2, #0
 8007968:	4682      	mov	sl, r0
 800796a:	2300      	movs	r3, #0
 800796c:	4630      	mov	r0, r6
 800796e:	4639      	mov	r1, r7
 8007970:	f7f9 f860 	bl	8000a34 <__aeabi_dcmplt>
 8007974:	b148      	cbz	r0, 800798a <_dtoa_r+0x162>
 8007976:	4650      	mov	r0, sl
 8007978:	f7f8 fd80 	bl	800047c <__aeabi_i2d>
 800797c:	4632      	mov	r2, r6
 800797e:	463b      	mov	r3, r7
 8007980:	f7f9 f84e 	bl	8000a20 <__aeabi_dcmpeq>
 8007984:	b908      	cbnz	r0, 800798a <_dtoa_r+0x162>
 8007986:	f10a 3aff 	add.w	sl, sl, #4294967295
 800798a:	f1ba 0f16 	cmp.w	sl, #22
 800798e:	d859      	bhi.n	8007a44 <_dtoa_r+0x21c>
 8007990:	4970      	ldr	r1, [pc, #448]	; (8007b54 <_dtoa_r+0x32c>)
 8007992:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007996:	e9dd 2300 	ldrd	r2, r3, [sp]
 800799a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800799e:	f7f9 f867 	bl	8000a70 <__aeabi_dcmpgt>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d050      	beq.n	8007a48 <_dtoa_r+0x220>
 80079a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079aa:	2300      	movs	r3, #0
 80079ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80079ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079b0:	1b5d      	subs	r5, r3, r5
 80079b2:	f1b5 0801 	subs.w	r8, r5, #1
 80079b6:	bf49      	itett	mi
 80079b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80079bc:	2300      	movpl	r3, #0
 80079be:	9305      	strmi	r3, [sp, #20]
 80079c0:	f04f 0800 	movmi.w	r8, #0
 80079c4:	bf58      	it	pl
 80079c6:	9305      	strpl	r3, [sp, #20]
 80079c8:	f1ba 0f00 	cmp.w	sl, #0
 80079cc:	db3e      	blt.n	8007a4c <_dtoa_r+0x224>
 80079ce:	2300      	movs	r3, #0
 80079d0:	44d0      	add	r8, sl
 80079d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80079d6:	9307      	str	r3, [sp, #28]
 80079d8:	9b06      	ldr	r3, [sp, #24]
 80079da:	2b09      	cmp	r3, #9
 80079dc:	f200 8090 	bhi.w	8007b00 <_dtoa_r+0x2d8>
 80079e0:	2b05      	cmp	r3, #5
 80079e2:	bfc4      	itt	gt
 80079e4:	3b04      	subgt	r3, #4
 80079e6:	9306      	strgt	r3, [sp, #24]
 80079e8:	9b06      	ldr	r3, [sp, #24]
 80079ea:	f1a3 0302 	sub.w	r3, r3, #2
 80079ee:	bfcc      	ite	gt
 80079f0:	2500      	movgt	r5, #0
 80079f2:	2501      	movle	r5, #1
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	f200 808f 	bhi.w	8007b18 <_dtoa_r+0x2f0>
 80079fa:	e8df f003 	tbb	[pc, r3]
 80079fe:	7f7d      	.short	0x7f7d
 8007a00:	7131      	.short	0x7131
 8007a02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007a06:	441d      	add	r5, r3
 8007a08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007a0c:	2820      	cmp	r0, #32
 8007a0e:	dd13      	ble.n	8007a38 <_dtoa_r+0x210>
 8007a10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007a14:	9b00      	ldr	r3, [sp, #0]
 8007a16:	fa08 f800 	lsl.w	r8, r8, r0
 8007a1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007a1e:	fa23 f000 	lsr.w	r0, r3, r0
 8007a22:	ea48 0000 	orr.w	r0, r8, r0
 8007a26:	f7f8 fd19 	bl	800045c <__aeabi_ui2d>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4682      	mov	sl, r0
 8007a2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007a32:	3d01      	subs	r5, #1
 8007a34:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a36:	e772      	b.n	800791e <_dtoa_r+0xf6>
 8007a38:	9b00      	ldr	r3, [sp, #0]
 8007a3a:	f1c0 0020 	rsb	r0, r0, #32
 8007a3e:	fa03 f000 	lsl.w	r0, r3, r0
 8007a42:	e7f0      	b.n	8007a26 <_dtoa_r+0x1fe>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e7b1      	b.n	80079ac <_dtoa_r+0x184>
 8007a48:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a4a:	e7b0      	b.n	80079ae <_dtoa_r+0x186>
 8007a4c:	9b05      	ldr	r3, [sp, #20]
 8007a4e:	eba3 030a 	sub.w	r3, r3, sl
 8007a52:	9305      	str	r3, [sp, #20]
 8007a54:	f1ca 0300 	rsb	r3, sl, #0
 8007a58:	9307      	str	r3, [sp, #28]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	930e      	str	r3, [sp, #56]	; 0x38
 8007a5e:	e7bb      	b.n	80079d8 <_dtoa_r+0x1b0>
 8007a60:	2301      	movs	r3, #1
 8007a62:	930a      	str	r3, [sp, #40]	; 0x28
 8007a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	dd59      	ble.n	8007b1e <_dtoa_r+0x2f6>
 8007a6a:	9302      	str	r3, [sp, #8]
 8007a6c:	4699      	mov	r9, r3
 8007a6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a70:	2200      	movs	r2, #0
 8007a72:	6072      	str	r2, [r6, #4]
 8007a74:	2204      	movs	r2, #4
 8007a76:	f102 0014 	add.w	r0, r2, #20
 8007a7a:	4298      	cmp	r0, r3
 8007a7c:	6871      	ldr	r1, [r6, #4]
 8007a7e:	d953      	bls.n	8007b28 <_dtoa_r+0x300>
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 fc9f 	bl	80083c4 <_Balloc>
 8007a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a88:	6030      	str	r0, [r6, #0]
 8007a8a:	f1b9 0f0e 	cmp.w	r9, #14
 8007a8e:	f8d3 b000 	ldr.w	fp, [r3]
 8007a92:	f200 80e6 	bhi.w	8007c62 <_dtoa_r+0x43a>
 8007a96:	2d00      	cmp	r5, #0
 8007a98:	f000 80e3 	beq.w	8007c62 <_dtoa_r+0x43a>
 8007a9c:	ed9d 7b00 	vldr	d7, [sp]
 8007aa0:	f1ba 0f00 	cmp.w	sl, #0
 8007aa4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007aa8:	dd74      	ble.n	8007b94 <_dtoa_r+0x36c>
 8007aaa:	4a2a      	ldr	r2, [pc, #168]	; (8007b54 <_dtoa_r+0x32c>)
 8007aac:	f00a 030f 	and.w	r3, sl, #15
 8007ab0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ab4:	ed93 7b00 	vldr	d7, [r3]
 8007ab8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007abc:	06f0      	lsls	r0, r6, #27
 8007abe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007ac2:	d565      	bpl.n	8007b90 <_dtoa_r+0x368>
 8007ac4:	4b24      	ldr	r3, [pc, #144]	; (8007b58 <_dtoa_r+0x330>)
 8007ac6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007aca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ace:	f7f8 fe69 	bl	80007a4 <__aeabi_ddiv>
 8007ad2:	e9cd 0100 	strd	r0, r1, [sp]
 8007ad6:	f006 060f 	and.w	r6, r6, #15
 8007ada:	2503      	movs	r5, #3
 8007adc:	4f1e      	ldr	r7, [pc, #120]	; (8007b58 <_dtoa_r+0x330>)
 8007ade:	e04c      	b.n	8007b7a <_dtoa_r+0x352>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae6:	4453      	add	r3, sl
 8007ae8:	f103 0901 	add.w	r9, r3, #1
 8007aec:	9302      	str	r3, [sp, #8]
 8007aee:	464b      	mov	r3, r9
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	bfb8      	it	lt
 8007af4:	2301      	movlt	r3, #1
 8007af6:	e7ba      	b.n	8007a6e <_dtoa_r+0x246>
 8007af8:	2300      	movs	r3, #0
 8007afa:	e7b2      	b.n	8007a62 <_dtoa_r+0x23a>
 8007afc:	2300      	movs	r3, #0
 8007afe:	e7f0      	b.n	8007ae2 <_dtoa_r+0x2ba>
 8007b00:	2501      	movs	r5, #1
 8007b02:	2300      	movs	r3, #0
 8007b04:	9306      	str	r3, [sp, #24]
 8007b06:	950a      	str	r5, [sp, #40]	; 0x28
 8007b08:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0c:	9302      	str	r3, [sp, #8]
 8007b0e:	4699      	mov	r9, r3
 8007b10:	2200      	movs	r2, #0
 8007b12:	2312      	movs	r3, #18
 8007b14:	920b      	str	r2, [sp, #44]	; 0x2c
 8007b16:	e7aa      	b.n	8007a6e <_dtoa_r+0x246>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b1c:	e7f4      	b.n	8007b08 <_dtoa_r+0x2e0>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	9302      	str	r3, [sp, #8]
 8007b22:	4699      	mov	r9, r3
 8007b24:	461a      	mov	r2, r3
 8007b26:	e7f5      	b.n	8007b14 <_dtoa_r+0x2ec>
 8007b28:	3101      	adds	r1, #1
 8007b2a:	6071      	str	r1, [r6, #4]
 8007b2c:	0052      	lsls	r2, r2, #1
 8007b2e:	e7a2      	b.n	8007a76 <_dtoa_r+0x24e>
 8007b30:	636f4361 	.word	0x636f4361
 8007b34:	3fd287a7 	.word	0x3fd287a7
 8007b38:	8b60c8b3 	.word	0x8b60c8b3
 8007b3c:	3fc68a28 	.word	0x3fc68a28
 8007b40:	509f79fb 	.word	0x509f79fb
 8007b44:	3fd34413 	.word	0x3fd34413
 8007b48:	7ff00000 	.word	0x7ff00000
 8007b4c:	08008b1d 	.word	0x08008b1d
 8007b50:	3ff80000 	.word	0x3ff80000
 8007b54:	08008b58 	.word	0x08008b58
 8007b58:	08008b30 	.word	0x08008b30
 8007b5c:	08008b27 	.word	0x08008b27
 8007b60:	07f1      	lsls	r1, r6, #31
 8007b62:	d508      	bpl.n	8007b76 <_dtoa_r+0x34e>
 8007b64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b6c:	f7f8 fcf0 	bl	8000550 <__aeabi_dmul>
 8007b70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b74:	3501      	adds	r5, #1
 8007b76:	1076      	asrs	r6, r6, #1
 8007b78:	3708      	adds	r7, #8
 8007b7a:	2e00      	cmp	r6, #0
 8007b7c:	d1f0      	bne.n	8007b60 <_dtoa_r+0x338>
 8007b7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b86:	f7f8 fe0d 	bl	80007a4 <__aeabi_ddiv>
 8007b8a:	e9cd 0100 	strd	r0, r1, [sp]
 8007b8e:	e01a      	b.n	8007bc6 <_dtoa_r+0x39e>
 8007b90:	2502      	movs	r5, #2
 8007b92:	e7a3      	b.n	8007adc <_dtoa_r+0x2b4>
 8007b94:	f000 80a0 	beq.w	8007cd8 <_dtoa_r+0x4b0>
 8007b98:	f1ca 0600 	rsb	r6, sl, #0
 8007b9c:	4b9f      	ldr	r3, [pc, #636]	; (8007e1c <_dtoa_r+0x5f4>)
 8007b9e:	4fa0      	ldr	r7, [pc, #640]	; (8007e20 <_dtoa_r+0x5f8>)
 8007ba0:	f006 020f 	and.w	r2, r6, #15
 8007ba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bb0:	f7f8 fcce 	bl	8000550 <__aeabi_dmul>
 8007bb4:	e9cd 0100 	strd	r0, r1, [sp]
 8007bb8:	1136      	asrs	r6, r6, #4
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2502      	movs	r5, #2
 8007bbe:	2e00      	cmp	r6, #0
 8007bc0:	d17f      	bne.n	8007cc2 <_dtoa_r+0x49a>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e1      	bne.n	8007b8a <_dtoa_r+0x362>
 8007bc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 8087 	beq.w	8007cdc <_dtoa_r+0x4b4>
 8007bce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	4b93      	ldr	r3, [pc, #588]	; (8007e24 <_dtoa_r+0x5fc>)
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	4639      	mov	r1, r7
 8007bda:	f7f8 ff2b 	bl	8000a34 <__aeabi_dcmplt>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d07c      	beq.n	8007cdc <_dtoa_r+0x4b4>
 8007be2:	f1b9 0f00 	cmp.w	r9, #0
 8007be6:	d079      	beq.n	8007cdc <_dtoa_r+0x4b4>
 8007be8:	9b02      	ldr	r3, [sp, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	dd35      	ble.n	8007c5a <_dtoa_r+0x432>
 8007bee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007bf2:	9308      	str	r3, [sp, #32]
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	4b8b      	ldr	r3, [pc, #556]	; (8007e28 <_dtoa_r+0x600>)
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f7f8 fca8 	bl	8000550 <__aeabi_dmul>
 8007c00:	e9cd 0100 	strd	r0, r1, [sp]
 8007c04:	9f02      	ldr	r7, [sp, #8]
 8007c06:	3501      	adds	r5, #1
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f7f8 fc37 	bl	800047c <__aeabi_i2d>
 8007c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c12:	f7f8 fc9d 	bl	8000550 <__aeabi_dmul>
 8007c16:	2200      	movs	r2, #0
 8007c18:	4b84      	ldr	r3, [pc, #528]	; (8007e2c <_dtoa_r+0x604>)
 8007c1a:	f7f8 fae3 	bl	80001e4 <__adddf3>
 8007c1e:	4605      	mov	r5, r0
 8007c20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007c24:	2f00      	cmp	r7, #0
 8007c26:	d15d      	bne.n	8007ce4 <_dtoa_r+0x4bc>
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4b81      	ldr	r3, [pc, #516]	; (8007e30 <_dtoa_r+0x608>)
 8007c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c30:	f7f8 fad6 	bl	80001e0 <__aeabi_dsub>
 8007c34:	462a      	mov	r2, r5
 8007c36:	4633      	mov	r3, r6
 8007c38:	e9cd 0100 	strd	r0, r1, [sp]
 8007c3c:	f7f8 ff18 	bl	8000a70 <__aeabi_dcmpgt>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	f040 8288 	bne.w	8008156 <_dtoa_r+0x92e>
 8007c46:	462a      	mov	r2, r5
 8007c48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007c4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c50:	f7f8 fef0 	bl	8000a34 <__aeabi_dcmplt>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	f040 827c 	bne.w	8008152 <_dtoa_r+0x92a>
 8007c5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c5e:	e9cd 2300 	strd	r2, r3, [sp]
 8007c62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f2c0 8150 	blt.w	8007f0a <_dtoa_r+0x6e2>
 8007c6a:	f1ba 0f0e 	cmp.w	sl, #14
 8007c6e:	f300 814c 	bgt.w	8007f0a <_dtoa_r+0x6e2>
 8007c72:	4b6a      	ldr	r3, [pc, #424]	; (8007e1c <_dtoa_r+0x5f4>)
 8007c74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c78:	ed93 7b00 	vldr	d7, [r3]
 8007c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c84:	f280 80d8 	bge.w	8007e38 <_dtoa_r+0x610>
 8007c88:	f1b9 0f00 	cmp.w	r9, #0
 8007c8c:	f300 80d4 	bgt.w	8007e38 <_dtoa_r+0x610>
 8007c90:	f040 825e 	bne.w	8008150 <_dtoa_r+0x928>
 8007c94:	2200      	movs	r2, #0
 8007c96:	4b66      	ldr	r3, [pc, #408]	; (8007e30 <_dtoa_r+0x608>)
 8007c98:	ec51 0b17 	vmov	r0, r1, d7
 8007c9c:	f7f8 fc58 	bl	8000550 <__aeabi_dmul>
 8007ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ca4:	f7f8 feda 	bl	8000a5c <__aeabi_dcmpge>
 8007ca8:	464f      	mov	r7, r9
 8007caa:	464e      	mov	r6, r9
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f040 8234 	bne.w	800811a <_dtoa_r+0x8f2>
 8007cb2:	2331      	movs	r3, #49	; 0x31
 8007cb4:	f10b 0501 	add.w	r5, fp, #1
 8007cb8:	f88b 3000 	strb.w	r3, [fp]
 8007cbc:	f10a 0a01 	add.w	sl, sl, #1
 8007cc0:	e22f      	b.n	8008122 <_dtoa_r+0x8fa>
 8007cc2:	07f2      	lsls	r2, r6, #31
 8007cc4:	d505      	bpl.n	8007cd2 <_dtoa_r+0x4aa>
 8007cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cca:	f7f8 fc41 	bl	8000550 <__aeabi_dmul>
 8007cce:	3501      	adds	r5, #1
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	1076      	asrs	r6, r6, #1
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	e772      	b.n	8007bbe <_dtoa_r+0x396>
 8007cd8:	2502      	movs	r5, #2
 8007cda:	e774      	b.n	8007bc6 <_dtoa_r+0x39e>
 8007cdc:	f8cd a020 	str.w	sl, [sp, #32]
 8007ce0:	464f      	mov	r7, r9
 8007ce2:	e791      	b.n	8007c08 <_dtoa_r+0x3e0>
 8007ce4:	4b4d      	ldr	r3, [pc, #308]	; (8007e1c <_dtoa_r+0x5f4>)
 8007ce6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d047      	beq.n	8007d84 <_dtoa_r+0x55c>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	494e      	ldr	r1, [pc, #312]	; (8007e34 <_dtoa_r+0x60c>)
 8007cfc:	f7f8 fd52 	bl	80007a4 <__aeabi_ddiv>
 8007d00:	462a      	mov	r2, r5
 8007d02:	4633      	mov	r3, r6
 8007d04:	f7f8 fa6c 	bl	80001e0 <__aeabi_dsub>
 8007d08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d0c:	465d      	mov	r5, fp
 8007d0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d12:	f7f8 fecd 	bl	8000ab0 <__aeabi_d2iz>
 8007d16:	4606      	mov	r6, r0
 8007d18:	f7f8 fbb0 	bl	800047c <__aeabi_i2d>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d24:	f7f8 fa5c 	bl	80001e0 <__aeabi_dsub>
 8007d28:	3630      	adds	r6, #48	; 0x30
 8007d2a:	f805 6b01 	strb.w	r6, [r5], #1
 8007d2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d32:	e9cd 0100 	strd	r0, r1, [sp]
 8007d36:	f7f8 fe7d 	bl	8000a34 <__aeabi_dcmplt>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d163      	bne.n	8007e06 <_dtoa_r+0x5de>
 8007d3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d42:	2000      	movs	r0, #0
 8007d44:	4937      	ldr	r1, [pc, #220]	; (8007e24 <_dtoa_r+0x5fc>)
 8007d46:	f7f8 fa4b 	bl	80001e0 <__aeabi_dsub>
 8007d4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d4e:	f7f8 fe71 	bl	8000a34 <__aeabi_dcmplt>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	f040 80b7 	bne.w	8007ec6 <_dtoa_r+0x69e>
 8007d58:	eba5 030b 	sub.w	r3, r5, fp
 8007d5c:	429f      	cmp	r7, r3
 8007d5e:	f77f af7c 	ble.w	8007c5a <_dtoa_r+0x432>
 8007d62:	2200      	movs	r2, #0
 8007d64:	4b30      	ldr	r3, [pc, #192]	; (8007e28 <_dtoa_r+0x600>)
 8007d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d6a:	f7f8 fbf1 	bl	8000550 <__aeabi_dmul>
 8007d6e:	2200      	movs	r2, #0
 8007d70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d74:	4b2c      	ldr	r3, [pc, #176]	; (8007e28 <_dtoa_r+0x600>)
 8007d76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d7a:	f7f8 fbe9 	bl	8000550 <__aeabi_dmul>
 8007d7e:	e9cd 0100 	strd	r0, r1, [sp]
 8007d82:	e7c4      	b.n	8007d0e <_dtoa_r+0x4e6>
 8007d84:	462a      	mov	r2, r5
 8007d86:	4633      	mov	r3, r6
 8007d88:	f7f8 fbe2 	bl	8000550 <__aeabi_dmul>
 8007d8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d90:	eb0b 0507 	add.w	r5, fp, r7
 8007d94:	465e      	mov	r6, fp
 8007d96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d9a:	f7f8 fe89 	bl	8000ab0 <__aeabi_d2iz>
 8007d9e:	4607      	mov	r7, r0
 8007da0:	f7f8 fb6c 	bl	800047c <__aeabi_i2d>
 8007da4:	3730      	adds	r7, #48	; 0x30
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dae:	f7f8 fa17 	bl	80001e0 <__aeabi_dsub>
 8007db2:	f806 7b01 	strb.w	r7, [r6], #1
 8007db6:	42ae      	cmp	r6, r5
 8007db8:	e9cd 0100 	strd	r0, r1, [sp]
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	d126      	bne.n	8007e10 <_dtoa_r+0x5e8>
 8007dc2:	4b1c      	ldr	r3, [pc, #112]	; (8007e34 <_dtoa_r+0x60c>)
 8007dc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007dc8:	f7f8 fa0c 	bl	80001e4 <__adddf3>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dd4:	f7f8 fe4c 	bl	8000a70 <__aeabi_dcmpgt>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d174      	bne.n	8007ec6 <_dtoa_r+0x69e>
 8007ddc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007de0:	2000      	movs	r0, #0
 8007de2:	4914      	ldr	r1, [pc, #80]	; (8007e34 <_dtoa_r+0x60c>)
 8007de4:	f7f8 f9fc 	bl	80001e0 <__aeabi_dsub>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007df0:	f7f8 fe20 	bl	8000a34 <__aeabi_dcmplt>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	f43f af30 	beq.w	8007c5a <_dtoa_r+0x432>
 8007dfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007dfe:	2b30      	cmp	r3, #48	; 0x30
 8007e00:	f105 32ff 	add.w	r2, r5, #4294967295
 8007e04:	d002      	beq.n	8007e0c <_dtoa_r+0x5e4>
 8007e06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007e0a:	e04a      	b.n	8007ea2 <_dtoa_r+0x67a>
 8007e0c:	4615      	mov	r5, r2
 8007e0e:	e7f4      	b.n	8007dfa <_dtoa_r+0x5d2>
 8007e10:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <_dtoa_r+0x600>)
 8007e12:	f7f8 fb9d 	bl	8000550 <__aeabi_dmul>
 8007e16:	e9cd 0100 	strd	r0, r1, [sp]
 8007e1a:	e7bc      	b.n	8007d96 <_dtoa_r+0x56e>
 8007e1c:	08008b58 	.word	0x08008b58
 8007e20:	08008b30 	.word	0x08008b30
 8007e24:	3ff00000 	.word	0x3ff00000
 8007e28:	40240000 	.word	0x40240000
 8007e2c:	401c0000 	.word	0x401c0000
 8007e30:	40140000 	.word	0x40140000
 8007e34:	3fe00000 	.word	0x3fe00000
 8007e38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e3c:	465d      	mov	r5, fp
 8007e3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e42:	4630      	mov	r0, r6
 8007e44:	4639      	mov	r1, r7
 8007e46:	f7f8 fcad 	bl	80007a4 <__aeabi_ddiv>
 8007e4a:	f7f8 fe31 	bl	8000ab0 <__aeabi_d2iz>
 8007e4e:	4680      	mov	r8, r0
 8007e50:	f7f8 fb14 	bl	800047c <__aeabi_i2d>
 8007e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e58:	f7f8 fb7a 	bl	8000550 <__aeabi_dmul>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4630      	mov	r0, r6
 8007e62:	4639      	mov	r1, r7
 8007e64:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007e68:	f7f8 f9ba 	bl	80001e0 <__aeabi_dsub>
 8007e6c:	f805 6b01 	strb.w	r6, [r5], #1
 8007e70:	eba5 060b 	sub.w	r6, r5, fp
 8007e74:	45b1      	cmp	r9, r6
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	d139      	bne.n	8007ef0 <_dtoa_r+0x6c8>
 8007e7c:	f7f8 f9b2 	bl	80001e4 <__adddf3>
 8007e80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e84:	4606      	mov	r6, r0
 8007e86:	460f      	mov	r7, r1
 8007e88:	f7f8 fdf2 	bl	8000a70 <__aeabi_dcmpgt>
 8007e8c:	b9c8      	cbnz	r0, 8007ec2 <_dtoa_r+0x69a>
 8007e8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e92:	4630      	mov	r0, r6
 8007e94:	4639      	mov	r1, r7
 8007e96:	f7f8 fdc3 	bl	8000a20 <__aeabi_dcmpeq>
 8007e9a:	b110      	cbz	r0, 8007ea2 <_dtoa_r+0x67a>
 8007e9c:	f018 0f01 	tst.w	r8, #1
 8007ea0:	d10f      	bne.n	8007ec2 <_dtoa_r+0x69a>
 8007ea2:	9904      	ldr	r1, [sp, #16]
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 fac1 	bl	800842c <_Bfree>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007eae:	702b      	strb	r3, [r5, #0]
 8007eb0:	f10a 0301 	add.w	r3, sl, #1
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 8241 	beq.w	8008340 <_dtoa_r+0xb18>
 8007ebe:	601d      	str	r5, [r3, #0]
 8007ec0:	e23e      	b.n	8008340 <_dtoa_r+0xb18>
 8007ec2:	f8cd a020 	str.w	sl, [sp, #32]
 8007ec6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007eca:	2a39      	cmp	r2, #57	; 0x39
 8007ecc:	f105 33ff 	add.w	r3, r5, #4294967295
 8007ed0:	d108      	bne.n	8007ee4 <_dtoa_r+0x6bc>
 8007ed2:	459b      	cmp	fp, r3
 8007ed4:	d10a      	bne.n	8007eec <_dtoa_r+0x6c4>
 8007ed6:	9b08      	ldr	r3, [sp, #32]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	9308      	str	r3, [sp, #32]
 8007edc:	2330      	movs	r3, #48	; 0x30
 8007ede:	f88b 3000 	strb.w	r3, [fp]
 8007ee2:	465b      	mov	r3, fp
 8007ee4:	781a      	ldrb	r2, [r3, #0]
 8007ee6:	3201      	adds	r2, #1
 8007ee8:	701a      	strb	r2, [r3, #0]
 8007eea:	e78c      	b.n	8007e06 <_dtoa_r+0x5de>
 8007eec:	461d      	mov	r5, r3
 8007eee:	e7ea      	b.n	8007ec6 <_dtoa_r+0x69e>
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4b9b      	ldr	r3, [pc, #620]	; (8008160 <_dtoa_r+0x938>)
 8007ef4:	f7f8 fb2c 	bl	8000550 <__aeabi_dmul>
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2300      	movs	r3, #0
 8007efc:	4606      	mov	r6, r0
 8007efe:	460f      	mov	r7, r1
 8007f00:	f7f8 fd8e 	bl	8000a20 <__aeabi_dcmpeq>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d09a      	beq.n	8007e3e <_dtoa_r+0x616>
 8007f08:	e7cb      	b.n	8007ea2 <_dtoa_r+0x67a>
 8007f0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f0c:	2a00      	cmp	r2, #0
 8007f0e:	f000 808b 	beq.w	8008028 <_dtoa_r+0x800>
 8007f12:	9a06      	ldr	r2, [sp, #24]
 8007f14:	2a01      	cmp	r2, #1
 8007f16:	dc6e      	bgt.n	8007ff6 <_dtoa_r+0x7ce>
 8007f18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f1a:	2a00      	cmp	r2, #0
 8007f1c:	d067      	beq.n	8007fee <_dtoa_r+0x7c6>
 8007f1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f22:	9f07      	ldr	r7, [sp, #28]
 8007f24:	9d05      	ldr	r5, [sp, #20]
 8007f26:	9a05      	ldr	r2, [sp, #20]
 8007f28:	2101      	movs	r1, #1
 8007f2a:	441a      	add	r2, r3
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	9205      	str	r2, [sp, #20]
 8007f30:	4498      	add	r8, r3
 8007f32:	f000 fb1b 	bl	800856c <__i2b>
 8007f36:	4606      	mov	r6, r0
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	dd0c      	ble.n	8007f56 <_dtoa_r+0x72e>
 8007f3c:	f1b8 0f00 	cmp.w	r8, #0
 8007f40:	dd09      	ble.n	8007f56 <_dtoa_r+0x72e>
 8007f42:	4545      	cmp	r5, r8
 8007f44:	9a05      	ldr	r2, [sp, #20]
 8007f46:	462b      	mov	r3, r5
 8007f48:	bfa8      	it	ge
 8007f4a:	4643      	movge	r3, r8
 8007f4c:	1ad2      	subs	r2, r2, r3
 8007f4e:	9205      	str	r2, [sp, #20]
 8007f50:	1aed      	subs	r5, r5, r3
 8007f52:	eba8 0803 	sub.w	r8, r8, r3
 8007f56:	9b07      	ldr	r3, [sp, #28]
 8007f58:	b1eb      	cbz	r3, 8007f96 <_dtoa_r+0x76e>
 8007f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d067      	beq.n	8008030 <_dtoa_r+0x808>
 8007f60:	b18f      	cbz	r7, 8007f86 <_dtoa_r+0x75e>
 8007f62:	4631      	mov	r1, r6
 8007f64:	463a      	mov	r2, r7
 8007f66:	4620      	mov	r0, r4
 8007f68:	f000 fba0 	bl	80086ac <__pow5mult>
 8007f6c:	9a04      	ldr	r2, [sp, #16]
 8007f6e:	4601      	mov	r1, r0
 8007f70:	4606      	mov	r6, r0
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 fb03 	bl	800857e <__multiply>
 8007f78:	9904      	ldr	r1, [sp, #16]
 8007f7a:	9008      	str	r0, [sp, #32]
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f000 fa55 	bl	800842c <_Bfree>
 8007f82:	9b08      	ldr	r3, [sp, #32]
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	9b07      	ldr	r3, [sp, #28]
 8007f88:	1bda      	subs	r2, r3, r7
 8007f8a:	d004      	beq.n	8007f96 <_dtoa_r+0x76e>
 8007f8c:	9904      	ldr	r1, [sp, #16]
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f000 fb8c 	bl	80086ac <__pow5mult>
 8007f94:	9004      	str	r0, [sp, #16]
 8007f96:	2101      	movs	r1, #1
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f000 fae7 	bl	800856c <__i2b>
 8007f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fa0:	4607      	mov	r7, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 81d0 	beq.w	8008348 <_dtoa_r+0xb20>
 8007fa8:	461a      	mov	r2, r3
 8007faa:	4601      	mov	r1, r0
 8007fac:	4620      	mov	r0, r4
 8007fae:	f000 fb7d 	bl	80086ac <__pow5mult>
 8007fb2:	9b06      	ldr	r3, [sp, #24]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	dc40      	bgt.n	800803c <_dtoa_r+0x814>
 8007fba:	9b00      	ldr	r3, [sp, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d139      	bne.n	8008034 <_dtoa_r+0x80c>
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d136      	bne.n	8008038 <_dtoa_r+0x810>
 8007fca:	9b01      	ldr	r3, [sp, #4]
 8007fcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fd0:	0d1b      	lsrs	r3, r3, #20
 8007fd2:	051b      	lsls	r3, r3, #20
 8007fd4:	b12b      	cbz	r3, 8007fe2 <_dtoa_r+0x7ba>
 8007fd6:	9b05      	ldr	r3, [sp, #20]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	9305      	str	r3, [sp, #20]
 8007fdc:	f108 0801 	add.w	r8, r8, #1
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	9307      	str	r3, [sp, #28]
 8007fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d12a      	bne.n	8008040 <_dtoa_r+0x818>
 8007fea:	2001      	movs	r0, #1
 8007fec:	e030      	b.n	8008050 <_dtoa_r+0x828>
 8007fee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ff0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ff4:	e795      	b.n	8007f22 <_dtoa_r+0x6fa>
 8007ff6:	9b07      	ldr	r3, [sp, #28]
 8007ff8:	f109 37ff 	add.w	r7, r9, #4294967295
 8007ffc:	42bb      	cmp	r3, r7
 8007ffe:	bfbf      	itttt	lt
 8008000:	9b07      	ldrlt	r3, [sp, #28]
 8008002:	9707      	strlt	r7, [sp, #28]
 8008004:	1afa      	sublt	r2, r7, r3
 8008006:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008008:	bfbb      	ittet	lt
 800800a:	189b      	addlt	r3, r3, r2
 800800c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800800e:	1bdf      	subge	r7, r3, r7
 8008010:	2700      	movlt	r7, #0
 8008012:	f1b9 0f00 	cmp.w	r9, #0
 8008016:	bfb5      	itete	lt
 8008018:	9b05      	ldrlt	r3, [sp, #20]
 800801a:	9d05      	ldrge	r5, [sp, #20]
 800801c:	eba3 0509 	sublt.w	r5, r3, r9
 8008020:	464b      	movge	r3, r9
 8008022:	bfb8      	it	lt
 8008024:	2300      	movlt	r3, #0
 8008026:	e77e      	b.n	8007f26 <_dtoa_r+0x6fe>
 8008028:	9f07      	ldr	r7, [sp, #28]
 800802a:	9d05      	ldr	r5, [sp, #20]
 800802c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800802e:	e783      	b.n	8007f38 <_dtoa_r+0x710>
 8008030:	9a07      	ldr	r2, [sp, #28]
 8008032:	e7ab      	b.n	8007f8c <_dtoa_r+0x764>
 8008034:	2300      	movs	r3, #0
 8008036:	e7d4      	b.n	8007fe2 <_dtoa_r+0x7ba>
 8008038:	9b00      	ldr	r3, [sp, #0]
 800803a:	e7d2      	b.n	8007fe2 <_dtoa_r+0x7ba>
 800803c:	2300      	movs	r3, #0
 800803e:	9307      	str	r3, [sp, #28]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008046:	6918      	ldr	r0, [r3, #16]
 8008048:	f000 fa42 	bl	80084d0 <__hi0bits>
 800804c:	f1c0 0020 	rsb	r0, r0, #32
 8008050:	4440      	add	r0, r8
 8008052:	f010 001f 	ands.w	r0, r0, #31
 8008056:	d047      	beq.n	80080e8 <_dtoa_r+0x8c0>
 8008058:	f1c0 0320 	rsb	r3, r0, #32
 800805c:	2b04      	cmp	r3, #4
 800805e:	dd3b      	ble.n	80080d8 <_dtoa_r+0x8b0>
 8008060:	9b05      	ldr	r3, [sp, #20]
 8008062:	f1c0 001c 	rsb	r0, r0, #28
 8008066:	4403      	add	r3, r0
 8008068:	9305      	str	r3, [sp, #20]
 800806a:	4405      	add	r5, r0
 800806c:	4480      	add	r8, r0
 800806e:	9b05      	ldr	r3, [sp, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	dd05      	ble.n	8008080 <_dtoa_r+0x858>
 8008074:	461a      	mov	r2, r3
 8008076:	9904      	ldr	r1, [sp, #16]
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fb65 	bl	8008748 <__lshift>
 800807e:	9004      	str	r0, [sp, #16]
 8008080:	f1b8 0f00 	cmp.w	r8, #0
 8008084:	dd05      	ble.n	8008092 <_dtoa_r+0x86a>
 8008086:	4639      	mov	r1, r7
 8008088:	4642      	mov	r2, r8
 800808a:	4620      	mov	r0, r4
 800808c:	f000 fb5c 	bl	8008748 <__lshift>
 8008090:	4607      	mov	r7, r0
 8008092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008094:	b353      	cbz	r3, 80080ec <_dtoa_r+0x8c4>
 8008096:	4639      	mov	r1, r7
 8008098:	9804      	ldr	r0, [sp, #16]
 800809a:	f000 fba9 	bl	80087f0 <__mcmp>
 800809e:	2800      	cmp	r0, #0
 80080a0:	da24      	bge.n	80080ec <_dtoa_r+0x8c4>
 80080a2:	2300      	movs	r3, #0
 80080a4:	220a      	movs	r2, #10
 80080a6:	9904      	ldr	r1, [sp, #16]
 80080a8:	4620      	mov	r0, r4
 80080aa:	f000 f9d6 	bl	800845a <__multadd>
 80080ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b0:	9004      	str	r0, [sp, #16]
 80080b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 814d 	beq.w	8008356 <_dtoa_r+0xb2e>
 80080bc:	2300      	movs	r3, #0
 80080be:	4631      	mov	r1, r6
 80080c0:	220a      	movs	r2, #10
 80080c2:	4620      	mov	r0, r4
 80080c4:	f000 f9c9 	bl	800845a <__multadd>
 80080c8:	9b02      	ldr	r3, [sp, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	4606      	mov	r6, r0
 80080ce:	dc4f      	bgt.n	8008170 <_dtoa_r+0x948>
 80080d0:	9b06      	ldr	r3, [sp, #24]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	dd4c      	ble.n	8008170 <_dtoa_r+0x948>
 80080d6:	e011      	b.n	80080fc <_dtoa_r+0x8d4>
 80080d8:	d0c9      	beq.n	800806e <_dtoa_r+0x846>
 80080da:	9a05      	ldr	r2, [sp, #20]
 80080dc:	331c      	adds	r3, #28
 80080de:	441a      	add	r2, r3
 80080e0:	9205      	str	r2, [sp, #20]
 80080e2:	441d      	add	r5, r3
 80080e4:	4498      	add	r8, r3
 80080e6:	e7c2      	b.n	800806e <_dtoa_r+0x846>
 80080e8:	4603      	mov	r3, r0
 80080ea:	e7f6      	b.n	80080da <_dtoa_r+0x8b2>
 80080ec:	f1b9 0f00 	cmp.w	r9, #0
 80080f0:	dc38      	bgt.n	8008164 <_dtoa_r+0x93c>
 80080f2:	9b06      	ldr	r3, [sp, #24]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	dd35      	ble.n	8008164 <_dtoa_r+0x93c>
 80080f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80080fc:	9b02      	ldr	r3, [sp, #8]
 80080fe:	b963      	cbnz	r3, 800811a <_dtoa_r+0x8f2>
 8008100:	4639      	mov	r1, r7
 8008102:	2205      	movs	r2, #5
 8008104:	4620      	mov	r0, r4
 8008106:	f000 f9a8 	bl	800845a <__multadd>
 800810a:	4601      	mov	r1, r0
 800810c:	4607      	mov	r7, r0
 800810e:	9804      	ldr	r0, [sp, #16]
 8008110:	f000 fb6e 	bl	80087f0 <__mcmp>
 8008114:	2800      	cmp	r0, #0
 8008116:	f73f adcc 	bgt.w	8007cb2 <_dtoa_r+0x48a>
 800811a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800811c:	465d      	mov	r5, fp
 800811e:	ea6f 0a03 	mvn.w	sl, r3
 8008122:	f04f 0900 	mov.w	r9, #0
 8008126:	4639      	mov	r1, r7
 8008128:	4620      	mov	r0, r4
 800812a:	f000 f97f 	bl	800842c <_Bfree>
 800812e:	2e00      	cmp	r6, #0
 8008130:	f43f aeb7 	beq.w	8007ea2 <_dtoa_r+0x67a>
 8008134:	f1b9 0f00 	cmp.w	r9, #0
 8008138:	d005      	beq.n	8008146 <_dtoa_r+0x91e>
 800813a:	45b1      	cmp	r9, r6
 800813c:	d003      	beq.n	8008146 <_dtoa_r+0x91e>
 800813e:	4649      	mov	r1, r9
 8008140:	4620      	mov	r0, r4
 8008142:	f000 f973 	bl	800842c <_Bfree>
 8008146:	4631      	mov	r1, r6
 8008148:	4620      	mov	r0, r4
 800814a:	f000 f96f 	bl	800842c <_Bfree>
 800814e:	e6a8      	b.n	8007ea2 <_dtoa_r+0x67a>
 8008150:	2700      	movs	r7, #0
 8008152:	463e      	mov	r6, r7
 8008154:	e7e1      	b.n	800811a <_dtoa_r+0x8f2>
 8008156:	f8dd a020 	ldr.w	sl, [sp, #32]
 800815a:	463e      	mov	r6, r7
 800815c:	e5a9      	b.n	8007cb2 <_dtoa_r+0x48a>
 800815e:	bf00      	nop
 8008160:	40240000 	.word	0x40240000
 8008164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008166:	f8cd 9008 	str.w	r9, [sp, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 80fa 	beq.w	8008364 <_dtoa_r+0xb3c>
 8008170:	2d00      	cmp	r5, #0
 8008172:	dd05      	ble.n	8008180 <_dtoa_r+0x958>
 8008174:	4631      	mov	r1, r6
 8008176:	462a      	mov	r2, r5
 8008178:	4620      	mov	r0, r4
 800817a:	f000 fae5 	bl	8008748 <__lshift>
 800817e:	4606      	mov	r6, r0
 8008180:	9b07      	ldr	r3, [sp, #28]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d04c      	beq.n	8008220 <_dtoa_r+0x9f8>
 8008186:	6871      	ldr	r1, [r6, #4]
 8008188:	4620      	mov	r0, r4
 800818a:	f000 f91b 	bl	80083c4 <_Balloc>
 800818e:	6932      	ldr	r2, [r6, #16]
 8008190:	3202      	adds	r2, #2
 8008192:	4605      	mov	r5, r0
 8008194:	0092      	lsls	r2, r2, #2
 8008196:	f106 010c 	add.w	r1, r6, #12
 800819a:	300c      	adds	r0, #12
 800819c:	f7fe ff46 	bl	800702c <memcpy>
 80081a0:	2201      	movs	r2, #1
 80081a2:	4629      	mov	r1, r5
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 facf 	bl	8008748 <__lshift>
 80081aa:	9b00      	ldr	r3, [sp, #0]
 80081ac:	f8cd b014 	str.w	fp, [sp, #20]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	46b1      	mov	r9, r6
 80081b6:	9307      	str	r3, [sp, #28]
 80081b8:	4606      	mov	r6, r0
 80081ba:	4639      	mov	r1, r7
 80081bc:	9804      	ldr	r0, [sp, #16]
 80081be:	f7ff faa6 	bl	800770e <quorem>
 80081c2:	4649      	mov	r1, r9
 80081c4:	4605      	mov	r5, r0
 80081c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80081ca:	9804      	ldr	r0, [sp, #16]
 80081cc:	f000 fb10 	bl	80087f0 <__mcmp>
 80081d0:	4632      	mov	r2, r6
 80081d2:	9000      	str	r0, [sp, #0]
 80081d4:	4639      	mov	r1, r7
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 fb24 	bl	8008824 <__mdiff>
 80081dc:	68c3      	ldr	r3, [r0, #12]
 80081de:	4602      	mov	r2, r0
 80081e0:	bb03      	cbnz	r3, 8008224 <_dtoa_r+0x9fc>
 80081e2:	4601      	mov	r1, r0
 80081e4:	9008      	str	r0, [sp, #32]
 80081e6:	9804      	ldr	r0, [sp, #16]
 80081e8:	f000 fb02 	bl	80087f0 <__mcmp>
 80081ec:	9a08      	ldr	r2, [sp, #32]
 80081ee:	4603      	mov	r3, r0
 80081f0:	4611      	mov	r1, r2
 80081f2:	4620      	mov	r0, r4
 80081f4:	9308      	str	r3, [sp, #32]
 80081f6:	f000 f919 	bl	800842c <_Bfree>
 80081fa:	9b08      	ldr	r3, [sp, #32]
 80081fc:	b9a3      	cbnz	r3, 8008228 <_dtoa_r+0xa00>
 80081fe:	9a06      	ldr	r2, [sp, #24]
 8008200:	b992      	cbnz	r2, 8008228 <_dtoa_r+0xa00>
 8008202:	9a07      	ldr	r2, [sp, #28]
 8008204:	b982      	cbnz	r2, 8008228 <_dtoa_r+0xa00>
 8008206:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800820a:	d029      	beq.n	8008260 <_dtoa_r+0xa38>
 800820c:	9b00      	ldr	r3, [sp, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	dd01      	ble.n	8008216 <_dtoa_r+0x9ee>
 8008212:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008216:	9b05      	ldr	r3, [sp, #20]
 8008218:	1c5d      	adds	r5, r3, #1
 800821a:	f883 8000 	strb.w	r8, [r3]
 800821e:	e782      	b.n	8008126 <_dtoa_r+0x8fe>
 8008220:	4630      	mov	r0, r6
 8008222:	e7c2      	b.n	80081aa <_dtoa_r+0x982>
 8008224:	2301      	movs	r3, #1
 8008226:	e7e3      	b.n	80081f0 <_dtoa_r+0x9c8>
 8008228:	9a00      	ldr	r2, [sp, #0]
 800822a:	2a00      	cmp	r2, #0
 800822c:	db04      	blt.n	8008238 <_dtoa_r+0xa10>
 800822e:	d125      	bne.n	800827c <_dtoa_r+0xa54>
 8008230:	9a06      	ldr	r2, [sp, #24]
 8008232:	bb1a      	cbnz	r2, 800827c <_dtoa_r+0xa54>
 8008234:	9a07      	ldr	r2, [sp, #28]
 8008236:	bb0a      	cbnz	r2, 800827c <_dtoa_r+0xa54>
 8008238:	2b00      	cmp	r3, #0
 800823a:	ddec      	ble.n	8008216 <_dtoa_r+0x9ee>
 800823c:	2201      	movs	r2, #1
 800823e:	9904      	ldr	r1, [sp, #16]
 8008240:	4620      	mov	r0, r4
 8008242:	f000 fa81 	bl	8008748 <__lshift>
 8008246:	4639      	mov	r1, r7
 8008248:	9004      	str	r0, [sp, #16]
 800824a:	f000 fad1 	bl	80087f0 <__mcmp>
 800824e:	2800      	cmp	r0, #0
 8008250:	dc03      	bgt.n	800825a <_dtoa_r+0xa32>
 8008252:	d1e0      	bne.n	8008216 <_dtoa_r+0x9ee>
 8008254:	f018 0f01 	tst.w	r8, #1
 8008258:	d0dd      	beq.n	8008216 <_dtoa_r+0x9ee>
 800825a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800825e:	d1d8      	bne.n	8008212 <_dtoa_r+0x9ea>
 8008260:	9b05      	ldr	r3, [sp, #20]
 8008262:	9a05      	ldr	r2, [sp, #20]
 8008264:	1c5d      	adds	r5, r3, #1
 8008266:	2339      	movs	r3, #57	; 0x39
 8008268:	7013      	strb	r3, [r2, #0]
 800826a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800826e:	2b39      	cmp	r3, #57	; 0x39
 8008270:	f105 32ff 	add.w	r2, r5, #4294967295
 8008274:	d04f      	beq.n	8008316 <_dtoa_r+0xaee>
 8008276:	3301      	adds	r3, #1
 8008278:	7013      	strb	r3, [r2, #0]
 800827a:	e754      	b.n	8008126 <_dtoa_r+0x8fe>
 800827c:	9a05      	ldr	r2, [sp, #20]
 800827e:	2b00      	cmp	r3, #0
 8008280:	f102 0501 	add.w	r5, r2, #1
 8008284:	dd06      	ble.n	8008294 <_dtoa_r+0xa6c>
 8008286:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800828a:	d0e9      	beq.n	8008260 <_dtoa_r+0xa38>
 800828c:	f108 0801 	add.w	r8, r8, #1
 8008290:	9b05      	ldr	r3, [sp, #20]
 8008292:	e7c2      	b.n	800821a <_dtoa_r+0x9f2>
 8008294:	9a02      	ldr	r2, [sp, #8]
 8008296:	f805 8c01 	strb.w	r8, [r5, #-1]
 800829a:	eba5 030b 	sub.w	r3, r5, fp
 800829e:	4293      	cmp	r3, r2
 80082a0:	d021      	beq.n	80082e6 <_dtoa_r+0xabe>
 80082a2:	2300      	movs	r3, #0
 80082a4:	220a      	movs	r2, #10
 80082a6:	9904      	ldr	r1, [sp, #16]
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 f8d6 	bl	800845a <__multadd>
 80082ae:	45b1      	cmp	r9, r6
 80082b0:	9004      	str	r0, [sp, #16]
 80082b2:	f04f 0300 	mov.w	r3, #0
 80082b6:	f04f 020a 	mov.w	r2, #10
 80082ba:	4649      	mov	r1, r9
 80082bc:	4620      	mov	r0, r4
 80082be:	d105      	bne.n	80082cc <_dtoa_r+0xaa4>
 80082c0:	f000 f8cb 	bl	800845a <__multadd>
 80082c4:	4681      	mov	r9, r0
 80082c6:	4606      	mov	r6, r0
 80082c8:	9505      	str	r5, [sp, #20]
 80082ca:	e776      	b.n	80081ba <_dtoa_r+0x992>
 80082cc:	f000 f8c5 	bl	800845a <__multadd>
 80082d0:	4631      	mov	r1, r6
 80082d2:	4681      	mov	r9, r0
 80082d4:	2300      	movs	r3, #0
 80082d6:	220a      	movs	r2, #10
 80082d8:	4620      	mov	r0, r4
 80082da:	f000 f8be 	bl	800845a <__multadd>
 80082de:	4606      	mov	r6, r0
 80082e0:	e7f2      	b.n	80082c8 <_dtoa_r+0xaa0>
 80082e2:	f04f 0900 	mov.w	r9, #0
 80082e6:	2201      	movs	r2, #1
 80082e8:	9904      	ldr	r1, [sp, #16]
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 fa2c 	bl	8008748 <__lshift>
 80082f0:	4639      	mov	r1, r7
 80082f2:	9004      	str	r0, [sp, #16]
 80082f4:	f000 fa7c 	bl	80087f0 <__mcmp>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	dcb6      	bgt.n	800826a <_dtoa_r+0xa42>
 80082fc:	d102      	bne.n	8008304 <_dtoa_r+0xadc>
 80082fe:	f018 0f01 	tst.w	r8, #1
 8008302:	d1b2      	bne.n	800826a <_dtoa_r+0xa42>
 8008304:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008308:	2b30      	cmp	r3, #48	; 0x30
 800830a:	f105 32ff 	add.w	r2, r5, #4294967295
 800830e:	f47f af0a 	bne.w	8008126 <_dtoa_r+0x8fe>
 8008312:	4615      	mov	r5, r2
 8008314:	e7f6      	b.n	8008304 <_dtoa_r+0xadc>
 8008316:	4593      	cmp	fp, r2
 8008318:	d105      	bne.n	8008326 <_dtoa_r+0xafe>
 800831a:	2331      	movs	r3, #49	; 0x31
 800831c:	f10a 0a01 	add.w	sl, sl, #1
 8008320:	f88b 3000 	strb.w	r3, [fp]
 8008324:	e6ff      	b.n	8008126 <_dtoa_r+0x8fe>
 8008326:	4615      	mov	r5, r2
 8008328:	e79f      	b.n	800826a <_dtoa_r+0xa42>
 800832a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008390 <_dtoa_r+0xb68>
 800832e:	e007      	b.n	8008340 <_dtoa_r+0xb18>
 8008330:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008332:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008394 <_dtoa_r+0xb6c>
 8008336:	b11b      	cbz	r3, 8008340 <_dtoa_r+0xb18>
 8008338:	f10b 0308 	add.w	r3, fp, #8
 800833c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	4658      	mov	r0, fp
 8008342:	b017      	add	sp, #92	; 0x5c
 8008344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008348:	9b06      	ldr	r3, [sp, #24]
 800834a:	2b01      	cmp	r3, #1
 800834c:	f77f ae35 	ble.w	8007fba <_dtoa_r+0x792>
 8008350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008352:	9307      	str	r3, [sp, #28]
 8008354:	e649      	b.n	8007fea <_dtoa_r+0x7c2>
 8008356:	9b02      	ldr	r3, [sp, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	dc03      	bgt.n	8008364 <_dtoa_r+0xb3c>
 800835c:	9b06      	ldr	r3, [sp, #24]
 800835e:	2b02      	cmp	r3, #2
 8008360:	f73f aecc 	bgt.w	80080fc <_dtoa_r+0x8d4>
 8008364:	465d      	mov	r5, fp
 8008366:	4639      	mov	r1, r7
 8008368:	9804      	ldr	r0, [sp, #16]
 800836a:	f7ff f9d0 	bl	800770e <quorem>
 800836e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008372:	f805 8b01 	strb.w	r8, [r5], #1
 8008376:	9a02      	ldr	r2, [sp, #8]
 8008378:	eba5 030b 	sub.w	r3, r5, fp
 800837c:	429a      	cmp	r2, r3
 800837e:	ddb0      	ble.n	80082e2 <_dtoa_r+0xaba>
 8008380:	2300      	movs	r3, #0
 8008382:	220a      	movs	r2, #10
 8008384:	9904      	ldr	r1, [sp, #16]
 8008386:	4620      	mov	r0, r4
 8008388:	f000 f867 	bl	800845a <__multadd>
 800838c:	9004      	str	r0, [sp, #16]
 800838e:	e7ea      	b.n	8008366 <_dtoa_r+0xb3e>
 8008390:	08008b1c 	.word	0x08008b1c
 8008394:	08008b1e 	.word	0x08008b1e

08008398 <_localeconv_r>:
 8008398:	4b04      	ldr	r3, [pc, #16]	; (80083ac <_localeconv_r+0x14>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6a18      	ldr	r0, [r3, #32]
 800839e:	4b04      	ldr	r3, [pc, #16]	; (80083b0 <_localeconv_r+0x18>)
 80083a0:	2800      	cmp	r0, #0
 80083a2:	bf08      	it	eq
 80083a4:	4618      	moveq	r0, r3
 80083a6:	30f0      	adds	r0, #240	; 0xf0
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	2000000c 	.word	0x2000000c
 80083b0:	20000070 	.word	0x20000070

080083b4 <malloc>:
 80083b4:	4b02      	ldr	r3, [pc, #8]	; (80083c0 <malloc+0xc>)
 80083b6:	4601      	mov	r1, r0
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	f000 baed 	b.w	8008998 <_malloc_r>
 80083be:	bf00      	nop
 80083c0:	2000000c 	.word	0x2000000c

080083c4 <_Balloc>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80083c8:	4604      	mov	r4, r0
 80083ca:	460e      	mov	r6, r1
 80083cc:	b93d      	cbnz	r5, 80083de <_Balloc+0x1a>
 80083ce:	2010      	movs	r0, #16
 80083d0:	f7ff fff0 	bl	80083b4 <malloc>
 80083d4:	6260      	str	r0, [r4, #36]	; 0x24
 80083d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083da:	6005      	str	r5, [r0, #0]
 80083dc:	60c5      	str	r5, [r0, #12]
 80083de:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80083e0:	68eb      	ldr	r3, [r5, #12]
 80083e2:	b183      	cbz	r3, 8008406 <_Balloc+0x42>
 80083e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80083ec:	b9b8      	cbnz	r0, 800841e <_Balloc+0x5a>
 80083ee:	2101      	movs	r1, #1
 80083f0:	fa01 f506 	lsl.w	r5, r1, r6
 80083f4:	1d6a      	adds	r2, r5, #5
 80083f6:	0092      	lsls	r2, r2, #2
 80083f8:	4620      	mov	r0, r4
 80083fa:	f000 fabf 	bl	800897c <_calloc_r>
 80083fe:	b160      	cbz	r0, 800841a <_Balloc+0x56>
 8008400:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008404:	e00e      	b.n	8008424 <_Balloc+0x60>
 8008406:	2221      	movs	r2, #33	; 0x21
 8008408:	2104      	movs	r1, #4
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fab6 	bl	800897c <_calloc_r>
 8008410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008412:	60e8      	str	r0, [r5, #12]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1e4      	bne.n	80083e4 <_Balloc+0x20>
 800841a:	2000      	movs	r0, #0
 800841c:	bd70      	pop	{r4, r5, r6, pc}
 800841e:	6802      	ldr	r2, [r0, #0]
 8008420:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008424:	2300      	movs	r3, #0
 8008426:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800842a:	e7f7      	b.n	800841c <_Balloc+0x58>

0800842c <_Bfree>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008430:	4606      	mov	r6, r0
 8008432:	460d      	mov	r5, r1
 8008434:	b93c      	cbnz	r4, 8008446 <_Bfree+0x1a>
 8008436:	2010      	movs	r0, #16
 8008438:	f7ff ffbc 	bl	80083b4 <malloc>
 800843c:	6270      	str	r0, [r6, #36]	; 0x24
 800843e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008442:	6004      	str	r4, [r0, #0]
 8008444:	60c4      	str	r4, [r0, #12]
 8008446:	b13d      	cbz	r5, 8008458 <_Bfree+0x2c>
 8008448:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800844a:	686a      	ldr	r2, [r5, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008452:	6029      	str	r1, [r5, #0]
 8008454:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008458:	bd70      	pop	{r4, r5, r6, pc}

0800845a <__multadd>:
 800845a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800845e:	690d      	ldr	r5, [r1, #16]
 8008460:	461f      	mov	r7, r3
 8008462:	4606      	mov	r6, r0
 8008464:	460c      	mov	r4, r1
 8008466:	f101 0c14 	add.w	ip, r1, #20
 800846a:	2300      	movs	r3, #0
 800846c:	f8dc 0000 	ldr.w	r0, [ip]
 8008470:	b281      	uxth	r1, r0
 8008472:	fb02 7101 	mla	r1, r2, r1, r7
 8008476:	0c0f      	lsrs	r7, r1, #16
 8008478:	0c00      	lsrs	r0, r0, #16
 800847a:	fb02 7000 	mla	r0, r2, r0, r7
 800847e:	b289      	uxth	r1, r1
 8008480:	3301      	adds	r3, #1
 8008482:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008486:	429d      	cmp	r5, r3
 8008488:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800848c:	f84c 1b04 	str.w	r1, [ip], #4
 8008490:	dcec      	bgt.n	800846c <__multadd+0x12>
 8008492:	b1d7      	cbz	r7, 80084ca <__multadd+0x70>
 8008494:	68a3      	ldr	r3, [r4, #8]
 8008496:	42ab      	cmp	r3, r5
 8008498:	dc12      	bgt.n	80084c0 <__multadd+0x66>
 800849a:	6861      	ldr	r1, [r4, #4]
 800849c:	4630      	mov	r0, r6
 800849e:	3101      	adds	r1, #1
 80084a0:	f7ff ff90 	bl	80083c4 <_Balloc>
 80084a4:	6922      	ldr	r2, [r4, #16]
 80084a6:	3202      	adds	r2, #2
 80084a8:	f104 010c 	add.w	r1, r4, #12
 80084ac:	4680      	mov	r8, r0
 80084ae:	0092      	lsls	r2, r2, #2
 80084b0:	300c      	adds	r0, #12
 80084b2:	f7fe fdbb 	bl	800702c <memcpy>
 80084b6:	4621      	mov	r1, r4
 80084b8:	4630      	mov	r0, r6
 80084ba:	f7ff ffb7 	bl	800842c <_Bfree>
 80084be:	4644      	mov	r4, r8
 80084c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084c4:	3501      	adds	r5, #1
 80084c6:	615f      	str	r7, [r3, #20]
 80084c8:	6125      	str	r5, [r4, #16]
 80084ca:	4620      	mov	r0, r4
 80084cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080084d0 <__hi0bits>:
 80084d0:	0c02      	lsrs	r2, r0, #16
 80084d2:	0412      	lsls	r2, r2, #16
 80084d4:	4603      	mov	r3, r0
 80084d6:	b9b2      	cbnz	r2, 8008506 <__hi0bits+0x36>
 80084d8:	0403      	lsls	r3, r0, #16
 80084da:	2010      	movs	r0, #16
 80084dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80084e0:	bf04      	itt	eq
 80084e2:	021b      	lsleq	r3, r3, #8
 80084e4:	3008      	addeq	r0, #8
 80084e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80084ea:	bf04      	itt	eq
 80084ec:	011b      	lsleq	r3, r3, #4
 80084ee:	3004      	addeq	r0, #4
 80084f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80084f4:	bf04      	itt	eq
 80084f6:	009b      	lsleq	r3, r3, #2
 80084f8:	3002      	addeq	r0, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	db06      	blt.n	800850c <__hi0bits+0x3c>
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	d503      	bpl.n	800850a <__hi0bits+0x3a>
 8008502:	3001      	adds	r0, #1
 8008504:	4770      	bx	lr
 8008506:	2000      	movs	r0, #0
 8008508:	e7e8      	b.n	80084dc <__hi0bits+0xc>
 800850a:	2020      	movs	r0, #32
 800850c:	4770      	bx	lr

0800850e <__lo0bits>:
 800850e:	6803      	ldr	r3, [r0, #0]
 8008510:	f013 0207 	ands.w	r2, r3, #7
 8008514:	4601      	mov	r1, r0
 8008516:	d00b      	beq.n	8008530 <__lo0bits+0x22>
 8008518:	07da      	lsls	r2, r3, #31
 800851a:	d423      	bmi.n	8008564 <__lo0bits+0x56>
 800851c:	0798      	lsls	r0, r3, #30
 800851e:	bf49      	itett	mi
 8008520:	085b      	lsrmi	r3, r3, #1
 8008522:	089b      	lsrpl	r3, r3, #2
 8008524:	2001      	movmi	r0, #1
 8008526:	600b      	strmi	r3, [r1, #0]
 8008528:	bf5c      	itt	pl
 800852a:	600b      	strpl	r3, [r1, #0]
 800852c:	2002      	movpl	r0, #2
 800852e:	4770      	bx	lr
 8008530:	b298      	uxth	r0, r3
 8008532:	b9a8      	cbnz	r0, 8008560 <__lo0bits+0x52>
 8008534:	0c1b      	lsrs	r3, r3, #16
 8008536:	2010      	movs	r0, #16
 8008538:	f013 0fff 	tst.w	r3, #255	; 0xff
 800853c:	bf04      	itt	eq
 800853e:	0a1b      	lsreq	r3, r3, #8
 8008540:	3008      	addeq	r0, #8
 8008542:	071a      	lsls	r2, r3, #28
 8008544:	bf04      	itt	eq
 8008546:	091b      	lsreq	r3, r3, #4
 8008548:	3004      	addeq	r0, #4
 800854a:	079a      	lsls	r2, r3, #30
 800854c:	bf04      	itt	eq
 800854e:	089b      	lsreq	r3, r3, #2
 8008550:	3002      	addeq	r0, #2
 8008552:	07da      	lsls	r2, r3, #31
 8008554:	d402      	bmi.n	800855c <__lo0bits+0x4e>
 8008556:	085b      	lsrs	r3, r3, #1
 8008558:	d006      	beq.n	8008568 <__lo0bits+0x5a>
 800855a:	3001      	adds	r0, #1
 800855c:	600b      	str	r3, [r1, #0]
 800855e:	4770      	bx	lr
 8008560:	4610      	mov	r0, r2
 8008562:	e7e9      	b.n	8008538 <__lo0bits+0x2a>
 8008564:	2000      	movs	r0, #0
 8008566:	4770      	bx	lr
 8008568:	2020      	movs	r0, #32
 800856a:	4770      	bx	lr

0800856c <__i2b>:
 800856c:	b510      	push	{r4, lr}
 800856e:	460c      	mov	r4, r1
 8008570:	2101      	movs	r1, #1
 8008572:	f7ff ff27 	bl	80083c4 <_Balloc>
 8008576:	2201      	movs	r2, #1
 8008578:	6144      	str	r4, [r0, #20]
 800857a:	6102      	str	r2, [r0, #16]
 800857c:	bd10      	pop	{r4, pc}

0800857e <__multiply>:
 800857e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008582:	4614      	mov	r4, r2
 8008584:	690a      	ldr	r2, [r1, #16]
 8008586:	6923      	ldr	r3, [r4, #16]
 8008588:	429a      	cmp	r2, r3
 800858a:	bfb8      	it	lt
 800858c:	460b      	movlt	r3, r1
 800858e:	4688      	mov	r8, r1
 8008590:	bfbc      	itt	lt
 8008592:	46a0      	movlt	r8, r4
 8008594:	461c      	movlt	r4, r3
 8008596:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800859a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800859e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085a6:	eb07 0609 	add.w	r6, r7, r9
 80085aa:	42b3      	cmp	r3, r6
 80085ac:	bfb8      	it	lt
 80085ae:	3101      	addlt	r1, #1
 80085b0:	f7ff ff08 	bl	80083c4 <_Balloc>
 80085b4:	f100 0514 	add.w	r5, r0, #20
 80085b8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80085bc:	462b      	mov	r3, r5
 80085be:	2200      	movs	r2, #0
 80085c0:	4573      	cmp	r3, lr
 80085c2:	d316      	bcc.n	80085f2 <__multiply+0x74>
 80085c4:	f104 0214 	add.w	r2, r4, #20
 80085c8:	f108 0114 	add.w	r1, r8, #20
 80085cc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80085d0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	9b00      	ldr	r3, [sp, #0]
 80085d8:	9201      	str	r2, [sp, #4]
 80085da:	4293      	cmp	r3, r2
 80085dc:	d80c      	bhi.n	80085f8 <__multiply+0x7a>
 80085de:	2e00      	cmp	r6, #0
 80085e0:	dd03      	ble.n	80085ea <__multiply+0x6c>
 80085e2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d05d      	beq.n	80086a6 <__multiply+0x128>
 80085ea:	6106      	str	r6, [r0, #16]
 80085ec:	b003      	add	sp, #12
 80085ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f2:	f843 2b04 	str.w	r2, [r3], #4
 80085f6:	e7e3      	b.n	80085c0 <__multiply+0x42>
 80085f8:	f8b2 b000 	ldrh.w	fp, [r2]
 80085fc:	f1bb 0f00 	cmp.w	fp, #0
 8008600:	d023      	beq.n	800864a <__multiply+0xcc>
 8008602:	4689      	mov	r9, r1
 8008604:	46ac      	mov	ip, r5
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	f859 4b04 	ldr.w	r4, [r9], #4
 800860e:	f8dc a000 	ldr.w	sl, [ip]
 8008612:	b2a3      	uxth	r3, r4
 8008614:	fa1f fa8a 	uxth.w	sl, sl
 8008618:	fb0b a303 	mla	r3, fp, r3, sl
 800861c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008620:	f8dc 4000 	ldr.w	r4, [ip]
 8008624:	4443      	add	r3, r8
 8008626:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800862a:	fb0b 840a 	mla	r4, fp, sl, r8
 800862e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008632:	46e2      	mov	sl, ip
 8008634:	b29b      	uxth	r3, r3
 8008636:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800863a:	454f      	cmp	r7, r9
 800863c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008640:	f84a 3b04 	str.w	r3, [sl], #4
 8008644:	d82b      	bhi.n	800869e <__multiply+0x120>
 8008646:	f8cc 8004 	str.w	r8, [ip, #4]
 800864a:	9b01      	ldr	r3, [sp, #4]
 800864c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008650:	3204      	adds	r2, #4
 8008652:	f1ba 0f00 	cmp.w	sl, #0
 8008656:	d020      	beq.n	800869a <__multiply+0x11c>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	4689      	mov	r9, r1
 800865c:	46a8      	mov	r8, r5
 800865e:	f04f 0b00 	mov.w	fp, #0
 8008662:	f8b9 c000 	ldrh.w	ip, [r9]
 8008666:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800866a:	fb0a 440c 	mla	r4, sl, ip, r4
 800866e:	445c      	add	r4, fp
 8008670:	46c4      	mov	ip, r8
 8008672:	b29b      	uxth	r3, r3
 8008674:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008678:	f84c 3b04 	str.w	r3, [ip], #4
 800867c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008680:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008684:	0c1b      	lsrs	r3, r3, #16
 8008686:	fb0a b303 	mla	r3, sl, r3, fp
 800868a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800868e:	454f      	cmp	r7, r9
 8008690:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008694:	d805      	bhi.n	80086a2 <__multiply+0x124>
 8008696:	f8c8 3004 	str.w	r3, [r8, #4]
 800869a:	3504      	adds	r5, #4
 800869c:	e79b      	b.n	80085d6 <__multiply+0x58>
 800869e:	46d4      	mov	ip, sl
 80086a0:	e7b3      	b.n	800860a <__multiply+0x8c>
 80086a2:	46e0      	mov	r8, ip
 80086a4:	e7dd      	b.n	8008662 <__multiply+0xe4>
 80086a6:	3e01      	subs	r6, #1
 80086a8:	e799      	b.n	80085de <__multiply+0x60>
	...

080086ac <__pow5mult>:
 80086ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b0:	4615      	mov	r5, r2
 80086b2:	f012 0203 	ands.w	r2, r2, #3
 80086b6:	4606      	mov	r6, r0
 80086b8:	460f      	mov	r7, r1
 80086ba:	d007      	beq.n	80086cc <__pow5mult+0x20>
 80086bc:	3a01      	subs	r2, #1
 80086be:	4c21      	ldr	r4, [pc, #132]	; (8008744 <__pow5mult+0x98>)
 80086c0:	2300      	movs	r3, #0
 80086c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086c6:	f7ff fec8 	bl	800845a <__multadd>
 80086ca:	4607      	mov	r7, r0
 80086cc:	10ad      	asrs	r5, r5, #2
 80086ce:	d035      	beq.n	800873c <__pow5mult+0x90>
 80086d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086d2:	b93c      	cbnz	r4, 80086e4 <__pow5mult+0x38>
 80086d4:	2010      	movs	r0, #16
 80086d6:	f7ff fe6d 	bl	80083b4 <malloc>
 80086da:	6270      	str	r0, [r6, #36]	; 0x24
 80086dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086e0:	6004      	str	r4, [r0, #0]
 80086e2:	60c4      	str	r4, [r0, #12]
 80086e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086ec:	b94c      	cbnz	r4, 8008702 <__pow5mult+0x56>
 80086ee:	f240 2171 	movw	r1, #625	; 0x271
 80086f2:	4630      	mov	r0, r6
 80086f4:	f7ff ff3a 	bl	800856c <__i2b>
 80086f8:	2300      	movs	r3, #0
 80086fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80086fe:	4604      	mov	r4, r0
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	f04f 0800 	mov.w	r8, #0
 8008706:	07eb      	lsls	r3, r5, #31
 8008708:	d50a      	bpl.n	8008720 <__pow5mult+0x74>
 800870a:	4639      	mov	r1, r7
 800870c:	4622      	mov	r2, r4
 800870e:	4630      	mov	r0, r6
 8008710:	f7ff ff35 	bl	800857e <__multiply>
 8008714:	4639      	mov	r1, r7
 8008716:	4681      	mov	r9, r0
 8008718:	4630      	mov	r0, r6
 800871a:	f7ff fe87 	bl	800842c <_Bfree>
 800871e:	464f      	mov	r7, r9
 8008720:	106d      	asrs	r5, r5, #1
 8008722:	d00b      	beq.n	800873c <__pow5mult+0x90>
 8008724:	6820      	ldr	r0, [r4, #0]
 8008726:	b938      	cbnz	r0, 8008738 <__pow5mult+0x8c>
 8008728:	4622      	mov	r2, r4
 800872a:	4621      	mov	r1, r4
 800872c:	4630      	mov	r0, r6
 800872e:	f7ff ff26 	bl	800857e <__multiply>
 8008732:	6020      	str	r0, [r4, #0]
 8008734:	f8c0 8000 	str.w	r8, [r0]
 8008738:	4604      	mov	r4, r0
 800873a:	e7e4      	b.n	8008706 <__pow5mult+0x5a>
 800873c:	4638      	mov	r0, r7
 800873e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008742:	bf00      	nop
 8008744:	08008c20 	.word	0x08008c20

08008748 <__lshift>:
 8008748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800874c:	460c      	mov	r4, r1
 800874e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	6849      	ldr	r1, [r1, #4]
 8008756:	eb0a 0903 	add.w	r9, sl, r3
 800875a:	68a3      	ldr	r3, [r4, #8]
 800875c:	4607      	mov	r7, r0
 800875e:	4616      	mov	r6, r2
 8008760:	f109 0501 	add.w	r5, r9, #1
 8008764:	42ab      	cmp	r3, r5
 8008766:	db32      	blt.n	80087ce <__lshift+0x86>
 8008768:	4638      	mov	r0, r7
 800876a:	f7ff fe2b 	bl	80083c4 <_Balloc>
 800876e:	2300      	movs	r3, #0
 8008770:	4680      	mov	r8, r0
 8008772:	f100 0114 	add.w	r1, r0, #20
 8008776:	461a      	mov	r2, r3
 8008778:	4553      	cmp	r3, sl
 800877a:	db2b      	blt.n	80087d4 <__lshift+0x8c>
 800877c:	6920      	ldr	r0, [r4, #16]
 800877e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008782:	f104 0314 	add.w	r3, r4, #20
 8008786:	f016 021f 	ands.w	r2, r6, #31
 800878a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800878e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008792:	d025      	beq.n	80087e0 <__lshift+0x98>
 8008794:	f1c2 0e20 	rsb	lr, r2, #32
 8008798:	2000      	movs	r0, #0
 800879a:	681e      	ldr	r6, [r3, #0]
 800879c:	468a      	mov	sl, r1
 800879e:	4096      	lsls	r6, r2
 80087a0:	4330      	orrs	r0, r6
 80087a2:	f84a 0b04 	str.w	r0, [sl], #4
 80087a6:	f853 0b04 	ldr.w	r0, [r3], #4
 80087aa:	459c      	cmp	ip, r3
 80087ac:	fa20 f00e 	lsr.w	r0, r0, lr
 80087b0:	d814      	bhi.n	80087dc <__lshift+0x94>
 80087b2:	6048      	str	r0, [r1, #4]
 80087b4:	b108      	cbz	r0, 80087ba <__lshift+0x72>
 80087b6:	f109 0502 	add.w	r5, r9, #2
 80087ba:	3d01      	subs	r5, #1
 80087bc:	4638      	mov	r0, r7
 80087be:	f8c8 5010 	str.w	r5, [r8, #16]
 80087c2:	4621      	mov	r1, r4
 80087c4:	f7ff fe32 	bl	800842c <_Bfree>
 80087c8:	4640      	mov	r0, r8
 80087ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ce:	3101      	adds	r1, #1
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	e7c7      	b.n	8008764 <__lshift+0x1c>
 80087d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80087d8:	3301      	adds	r3, #1
 80087da:	e7cd      	b.n	8008778 <__lshift+0x30>
 80087dc:	4651      	mov	r1, sl
 80087de:	e7dc      	b.n	800879a <__lshift+0x52>
 80087e0:	3904      	subs	r1, #4
 80087e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80087ea:	459c      	cmp	ip, r3
 80087ec:	d8f9      	bhi.n	80087e2 <__lshift+0x9a>
 80087ee:	e7e4      	b.n	80087ba <__lshift+0x72>

080087f0 <__mcmp>:
 80087f0:	6903      	ldr	r3, [r0, #16]
 80087f2:	690a      	ldr	r2, [r1, #16]
 80087f4:	1a9b      	subs	r3, r3, r2
 80087f6:	b530      	push	{r4, r5, lr}
 80087f8:	d10c      	bne.n	8008814 <__mcmp+0x24>
 80087fa:	0092      	lsls	r2, r2, #2
 80087fc:	3014      	adds	r0, #20
 80087fe:	3114      	adds	r1, #20
 8008800:	1884      	adds	r4, r0, r2
 8008802:	4411      	add	r1, r2
 8008804:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008808:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800880c:	4295      	cmp	r5, r2
 800880e:	d003      	beq.n	8008818 <__mcmp+0x28>
 8008810:	d305      	bcc.n	800881e <__mcmp+0x2e>
 8008812:	2301      	movs	r3, #1
 8008814:	4618      	mov	r0, r3
 8008816:	bd30      	pop	{r4, r5, pc}
 8008818:	42a0      	cmp	r0, r4
 800881a:	d3f3      	bcc.n	8008804 <__mcmp+0x14>
 800881c:	e7fa      	b.n	8008814 <__mcmp+0x24>
 800881e:	f04f 33ff 	mov.w	r3, #4294967295
 8008822:	e7f7      	b.n	8008814 <__mcmp+0x24>

08008824 <__mdiff>:
 8008824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008828:	460d      	mov	r5, r1
 800882a:	4607      	mov	r7, r0
 800882c:	4611      	mov	r1, r2
 800882e:	4628      	mov	r0, r5
 8008830:	4614      	mov	r4, r2
 8008832:	f7ff ffdd 	bl	80087f0 <__mcmp>
 8008836:	1e06      	subs	r6, r0, #0
 8008838:	d108      	bne.n	800884c <__mdiff+0x28>
 800883a:	4631      	mov	r1, r6
 800883c:	4638      	mov	r0, r7
 800883e:	f7ff fdc1 	bl	80083c4 <_Balloc>
 8008842:	2301      	movs	r3, #1
 8008844:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884c:	bfa4      	itt	ge
 800884e:	4623      	movge	r3, r4
 8008850:	462c      	movge	r4, r5
 8008852:	4638      	mov	r0, r7
 8008854:	6861      	ldr	r1, [r4, #4]
 8008856:	bfa6      	itte	ge
 8008858:	461d      	movge	r5, r3
 800885a:	2600      	movge	r6, #0
 800885c:	2601      	movlt	r6, #1
 800885e:	f7ff fdb1 	bl	80083c4 <_Balloc>
 8008862:	692b      	ldr	r3, [r5, #16]
 8008864:	60c6      	str	r6, [r0, #12]
 8008866:	6926      	ldr	r6, [r4, #16]
 8008868:	f105 0914 	add.w	r9, r5, #20
 800886c:	f104 0214 	add.w	r2, r4, #20
 8008870:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008874:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008878:	f100 0514 	add.w	r5, r0, #20
 800887c:	f04f 0e00 	mov.w	lr, #0
 8008880:	f852 ab04 	ldr.w	sl, [r2], #4
 8008884:	f859 4b04 	ldr.w	r4, [r9], #4
 8008888:	fa1e f18a 	uxtah	r1, lr, sl
 800888c:	b2a3      	uxth	r3, r4
 800888e:	1ac9      	subs	r1, r1, r3
 8008890:	0c23      	lsrs	r3, r4, #16
 8008892:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008896:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800889a:	b289      	uxth	r1, r1
 800889c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80088a0:	45c8      	cmp	r8, r9
 80088a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80088a6:	4694      	mov	ip, r2
 80088a8:	f845 3b04 	str.w	r3, [r5], #4
 80088ac:	d8e8      	bhi.n	8008880 <__mdiff+0x5c>
 80088ae:	45bc      	cmp	ip, r7
 80088b0:	d304      	bcc.n	80088bc <__mdiff+0x98>
 80088b2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80088b6:	b183      	cbz	r3, 80088da <__mdiff+0xb6>
 80088b8:	6106      	str	r6, [r0, #16]
 80088ba:	e7c5      	b.n	8008848 <__mdiff+0x24>
 80088bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80088c0:	fa1e f381 	uxtah	r3, lr, r1
 80088c4:	141a      	asrs	r2, r3, #16
 80088c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088d0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80088d4:	f845 3b04 	str.w	r3, [r5], #4
 80088d8:	e7e9      	b.n	80088ae <__mdiff+0x8a>
 80088da:	3e01      	subs	r6, #1
 80088dc:	e7e9      	b.n	80088b2 <__mdiff+0x8e>

080088de <__d2b>:
 80088de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088e2:	460e      	mov	r6, r1
 80088e4:	2101      	movs	r1, #1
 80088e6:	ec59 8b10 	vmov	r8, r9, d0
 80088ea:	4615      	mov	r5, r2
 80088ec:	f7ff fd6a 	bl	80083c4 <_Balloc>
 80088f0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80088f4:	4607      	mov	r7, r0
 80088f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088fa:	bb34      	cbnz	r4, 800894a <__d2b+0x6c>
 80088fc:	9301      	str	r3, [sp, #4]
 80088fe:	f1b8 0300 	subs.w	r3, r8, #0
 8008902:	d027      	beq.n	8008954 <__d2b+0x76>
 8008904:	a802      	add	r0, sp, #8
 8008906:	f840 3d08 	str.w	r3, [r0, #-8]!
 800890a:	f7ff fe00 	bl	800850e <__lo0bits>
 800890e:	9900      	ldr	r1, [sp, #0]
 8008910:	b1f0      	cbz	r0, 8008950 <__d2b+0x72>
 8008912:	9a01      	ldr	r2, [sp, #4]
 8008914:	f1c0 0320 	rsb	r3, r0, #32
 8008918:	fa02 f303 	lsl.w	r3, r2, r3
 800891c:	430b      	orrs	r3, r1
 800891e:	40c2      	lsrs	r2, r0
 8008920:	617b      	str	r3, [r7, #20]
 8008922:	9201      	str	r2, [sp, #4]
 8008924:	9b01      	ldr	r3, [sp, #4]
 8008926:	61bb      	str	r3, [r7, #24]
 8008928:	2b00      	cmp	r3, #0
 800892a:	bf14      	ite	ne
 800892c:	2102      	movne	r1, #2
 800892e:	2101      	moveq	r1, #1
 8008930:	6139      	str	r1, [r7, #16]
 8008932:	b1c4      	cbz	r4, 8008966 <__d2b+0x88>
 8008934:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008938:	4404      	add	r4, r0
 800893a:	6034      	str	r4, [r6, #0]
 800893c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008940:	6028      	str	r0, [r5, #0]
 8008942:	4638      	mov	r0, r7
 8008944:	b003      	add	sp, #12
 8008946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800894a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800894e:	e7d5      	b.n	80088fc <__d2b+0x1e>
 8008950:	6179      	str	r1, [r7, #20]
 8008952:	e7e7      	b.n	8008924 <__d2b+0x46>
 8008954:	a801      	add	r0, sp, #4
 8008956:	f7ff fdda 	bl	800850e <__lo0bits>
 800895a:	9b01      	ldr	r3, [sp, #4]
 800895c:	617b      	str	r3, [r7, #20]
 800895e:	2101      	movs	r1, #1
 8008960:	6139      	str	r1, [r7, #16]
 8008962:	3020      	adds	r0, #32
 8008964:	e7e5      	b.n	8008932 <__d2b+0x54>
 8008966:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800896a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800896e:	6030      	str	r0, [r6, #0]
 8008970:	6918      	ldr	r0, [r3, #16]
 8008972:	f7ff fdad 	bl	80084d0 <__hi0bits>
 8008976:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800897a:	e7e1      	b.n	8008940 <__d2b+0x62>

0800897c <_calloc_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	fb02 f401 	mul.w	r4, r2, r1
 8008982:	4621      	mov	r1, r4
 8008984:	f000 f808 	bl	8008998 <_malloc_r>
 8008988:	4605      	mov	r5, r0
 800898a:	b118      	cbz	r0, 8008994 <_calloc_r+0x18>
 800898c:	4622      	mov	r2, r4
 800898e:	2100      	movs	r1, #0
 8008990:	f7fe fb57 	bl	8007042 <memset>
 8008994:	4628      	mov	r0, r5
 8008996:	bd38      	pop	{r3, r4, r5, pc}

08008998 <_malloc_r>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	1ccd      	adds	r5, r1, #3
 800899c:	f025 0503 	bic.w	r5, r5, #3
 80089a0:	3508      	adds	r5, #8
 80089a2:	2d0c      	cmp	r5, #12
 80089a4:	bf38      	it	cc
 80089a6:	250c      	movcc	r5, #12
 80089a8:	2d00      	cmp	r5, #0
 80089aa:	4606      	mov	r6, r0
 80089ac:	db01      	blt.n	80089b2 <_malloc_r+0x1a>
 80089ae:	42a9      	cmp	r1, r5
 80089b0:	d903      	bls.n	80089ba <_malloc_r+0x22>
 80089b2:	230c      	movs	r3, #12
 80089b4:	6033      	str	r3, [r6, #0]
 80089b6:	2000      	movs	r0, #0
 80089b8:	bd70      	pop	{r4, r5, r6, pc}
 80089ba:	f000 f869 	bl	8008a90 <__malloc_lock>
 80089be:	4a21      	ldr	r2, [pc, #132]	; (8008a44 <_malloc_r+0xac>)
 80089c0:	6814      	ldr	r4, [r2, #0]
 80089c2:	4621      	mov	r1, r4
 80089c4:	b991      	cbnz	r1, 80089ec <_malloc_r+0x54>
 80089c6:	4c20      	ldr	r4, [pc, #128]	; (8008a48 <_malloc_r+0xb0>)
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	b91b      	cbnz	r3, 80089d4 <_malloc_r+0x3c>
 80089cc:	4630      	mov	r0, r6
 80089ce:	f000 f83d 	bl	8008a4c <_sbrk_r>
 80089d2:	6020      	str	r0, [r4, #0]
 80089d4:	4629      	mov	r1, r5
 80089d6:	4630      	mov	r0, r6
 80089d8:	f000 f838 	bl	8008a4c <_sbrk_r>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d124      	bne.n	8008a2a <_malloc_r+0x92>
 80089e0:	230c      	movs	r3, #12
 80089e2:	6033      	str	r3, [r6, #0]
 80089e4:	4630      	mov	r0, r6
 80089e6:	f000 f854 	bl	8008a92 <__malloc_unlock>
 80089ea:	e7e4      	b.n	80089b6 <_malloc_r+0x1e>
 80089ec:	680b      	ldr	r3, [r1, #0]
 80089ee:	1b5b      	subs	r3, r3, r5
 80089f0:	d418      	bmi.n	8008a24 <_malloc_r+0x8c>
 80089f2:	2b0b      	cmp	r3, #11
 80089f4:	d90f      	bls.n	8008a16 <_malloc_r+0x7e>
 80089f6:	600b      	str	r3, [r1, #0]
 80089f8:	50cd      	str	r5, [r1, r3]
 80089fa:	18cc      	adds	r4, r1, r3
 80089fc:	4630      	mov	r0, r6
 80089fe:	f000 f848 	bl	8008a92 <__malloc_unlock>
 8008a02:	f104 000b 	add.w	r0, r4, #11
 8008a06:	1d23      	adds	r3, r4, #4
 8008a08:	f020 0007 	bic.w	r0, r0, #7
 8008a0c:	1ac3      	subs	r3, r0, r3
 8008a0e:	d0d3      	beq.n	80089b8 <_malloc_r+0x20>
 8008a10:	425a      	negs	r2, r3
 8008a12:	50e2      	str	r2, [r4, r3]
 8008a14:	e7d0      	b.n	80089b8 <_malloc_r+0x20>
 8008a16:	428c      	cmp	r4, r1
 8008a18:	684b      	ldr	r3, [r1, #4]
 8008a1a:	bf16      	itet	ne
 8008a1c:	6063      	strne	r3, [r4, #4]
 8008a1e:	6013      	streq	r3, [r2, #0]
 8008a20:	460c      	movne	r4, r1
 8008a22:	e7eb      	b.n	80089fc <_malloc_r+0x64>
 8008a24:	460c      	mov	r4, r1
 8008a26:	6849      	ldr	r1, [r1, #4]
 8008a28:	e7cc      	b.n	80089c4 <_malloc_r+0x2c>
 8008a2a:	1cc4      	adds	r4, r0, #3
 8008a2c:	f024 0403 	bic.w	r4, r4, #3
 8008a30:	42a0      	cmp	r0, r4
 8008a32:	d005      	beq.n	8008a40 <_malloc_r+0xa8>
 8008a34:	1a21      	subs	r1, r4, r0
 8008a36:	4630      	mov	r0, r6
 8008a38:	f000 f808 	bl	8008a4c <_sbrk_r>
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d0cf      	beq.n	80089e0 <_malloc_r+0x48>
 8008a40:	6025      	str	r5, [r4, #0]
 8008a42:	e7db      	b.n	80089fc <_malloc_r+0x64>
 8008a44:	20000200 	.word	0x20000200
 8008a48:	20000204 	.word	0x20000204

08008a4c <_sbrk_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4c06      	ldr	r4, [pc, #24]	; (8008a68 <_sbrk_r+0x1c>)
 8008a50:	2300      	movs	r3, #0
 8008a52:	4605      	mov	r5, r0
 8008a54:	4608      	mov	r0, r1
 8008a56:	6023      	str	r3, [r4, #0]
 8008a58:	f7fa fd04 	bl	8003464 <_sbrk>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_sbrk_r+0x1a>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_sbrk_r+0x1a>
 8008a64:	602b      	str	r3, [r5, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	200007d0 	.word	0x200007d0

08008a6c <__ascii_mbtowc>:
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	b901      	cbnz	r1, 8008a72 <__ascii_mbtowc+0x6>
 8008a70:	a901      	add	r1, sp, #4
 8008a72:	b142      	cbz	r2, 8008a86 <__ascii_mbtowc+0x1a>
 8008a74:	b14b      	cbz	r3, 8008a8a <__ascii_mbtowc+0x1e>
 8008a76:	7813      	ldrb	r3, [r2, #0]
 8008a78:	600b      	str	r3, [r1, #0]
 8008a7a:	7812      	ldrb	r2, [r2, #0]
 8008a7c:	1c10      	adds	r0, r2, #0
 8008a7e:	bf18      	it	ne
 8008a80:	2001      	movne	r0, #1
 8008a82:	b002      	add	sp, #8
 8008a84:	4770      	bx	lr
 8008a86:	4610      	mov	r0, r2
 8008a88:	e7fb      	b.n	8008a82 <__ascii_mbtowc+0x16>
 8008a8a:	f06f 0001 	mvn.w	r0, #1
 8008a8e:	e7f8      	b.n	8008a82 <__ascii_mbtowc+0x16>

08008a90 <__malloc_lock>:
 8008a90:	4770      	bx	lr

08008a92 <__malloc_unlock>:
 8008a92:	4770      	bx	lr

08008a94 <__ascii_wctomb>:
 8008a94:	b149      	cbz	r1, 8008aaa <__ascii_wctomb+0x16>
 8008a96:	2aff      	cmp	r2, #255	; 0xff
 8008a98:	bf85      	ittet	hi
 8008a9a:	238a      	movhi	r3, #138	; 0x8a
 8008a9c:	6003      	strhi	r3, [r0, #0]
 8008a9e:	700a      	strbls	r2, [r1, #0]
 8008aa0:	f04f 30ff 	movhi.w	r0, #4294967295
 8008aa4:	bf98      	it	ls
 8008aa6:	2001      	movls	r0, #1
 8008aa8:	4770      	bx	lr
 8008aaa:	4608      	mov	r0, r1
 8008aac:	4770      	bx	lr
	...

08008ab0 <_init>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	bf00      	nop
 8008ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab6:	bc08      	pop	{r3}
 8008ab8:	469e      	mov	lr, r3
 8008aba:	4770      	bx	lr

08008abc <_fini>:
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abe:	bf00      	nop
 8008ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac2:	bc08      	pop	{r3}
 8008ac4:	469e      	mov	lr, r3
 8008ac6:	4770      	bx	lr
